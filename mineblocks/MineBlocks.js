/*
 howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com  Spatial Plugin  @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
 // The following changes have been made to this script, removed all tracking of any kind
 var $jscomp = $jscomp || {};
 $jscomp.scope = {};
 $jscomp.arrayIteratorImpl = function (ha) {
   var u = 0;
   return function () {
     return u < ha.length ? { done: !1, value: ha[u++] } : { done: !0 };
   };
 };
 $jscomp.arrayIterator = function (ha) {
   return { next: $jscomp.arrayIteratorImpl(ha) };
 };
 $jscomp.ASSUME_ES5 = !1;
 $jscomp.ASSUME_NO_NATIVE_MAP = !1;
 $jscomp.ASSUME_NO_NATIVE_SET = !1;
 $jscomp.SIMPLE_FROUND_POLYFILL = !1;
 $jscomp.defineProperty =
   $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties
     ? Object.defineProperty
     : function (ha, u, L) {
         ha != Array.prototype && ha != Object.prototype && (ha[u] = L.value);
       };
 $jscomp.getGlobal = function (ha) {
   ha = ["object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global, ha];
   for (var u = 0; u < ha.length; ++u) {
     var L = ha[u];
     if (L && L.Math == Math) return L;
   }
   throw Error("Cannot find global object");
 };
 $jscomp.global = $jscomp.getGlobal(this);
 $jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
 $jscomp.initSymbol = function () {
   $jscomp.initSymbol = function () {};
   $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
 };
 $jscomp.SymbolClass = function (ha, u) {
   this.$jscomp$symbol$id_ = ha;
   $jscomp.defineProperty(this, "description", { configurable: !0, writable: !0, value: u });
 };
 $jscomp.SymbolClass.prototype.toString = function () {
   return this.$jscomp$symbol$id_;
 };
 $jscomp.Symbol = (function () {
   function ha(L) {
     if (this instanceof ha) throw new TypeError("Symbol is not a constructor");
     return new $jscomp.SymbolClass($jscomp.SYMBOL_PREFIX + (L || "") + "_" + u++, L);
   }
   var u = 0;
   return ha;
 })();
 $jscomp.initSymbolIterator = function () {
   $jscomp.initSymbol();
   var ha = $jscomp.global.Symbol.iterator;
   ha || (ha = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("Symbol.iterator"));
   "function" != typeof Array.prototype[ha] &&
     $jscomp.defineProperty(Array.prototype, ha, {
       configurable: !0,
       writable: !0,
       value: function () {
         return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
       },
     });
   $jscomp.initSymbolIterator = function () {};
 };
 $jscomp.initSymbolAsyncIterator = function () {
   $jscomp.initSymbol();
   var ha = $jscomp.global.Symbol.asyncIterator;
   ha || (ha = $jscomp.global.Symbol.asyncIterator = $jscomp.global.Symbol("Symbol.asyncIterator"));
   $jscomp.initSymbolAsyncIterator = function () {};
 };
 $jscomp.iteratorPrototype = function (ha) {
   $jscomp.initSymbolIterator();
   ha = { next: ha };
   ha[$jscomp.global.Symbol.iterator] = function () {
     return this;
   };
   return ha;
 };
 $jscomp.iteratorFromArray = function (ha, u) {
   $jscomp.initSymbolIterator();
   ha instanceof String && (ha += "");
   var L = 0,
     N = {
       next: function () {
         if (L < ha.length) {
           var aa = L++;
           return { value: u(aa, ha[aa]), done: !1 };
         }
         N.next = function () {
           return { done: !0, value: void 0 };
         };
         return N.next();
       },
     };
   N[Symbol.iterator] = function () {
     return N;
   };
   return N;
 };
 $jscomp.polyfill = function (ha, u, L, N) {
   if (u) {
     L = $jscomp.global;
     ha = ha.split(".");
     for (N = 0; N < ha.length - 1; N++) {
       var aa = ha[N];
       aa in L || (L[aa] = {});
       L = L[aa];
     }
     ha = ha[ha.length - 1];
     N = L[ha];
     u = u(N);
     u != N && null != u && $jscomp.defineProperty(L, ha, { configurable: !0, writable: !0, value: u });
   }
 };
 $jscomp.polyfill(
   "Array.prototype.keys",
   function (ha) {
     return ha
       ? ha
       : function () {
           return $jscomp.iteratorFromArray(this, function (u) {
             return u;
           });
         };
   },
   "es6",
   "es3"
 );
 $jscomp.polyfill(
   "Array.prototype.values",
   function (ha) {
     return ha
       ? ha
       : function () {
           return $jscomp.iteratorFromArray(this, function (u, L) {
             return L;
           });
         };
   },
   "es8",
   "es3"
 );
 $jscomp.polyfill(
   "String.fromCodePoint",
   function (ha) {
     return ha
       ? ha
       : function (u) {
           for (var L = "", N = 0; N < arguments.length; N++) {
             var aa = Number(arguments[N]);
             if (0 > aa || 1114111 < aa || aa !== Math.floor(aa)) throw new RangeError("invalid_code_point " + aa);
             65535 >= aa ? (L += String.fromCharCode(aa)) : ((aa -= 65536), (L += String.fromCharCode(((aa >>> 10) & 1023) | 55296)), (L += String.fromCharCode((aa & 1023) | 56320)));
           }
           return L;
         };
   },
   "es6",
   "es3"
 );
 $jscomp.polyfill(
   "Number.MAX_SAFE_INTEGER",
   function () {
     return 9007199254740991;
   },
   "es6",
   "es3"
 );
 $jscomp.checkStringArgs = function (ha, u, L) {
   if (null == ha) throw new TypeError("The 'this' value for String.prototype." + L + " must not be null or undefined");
   if (u instanceof RegExp) throw new TypeError("First argument to String.prototype." + L + " must not be a regular expression");
   return ha + "";
 };
 $jscomp.polyfill(
   "String.prototype.startsWith",
   function (ha) {
     return ha
       ? ha
       : function (u, L) {
           var N = $jscomp.checkStringArgs(this, u, "startsWith");
           u += "";
           var aa = N.length,
             Y = u.length;
           L = Math.max(0, Math.min(L | 0, N.length));
           for (var v = 0; v < Y && L < aa; ) if (N[L++] != u[v++]) return !1;
           return v >= Y;
         };
   },
   "es6",
   "es3"
 );
 $jscomp.polyfill(
   "String.prototype.endsWith",
   function (ha) {
     return ha
       ? ha
       : function (u, L) {
           var N = $jscomp.checkStringArgs(this, u, "endsWith");
           u += "";
           void 0 === L && (L = N.length);
           L = Math.max(0, Math.min(L | 0, N.length));
           for (var aa = u.length; 0 < aa && 0 < L; ) if (N[--L] != u[--aa]) return !1;
           return 0 >= aa;
         };
   },
   "es6",
   "es3"
 );
 (function (ha, u) {
   ha.lime = ha.lime || {};
   ha.lime.$scripts = ha.lime.$scripts || {};
   ha.lime.$scripts["Mine Blocks"] = function (u, N) {
     (function (u, L) {
       function v(b, a) {
         b = Object.create(b);
         for (var c in a) b[c] = a[c];
         a.toString !== Object.prototype.toString && (b.toString = a.toString);
         return b;
       }
       function aa(b) {
         return b instanceof Array ? new sd(b) : b.iterator();
       }
       function B(b, a) {
         if (null == a) return null;
         null == a.__id__ && (a.__id__ = L.$haxeUID++);
         var c;
         null == b.hx__closures__ ? (b.hx__closures__ = {}) : (c = b.hx__closures__[a.__id__]);
         null == c && ((c = a.bind(b)), (b.hx__closures__[a.__id__] = c));
         return c;
       }
       u.zanzlanz = u.zanzlanz || {};
       u.lime = u.lime || {};
       var r = {},
         n = function () {
           return H.__string_rec(this, "");
         },
         D = D || {},
         ia,
         Oa = function () {};
       r["lime.app.IModule"] = Oa;
       Oa.__name__ = "lime.app.IModule";
       Oa.__isInterface__ = !0;
       var Ea = function () {
         this.onExit = new cd();
       };
       r["lime.app.Module"] = Ea;
       Ea.__name__ = "lime.app.Module";
       Ea.__interfaces__ = [Oa];
       Ea.prototype = { __class__: Ea };
       var Da = function (b) {
         this.gameDeviceCache = new Ma();
         this.parent = b;
         this.nextUpdate = this.lastUpdate = this.currentUpdate = 0;
         this.framePeriod = -1;
         td.init();
         this.accelerometer = Kc.registerSensor($h.ACCELEROMETER, 0);
       };
       r["lime._internal.backend.html5.HTML5Application"] = Da;
       Da.__name__ = "lime._internal.backend.html5.HTML5Application";
       Da.prototype = {
         convertKeyCode: function (b) {
           if (65 <= b && 90 >= b) return b + 32;
           switch (b) {
             case 12:
               return 1073741980;
             case 16:
               return 1073742049;
             case 17:
               return 1073742048;
             case 18:
               return 1073742050;
             case 19:
               return 1073741896;
             case 20:
               return 1073741881;
             case 33:
               return 1073741899;
             case 34:
               return 1073741902;
             case 35:
               return 1073741901;
             case 36:
               return 1073741898;
             case 37:
               return 1073741904;
             case 38:
               return 1073741906;
             case 39:
               return 1073741903;
             case 40:
               return 1073741905;
             case 41:
               return 1073741943;
             case 43:
               return 1073741940;
             case 44:
               return 1073741894;
             case 45:
               return 1073741897;
             case 46:
               return 127;
             case 91:
               return 1073742051;
             case 92:
               return 1073742055;
             case 93:
               return 1073742055;
             case 95:
               return 1073742106;
             case 96:
               return 1073741922;
             case 97:
               return 1073741913;
             case 98:
               return 1073741914;
             case 99:
               return 1073741915;
             case 100:
               return 1073741916;
             case 101:
               return 1073741917;
             case 102:
               return 1073741918;
             case 103:
               return 1073741919;
             case 104:
               return 1073741920;
             case 105:
               return 1073741921;
             case 106:
               return 1073741909;
             case 107:
               return 1073741911;
             case 108:
               return 1073741923;
             case 109:
               return 1073741910;
             case 110:
               return 1073741923;
             case 111:
               return 1073741908;
             case 112:
               return 1073741882;
             case 113:
               return 1073741883;
             case 114:
               return 1073741884;
             case 115:
               return 1073741885;
             case 116:
               return 1073741886;
             case 117:
               return 1073741887;
             case 118:
               return 1073741888;
             case 119:
               return 1073741889;
             case 120:
               return 1073741890;
             case 121:
               return 1073741891;
             case 122:
               return 1073741892;
             case 123:
               return 1073741893;
             case 124:
               return 1073741928;
             case 125:
               return 1073741929;
             case 126:
               return 1073741930;
             case 127:
               return 1073741931;
             case 128:
               return 1073741932;
             case 129:
               return 1073741933;
             case 130:
               return 1073741934;
             case 131:
               return 1073741935;
             case 132:
               return 1073741936;
             case 133:
               return 1073741937;
             case 134:
               return 1073741938;
             case 135:
               return 1073741939;
             case 144:
               return 1073741907;
             case 145:
               return 1073741895;
             case 160:
               return 94;
             case 161:
               return 33;
             case 163:
               return 35;
             case 164:
               return 36;
             case 166:
               return 1073742094;
             case 167:
               return 1073742095;
             case 168:
               return 1073742097;
             case 169:
               return 41;
             case 170:
               return 42;
             case 171:
               return 96;
             case 172:
               return 1073741898;
             case 173:
               return 45;
             case 174:
               return 1073741953;
             case 175:
               return 1073741952;
             case 176:
               return 1073742082;
             case 177:
               return 1073742083;
             case 178:
               return 1073742084;
             case 179:
               return 1073742085;
             case 180:
               return 1073742089;
             case 181:
               return 1073742086;
             case 182:
               return 1073741953;
             case 183:
               return 1073741952;
             case 186:
               return 59;
             case 187:
               return 61;
             case 188:
               return 44;
             case 189:
               return 45;
             case 190:
               return 46;
             case 191:
               return 47;
             case 192:
               return 96;
             case 193:
               return 63;
             case 194:
               return 1073741923;
             case 219:
               return 91;
             case 220:
               return 92;
             case 221:
               return 93;
             case 222:
               return 39;
             case 223:
               return 96;
             case 224:
               return 1073742051;
             case 226:
               return 92;
           }
           return b;
         },
         exec: function () {
           window.addEventListener("keydown", B(this, this.handleKeyEvent), !1);
           window.addEventListener("keyup", B(this, this.handleKeyEvent), !1);
           window.addEventListener("focus", B(this, this.handleWindowEvent), !1);
           window.addEventListener("blur", B(this, this.handleWindowEvent), !1);
           window.addEventListener("resize", B(this, this.handleWindowEvent), !1);
           window.addEventListener("beforeunload", B(this, this.handleWindowEvent), !1);
           window.addEventListener("devicemotion", B(this, this.handleSensorEvent), !1);
           CanvasRenderingContext2D.prototype.isPointInStroke ||
             (CanvasRenderingContext2D.prototype.isPointInStroke = function (a, b, c) {
               return !1;
             });
           CanvasRenderingContext2D.prototype.isPointInPath ||
             (CanvasRenderingContext2D.prototype.isPointInPath = function (a, b, c) {
               return !1;
             });
           0 == "performance" in window && (window.performance = {});
           if (0 == "now" in window.performance) {
             var b = Date.now();
             performance.timing && performance.timing.navigationStart && (b = performance.timing.navigationStart);
             window.performance.now = function () {
               return Date.now() - b;
             };
           }
           for (var a = 0, c = ["ms", "moz", "webkit", "o"], d = 0; d < c.length && !window.requestAnimationFrame; ++d)
             (window.requestAnimationFrame = window[c[d] + "RequestAnimationFrame"]), (window.cancelAnimationFrame = window[c[d] + "CancelAnimationFrame"] || window[c[d] + "CancelRequestAnimationFrame"]);
           window.requestAnimationFrame ||
             (window.requestAnimationFrame = function (b, c) {
               var d = new Date().getTime(),
                 f = Math.max(0, 16 - (d - a));
               c = window.setTimeout(function () {
                 b(d + f);
               }, f);
               a = d + f;
               return c;
             });
           window.cancelAnimationFrame ||
             (window.cancelAnimationFrame = function (a) {
               clearTimeout(a);
             });
           window.requestAnimFrame = window.requestAnimationFrame;
           this.lastUpdate = new Date().getTime();
           this.handleApplicationEvent();
           return 0;
         },
         exit: function () {},
         handleApplicationEvent: function (b) {
           b = 0;
           for (var a = this.parent.__windows; b < a.length; ) a[b++].__backend.updateSize();
           this.updateGameDevices();
           this.currentUpdate = new Date().getTime();
           if (this.currentUpdate >= this.nextUpdate) {
             this.deltaTime = this.currentUpdate - this.lastUpdate;
             b = 0;
             for (a = this.parent.__windows; b < a.length; ) {
               var c = a[b];
               ++b;
               this.parent.onUpdate.dispatch(this.deltaTime | 0);
               null != c.context && c.onRender.dispatch(c.context);
             }
             this.nextUpdate = 0 > this.framePeriod ? this.currentUpdate : this.currentUpdate - (this.currentUpdate % this.framePeriod) + this.framePeriod;
             this.lastUpdate = this.currentUpdate;
           }
           window.requestAnimationFrame(B(this, this.handleApplicationEvent));
         },
         handleKeyEvent: function (b) {
           if (null != this.parent.__window) {
             var a = this.convertKeyCode(null != b.keyCode ? b.keyCode : b.which),
               c = (b.shiftKey ? 3 : 0) | (b.ctrlKey ? 192 : 0) | (b.altKey ? 768 : 0) | (b.metaKey ? 3072 : 0);
             "keydown" == b.type
               ? (this.parent.__window.onKeyDown.dispatch(a, c), this.parent.__window.onKeyDown.canceled && b.cancelable && b.preventDefault())
               : (this.parent.__window.onKeyUp.dispatch(a, c), this.parent.__window.onKeyUp.canceled && b.cancelable && b.preventDefault());
           }
         },
         handleSensorEvent: function (b) {
           this.accelerometer.onUpdate.dispatch(b.accelerationIncludingGravity.x, b.accelerationIncludingGravity.y, b.accelerationIncludingGravity.z);
         },
         handleWindowEvent: function (b) {
           if (null != this.parent.__window)
             switch (b.type) {
               case "blur":
                 this.hidden || (this.parent.__window.onFocusOut.dispatch(), this.parent.__window.onDeactivate.dispatch(), (this.hidden = !0));
                 break;
               case "focus":
                 this.hidden && (this.parent.__window.onFocusIn.dispatch(), this.parent.__window.onActivate.dispatch(), (this.hidden = !1));
                 break;
               case "resize":
                 this.parent.__window.__backend.handleResizeEvent(b);
                 break;
               case "visibilitychange":
                 window.document.hidden
                   ? this.hidden || (this.parent.__window.onFocusOut.dispatch(), this.parent.__window.onDeactivate.dispatch(), (this.hidden = !0))
                   : this.hidden && (this.parent.__window.onFocusIn.dispatch(), this.parent.__window.onActivate.dispatch(), (this.hidden = !1));
             }
         },
         updateGameDevices: function () {
           var b = pb.__getDeviceData();
           if (null != b)
             for (var a, c, d, f, l = 0, e = b.length; l < e; ) {
               var C = l++;
               d = b[C];
               if (null != d) {
                 if (!this.gameDeviceCache.h.hasOwnProperty(C)) {
                   f = new gh();
                   f.id = C;
                   f.connected = d.connected;
                   a = 0;
                   for (c = d.buttons.length; a < c; ) f.buttons.push(d.buttons[a++].value);
                   a = 0;
                   for (c = d.axes.length; a < c; ) f.axes.push(d.axes[a++]);
                   "standard" == d.mapping && (f.isGamepad = !0);
                   this.gameDeviceCache.h[C] = f;
                   d.connected && (pb.__connect(C), f.isGamepad && wb.__connect(C));
                 }
                 f = this.gameDeviceCache.h[C];
                 c = pb.devices.h[C];
                 a = wb.devices.h[C];
                 if (d.connected) {
                   for (var g, h = 0, A = d.buttons.length; h < A; ) {
                     var m = h++;
                     g = d.buttons[m].value;
                     if (g != f.buttons[m]) {
                       if (6 == m) c.onAxisMove.dispatch(d.axes.length, g), null != a && a.onAxisMove.dispatch(4, g);
                       else if (7 == m) c.onAxisMove.dispatch(d.axes.length + 1, g), null != a && a.onAxisMove.dispatch(5, g);
                       else if ((0 < g ? c.onButtonDown.dispatch(m) : c.onButtonUp.dispatch(m), null != a)) {
                         switch (m) {
                           case 0:
                             C = 0;
                             break;
                           case 1:
                             C = 1;
                             break;
                           case 2:
                             C = 2;
                             break;
                           case 3:
                             C = 3;
                             break;
                           case 4:
                             C = 9;
                             break;
                           case 5:
                             C = 10;
                             break;
                           case 8:
                             C = 4;
                             break;
                           case 9:
                             C = 6;
                             break;
                           case 10:
                             C = 7;
                             break;
                           case 11:
                             C = 8;
                             break;
                           case 12:
                             C = 11;
                             break;
                           case 13:
                             C = 12;
                             break;
                           case 14:
                             C = 13;
                             break;
                           case 15:
                             C = 14;
                             break;
                           case 16:
                             C = 5;
                             break;
                           default:
                             continue;
                         }
                         0 < g ? a.onButtonDown.dispatch(C) : a.onButtonUp.dispatch(C);
                       }
                       f.buttons[m] = g;
                     }
                   }
                   C = 0;
                   for (g = d.axes.length; C < g; ) (h = C++), d.axes[h] != f.axes[h] && (c.onAxisMove.dispatch(h, d.axes[h]), null != a && a.onAxisMove.dispatch(h, d.axes[h]), (f.axes[h] = d.axes[h]));
                 } else f.connected && ((f.connected = !1), pb.__disconnect(C), wb.__disconnect(C));
               }
             }
         },
         __class__: Da,
       };
       var fa = function () {
         this.onCreateWindow = new hh();
         this.onUpdate = new cd();
         this.onExit = new cd();
         null == fa.current && (fa.current = this);
         this.meta = new e();
         this.modules = [];
         this.__windowByID = new Ma();
         this.__windows = [];
         this.__backend = new Da(this);
         this.__registerLimeModule(this);
         this.__preloader = new ih();
         this.__preloader.onProgress.add(B(this, this.onPreloadProgress));
         this.__preloader.onComplete.add(B(this, this.onPreloadComplete));
       };
       r["lime.app.Application"] = fa;
       fa.__name__ = "lime.app.Application";
       fa.__super__ = Ea;
       fa.prototype = v(Ea.prototype, {
         createWindow: function (b) {
           b = this.__createWindow(b);
           this.__addWindow(b);
           return b;
         },
         exec: function () {
           fa.current = this;
           return this.__backend.exec();
         },
         onGamepadAxisMove: function (b, a, c) {},
         onGamepadButtonDown: function (b, a) {},
         onGamepadButtonUp: function (b, a) {},
         onGamepadConnect: function (b) {},
         onGamepadDisconnect: function (b) {},
         onJoystickAxisMove: function (b, a, c) {},
         onJoystickButtonDown: function (b, a) {},
         onJoystickButtonUp: function (b, a) {},
         onJoystickConnect: function (b) {},
         onJoystickDisconnect: function (b) {},
         onJoystickHatMove: function (b, a, c) {},
         onJoystickTrackballMove: function (b, a, c, d) {},
         onKeyDown: function (b, a) {},
         onKeyUp: function (b, a) {},
         onModuleExit: function (b) {},
         onMouseDown: function (b, a, c) {},
         onMouseMove: function (b, a) {},
         onMouseMoveRelative: function (b, a) {},
         onMouseUp: function (b, a, c) {},
         onMouseWheel: function (b, a, c) {},
         onPreloadComplete: function () {},
         onPreloadProgress: function (b, a) {},
         onRenderContextLost: function () {},
         onRenderContextRestored: function (b) {},
         onTextEdit: function (b, a, c) {},
         onTextInput: function (b) {},
         onTouchCancel: function (b) {},
         onTouchEnd: function (b) {},
         onTouchMove: function (b) {},
         onTouchStart: function (b) {},
         onWindowActivate: function () {},
         onWindowClose: function () {},
         onWindowCreate: function () {},
         onWindowDeactivate: function () {},
         onWindowDropFile: function (b) {},
         onWindowEnter: function () {},
         onWindowExpose: function () {},
         onWindowFocusIn: function () {},
         onWindowFocusOut: function () {},
         onWindowFullscreen: function () {},
         onWindowLeave: function () {},
         onWindowMove: function (b, a) {},
         onWindowMinimize: function () {},
         onWindowResize: function (b, a) {},
         onWindowRestore: function () {},
         render: function (b) {},
         update: function (b) {},
         __addWindow: function (b) {
           if (null != b) {
             this.__windows.push(b);
             this.__windowByID.h[b.id] = b;
             var a = B(this, this.__onWindowClose);
             b.onClose.add(
               function () {
                 a(b);
               },
               !1,
               -1e4
             );
             null == this.__window &&
               ((this.__window = b),
               b.onActivate.add(B(this, this.onWindowActivate)),
               b.onRenderContextLost.add(B(this, this.onRenderContextLost)),
               b.onRenderContextRestored.add(B(this, this.onRenderContextRestored)),
               b.onDeactivate.add(B(this, this.onWindowDeactivate)),
               b.onDropFile.add(B(this, this.onWindowDropFile)),
               b.onEnter.add(B(this, this.onWindowEnter)),
               b.onExpose.add(B(this, this.onWindowExpose)),
               b.onFocusIn.add(B(this, this.onWindowFocusIn)),
               b.onFocusOut.add(B(this, this.onWindowFocusOut)),
               b.onFullscreen.add(B(this, this.onWindowFullscreen)),
               b.onKeyDown.add(B(this, this.onKeyDown)),
               b.onKeyUp.add(B(this, this.onKeyUp)),
               b.onLeave.add(B(this, this.onWindowLeave)),
               b.onMinimize.add(B(this, this.onWindowMinimize)),
               b.onMouseDown.add(B(this, this.onMouseDown)),
               b.onMouseMove.add(B(this, this.onMouseMove)),
               b.onMouseMoveRelative.add(B(this, this.onMouseMoveRelative)),
               b.onMouseUp.add(B(this, this.onMouseUp)),
               b.onMouseWheel.add(B(this, this.onMouseWheel)),
               b.onMove.add(B(this, this.onWindowMove)),
               b.onRender.add(B(this, this.render)),
               b.onResize.add(B(this, this.onWindowResize)),
               b.onRestore.add(B(this, this.onWindowRestore)),
               b.onTextEdit.add(B(this, this.onTextEdit)),
               b.onTextInput.add(B(this, this.onTextInput)),
               this.onWindowCreate());
             this.onCreateWindow.dispatch(b);
           }
         },
         __createWindow: function (b) {
           b = new jh(this, b);
           return -1 == b.id ? null : b;
         },
         __registerLimeModule: function (b) {
           b.onUpdate.add(B(this, this.update));
           b.onExit.add(B(this, this.onModuleExit), !1, 0);
           b.onExit.add(B(this, this.__onModuleExit), !1, 0);
           for (b = wb.devices.iterator(); b.hasNext(); ) this.__onGamepadConnect(b.next());
           wb.onConnect.add(B(this, this.__onGamepadConnect));
           for (b = pb.devices.iterator(); b.hasNext(); ) this.__onJoystickConnect(b.next());
           pb.onConnect.add(B(this, this.__onJoystickConnect));
           Ib.onCancel.add(B(this, this.onTouchCancel));
           Ib.onStart.add(B(this, this.onTouchStart));
           Ib.onMove.add(B(this, this.onTouchMove));
           Ib.onEnd.add(B(this, this.onTouchEnd));
         },
         __removeWindow: function (b) {
           null != b && this.__windowByID.h.hasOwnProperty(b.id) && (this.__window == b && (this.__window = null), I.remove(this.__windows, b), this.__windowByID.remove(b.id), b.close());
         },
         __onGamepadConnect: function (b) {
           this.onGamepadConnect(b);
           var a = B(this, this.onGamepadAxisMove),
             c = function (c, d) {
               a(b, c, d);
             };
           b.onAxisMove.add(c);
           var d = B(this, this.onGamepadButtonDown);
           c = function (a) {
             d(b, a);
           };
           b.onButtonDown.add(c);
           var f = B(this, this.onGamepadButtonUp);
           c = function (a) {
             f(b, a);
           };
           b.onButtonUp.add(c);
           var l = B(this, this.onGamepadDisconnect);
           b.onDisconnect.add(function () {
             l(b);
           });
         },
         __onJoystickConnect: function (b) {
           this.onJoystickConnect(b);
           var a = B(this, this.onJoystickAxisMove),
             c = function (c, d) {
               a(b, c, d);
             };
           b.onAxisMove.add(c);
           var d = B(this, this.onJoystickButtonDown);
           c = function (a) {
             d(b, a);
           };
           b.onButtonDown.add(c);
           var f = B(this, this.onJoystickButtonUp);
           c = function (a) {
             f(b, a);
           };
           b.onButtonUp.add(c);
           var l = B(this, this.onJoystickDisconnect);
           b.onDisconnect.add(function () {
             l(b);
           });
           var e = B(this, this.onJoystickHatMove);
           c = function (a, c) {
             e(b, a, c);
           };
           b.onHatMove.add(c);
           var C = B(this, this.onJoystickTrackballMove);
           c = function (a, c, d) {
             C(b, a, c, d);
           };
           b.onTrackballMove.add(c);
         },
         __onModuleExit: function (b) {
           this.__backend.exit();
         },
         __onWindowClose: function (b) {
           if (this.__window == b) this.onWindowClose();
           this.__removeWindow(b);
         },
         __class__: fa,
       });
       var N = function () {};
       r.ApplicationMain = N;
       N.__name__ = "ApplicationMain";
       N.main = function () {
         xb.__registerEntryPoint("Mine Blocks", N.create);
       };
       N.create = function (b) {
         nb.init(b);
         var a = new m();
         a.meta.h.build = "707";
         a.meta.h.company = "Zanzlanz";
         a.meta.h.file = "Mine Blocks";
         a.meta.h.name = "Mine Blocks";
         a.meta.h.packageName = "com.zanzlanz.mineblocks";
         a.meta.h.version = "1.30.5";
         var c = {
           allowHighDPI: !1,
           alwaysOnTop: !1,
           borderless: !1,
           element: null,
           frameRate: 50,
           height: 414,
           hidden: !1,
           maximized: !1,
           minimized: !1,
           parameters: {},
           resizable: !0,
           title: "Mine Blocks",
           width: 552,
           x: null,
           y: null,
           context: { antialiasing: 0, background: 16777215, colorDepth: 32, depth: !0, hardware: !0, stencil: !0, type: null, vsync: !1 },
         };
         if (null == a.__window && null != b)
           for (var d = 0, f = Z.fields(b); d < f.length; ) {
             var l = f[d];
             ++d;
             Object.prototype.hasOwnProperty.call(c, l) ? (c[l] = Z.field(b, l)) : Object.prototype.hasOwnProperty.call(c.context, l) && (c.context[l] = Z.field(b, l));
           }
         a.createWindow(c);
         d = 0;
         for (f = nb.preloadLibraries; d < f.length; ) a.__preloader.addLibrary(f[d++]);
         d = 0;
         for (f = nb.preloadLibraryNames; d < f.length; ) a.__preloader.addLibraryName(f[d++]);
         a.__preloader.load();
         N.start(a);
       };
       N.start = function (b) {
         b.exec();
       };
       var q = function () {};
       r.BlockData = q;
       q.__name__ = "BlockData";
       q.get = function (b, a) {
         return Object.prototype.hasOwnProperty.call(q.blockData.h, b) && Object.prototype.hasOwnProperty.call(q.blockData.h[b].h, a) ? q.blockData.h[b].h[a] : null;
       };
       q.generateIdentifierMap = function () {
         for (var b = Object.keys(q.blockData.h), a = b.length, c = 0; c < a; ) {
           var d = b[c++];
           null != q.blockData.h[d].h.identifier && ((q.identifierToID.h[q.blockData.h[d].h.identifier] = d), q.blockIDList.push(d));
         }
       };
       q.getItemRenderer = function (b) {
         var a = q.get(b, "itemRenderer");
         null == a && (a = q.get(b, "renderer"));
         null == a && (a = X);
         return a;
       };
       q.generateBlockData = function () {
         var b = new e(),
           a = new e();
         a.h.name = "Bedrock";
         a.h.identifier = "bedrock";
         a.h.tool = !1;
         var c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.placeable = !0;
         a.h.color = "black";
         b.h.br = a;
         a = new e();
         a.h.name = "Barrier";
         a.h.identifier = "barrier";
         a.h.constructor = Me;
         a.h.renderer = Qd;
         a.h.tool = !1;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.placeable = !0;
         a.h.color = "black";
         b.h.b = a;
         a = new e();
         a.h.name = "Air";
         a.h.identifier = "air";
         a.h.renderer = Ne;
         a.h.tool = !1;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dragonDontBreak = !0;
         a.h.replaceable = !0;
         a.h.color = "white";
         b.h.air = a;
         a = new e();
         a.h.name = "Stone";
         a.h.identifier = "stone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.dropDifferent = "cs";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.r = a;
         a = new e();
         a.h.name = "Dirt";
         a.h.identifier = "dirt";
         a.h.constructor = Rd;
         a.h.renderer = Sd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "brown";
         b.h.dt = a;
         a = new e();
         a.h.name = "Grass";
         a.h.identifier = "grass";
         a.h.textureID = "dirt";
         a.h.renderer = Sd;
         a.h.tool = !1;
         a.h.placeable = !0;
         a.h.color = "green";
         b.h.dtg = a;
         a = new e();
         a.h.name = "Coarse Dirt";
         a.h.identifier = "coarse_dirt";
         a.h.renderer = ud;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "brown";
         b.h.cdt = a;
         a = new e();
         a.h.name = "Gold Soil";
         a.h.identifier = "gold_soil";
         a.h.renderer = ud;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.gdt = a;
         a = new e();
         a.h.name = "Farmland";
         a.h.identifier = "farmland";
         a.h.constructor = Oe;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.dropDifferent = "dt";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.farm = a;
         a = new e();
         a.h.name = "Mycelium";
         a.h.identifier = "mycelium";
         a.h.constructor = Pe;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.dropDifferent = "dt";
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "purple";
         b.h.myc = a;
         a = new e();
         a.h.name = "Wood";
         a.h.identifier = "wood";
         a.h.renderer = Td;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 28;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 45;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.smeltsInto = "cl2";
         a.h.fuel = 10;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "brown";
         b.h.wd = a;
         a = new e();
         a.h.name = "Tree Wood";
         a.h.identifier = "tree_wood";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 28;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 45;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.dropDifferent = "wd";
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "brown";
         b.h.wd1 = a;
         a = new e();
         a.h.name = "Sapling";
         a.h.identifier = "sapling";
         a.h.constructor = Ud;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         c = new e();
         c.h.dt = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.fuel = 5;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.placeable = !0;
         a.h.color = "green";
         b.h.sl = a;
         a = new e();
         a.h.name = "Leaves";
         a.h.identifier = "leaves";
         a.h.constructor = jc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "green";
         b.h.lv = a;
         a = new e();
         a.h.name = "Apple in Leaves";
         a.h.identifier = "leaves_apple";
         a.h.constructor = jc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.dropDifferent = "ap";
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "green";
         b.h.lv1 = a;
         a = new e();
         a.h.name = "Orange in Leaves";
         a.h.identifier = "leaves_orange";
         a.h.constructor = jc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.dropDifferent = "or";
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "green";
         b.h.lv2 = a;
         a = new e();
         a.h.name = "Golden Apple in Leaves";
         a.h.identifier = "leaves_golden_apple";
         a.h.constructor = jc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.dropDifferent = "gap";
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "green";
         b.h.lv3 = a;
         a = new e();
         a.h.name = "Lemon in Leaves";
         a.h.identifier = "leaves_lemon";
         a.h.constructor = jc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.dropDifferent = "lemon";
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "green";
         b.h.lv4 = a;
         a = new e();
         a.h.name = "Diamond";
         a.h.identifier = "diamond";
         a.h.tool = !1;
         b.h.dm = a;
         a = new e();
         a.h.name = "Diamond Ore";
         a.h.identifier = "diamond_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 7;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.color = "gray";
         a.h.dropDifferent = "dm";
         a.h.placeable = !0;
         b.h.dmore = a;
         a = new e();
         a.h.name = "Gold Ore";
         a.h.identifier = "gold_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 7;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.smeltsInto = "gi";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.gd = a;
         a = new e();
         a.h.name = "Iron Ore";
         a.h.identifier = "iron_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 120;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastWooden;
         a.h.isStone = !0;
         a.h.smeltsInto = "ii";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h["in"] = a;
         a = new e();
         a.h.name = "Coal";
         a.h.identifier = "coal";
         a.h.tool = !1;
         a.h.fuel = 80;
         b.h.cl = a;
         a = new e();
         a.h.name = "Coal Ore";
         a.h.identifier = "coal_ore";
         a.h.tool = !1;
         a.h.placeable = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.dropDifferent = "cl";
         a.h.color = "gray";
         b.h.clore = a;
         a = new e();
         a.h.name = "Coal Block";
         a.h.identifier = "coal_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.fuel = 720;
         a.h.placeable = !0;
         a.h.color = "black";
         b.h.clb = a;
         a = new e();
         a.h.name = "Charcoal";
         a.h.identifier = "charcoal";
         a.h.tool = !1;
         a.h.fuel = 80;
         b.h.cl2 = a;
         a = new e();
         a.h.name = "Redstone Dust";
         a.h.identifier = "redstone";
         a.h.itemTextureID = "redstone[item]";
         a.h.constructor = Qe;
         a.h.renderer = Re;
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "red";
         a.h.brewIngredient = !0;
         b.h.rsd = a;
         a = new e();
         a.h.name = "Redstone Ore";
         a.h.identifier = "redstone_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.dropDifferent = "rsd";
         a.h.placeable = !0;
         a.h.color = "red";
         b.h.rs = a;
         a = new e();
         a.h.name = "Lapis Lazuli";
         a.h.identifier = "lapis";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.ll = a;
         a = new e();
         a.h.name = "Lapis Lazuli Ore";
         a.h.identifier = "lapis_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 120;
         c.h.StonePickaxe = 120;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.dropDifferent = "ll";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.lap = a;
         a = new e();
         a.h.name = "Sand";
         a.h.identifier = "sand";
         a.h.constructor = bc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 15;
         c.h.StoneShovel = 15;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 1;
         c.h.GoldShovel = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.smeltsInto = "gs";
         a.h.acidBurn = !0;
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "yellow";
         b.h.sd = a;
         a = new e();
         a.h.name = "Soul Sand";
         a.h.identifier = "soul_sand";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 15;
         c.h.StoneShovel = 15;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 1;
         c.h.GoldShovel = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.smeltsInto = "gs";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.ssd = a;
         a = new e();
         a.h.name = "Cactus";
         a.h.identifier = "cactus";
         a.h.constructor = Se;
         a.h.renderer = Vd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.smeltsInto = ["dye", "green"];
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         c = new e();
         c.h.sd = 1;
         c.h.ct = 1;
         a.h.placeOn = [c, [], []];
         a.h.endermenCanChange = !0;
         a.h.color = "green";
         b.h.ct = a;
         a = new e();
         a.h.name = "Cobblestone";
         a.h.identifier = "cobblestone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.smeltsInto = "r";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.cs = a;
         a = new e();
         a.h.name = "Moss Stone";
         a.h.identifier = "moss_stone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "green";
         b.h.ms = a;
         a = new e();
         a.h.name = "Obsidian";
         a.h.identifier = "obsidian";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 420;
         c.h.DiamondPickaxe = 260;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastGold;
         a.h.dragonDontBreak = !0;
         a.h.pistonDontPush = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.ob = a;
         a = new e();
         a.h.name = "Dragon Scale Block";
         a.h.identifier = "dragon_scale_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 320;
         c.h.DiamondPickaxe = 160;
         c.h.WoodenPickaxe = 280;
         c.h.StonePickaxe = 240;
         c.h.IronPickaxe = 200;
         c.h.GoldPickaxe = 150;
         a.h.mining = c;
         a.h.dragonDontBreak = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.dsb = a;
         a = new e();
         a.h.name = "Apple";
         a.h.identifier = "apple";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         a.h.color = "red";
         b.h.ap = a;
         a = new e();
         a.h.name = "Golden Apple";
         a.h.identifier = "golden_apple";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.health = 2;
         var d = new e(),
           f = new e();
         f.h.duration = 60;
         f.h.showParticles = !0;
         d.h.regeneration = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "yellow";
         b.h.gap = a;
         a = new e();
         a.h.name = "Orange";
         a.h.identifier = "orange";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         a.h.color = "orange";
         b.h.or = a;
         a = new e();
         a.h.name = "Wooden Planks";
         a.h.identifier = "wooden_planks";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 28;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 45;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.06666666666666667;
         a.h.fuel = 10;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "brown";
         b.h.wp = a;
         a = new e();
         a.h.name = "Stick";
         a.h.identifier = "stick";
         a.h.textureID = "stick";
         a.h.itemTextureID = "stick[item]";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 1;
         c.h.WoodenAxe = 1;
         c.h.StonePickaxe = 1;
         c.h.StoneAxe = 1;
         c.h.IronPickaxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldPickaxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 7;
         c.h.DiamondPickaxe = 1;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.fuel = 5;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "brown";
         b.h.st = a;
         a = new e();
         a.h.name = "Wooden Fence";
         a.h.identifier = "fence";
         a.h.constructor = Lc;
         a.h.renderer = vd;
         c = new e();
         c.h.fnc = !0;
         c.h.fncg = !0;
         a.h.blockAttach = c;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 1;
         c.h.WoodenAxe = 1;
         c.h.StonePickaxe = 1;
         c.h.StoneAxe = 1;
         c.h.IronPickaxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldPickaxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 7;
         c.h.DiamondPickaxe = 1;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.actuallyHasCollisionThough = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.fuel = 10;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.fnc = a;
         a = new e();
         a.h.name = "Wooden Fence Gate";
         a.h.identifier = "fence_gate";
         a.h.constructor = Wd;
         a.h.renderer = Xd;
         c = new e();
         c.h.fnc = !0;
         c.h.fncg = !0;
         a.h.blockAttach = c;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 1;
         c.h.WoodenAxe = 1;
         c.h.StonePickaxe = 1;
         c.h.StoneAxe = 1;
         c.h.IronPickaxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldPickaxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 7;
         c.h.DiamondPickaxe = 1;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.actuallyHasCollisionThough = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.fuel = 8;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.fncg = a;
         a = new e();
         a.h.name = "Nether Brick Fence";
         a.h.identifier = "nether_fence";
         a.h.constructor = Lc;
         a.h.renderer = vd;
         c = new e();
         c.h.nfnc = !0;
         c.h.nfncg = !0;
         a.h.blockAttach = c;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.actuallyHasCollisionThough = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.nfnc = a;
         a = new e();
         a.h.name = "Nether Brick Fence Gate";
         a.h.identifier = "nether_fence_gate";
         a.h.constructor = Wd;
         a.h.renderer = Xd;
         c = new e();
         c.h.nfnc = !0;
         c.h.nfncg = !0;
         a.h.blockAttach = c;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.actuallyHasCollisionThough = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.nfncg = a;
         a = new e();
         a.h.name = "Iron Bars";
         a.h.identifier = "iron_bars";
         a.h.constructor = Lc;
         a.h.renderer = vd;
         c = new e();
         c.h.ibar = !0;
         a.h.blockAttach = c;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.actuallyHasCollisionThough = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.ibar = a;
         a = new e();
         a.h.name = "Torch";
         a.h.identifier = "torch";
         a.h.itemTextureID = "torch[item]";
         a.h.constructor = Yd;
         a.h.renderer = yb;
         a.h.itemRenderer = X;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "brown";
         b.h.th = a;
         a = new e();
         a.h.name = "Crafting Table";
         a.h.identifier = "crafting_table";
         a.h.constructor = Te;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 60;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.usable = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.craft = a;
         a = new e();
         a.h.name = "Wooden Pickaxe";
         a.h.identifier = "wooden_pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 1.5;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.fuel = 30;
         a.h.unstackable = !0;
         b.h.WoodenPickaxe = a;
         a = new e();
         a.h.name = "Stone Pickaxe";
         a.h.identifier = "stone_pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 2;
         a.h.life = 132;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.unstackable = !0;
         b.h.StonePickaxe = a;
         a = new e();
         a.h.name = "Iron Pickaxe";
         a.h.identifier = "iron_pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 2.5;
         a.h.life = 251;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.smeltsInto = "ironn";
         a.h.unstackable = !0;
         b.h.IronPickaxe = a;
         a = new e();
         a.h.name = "Golden Pickaxe";
         a.h.identifier = "golden_pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 3;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.smeltsInto = "goldn";
         a.h.unstackable = !0;
         b.h.GoldPickaxe = a;
         a = new e();
         a.h.name = "Diamond Pickaxe";
         a.h.identifier = "diamond_pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 4;
         a.h.life = 1562;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.unstackable = !0;
         b.h.DiamondPickaxe = a;
         a = new e();
         a.h.name = "Obsidian Pickaxe";
         a.h.tool = !0;
         a.h.hitStrength = 6;
         a.h.life = 3e3;
         a.h.enchantable = !0;
         a.h.enchantType = "Pickaxes";
         a.h.unstackable = !0;
         b.h.ObsidianPickaxe = a;
         a = new e();
         a.h.name = "Wooden Hoe";
         a.h.identifier = "wooden_hoe";
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.fuel = 30;
         a.h.unstackable = !0;
         a.h.enchantType = "Hoes";
         a.h.usable = !0;
         b.h.WoodenHoe = a;
         a = new e();
         a.h.name = "Stone Hoe";
         a.h.identifier = "stone_hoe";
         a.h.tool = !0;
         a.h.life = 132;
         a.h.enchantable = !0;
         a.h.unstackable = !0;
         a.h.enchantType = "Hoes";
         a.h.usable = !0;
         b.h.StoneHoe = a;
         a = new e();
         a.h.name = "Iron Hoe";
         a.h.identifier = "iron_hoe";
         a.h.tool = !0;
         a.h.life = 251;
         a.h.enchantable = !0;
         a.h.unstackable = !0;
         a.h.enchantType = "Hoes";
         a.h.smeltsInto = "ironn";
         a.h.usable = !0;
         b.h.IronHoe = a;
         a = new e();
         a.h.name = "Golden Hoe";
         a.h.identifier = "golden_hoe";
         a.h.tool = !0;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.unstackable = !0;
         a.h.enchantType = "Hoes";
         a.h.smeltsInto = "goldn";
         a.h.usable = !0;
         b.h.GoldHoe = a;
         a = new e();
         a.h.name = "Diamond Hoe";
         a.h.identifier = "diamond_hoe";
         a.h.tool = !0;
         a.h.life = 1562;
         a.h.enchantable = !0;
         a.h.unstackable = !0;
         a.h.enchantType = "Hoes";
         a.h.usable = !0;
         b.h.DiamondHoe = a;
         a = new e();
         a.h.name = "Wooden Axe";
         a.h.identifier = "wooden_axe";
         a.h.tool = !0;
         a.h.hitStrength = 2;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Axes";
         a.h.fuel = 30;
         a.h.unstackable = !0;
         b.h.WoodenAxe = a;
         a = new e();
         a.h.name = "Stone Axe";
         a.h.identifier = "stone_axe";
         a.h.tool = !0;
         a.h.hitStrength = 2.5;
         a.h.life = 132;
         a.h.enchantable = !0;
         a.h.enchantType = "Axes";
         a.h.unstackable = !0;
         b.h.StoneAxe = a;
         a = new e();
         a.h.name = "Iron Axe";
         a.h.identifier = "iron_axe";
         a.h.tool = !0;
         a.h.hitStrength = 3;
         a.h.life = 251;
         a.h.enchantable = !0;
         a.h.enchantType = "Axes";
         a.h.smeltsInto = "ironn";
         a.h.unstackable = !0;
         b.h.IronAxe = a;
         a = new e();
         a.h.name = "Golden Axe";
         a.h.identifier = "golden_axe";
         a.h.tool = !0;
         a.h.hitStrength = 3.5;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.enchantType = "Axes";
         a.h.smeltsInto = "goldn";
         a.h.unstackable = !0;
         b.h.GoldAxe = a;
         a = new e();
         a.h.name = "Diamond Axe";
         a.h.identifier = "diamond_axe";
         a.h.tool = !0;
         a.h.hitStrength = 4;
         a.h.life = 1562;
         a.h.enchantable = !0;
         a.h.enchantType = "Axes";
         a.h.unstackable = !0;
         b.h.DiamondAxe = a;
         a = new e();
         a.h.name = "Wooden Shovel";
         a.h.identifier = "wooden_shovel";
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Shovels";
         a.h.fuel = 30;
         a.h.unstackable = !0;
         b.h.WoodenShovel = a;
         a = new e();
         a.h.name = "Stone Shovel";
         a.h.identifier = "stone_shovel";
         a.h.tool = !0;
         a.h.life = 132;
         a.h.enchantable = !0;
         a.h.enchantType = "Shovels";
         a.h.unstackable = !0;
         b.h.StoneShovel = a;
         a = new e();
         a.h.name = "Iron Shovel";
         a.h.identifier = "iron_shovel";
         a.h.tool = !0;
         a.h.hitStrength = 1.5;
         a.h.life = 251;
         a.h.enchantable = !0;
         a.h.enchantType = "Shovels";
         a.h.smeltsInto = "ironn";
         a.h.unstackable = !0;
         b.h.IronShovel = a;
         a = new e();
         a.h.name = "Golden Shovel";
         a.h.identifier = "golden_shovel";
         a.h.tool = !0;
         a.h.hitStrength = 2;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.enchantType = "Shovels";
         a.h.smeltsInto = "goldn";
         a.h.unstackable = !0;
         b.h.GoldShovel = a;
         a = new e();
         a.h.name = "Diamond Shovel";
         a.h.identifier = "diamond_shovel";
         a.h.tool = !0;
         a.h.hitStrength = 2.5;
         a.h.life = 1562;
         a.h.enchantable = !0;
         a.h.enchantType = "Shovels";
         a.h.unstackable = !0;
         b.h.DiamondShovel = a;
         a = new e();
         a.h.name = "Wooden Sword";
         a.h.identifier = "wooden_sword";
         a.h.tool = !0;
         a.h.hitStrength = 3;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Swords";
         a.h.fuel = 30;
         a.h.unstackable = !0;
         b.h.WoodenSword = a;
         a = new e();
         a.h.name = "Stone Sword";
         a.h.identifier = "stone_sword";
         a.h.tool = !0;
         a.h.hitStrength = 4;
         a.h.life = 132;
         a.h.enchantable = !0;
         a.h.enchantType = "Swords";
         a.h.unstackable = !0;
         b.h.StoneSword = a;
         a = new e();
         a.h.name = "Iron Sword";
         a.h.identifier = "iron_sword";
         a.h.tool = !0;
         a.h.hitStrength = 5.5;
         a.h.life = 251;
         a.h.enchantable = !0;
         a.h.enchantType = "Swords";
         a.h.smeltsInto = "ironn";
         a.h.unstackable = !0;
         b.h.IronSword = a;
         a = new e();
         a.h.name = "Golden Sword";
         a.h.identifier = "golden_sword";
         a.h.tool = !0;
         a.h.hitStrength = 4.5;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.enchantType = "Swords";
         a.h.smeltsInto = "goldn";
         a.h.unstackable = !0;
         b.h.GoldSword = a;
         a = new e();
         a.h.name = "Diamond Sword";
         a.h.identifier = "diamond_sword";
         a.h.tool = !0;
         a.h.hitStrength = 7;
         a.h.life = 1562;
         a.h.enchantable = !0;
         a.h.enchantType = "Swords";
         a.h.unstackable = !0;
         b.h.DiamondSword = a;
         a = new e();
         a.h.name = "Leather Cap";
         a.h.identifier = "leather_cap";
         a.h.textureID = "leather_cap";
         a.h.renderer = Zd;
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Caps";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.LeatherCap = a;
         a = new e();
         a.h.name = "Leather Tunic";
         a.h.identifier = "leather_tunic";
         a.h.textureID = "leather_tunic";
         a.h.renderer = Zd;
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Shirts";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.LeatherShirt = a;
         a = new e();
         a.h.name = "Leather Pants";
         a.h.identifier = "leather_pants";
         a.h.textureID = "leather_pants";
         a.h.renderer = Ue;
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Pants";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.LeatherPants = a;
         a = new e();
         a.h.name = "Leather Boots";
         a.h.identifier = "leather_boots";
         a.h.textureID = "leather_boots";
         a.h.renderer = Ve;
         a.h.tool = !0;
         a.h.life = 60;
         a.h.enchantable = !0;
         a.h.enchantType = "Shoes";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.LeatherShoes = a;
         a = new e();
         a.h.name = "Iron Helmet";
         a.h.identifier = "iron_helmet";
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.enchantType = "Caps";
         a.h.smeltsInto = "ironn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.IronCap = a;
         a = new e();
         a.h.name = "Iron Chestplate";
         a.h.identifier = "iron_chestplate";
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.enchantType = "Shirts";
         a.h.smeltsInto = "ironn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.IronShirt = a;
         a = new e();
         a.h.name = "Iron Leggings";
         a.h.identifier = "iron_leggings";
         a.h.renderer = dd;
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.enchantType = "Pants";
         a.h.smeltsInto = "ironn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.IronPants = a;
         a = new e();
         a.h.name = "Iron Boots";
         a.h.identifier = "iron_boots";
         a.h.renderer = ed;
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.enchantType = "Shoes";
         a.h.smeltsInto = "ironn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.IronShoes = a;
         a = new e();
         a.h.name = "Gold Helmet";
         a.h.identifier = "gold_helmet";
         a.h.tool = !0;
         a.h.life = 140;
         a.h.enchantable = !0;
         a.h.enchantType = "Caps";
         a.h.smeltsInto = "goldn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.GoldCap = a;
         a = new e();
         a.h.name = "Gold Chestplate";
         a.h.identifier = "gold_chestplate";
         a.h.tool = !0;
         a.h.life = 140;
         a.h.enchantable = !0;
         a.h.enchantType = "Shirts";
         a.h.smeltsInto = "goldn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.GoldShirt = a;
         a = new e();
         a.h.name = "Gold Leggings";
         a.h.identifier = "gold_leggings";
         a.h.renderer = dd;
         a.h.tool = !0;
         a.h.life = 140;
         a.h.enchantable = !0;
         a.h.enchantType = "Pants";
         a.h.smeltsInto = "goldn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.GoldPants = a;
         a = new e();
         a.h.name = "Gold Boots";
         a.h.identifier = "gold_boots";
         a.h.renderer = ed;
         a.h.tool = !0;
         a.h.life = 140;
         a.h.enchantable = !0;
         a.h.enchantType = "Shoes";
         a.h.smeltsInto = "goldn";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.GoldShoes = a;
         a = new e();
         a.h.name = "Diamond Helmet";
         a.h.identifier = "diamond_helmet";
         a.h.tool = !0;
         a.h.life = 1e3;
         a.h.enchantable = !0;
         a.h.enchantType = "Caps";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DiamondCap = a;
         a = new e();
         a.h.name = "Diamond Chestplate";
         a.h.identifier = "diamond_chestplate";
         a.h.tool = !0;
         a.h.life = 1e3;
         a.h.enchantable = !0;
         a.h.enchantType = "Shirts";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DiamondShirt = a;
         a = new e();
         a.h.name = "Diamond Leggings";
         a.h.identifier = "diamond_leggings";
         a.h.renderer = dd;
         a.h.tool = !0;
         a.h.life = 1e3;
         a.h.enchantable = !0;
         a.h.enchantType = "Pants";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DiamondPants = a;
         a = new e();
         a.h.name = "Diamond Boots";
         a.h.identifier = "diamond_boots";
         a.h.renderer = ed;
         a.h.tool = !0;
         a.h.life = 1e3;
         a.h.enchantable = !0;
         a.h.enchantType = "Shoes";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DiamondShoes = a;
         a = new e();
         a.h.name = "Dragon Scale Helmet";
         a.h.identifier = "dragon_scale_helmet";
         a.h.tool = !0;
         a.h.life = 2500;
         a.h.enchantable = !0;
         a.h.enchantType = "Caps";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DragonCap = a;
         a = new e();
         a.h.name = "Dragon Scale Chestplate";
         a.h.identifier = "dragon_scale_chestplate";
         a.h.tool = !0;
         a.h.life = 2500;
         a.h.enchantable = !0;
         a.h.enchantType = "Shirts";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DragonShirt = a;
         a = new e();
         a.h.name = "Dragon Scale Leggings";
         a.h.identifier = "dragon_scale_leggings";
         a.h.renderer = dd;
         a.h.tool = !0;
         a.h.life = 2500;
         a.h.enchantable = !0;
         a.h.enchantType = "Pants";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DragonPants = a;
         a = new e();
         a.h.name = "Dragon Scale Boots";
         a.h.identifier = "dragon_scale_boots";
         a.h.renderer = ed;
         a.h.tool = !0;
         a.h.life = 2500;
         a.h.enchantable = !0;
         a.h.enchantType = "Shoes";
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.DragonShoes = a;
         a = new e();
         a.h.name = "Santa Hat";
         a.h.identifier = "santa_hat";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.SnowCap = a;
         a = new e();
         a.h.name = "Party Hat";
         a.h.identifier = "party_hat";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.PartyCap = a;
         a = new e();
         a.h.name = "Afro";
         a.h.identifier = "afro";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.AfroCap = a;
         a = new e();
         a.h.name = "Shades";
         a.h.identifier = "shades";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.ShadesCap = a;
         a = new e();
         a.h.name = "Mustache";
         a.h.identifier = "mustache";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.MustacheCap = a;
         a = new e();
         a.h.name = "Wooden Door";
         a.h.identifier = "wooden_door";
         a.h.renderer = cc;
         a.h.tool = !1;
         a.h.placeable = !0;
         b.h.dr = a;
         a = new e();
         a.h.name = "Iron Door";
         a.h.identifier = "iron_door";
         a.h.renderer = cc;
         a.h.tool = !1;
         a.h.placeable = !0;
         b.h.idr = a;
         a = new e();
         a.h.name = "Bamboo Door";
         a.h.identifier = "bamboo_door";
         a.h.renderer = cc;
         a.h.tool = !1;
         a.h.placeable = !0;
         b.h.bbdr = a;
         a = new e();
         a.h.name = "Wooden Door";
         a.h.textureID = "wooden_door[open_bottom]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "dr";
         a.h.color = "brown";
         b.h.dr1 = a;
         a = new e();
         a.h.name = "Iron Door";
         a.h.textureID = "iron_door[open_bottom]";
         a.h.constructor = Jb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "idr";
         a.h.color = "gray";
         b.h.idr1 = a;
         a = new e();
         a.h.name = "Bamboo Door";
         a.h.textureID = "bamboo_door[open_bottom]";
         a.h.constructor = Jb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.025;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bbdr";
         a.h.color = "yellow";
         b.h.bdr1 = a;
         a = new e();
         a.h.name = "Wooden Door";
         a.h.textureID = "wooden_door[open_top]";
         a.h.constructor = Jb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "dr";
         a.h.color = "brown";
         b.h.dr2 = a;
         a = new e();
         a.h.name = "Iron Door";
         a.h.textureID = "iron_door[open_top]";
         a.h.constructor = Jb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "idr";
         a.h.color = "gray";
         b.h.idr2 = a;
         a = new e();
         a.h.name = "Bamboo Door";
         a.h.textureID = "bamboo_door[open_top]";
         a.h.constructor = Jb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.025;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bbdr";
         a.h.color = "yellow";
         b.h.bdr2 = a;
         a = new e();
         a.h.name = "Wooden Door";
         a.h.textureID = "wooden_door[closed_bottom]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "bottom";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.pistonDontPush = !0;
         a.h.walkThroughBlock = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "dr";
         a.h.color = "brown";
         b.h.dr3 = a;
         a = new e();
         a.h.name = "Iron Door";
         a.h.textureID = "iron_door[closed_bottom]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "bottom";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "idr";
         a.h.color = "gray";
         b.h.idr3 = a;
         a = new e();
         a.h.name = "Bamboo Door";
         a.h.textureID = "bamboo_door[closed_bottom]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "bottom";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.flammable = !0;
         a.h.pistonDontPush = !0;
         a.h.flamRate = 0.025;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bbdr";
         a.h.color = "yellow";
         b.h.bdr3 = a;
         a = new e();
         a.h.name = "Wooden Door";
         a.h.textureID = "wooden_door[closed_top]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "top";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "dr";
         a.h.color = "brown";
         b.h.dr4 = a;
         a = new e();
         a.h.name = "Iron Door";
         a.h.textureID = "iron_door[closed_top]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "top";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "idr";
         a.h.color = "gray";
         b.h.idr4 = a;
         a = new e();
         a.h.name = "Bamboo Door";
         a.h.textureID = "bamboo_door[closed_top]";
         a.h.constructor = Jb;
         a.h.renderer = cc;
         a.h.blockAssociation = "top";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 15;
         c.h.WoodenAxe = 25;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.StoneAxe = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.pistonDontPush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.025;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bbdr";
         a.h.color = "yellow";
         b.h.bdr4 = a;
         a = new e();
         a.h.name = "Trap Door";
         a.h.identifier = "trap_door";
         a.h.textureID = "trap_door[open]";
         a.h.constructor = $d;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.td1 = a;
         a = new e();
         a.h.name = "Trap Door";
         a.h.textureID = "trap_door[closed]";
         a.h.constructor = $d;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 1;
         c.h.None = 60;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "td1";
         a.h.color = "brown";
         b.h.td2 = a;
         a = new e();
         a.h.name = "Furnace";
         a.h.identifier = "furnace";
         a.h.constructor = We;
         a.h.renderer = Xe;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.oven = a;
         a = new e();
         a.h.name = "Brewing Stand";
         a.h.identifier = "brewing_stand";
         a.h.constructor = Ye;
         a.h.renderer = Ze;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 7;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.brew = a;
         a = new e();
         a.h.name = "Anvil";
         a.h.identifier = "anvil";
         a.h.constructor = $e;
         a.h.renderer = af;
         a.h.tool = !1;
         a.h.unstackable = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 80;
         c.h.StonePickaxe = 45;
         c.h.IronPickaxe = 22;
         c.h.GoldPickaxe = 10;
         c.h.None = 120;
         c.h.DiamondPickaxe = 12;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.anvil = a;
         a = new e();
         a.h.name = "Cauldron";
         a.h.identifier = "cauldron";
         a.h.constructor = bf;
         a.h.renderer = Mc;
         a.h.tool = !1;
         a.h.unstackable = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 80;
         c.h.StonePickaxe = 45;
         c.h.IronPickaxe = 22;
         c.h.GoldPickaxe = 10;
         c.h.None = 120;
         c.h.DiamondPickaxe = 12;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.cauldron = a;
         a = new e();
         a.h.name = "Iron Ingot";
         a.h.identifier = "iron_ingot";
         a.h.tool = !1;
         b.h.ii = a;
         a = new e();
         a.h.name = "Gold Ingot";
         a.h.identifier = "gold_ingot";
         a.h.tool = !1;
         b.h.gi = a;
         a = new e();
         a.h.name = "Glass";
         a.h.identifier = "glass";
         a.h.renderer = fd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "state";
         b.h.gs = a;
         a = new e();
         a.h.name = "Seaweed";
         a.h.identifier = "seaweed";
         a.h.constructor = cf;
         a.h.itemTextureID = "seaweed[item]";
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.liquidCollision = !0;
         a.h.waterCollision = !0;
         a.h.placeNextToWater = !0;
         a.h.climbable = !0;
         a.h.usable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.sd = 1;
         c.h.dt = 1;
         c.h.sw = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.sw = a;
         a = new e();
         a.h.name = "Yellow Flower";
         a.h.identifier = "yellow_flower";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         a.h.placeOn = [c, [], []];
         a.h.endermenCanChange = !0;
         a.h.color = "green";
         b.h.fw1 = a;
         a = new e();
         a.h.name = "Red Flower";
         a.h.identifier = "red_flower";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         a.h.placeOn = [c, [], []];
         a.h.endermenCanChange = !0;
         a.h.color = "green";
         b.h.fw2 = a;
         a = new e();
         a.h.name = "Brown Mushroom";
         a.h.identifier = "brown_mushroom";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.endermenCanChange = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.cdt = 1;
         c.h.myc = 1;
         c.h.r = 1;
         c.h.wd = 1;
         c.h.wd1 = 1;
         a.h.placeOn = [c, [], []];
         b.h.ms1 = a;
         a = new e();
         a.h.name = "Red Mushroom";
         a.h.identifier = "red_mushroom";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.endermenCanChange = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.cdt = 1;
         c.h.myc = 1;
         c.h.r = 1;
         c.h.wd = 1;
         c.h.wd1 = 1;
         a.h.placeOn = [c, [], []];
         b.h.ms2 = a;
         a = new e();
         a.h.name = "Bowl";
         a.h.identifier = "bowl";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.bowl = a;
         a = new e();
         a.h.name = "Soup";
         a.h.identifier = "soup";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.soup = a;
         a = new e();
         a.h.name = "Beet Soup";
         a.h.identifier = "beet_soup";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "red";
         b.h.beetsoup = a;
         a = new e();
         a.h.name = "Rabbit Stew";
         a.h.identifier = "rabbit_stew";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 650;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.rabbitsoup = a;
         a = new e();
         a.h.name = "Ice Cream";
         a.h.identifier = "ice_cream";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 400;
         c.h.health = 2;
         d = new e();
         f = new e();
         f.h.duration = 40;
         f.h.showParticles = !0;
         d.h.regeneration = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "white";
         b.h.icec = a;
         a = new e();
         a.h.name = "Pumpkin";
         a.h.identifier = "pumpkin";
         a.h.constructor = df;
         a.h.renderer = ae;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 25;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 7;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.pistonDrop = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "orange";
         b.h.pk = a;
         a = new e();
         a.h.name = "Jack-o'-Lantern";
         a.h.identifier = "jack_o_lantern";
         a.h.constructor = be;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 25;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 7;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "orange";
         b.h.jl = a;
         a = new e();
         a.h.name = "Coral";
         a.h.identifier = "coral";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 25;
         c.h.WoodenPickaxe = 120;
         c.h.GoldPickaxe = 7;
         c.h.StonePickaxe = 60;
         c.h.None = 200;
         c.h.DiamondPickaxe = 15;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastWooden;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "magenta";
         b.h.coral = a;
         a = new e();
         a.h.name = "Ladder";
         a.h.identifier = "ladder";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 60;
         c.h.StoneAxe = 25;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 15;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.climbable = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.color = "brown";
         b.h.ladder = a;
         a = new e();
         a.h.name = "Chest";
         a.h.identifier = "chest";
         a.h.constructor = ef;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 60;
         c.h.StoneAxe = 25;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 15;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.chest = a;
         a = new e();
         a.h.name = "Iron Block";
         a.h.identifier = "iron_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastWooden;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.ib = a;
         a = new e();
         a.h.name = "Gold Block";
         a.h.identifier = "gold_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.gb = a;
         a = new e();
         a.h.name = "Diamond Block";
         a.h.identifier = "diamond_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "lightblue";
         b.h.db = a;
         a = new e();
         a.h.name = "Lapis Lazuli Block";
         a.h.identifier = "lapis_lazuli_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 120;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "blue";
         b.h.lapb = a;
         a = new e();
         a.h.name = "Glass Shard";
         a.h.identifier = "glass_shard";
         a.h.tool = !1;
         b.h.gss = a;
         a = new e();
         a.h.name = "Empty Bucket";
         a.h.identifier = "bucket_empty";
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.bk = a;
         a = new e();
         a.h.name = "Bucket of Milk";
         a.h.identifier = "bucket_milk";
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         a.h.color = "white";
         b.h.mbk = a;
         a = new e();
         a.h.name = "Bucket of Water";
         a.h.identifier = "bucket_water";
         a.h.placeNextToWater = !0;
         a.h.tool = !1;
         a.h.placeable = !0;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.wbk = a;
         a = new e();
         a.h.name = "Bucket of Lava";
         a.h.identifier = "bucket_lava";
         a.h.placeNextToWater = !0;
         a.h.tool = !1;
         a.h.fuel = 1280;
         a.h.placeable = !0;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.lbk = a;
         a = new e();
         a.h.name = "Bucket of Acid";
         a.h.identifier = "bucket_acid";
         a.h.placeNextToWater = !0;
         a.h.tool = !1;
         a.h.placeable = !0;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.abk = a;
         a = new e();
         a.h.name = "Snow";
         a.h.identifier = "snow";
         a.h.constructor = ff;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 7;
         c.h.StoneShovel = 7;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 1;
         c.h.GoldShovel = 1;
         c.h.None = 7;
         c.h.Shear = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.replaceable = !0;
         a.h.dropDifferent = "snowb";
         a.h.color = "white";
         b.h.snow = a;
         a = new e();
         a.h.name = "Snow Ball";
         a.h.identifier = "snow_ball";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.snowb = a;
         a = new e();
         a.h.name = "Snow Block";
         a.h.identifier = "snow_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 7;
         c.h.StoneShovel = 15;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 1;
         c.h.GoldShovel = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.dropDifferent = "snowb";
         a.h.placeable = !0;
         a.h.color = "white";
         b.h.snowblock = a;
         a = new e();
         a.h.name = "Ice";
         a.h.identifier = "ice";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 15;
         c.h.StonePickaxe = 7;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "white";
         b.h.ice = a;
         a = new e();
         a.h.name = "Frosted Ice";
         a.h.identifier = "frosted_ice";
         a.h.constructor = gf;
         a.h.renderer = gd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "white";
         b.h.fice = a;
         a = new e();
         a.h.name = "String";
         a.h.identifier = "string";
         a.h.tool = !1;
         b.h.fiber = a;
         a = new e();
         a.h.name = "Name Tag";
         a.h.identifier = "name_tag";
         a.h.usable = !0;
         a.h.tool = !1;
         b.h.tag = a;
         a = new e();
         a.h.name = "Carpet";
         a.h.identifier = "carpet";
         a.h.constructor = Kb;
         a.h.renderer = hf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "state";
         c = new e();
         c.h.type = "white";
         a.h.defaultItemExtra = c;
         b.h.carpet = a;
         a = new e();
         a.h.name = "Wool";
         a.h.identifier = "wool";
         a.h.renderer = Lb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 10;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.placeable = !0;
         a.h.color = "state";
         c = new e();
         c.h.type = "white";
         a.h.defaultItemExtra = c;
         b.h.cloth = a;
         a = new e();
         a.h.name = "Dye";
         a.h.identifier = "dye";
         a.h.renderer = Lb;
         a.h.usable = !0;
         a.h.tool = !1;
         c = new e();
         c.h.type = "gray";
         a.h.defaultItemExtra = c;
         b.h.dye = a;
         a = new e();
         a.h.name = "Bed";
         a.h.identifier = "bed";
         a.h.renderer = wd;
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         c = new e();
         c.h.type = "white";
         a.h.defaultItemExtra = c;
         b.h.bed = a;
         a = new e();
         a.h.name = "Bed";
         a.h.textureID = "bed";
         a.h.constructor = ce;
         a.h.renderer = wd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 7;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.02;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bed";
         a.h.color = "brown";
         b.h.bed1 = a;
         a = new e();
         a.h.name = "Bed";
         a.h.textureID = "bed";
         a.h.constructor = ce;
         a.h.renderer = wd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 15;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 7;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.02;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "bed";
         a.h.color = "brown";
         b.h.bed2 = a;
         a = new e();
         a.h.name = "TNT";
         a.h.identifier = "tnt";
         a.h.constructor = xd;
         a.h.renderer = de;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.smeltsInto = "gp";
         a.h.flammable = !1;
         a.h.flamRate = 0;
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "red";
         b.h.TNT = a;
         a = new e();
         a.h.name = "Rope";
         a.h.identifier = "rope";
         a.h.constructor = ee;
         a.h.renderer = yd;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.2;
         a.h.climbable = !0;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         d.h.rp = 1;
         a.h.placeOn = [[], c, d];
         a.h.color = "brown";
         b.h.rp = a;
         a = new e();
         a.h.name = "Bamboo";
         a.h.identifier = "bamboo";
         a.h.constructor = Sc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.fuel = 5;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.bb = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "yellow";
         b.h.bb = a;
         a = new e();
         a.h.name = "Sugarcane";
         a.h.identifier = "sugarcane";
         a.h.constructor = jf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.sc = 1;
         c.h.sd = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.sc = a;
         a = new e();
         a.h.name = "Sugar";
         a.h.identifier = "sugar";
         a.h.tool = !1;
         a.h.smeltsInto = "crml";
         a.h.brewIngredient = !0;
         b.h.sugar = a;
         a = new e();
         a.h.name = "Cake";
         a.h.identifier = "cake";
         a.h.constructor = zd;
         a.h.renderer = fe;
         a.h.maxState = 7;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.unstackable = !0;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         b.h.cake = a;
         a = new e();
         a.h.name = "Cactus Cake";
         a.h.identifier = "cactus_cake";
         a.h.constructor = kf;
         a.h.renderer = fe;
         a.h.maxState = 7;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.unstackable = !0;
         a.h.shiftClickBlock = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.ccake = a;
         a = new e();
         a.h.name = "Shears";
         a.h.identifier = "shears";
         a.h.tool = !0;
         a.h.life = 60;
         a.h.usable = !0;
         a.h.enchantable = !0;
         a.h.enchantType = "Shears";
         a.h.unstackable = !0;
         b.h.Shear = a;
         a = new e();
         a.h.name = "Moss";
         a.h.identifier = "moss";
         a.h.constructor = Kb;
         a.h.itemTextureID = "moss[item]";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 15;
         c.h.Shear = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.r = 1;
         c.h.cs = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.moss = a;
         a = new e();
         a.h.name = "Raft";
         a.h.identifier = "raft";
         a.h.renderer = ge;
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.unstackable = !0;
         b.h.raft = a;
         a = new e();
         a.h.name = "Clay";
         a.h.identifier = "clay";
         a.h.textureID = "clay[item]";
         a.h.tool = !1;
         b.h.cy = a;
         a = new e();
         a.h.name = "Clay Block";
         a.h.identifier = "clay_block";
         a.h.placeable = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 15;
         c.h.StoneShovel = 15;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 7;
         c.h.GoldShovel = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.smeltsInto = "brick";
         a.h.endermenCanChange = !0;
         a.h.dropDifferent = "cy1";
         a.h.color = "lightgray";
         b.h.cy1 = a;
         a = new e();
         a.h.name = "Brick";
         a.h.identifier = "brick";
         a.h.tool = !1;
         b.h.brick = a;
         a = new e();
         a.h.name = "Bricks";
         a.h.identifier = "bricks";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bricks = a;
         a = new e();
         a.h.name = "Clock";
         a.h.identifier = "clock";
         a.h.textureID = "clock";
         a.h.renderer = lf;
         a.h.tool = !1;
         b.h.clock = a;
         a = new e();
         a.h.name = "Compass";
         a.h.identifier = "compass";
         a.h.textureID = "compass";
         a.h.renderer = mf;
         a.h.tool = !1;
         b.h.compass = a;
         a = new e();
         a.h.name = "Gravel";
         a.h.identifier = "gravel";
         a.h.constructor = bc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 13;
         c.h.GoldShovel = 1;
         c.h.StoneShovel = 8;
         c.h.None = 20;
         c.h.DiamondShovel = 1;
         c.h.IronShovel = 4;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "gray";
         b.h.gv = a;
         a = new e();
         a.h.name = "Flint";
         a.h.identifier = "flint";
         a.h.tool = !1;
         b.h.flint = a;
         a = new e();
         a.h.name = "Flint and Steel";
         a.h.identifier = "flint_and_steel";
         a.h.tool = !0;
         a.h.life = 33;
         a.h.enchantable = !0;
         a.h.enchantType = "FlintAndSteel";
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.fas = a;
         a = new e();
         a.h.name = "Feather";
         a.h.identifier = "feather";
         a.h.tool = !1;
         b.h.feather = a;
         a = new e();
         a.h.name = "Ink Sac";
         a.h.identifier = "ink_sac";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.ink = a;
         a = new e();
         a.h.name = "Raw Porkchop";
         a.h.identifier = "porkchop";
         a.h.tool = !1;
         a.h.smeltsInto = "cpork";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         c.h.dog = 5;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "pink";
         b.h.pork = a;
         a = new e();
         a.h.name = "Cooked Porkchop";
         a.h.identifier = "porkchop_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.dog = 10;
         a.h.food = c;
         a.h.color = "brown";
         b.h.cpork = a;
         a = new e();
         a.h.name = "Raw Beef";
         a.h.identifier = "beef";
         a.h.tool = !1;
         a.h.smeltsInto = "cbeef";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         c.h.dog = 5;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "red";
         b.h.beef = a;
         a = new e();
         a.h.name = "Steak";
         a.h.identifier = "steak";
         a.h.usable = !0;
         a.h.tool = !1;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.dog = 10;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.cbeef = a;
         a = new e();
         a.h.name = "Raw Mutton";
         a.h.identifier = "mutton";
         a.h.tool = !1;
         a.h.smeltsInto = "cmutton";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         c.h.dog = 5;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "red";
         b.h.mutton = a;
         a = new e();
         a.h.name = "Cooked Mutton";
         a.h.identifier = "cooked_mutton";
         a.h.usable = !0;
         a.h.tool = !1;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.dog = 10;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.cmutton = a;
         a = new e();
         a.h.name = "Gunpowder";
         a.h.identifier = "gunpowder";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.brewIngredient = !0;
         b.h.gp = a;
         a = new e();
         a.h.name = "Ghast Tear";
         a.h.identifier = "ghast_tear";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.gt = a;
         a = new e();
         a.h.name = "Leather";
         a.h.identifier = "leather";
         a.h.tool = !1;
         b.h.leather = a;
         a = new e();
         a.h.name = "Rabbit Hide";
         a.h.identifier = "rabbit_hide";
         a.h.tool = !1;
         b.h.rleather = a;
         a = new e();
         a.h.name = "Redstone Torch";
         a.h.identifier = "redstone_torch";
         a.h.constructor = nf;
         a.h.renderer = hd;
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "red";
         b.h.rstorch = a;
         a = new e();
         a.h.name = "Button";
         a.h.identifier = "button";
         a.h.constructor = of;
         a.h.renderer = qc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "gray";
         b.h.button = a;
         a = new e();
         a.h.name = "Pressure Plate";
         a.h.identifier = "pressure_plate";
         a.h.constructor = he;
         a.h.renderer = qc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 15;
         c.h.StonePickaxe = 7;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "gray";
         b.h.pp = a;
         a = new e();
         a.h.name = "Wooden Pressure Plate";
         a.h.identifier = "pressure_plate_wooden";
         a.h.constructor = he;
         a.h.renderer = qc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.wpp = a;
         a = new e();
         a.h.name = "Lever";
         a.h.identifier = "lever";
         a.h.constructor = pf;
         a.h.renderer = qc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 15;
         c.h.StonePickaxe = 7;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "gray";
         b.h.lever = a;
         a = new e();
         a.h.name = "Odd Rock";
         a.h.identifier = "odd_rock";
         a.h.tool = !1;
         b.h.oddrock = a;
         a = new e();
         a.h.name = "Odd Rock Ore";
         a.h.identifier = "odd_rock_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 30;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 4;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.dropDifferent = "oddrock";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.os = a;
         a = new e();
         a.h.name = "Water";
         a.h.identifier = "water";
         a.h.constructor = Tc;
         a.h.renderer = Nc;
         a.h.liquidStates = 7;
         a.h.dropDifferent = "na";
         a.h.tool = !1;
         a.h.pistonDrop = !0;
         a.h.liquid = !0;
         a.h.liquidCollision = !0;
         a.h.waterCollision = !0;
         a.h.placeNextToWater = !0;
         a.h.replaceable = !0;
         a.h.climbable = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         b.h.wr = a;
         a = new e();
         a.h.name = "Lava";
         a.h.identifier = "lava";
         a.h.constructor = ie;
         a.h.renderer = Nc;
         a.h.liquidStates = 5;
         a.h.dropDifferent = "na";
         a.h.emitsLight = !0;
         a.h.tool = !1;
         a.h.pistonDrop = !0;
         a.h.liquid = !0;
         a.h.liquidCollision = !0;
         a.h.placeNextToWater = !0;
         a.h.replaceable = !0;
         a.h.climbable = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         b.h.la = a;
         a = new e();
         a.h.name = "Acid";
         a.h.identifier = "acid";
         a.h.constructor = je;
         a.h.renderer = Nc;
         a.h.liquidStates = 5;
         a.h.dropDifferent = "na";
         a.h.emitsLight = !0;
         a.h.tool = !1;
         a.h.pistonDrop = !0;
         a.h.liquid = !0;
         a.h.liquidCollision = !0;
         a.h.placeNextToWater = !0;
         a.h.replaceable = !0;
         a.h.climbable = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         b.h.ad = a;
         a = new e();
         a.h.name = "Monster Spawner";
         a.h.identifier = "monster_spawner";
         a.h.constructor = qf;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.mobSpawner = a;
         a = new e();
         a.h.name = "Odd Torch";
         a.h.identifier = "odd_torch";
         a.h.constructor = rf;
         a.h.renderer = yb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "black";
         b.h.ortorch = a;
         a = new e();
         a.h.name = "Netherrack";
         a.h.identifier = "netherrack";
         a.h.renderer = ud;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.flammable = !0;
         a.h.smeltsInto = "nbr";
         a.h.placeable = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "brown";
         b.h.n = a;
         a = new e();
         a.h.name = "Magma Block";
         a.h.identifier = "magma_block";
         a.h.renderer = sf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 40;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 5;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.flammable = !0;
         a.h.fuel = 80;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.magma = a;
         a = new e();
         a.h.name = "Nether Brick";
         a.h.identifier = "nether_brick";
         a.h.tool = !1;
         b.h.nbr = a;
         a = new e();
         a.h.name = "Nether Bricks";
         a.h.identifier = "nether_bricks";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.nb = a;
         a = new e();
         a.h.name = "Red Nether Bricks";
         a.h.identifier = "nether_bricks_red";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.rnb = a;
         a = new e();
         a.h.name = "Portal";
         a.h.textureID = "portal";
         a.h.constructor = tf;
         a.h.renderer = uf;
         c = new e();
         c.h.None = 7;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.portal = a;
         a = new e();
         a.h.name = "Portal Stone";
         a.h.identifier = "portal_stone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastGold;
         a.h.isStone = !0;
         a.h.flamRate = 0;
         a.h.pistonDontPush = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.portalstone = a;
         a = new e();
         a.h.name = "Glowstone";
         a.h.identifier = "glowstone";
         a.h.constructor = be;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 60;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.dropDifferent = "yellowdust";
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.glow = a;
         a = new e();
         a.h.name = "Glowstone Dust";
         a.h.identifier = "glowstone_dust";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.yellowdust = a;
         a = new e();
         a.h.name = "Note Block";
         a.h.identifier = "note_block";
         a.h.constructor = vf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.note = a;
         a = new e();
         a.h.name = "Piston";
         a.h.identifier = "piston";
         a.h.constructor = ke;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.piston = a;
         a = new e();
         a.h.name = "Piston";
         a.h.textureID = "piston[base]";
         a.h.constructor = le;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "piston";
         a.h.color = "gray";
         b.h.piston1 = a;
         a = new e();
         a.h.name = "Piston";
         a.h.textureID = "piston[arm]";
         a.h.constructor = me;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "piston";
         a.h.color = "gray";
         b.h.piston2 = a;
         a = new e();
         a.h.name = "Sticky Piston";
         a.h.identifier = "piston_sticky";
         a.h.constructor = ke;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.dropDifferent = "spiston";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.spiston = a;
         a = new e();
         a.h.name = "Sticky Piston";
         a.h.textureID = "piston_sticky[base]";
         a.h.constructor = le;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "spiston";
         a.h.color = "gray";
         b.h.spiston1 = a;
         a = new e();
         a.h.name = "Sticky Piston";
         a.h.textureID = "piston_sticky[arm]";
         a.h.constructor = me;
         a.h.renderer = kc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 30;
         c.h.StonePickaxe = 20;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 1;
         c.h.None = 150;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dropDifferent = "spiston";
         a.h.color = "gray";
         b.h.spiston2 = a;
         a = new e();
         a.h.name = "Raw Chicken";
         a.h.identifier = "chicken";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.smeltsInto = "cchicken";
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 200;
         c.h.dog = 10;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 40;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "pink";
         b.h.chicken = a;
         a = new e();
         a.h.name = "Cooked Chicken";
         a.h.identifier = "chicken_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.dog = 10;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.cchicken = a;
         a = new e();
         a.h.name = "Chicken Nugget";
         a.h.identifier = "chicken_nugget";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         a.h.color = "brown";
         b.h.nugget = a;
         a = new e();
         a.h.name = "Raw Rabbit";
         a.h.identifier = "rabbit";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.smeltsInto = "crabbit";
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         c.h.dog = 5;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "pink";
         b.h.rabbit = a;
         a = new e();
         a.h.name = "Cooked Rabbit";
         a.h.identifier = "rabbit_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         c.h.dog = 10;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.crabbit = a;
         a = new e();
         a.h.name = "Minecart Rail";
         a.h.identifier = "rail";
         a.h.constructor = yc;
         a.h.renderer = id;
         a.h.itemTextureID = "rail[item]";
         a.h.itemRenderer = X;
         a.h.poweredTypeRail = !1;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 1;
         c.h.WoodenPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.StonePickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.rail = a;
         a = new e();
         a.h.name = "Powered Minecart Rail";
         a.h.identifier = "rail_powered";
         a.h.constructor = ne;
         a.h.renderer = id;
         a.h.itemTextureID = "rail_powered[item]";
         a.h.itemRenderer = X;
         a.h.poweredTypeRail = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 1;
         c.h.WoodenPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.StonePickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.railp = a;
         a = new e();
         a.h.name = "Activator Minecart Rail";
         a.h.identifier = "rail_activator";
         a.h.constructor = ne;
         a.h.renderer = id;
         a.h.itemTextureID = "rail_activator[item]";
         a.h.itemRenderer = X;
         a.h.poweredTypeRail = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 1;
         c.h.WoodenPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.StonePickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.raila = a;
         a = new e();
         a.h.name = "Detector Minecart Rail";
         a.h.identifier = "rail_detector";
         a.h.constructor = Ad;
         a.h.renderer = id;
         a.h.itemTextureID = "rail_detector[item]";
         a.h.itemRenderer = X;
         a.h.poweredTypeRail = !0;
         a.h.tool = !1;
         c = new e();
         c.h.IronPickaxe = 1;
         c.h.WoodenPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.StonePickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.raild = a;
         a = new e();
         a.h.name = "Minecart";
         a.h.identifier = "minecart";
         a.h.renderer = ge;
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.cart = a;
         a = new e();
         a.h.name = "TNT Minecart";
         a.h.identifier = "minecart_tnt";
         a.h.textureID = "minecart";
         a.h.secondaryTextureID = "tnt";
         a.h.renderer = Bd;
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.cartTNT = a;
         a = new e();
         a.h.name = "Chest Minecart";
         a.h.identifier = "minecart_chest";
         a.h.textureID = "minecart";
         a.h.secondaryTextureID = "chest";
         a.h.renderer = Bd;
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.cartchest = a;
         a = new e();
         a.h.name = "Furnace Minecart";
         a.h.identifier = "minecart_furnace";
         a.h.textureID = "minecart";
         a.h.secondaryTextureID = "furnace[off]";
         a.h.renderer = Bd;
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.cartoven = a;
         a = new e();
         a.h.name = "Sandstone";
         a.h.identifier = "sandstone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.ss = a;
         a = new e();
         a.h.name = "Bow";
         a.h.identifier = "bow";
         a.h.tool = !0;
         a.h.life = 350;
         a.h.enchantable = !0;
         a.h.enchantType = "Bows";
         a.h.unstackable = !0;
         a.h.usable = !0;
         a.h.timerToUse = 80;
         b.h.bow = a;
         a = new e();
         a.h.name = "Balloon";
         a.h.identifier = "balloon";
         a.h.renderer = wf;
         a.h.tool = !0;
         a.h.life = 10;
         a.h.enchantable = !0;
         a.h.enchantType = "Balloons";
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.bl = a;
         a = new e();
         a.h.name = "Arrow";
         a.h.identifier = "arrow";
         a.h.tool = !1;
         b.h.arrow = a;
         a = new e();
         a.h.name = "Topaz";
         a.h.identifier = "topaz";
         a.h.tool = !1;
         b.h.topaz = a;
         a = new e();
         a.h.name = "Topaz Ore";
         a.h.identifier = "topaz_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 25;
         c.h.GoldPickaxe = 5;
         c.h.None = 200;
         c.h.DiamondPickaxe = 10;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.dropDifferent = "topaz";
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.to = a;
         a = new e();
         a.h.name = "Block of Topaz";
         a.h.identifier = "topaz_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 25;
         c.h.GoldPickaxe = 5;
         c.h.None = 200;
         c.h.DiamondPickaxe = 10;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "orange";
         b.h.tob = a;
         a = new e();
         a.h.name = "";
         a.h.identifier = "";
         a.h.tool = !1;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.color = "white";
         b.h[""] = a;
         a = new e();
         a.h.name = "J";
         a.h.textureID = "j";
         a.h.constructor = xf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.unstackable = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "pink";
         b.h.j = a;
         a = new e();
         a.h.name = "Long Grass";
         a.h.identifier = "long_grass";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.5;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.sd = 1;
         c.h.r = 1;
         c.h.cs = 1;
         c.h.mc = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.lgr = a;
         a = new e();
         a.h.name = "Shrub";
         a.h.identifier = "shrub";
         a.h.constructor = Kb;
         a.h.renderer = yf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.5;
         a.h.replaceable = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.sd = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.shrub = a;
         a = new e();
         a.h.name = "Desert Shrub";
         a.h.identifier = "dead_bush";
         a.h.constructor = Kb;
         a.h.renderer = Fb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.3333333333333333;
         a.h.replaceable = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         c = new e();
         c.h.dt = 1;
         c.h.sd = 1;
         c.h.cdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.ds = a;
         a = new e();
         a.h.name = "Seeds";
         a.h.identifier = "seeds";
         a.h.constructor = jd;
         a.h.renderer = rc;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 7;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.replaceable = !0;
         a.h.usable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.seed = a;
         a = new e();
         a.h.name = "Wheat";
         a.h.identifier = "wheat";
         a.h.tool = !1;
         b.h.wheat = a;
         a = new e();
         a.h.name = "Bread";
         a.h.identifier = "bread";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         a.h.food = c;
         a.h.color = "brown";
         b.h.bread = a;
         a = new e();
         a.h.name = "Egg";
         a.h.identifier = "egg";
         a.h.tool = !1;
         a.h.smeltsInto = "cegg";
         a.h.timerToUse = 50;
         a.h.usable = !0;
         b.h.egg = a;
         a = new e();
         a.h.name = "Fire Egg";
         a.h.identifier = "egg_fire";
         a.h.tool = !1;
         a.h.timerToUse = 50;
         a.h.usable = !0;
         b.h.fireegg = a;
         a = new e();
         a.h.name = "Stone Brick";
         a.h.identifier = "stone_brick";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.sb = a;
         a = new e();
         a.h.name = "Sign";
         a.h.identifier = "sign";
         a.h.constructor = zf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 7;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.unstackable = !1;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "brown";
         b.h.sign = a;
         a = new e();
         a.h.name = "Golden Apple Seed";
         a.h.identifier = "golden_apple_seed";
         a.h.itemTextureID = "golden_apple_seed[item]";
         a.h.constructor = Ud;
         a.h.renderer = Fb;
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.gb = 1;
         c.h.gdt = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.gasd = a;
         a = new e();
         a.h.name = "Paper";
         a.h.identifier = "paper";
         a.h.tool = !1;
         b.h.paper = a;
         a = new e();
         a.h.name = "Book";
         a.h.identifier = "book";
         a.h.tool = !1;
         b.h.book = a;
         a = new e();
         a.h.name = "Book";
         a.h.identifier = " enchanted_book";
         a.h.itemTextureID = "book[enchanted]";
         a.h.enchantable = !0;
         a.h.enchantType = "Random";
         a.h.unstackable = !0;
         a.h.tool = !1;
         b.h.ebook = a;
         a = new e();
         a.h.name = "Command Book";
         a.h.identifier = "command_book";
         a.h.unstackable = !0;
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.cbook = a;
         a = new e();
         a.h.name = "Bookshelf";
         a.h.identifier = "bookshelf";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronAxe = 7;
         c.h.WoodenAxe = 15;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.StoneAxe = 7;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.dropDifferent = "book";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.books = a;
         a = new e();
         a.h.name = "Redstone Lamp";
         a.h.identifier = "redstone_lamp";
         a.h.constructor = Af;
         a.h.renderer = Bf;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.light = a;
         a = new e();
         a.h.name = "Cobblestone Slab";
         a.h.identifier = "slab_cobblestone";
         a.h.textureID = "cobblestone";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.halfcs = a;
         a = new e();
         a.h.name = "Cobblestone Stairs";
         a.h.identifier = "stairs_cobblestone";
         a.h.textureID = "cobblestone";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.staircs = a;
         a = new e();
         a.h.name = "Stone Slab";
         a.h.identifier = "slab_stone";
         a.h.textureID = "stone";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.halfr = a;
         a = new e();
         a.h.name = "Stone Stairs";
         a.h.identifier = "stairs_stone";
         a.h.textureID = "stone";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 200;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.stairr = a;
         a = new e();
         a.h.name = "Brick Slab";
         a.h.identifier = "slab_brick";
         a.h.textureID = "bricks";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.StonePickaxe = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.halfbrick = a;
         a = new e();
         a.h.name = "Brick Stairs";
         a.h.identifier = "stairs_brick";
         a.h.textureID = "bricks";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.StonePickaxe = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.stairbrick = a;
         a = new e();
         a.h.name = "Nether Brick Slab";
         a.h.identifier = "slab_nether_brick";
         a.h.textureID = "nether_bricks";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.halfn = a;
         a = new e();
         a.h.name = "Nether Brick Stairs";
         a.h.identifier = "stairs_nether_brick";
         a.h.textureID = "nether_bricks";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 60;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.stairn = a;
         a = new e();
         a.h.name = "Wooden Planks Slab";
         a.h.identifier = "slab_wooden_planks";
         a.h.textureID = "wooden_planks";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.halfBlock = !0;
         a.h.isWood = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.halfwp = a;
         a = new e();
         a.h.name = "Wooden Planks Stairs";
         a.h.identifier = "stairs_wooden_planks";
         a.h.textureID = "wooden_planks";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.stairBlock = !0;
         a.h.isWood = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.stairwp = a;
         a = new e();
         a.h.name = "Stone Brick Slab";
         a.h.identifier = "slab_stone_brick";
         a.h.textureID = "stone_brick";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.StonePickaxe = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.halfsb = a;
         a = new e();
         a.h.name = "Stone Brick Stairs";
         a.h.identifier = "stairs_stone_brick";
         a.h.textureID = "stone_brick";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.StonePickaxe = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.stairsb = a;
         a = new e();
         a.h.name = "Iron Slab";
         a.h.identifier = "slab_iron";
         a.h.textureID = "iron_block";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastWooden;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.halfib = a;
         a = new e();
         a.h.name = "Iron Stairs";
         a.h.identifier = "stairs_iron";
         a.h.textureID = "iron_block";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastWooden;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.stairib = a;
         a = new e();
         a.h.name = "Gold Slab";
         a.h.identifier = "slab_gold";
         a.h.textureID = "gold_block";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.halfgb = a;
         a = new e();
         a.h.name = "Gold Stairs";
         a.h.identifier = "stairs_gold";
         a.h.textureID = "gold_block";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.stairgb = a;
         a = new e();
         a.h.name = "Diamond Slab";
         a.h.identifier = "slab_diamond";
         a.h.textureID = "diamond_block";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "lightblue";
         b.h.halfdb = a;
         a = new e();
         a.h.name = "Diamond Stairs";
         a.h.identifier = "stairs_diamond";
         a.h.textureID = "diamond_block";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 60;
         c.h.GoldPickaxe = 25;
         c.h.None = 120;
         c.h.StonePickaxe = 120;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "lightblue";
         b.h.stairdb = a;
         a = new e();
         a.h.name = "Obsidian Slab";
         a.h.identifier = "slab_obsidian";
         a.h.textureID = "obsidian";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.GoldPickaxe = 60;
         c.h.None = 120;
         c.h.DiamondPickaxe = 60;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastDiamond;
         a.h.dragonDontBreak = !0;
         a.h.pistonDontPush = !0;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.halfob = a;
         a = new e();
         a.h.name = "Obsidian Stairs";
         a.h.identifier = "stairs_obsidian";
         a.h.textureID = "obsidian";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.GoldPickaxe = 60;
         c.h.None = 120;
         c.h.DiamondPickaxe = 60;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastDiamond;
         a.h.dragonDontBreak = !0;
         a.h.pistonDontPush = !0;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.stairob = a;
         a = new e();
         a.h.name = "Bedrock Slab";
         a.h.identifier = "slab_bedrock";
         a.h.textureID = "bedrock";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         a.h.mining = c;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.halfBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "black";
         b.h.halfbr = a;
         a = new e();
         a.h.name = "Bedrock Stairs";
         a.h.identifier = "stairs_bedrock";
         a.h.textureID = "bedrock";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         a.h.mining = c;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.stairBlock = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "black";
         b.h.stairbr = a;
         a = new e();
         a.h.name = "Bamboo Slab";
         a.h.identifier = "slab_bamboo";
         a.h.textureID = "bamboo_block";
         a.h.renderer = Mb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.halfBlock = !0;
         a.h.isWood = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.halfbbb = a;
         a = new e();
         a.h.name = "Bamboo Stairs";
         a.h.identifier = "stairs_bamboo";
         a.h.textureID = "bamboo_block";
         a.h.renderer = Nb;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 7;
         c.h.IronAxe = 7;
         c.h.GoldAxe = 1;
         c.h.None = 25;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.stairBlock = !0;
         a.h.isWood = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.stairbbb = a;
         a = new e();
         a.h.name = "Stone Backdrop";
         a.h.identifier = "backdrop_stone";
         a.h.textureID = "stone";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.bdr = a;
         a = new e();
         a.h.name = "Wooden Planks Backdrop";
         a.h.identifier = "backdrop_wooden_planks";
         a.h.textureID = "wooden_planks";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bdwp = a;
         a = new e();
         a.h.name = "Dirt Backdrop";
         a.h.identifier = "backdrop_dirt";
         a.h.textureID = "dirt";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 15;
         c.h.IronShovel = 7;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bddt = a;
         a = new e();
         a.h.name = "Cobblestone Backdrop";
         a.h.identifier = "backdrop_cobblestone";
         a.h.textureID = "cobblestone";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.bdcs = a;
         a = new e();
         a.h.name = "Brick Backdrop";
         a.h.identifier = "backdrop_brick";
         a.h.textureID = "bricks";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bdbricks = a;
         a = new e();
         a.h.name = "Nether Brick Backdrop";
         a.h.identifier = "backdrop_nether_brick";
         a.h.textureID = "nether_bricks";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bdnb = a;
         a = new e();
         a.h.name = "Stone Brick Backdrop";
         a.h.identifier = "backdrop_stone_brick";
         a.h.textureID = "stone_brick";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 120;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.bdsb = a;
         a = new e();
         a.h.name = "Bookshelf Backdrop";
         a.h.identifier = "backdrop_bookshelf";
         a.h.textureID = "bookshelf";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.bdbooks = a;
         a = new e();
         a.h.name = "Glass Backdrop";
         a.h.identifier = "backdrop_glass";
         a.h.textureID = "glass";
         a.h.renderer = Cf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "state";
         b.h.bdgs = a;
         a = new e();
         a.h.name = "Obsidian Backdrop";
         a.h.identifier = "backdrop_obsidian";
         a.h.textureID = "obsidian";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.GoldPickaxe = 60;
         c.h.None = 120;
         c.h.DiamondPickaxe = 60;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dragonDontBreak = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.bdob = a;
         a = new e();
         a.h.name = "Wool Backdrop";
         a.h.identifier = "backdrop_wool";
         a.h.textureID = "wool";
         a.h.renderer = Df;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 10;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isMush = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "state";
         c = new e();
         c.h.type = "white";
         a.h.defaultItemExtra = c;
         b.h.bdcloth = a;
         a = new e();
         a.h.name = "Bamboo Backdrop";
         a.h.identifier = "backdrop_bamboo";
         a.h.textureID = "bamboo_block";
         a.h.renderer = dc;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 25;
         a.h.mining = c;
         a.h.backdrop = !0;
         a.h.isWood = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.bdbbb = a;
         a = new e();
         a.h.name = "Bone";
         a.h.identifier = "bone";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.bone = a;
         a = new e();
         a.h.name = "Bone Meal";
         a.h.identifier = "bone_meal";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.bonem = a;
         a = new e();
         a.h.name = "Red Mushroom Cap";
         a.h.identifier = "red_mushroom_cap";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dropDifferent = "ms2";
         a.h.placeable = !0;
         a.h.color = "red";
         b.h.msb1 = a;
         a = new e();
         a.h.name = "Red Mushroom Stem";
         a.h.identifier = "red_mushroom_stem";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         a.h.color = "lightgray";
         b.h.msb2 = a;
         a = new e();
         a.h.name = "Brown Mushroom Cap";
         a.h.identifier = "brown_mushroom_cap";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dropDifferent = "ms1";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.msb3 = a;
         a = new e();
         a.h.name = "Brown Mushroom Stem";
         a.h.identifier = "brown_mushroom_stem";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dropDifferent = "na";
         a.h.placeable = !0;
         a.h.color = "brown";
         b.h.msb4 = a;
         a = new e();
         a.h.name = "Cocoa Bean";
         a.h.identifier = "cocoa_bean";
         a.h.tool = !1;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.usable = !0;
         b.h.ccb = a;
         a = new e();
         a.h.name = "Cookie";
         a.h.identifier = "cookie";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         d = new e();
         f = new e();
         f.h.duration = 12;
         f.h.showParticless = !0;
         d.h.regeneration = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.cookie = a;
         a = new e();
         a.h.name = "Ender Pearl";
         a.h.identifier = "ender_pearl";
         a.h.renderer = Ef;
         a.h.tool = !1;
         a.h.timerToUse = 50;
         a.h.usable = !0;
         b.h.ep = a;
         a = new e();
         a.h.name = "Eye of Ender";
         a.h.identifier = "eye_of_ender";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.eoe = a;
         a = new e();
         a.h.name = "Enderstone";
         a.h.identifier = "enderstone";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 15;
         c.h.StonePickaxe = 7;
         c.h.IronPickaxe = 1;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxes;
         a.h.dragonDontBreak = !0;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.color = "lightgray";
         b.h.es = a;
         a = new e();
         a.h.name = "Portal Frame";
         a.h.identifier = "portal_frame";
         a.h.constructor = Ff;
         a.h.renderer = Gf;
         a.h.tool = !1;
         a.h.isStone = !0;
         a.h.pistonDontPush = !0;
         a.h.dragonDontBreak = !0;
         a.h.shiftClickBlock = !0;
         a.h.placeable = !0;
         a.h.color = "lightblue";
         b.h.pf = a;
         a = new e();
         a.h.name = "Cobweb";
         a.h.identifier = "cobweb";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenSword = 15;
         c.h.StoneSword = 7;
         c.h.IronSword = 1;
         c.h.GoldSword = 1;
         c.h.DiamondSword = 1;
         c.h.None = 120;
         c.h.Shear = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.usable = !0;
         a.h.dropDifferent = "fiber";
         a.h.placeable = !0;
         a.h.color = "white";
         b.h.web = a;
         a = new e();
         a.h.name = "Blaze Powder";
         a.h.identifier = "blaze_powder";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.bp = a;
         a = new e();
         a.h.name = "Blaze Rod";
         a.h.identifier = "blaze_rod";
         a.h.tool = !1;
         b.h.blazer = a;
         a = new e();
         a.h.name = "Carrot";
         a.h.identifier = "carrot";
         a.h.constructor = jd;
         a.h.renderer = rc;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 4;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.replaceable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.usable = !0;
         a.h.color = "green";
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         b.h.carrot = a;
         a = new e();
         a.h.name = "Golden Carrot";
         a.h.identifier = "carrot_golden";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.brewIngredient = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         c.h.health = 2;
         d = new e();
         f = new e();
         f.h.duration = 25;
         f.h.showParticles = !0;
         d.h.regeneration = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "yellow";
         b.h.gcarrot = a;
         a = new e();
         a.h.name = "Gold Nugget";
         a.h.identifier = "gold_nugget";
         a.h.tool = !1;
         b.h.goldn = a;
         a = new e();
         a.h.name = "Iron Nugget";
         a.h.identifier = "iron_nugget";
         a.h.tool = !1;
         b.h.ironn = a;
         a = new e();
         a.h.name = "Caramel";
         a.h.identifier = "caramel";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         c.h.health = 1;
         a.h.food = c;
         a.h.color = "brown";
         b.h.crml = a;
         a = new e();
         a.h.name = "Candy Apple";
         a.h.identifier = "apple_candy";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 600;
         c.h.health = 3;
         a.h.food = c;
         a.h.color = "brown";
         b.h.capple = a;
         a = new e();
         a.h.name = "Potato";
         a.h.identifier = "potato";
         a.h.constructor = jd;
         a.h.renderer = rc;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 4;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.smeltsInto = "bpotato";
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.replaceable = !0;
         a.h.usable = !0;
         a.h.color = "green";
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         b.h.potato = a;
         a = new e();
         a.h.name = "Nether Wart";
         a.h.identifier = "nether_wart";
         a.h.constructor = Hf;
         a.h.renderer = rc;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 3;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flamRate = 0.1;
         a.h.placeable = !0;
         c = new e();
         c.h.ssd = 1;
         a.h.placeOn = [c, [], []];
         a.h.replaceable = !0;
         a.h.color = "red";
         a.h.brewIngredient = !0;
         b.h.nw = a;
         a = new e();
         a.h.name = "Nether Wart Block";
         a.h.identifier = "nether_wart_block";
         a.h.tool = !1;
         a.h.isMush = !0;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 7;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.placeable = !0;
         a.h.color = "red";
         b.h.nwb = a;
         a = new e();
         a.h.name = "Beetroot";
         a.h.identifier = "beetroot";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 50;
         a.h.food = c;
         a.h.color = "red";
         b.h.beet = a;
         a = new e();
         a.h.name = "Beetroot Seed";
         a.h.identifier = "beetroot_seed";
         a.h.constructor = jd;
         a.h.renderer = rc;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 4;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isGrass = !0;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.replaceable = !0;
         a.h.color = "green";
         b.h.bseed = a;
         a = new e();
         a.h.name = "Baked Potato";
         a.h.identifier = "potato_baked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         a.h.food = c;
         a.h.color = "orange";
         b.h.bpotato = a;
         a = new e();
         a.h.name = "Poisonous Potato";
         a.h.identifier = "poisonous_potato";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         d = new e();
         f = new e();
         f.h.change = 0.5;
         f.h.duration = 8;
         d.h.poison = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.ppotato = a;
         a = new e();
         a.h.name = "Spear";
         a.h.identifier = "spear";
         a.h.tool = !1;
         a.h.hitStrength = 2;
         a.h.usable = !0;
         a.h.timerToUse = 80;
         b.h.spear = a;
         a = new e();
         a.h.name = "Ender Gem Ore";
         a.h.identifier = "ender_gem_ore";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 120;
         c.h.StonePickaxe = 25;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.dropsWith = q.dropsWith.h.pickaxesPastStone;
         a.h.dragonDontBreak = !0;
         a.h.isStone = !0;
         a.h.dropDifferent = "egemd";
         a.h.placeable = !0;
         a.h.color = "lightgray";
         b.h.egem = a;
         a = new e();
         a.h.name = "Ender Gem";
         a.h.identifier = "ender_gem";
         a.h.tool = !1;
         b.h.egemd = a;
         a = new e();
         a.h.name = "Ender Dragon Egg";
         a.h.identifier = "ender_dragon_egg";
         a.h.constructor = If;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 10;
         c.h.GoldPickaxe = 4;
         c.h.None = 30;
         c.h.StonePickaxe = 15;
         c.h.DiamondPickaxe = 4;
         a.h.mining = c;
         a.h.shiftClickBlock = !0;
         a.h.dragonDontBreak = !0;
         a.h.placeable = !0;
         a.h.isStone = !0;
         a.h.pistonDrop = !0;
         a.h.tool = !1;
         a.h.color = "purple";
         b.h.degg = a;
         a = new e();
         a.h.name = "Dragon Scale";
         a.h.identifier = "dragon_scale";
         a.h.tool = !1;
         b.h.dscl = a;
         a = new e();
         a.h.name = "(Useless) Scepter";
         a.h.tool = !0;
         a.h.life = 60;
         a.h.unstackable = !0;
         b.h.scepter = a;
         a = new e();
         a.h.name = "(Useless) Scepter Stone";
         a.h.tool = !1;
         b.h.scepters = a;
         a = new e();
         a.h.name = "Healing Crystal";
         a.h.identifier = "healing_crystal";
         a.h.constructor = Jf;
         a.h.renderer = zc;
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 75;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.hcl = a;
         a = new e();
         a.h.name = "Bone Block";
         a.h.identifier = "bone_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.dropDifferent = "bone";
         a.h.placeable = !0;
         a.h.color = "lightgray";
         b.h.boneb = a;
         a = new e();
         a.h.name = "Bone Shuriken";
         a.h.identifier = "bone_shuriken";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 80;
         b.h.bshur = a;
         a = new e();
         a.h.name = "Bamboo Block";
         a.h.identifier = "bamboo_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 15;
         c.h.StoneAxe = 1;
         c.h.IronAxe = 1;
         c.h.GoldAxe = 1;
         c.h.None = 15;
         c.h.DiamondAxe = 1;
         a.h.mining = c;
         a.h.isWood = !0;
         a.h.flamRate = 0.03333333333333333;
         a.h.fuel = 20;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.bbb = a;
         a = new e();
         a.h.name = "Rotten Flesh";
         a.h.identifier = "rotten_flesh";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 200;
         c.h.dog = 3;
         d = new e();
         f = new e();
         f.h.change = 0.5;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.rf = a;
         a = new e();
         a.h.name = "Lily Pad";
         a.h.identifier = "lily_pad";
         a.h.constructor = Kf;
         a.h.renderer = Lf;
         a.h.itemTextureID = "lily_pad[item]";
         a.h.itemRenderer = X;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.replaceable = !0;
         a.h.usable = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.wr = 1;
         a.h.placeOn = [c, [], []];
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.pistonDrop = !0;
         a.h.color = "green";
         b.h.lp = a;
         a = new e();
         a.h.name = "Raw Bacon";
         a.h.identifier = "bacon";
         a.h.tool = !1;
         a.h.smeltsInto = "cbacon";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "pink";
         b.h.bacon = a;
         a = new e();
         a.h.name = "Cooked Bacon";
         a.h.identifier = "bacon_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         c.h.health = 5;
         a.h.food = c;
         a.h.color = "brown";
         b.h.cbacon = a;
         a = new e();
         a.h.name = "Candy Cane";
         a.h.identifier = "candy_cane";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         d = new e();
         f = new e();
         f.h.change = 0.333333;
         f.h.showParticles = !0;
         d.h.regeneration = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "white";
         b.h.ccane = a;
         a = new e();
         a.h.name = "Saddle";
         a.h.identifier = "saddle";
         a.h.tool = !1;
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.saddle = a;
         a = new e();
         a.h.name = "Fishing Rod";
         a.h.identifier = "fishing_rod";
         a.h.renderer = oe;
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.enchantType = "FishingRods";
         a.h.unstackable = !0;
         a.h.usable = !0;
         b.h.fr = a;
         a = new e();
         a.h.name = "Carrot on a Stick";
         a.h.identifier = "carrot_on_a_stick";
         a.h.tool = !0;
         a.h.life = 200;
         a.h.enchantable = !0;
         a.h.unstackable = !0;
         a.h.enchantType = "CarrotOnStick";
         b.h.coas = a;
         a = new e();
         a.h.name = "Raw Fish";
         a.h.identifier = "fish";
         a.h.tool = !1;
         a.h.smeltsInto = "cfi";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         a.h.food = c;
         a.h.color = "lightblue";
         b.h.fi = a;
         a = new e();
         a.h.name = "Cooked Fish";
         a.h.identifier = "fish_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         a.h.food = c;
         a.h.color = "brown";
         b.h.cfi = a;
         a = new e();
         a.h.name = "Raw Salmon";
         a.h.identifier = "salmon";
         a.h.tool = !1;
         a.h.smeltsInto = "csalmon";
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         a.h.food = c;
         a.h.color = "pink";
         b.h.salmon = a;
         a = new e();
         a.h.name = "Cooked Salmon";
         a.h.identifier = "salmon_cooked";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 300;
         a.h.food = c;
         a.h.color = "orange";
         b.h.csalmon = a;
         a = new e();
         a.h.name = "Clownfish";
         a.h.identifier = "clownfish";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 50;
         a.h.food = c;
         a.h.color = "orange";
         b.h.clown = a;
         a = new e();
         a.h.name = "Pufferfish";
         a.h.identifier = "pufferfish";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.brewIngredient = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 50;
         d = new e();
         f = new e();
         f.h.duration = 25;
         d.h.poison = f;
         f = new e();
         f.h.duration = 25;
         d.h.hunger = f;
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.puff = a;
         a = new e();
         a.h.name = "Enchantment Table";
         a.h.identifier = "enchantment_table";
         a.h.constructor = Mf;
         a.h.renderer = Nf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 15;
         c.h.GoldPickaxe = 7;
         c.h.None = 60;
         c.h.StonePickaxe = 25;
         c.h.DiamondPickaxe = 7;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "purple";
         b.h.enchant = a;
         a = new e();
         a.h.name = "Spawn Egg";
         a.h.identifier = "spawn_egg";
         a.h.renderer = Of;
         a.h.tool = !1;
         a.h.usable = !0;
         c = new e();
         c.h.type = "pig";
         a.h.defaultItemExtra = c;
         b.h.megg = a;
         a = new e();
         a.h.name = "Dispenser";
         a.h.identifier = "dispenser";
         a.h.constructor = Pf;
         a.h.renderer = pe;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.dispense = a;
         a = new e();
         a.h.name = "Dropper";
         a.h.identifier = "dropper";
         a.h.constructor = Qf;
         a.h.renderer = pe;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 25;
         c.h.StonePickaxe = 15;
         c.h.IronPickaxe = 7;
         c.h.GoldPickaxe = 1;
         c.h.None = 120;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.placeable = !0;
         a.h.color = "gray";
         b.h.dropper = a;
         a = new e();
         a.h.name = "Bottle of Enchanting";
         a.h.identifier = "bottle_of_enchanting";
         a.h.tool = !1;
         a.h.usable = !0;
         b.h.boe = a;
         a = new e();
         a.h.name = "Lemon";
         a.h.identifier = "lemon";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         a.h.color = "yellow";
         b.h.lemon = a;
         a = new e();
         a.h.name = "Lemon Block";
         a.h.identifier = "lemon_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenShovel = 1;
         c.h.StoneSword = 1;
         c.h.StoneShovel = 7;
         c.h.DiamondShovel = 1;
         c.h.IronSword = 1;
         c.h.IronShovel = 1;
         c.h.WoodenSword = 1;
         c.h.GoldSword = 1;
         c.h.GoldShovel = 1;
         c.h.DiamondSword = 1;
         c.h.None = 7;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.acidBurn = !0;
         a.h.endermenCanChange = !0;
         a.h.color = "yellow";
         b.h.lemonb = a;
         a = new e();
         a.h.name = "Slimeball";
         a.h.identifier = "slimeball";
         a.h.tool = !1;
         b.h.slimeball = a;
         a = new e();
         a.h.name = "Magma Cream";
         a.h.identifier = "magma_cream";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.magmac = a;
         a = new e();
         a.h.name = "Slime Block";
         a.h.identifier = "slime_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenSword = 1;
         c.h.WoodenShovel = 1;
         c.h.StoneSword = 1;
         c.h.DiamondShovel = 1;
         c.h.IronSword = 1;
         c.h.IronShovel = 1;
         c.h.GoldSword = 1;
         c.h.GoldShovel = 1;
         c.h.DiamondSword = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.placeable = !0;
         a.h.color = "green";
         b.h.slimeb = a;
         a = new e();
         a.h.name = "Coral Lantern";
         a.h.identifier = "coral_lantern";
         a.h.constructor = Yd;
         a.h.itemTextureID = "coral_lantern[floor]";
         a.h.renderer = Rf;
         a.h.itemRenderer = X;
         a.h.emitsLight = !0;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.None = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.walkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.pistonDrop = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.SOLID = 1;
         d = new e();
         d.h.SOLID = 1;
         a.h.placeOn = [c, d, []];
         a.h.color = "purple";
         b.h.lant = a;
         a = new e();
         a.h.name = "Potion";
         a.h.identifier = "potion";
         a.h.renderer = Sf;
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.type = "empty";
         a.h.defaultItemExtra = c;
         b.h.potion = a;
         a = new e();
         a.h.name = "Lemonade";
         a.h.identifier = "lemonade";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "yellow";
         b.h.lade = a;
         a = new e();
         a.h.name = "Orange Juice";
         a.h.identifier = "orange_juice";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "orange";
         b.h.orade = a;
         a = new e();
         a.h.name = "Apple Juice";
         a.h.identifier = "apple_juice";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 250;
         c.h.drink = !0;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "brown";
         b.h.apade = a;
         a = new e();
         a.h.name = "Hay Bale";
         a.h.identifier = "hay_bale";
         a.h.renderer = Td;
         a.h.tool = !1;
         c = new e();
         c.h.None = 5;
         a.h.mining = c;
         a.h.isMush = !0;
         a.h.flammable = !0;
         a.h.flamRate = 0.1;
         a.h.fuel = 10;
         a.h.placeable = !0;
         a.h.color = "yellow";
         b.h.hay = a;
         a = new e();
         a.h.name = "Melon Block";
         a.h.identifier = "melon_block";
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenAxe = 25;
         c.h.StoneAxe = 25;
         c.h.IronAxe = 15;
         c.h.GoldAxe = 15;
         c.h.None = 60;
         c.h.DiamondAxe = 7;
         a.h.mining = c;
         a.h.pistonDrop = !0;
         a.h.isWood = !0;
         a.h.placeable = !0;
         a.h.dropDifferent = "mels";
         a.h.endermenCanChange = !0;
         a.h.color = "green";
         b.h.mel = a;
         a = new e();
         a.h.name = "Pumpkin Seed";
         a.h.identifier = "pumpkin_seed";
         a.h.constructor = qe;
         a.h.renderer = re;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 6;
         a.h.associatedCropBlock = "pk";
         a.h.tool = !1;
         c = new e();
         c.h.None = 5;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.isMush = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "orange";
         b.h.pseed = a;
         a = new e();
         a.h.name = "Melon Seed";
         a.h.identifier = "melon_seed";
         a.h.constructor = qe;
         a.h.renderer = re;
         a.h.itemRenderer = X;
         a.h.maxGrowState = 6;
         a.h.associatedCropBlock = "mel";
         a.h.tool = !1;
         c = new e();
         c.h.None = 5;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.isMush = !0;
         a.h.placeable = !0;
         c = new e();
         c.h.farm = 1;
         a.h.placeOn = [c, [], []];
         a.h.color = "green";
         b.h.wseed = a;
         a = new e();
         a.h.name = "Melon";
         a.h.identifier = "melon";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 150;
         a.h.food = c;
         a.h.color = "red";
         b.h.mels = a;
         a = new e();
         a.h.name = "Glistering Melon";
         a.h.identifier = "glistering_melon";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.gmels = a;
         a = new e();
         a.h.name = "Spider Eye";
         a.h.identifier = "spider_eye";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.brewIngredient = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 100;
         d = new e();
         f = new e();
         f.h.change = 0.5;
         f.h.duration = 25;
         d.h.hunger = g.makeDynamicMap(f);
         c.h.effects = d;
         a.h.food = g.makeDynamicMap(c);
         a.h.color = "red";
         b.h.se = a;
         a = new e();
         a.h.name = "Fermented Spider Eye";
         a.h.identifier = "fermented_spider_eye";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.fse = a;
         a = new e();
         a.h.name = "Pumpkin Pie";
         a.h.identifier = "pumpkin_pie";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 400;
         a.h.food = c;
         a.h.color = "brown";
         b.h.pkp = a;
         a = new e();
         a.h.name = "Cooked Egg";
         a.h.identifier = "cooked_egg";
         a.h.tool = !1;
         a.h.usable = !0;
         a.h.timerToUse = 50;
         c = new e();
         c.h.hunger = 200;
         a.h.food = c;
         a.h.color = "white";
         b.h.cegg = a;
         a = new e();
         a.h.name = "Ender Chest";
         a.h.identifier = "ender_chest";
         a.h.constructor = Tf;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.IronPickaxe = 280;
         c.h.GoldPickaxe = 150;
         c.h.None = 460;
         c.h.StonePickaxe = 320;
         c.h.WoodenPickaxe = 400;
         c.h.DiamondPickaxe = 200;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.placeable = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.shiftClickBlock = !0;
         a.h.shiftClickSpectator = !0;
         a.h.color = "black";
         b.h.echest = a;
         a = new e();
         a.h.name = "Rabbit's Foot";
         a.h.identifier = "rabbits_foot";
         a.h.tool = !1;
         a.h.brewIngredient = !0;
         b.h.rfoot = a;
         a = new e();
         a.h.name = "Mob Head";
         a.h.identifier = "mob_head";
         a.h.renderer = se;
         a.h.tool = !1;
         c = new e();
         c.h.ObsidianPickaxe = 1;
         c.h.WoodenPickaxe = 5;
         c.h.StonePickaxe = 1;
         c.h.IronPickaxe = 1;
         c.h.GoldPickaxe = 1;
         c.h.None = 15;
         c.h.DiamondPickaxe = 1;
         a.h.mining = c;
         a.h.isStone = !0;
         a.h.halfBlock = !0;
         a.h.placeable = !0;
         a.h.shiftClickBlock = !0;
         a.h.color = "black";
         c = new e();
         c.h.type = "zombie";
         a.h.defaultItemExtra = c;
         b.h.mh = a;
         a = new e();
         a.h.name = "Fire";
         a.h.identifier = "fire";
         a.h.constructor = kd;
         a.h.renderer = Ac;
         a.h.tool = !1;
         c = new e();
         c.h.None = 1;
         a.h.mining = c;
         a.h.walkThroughBlock = !0;
         a.h.waterWalkThroughBlock = !0;
         a.h.walkThroughBlockHit = !0;
         a.h.dragonDontBreak = !0;
         a.h.replaceable = !0;
         a.h.placeable = !1;
         a.h.dropDifferent = "na";
         a.h.color = "orange";
         b.h.fire = a;
         q.blockData = b;
         q.generateIdentifierMap();
       };
       var Y = function () {
         this.x = this.y = null;
         this.firstTimes = !1;
       };
       r.BlockState = Y;
       Y.__name__ = "BlockState";
       Y.fromBlock = function (b, a, c) {
         var d = new Y();
         d.type = c.getFG(b, a);
         d.x = b;
         d.y = a;
         b = S.getID(b, a);
         d.states1 = c.states.h[b];
         d.states2 = c.states.h[b + "_2"];
         d.states3 = c.states.h[b + "_3"];
         d.firstTimes = c.firstTimes.h[b];
         d.chests = c.chests.h[b];
         d.toSmelt = c.toSmelt.h[b];
         d.toGrow = c.toGrow.h[b];
         d.water = c.water.h[b];
         d.wheat = c.wheat.h[b];
         d.toBrew = c.toBrew.h[b];
         d.signs = c.signs.h[b];
         d.hasSignal = c.hasSignal.h[b];
         return d;
       };
       Y.apply = function (b, a, c, d) {
         null == d && (d = new Y());
         b = S.getID(b, a);
         null != d.states1 ? (c.states.h[b] = d.states1) : ((a = c.states), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         if (null != d.states2) c.states.h[b + "_2"] = d.states2;
         else {
           a = c.states;
           var f = b + "_2";
           Object.prototype.hasOwnProperty.call(a.h, f) && delete a.h[f];
         }
         null != d.states3 ? (c.states.h[b + "_3"] = d.states3) : ((a = c.states), (f = b + "_3"), Object.prototype.hasOwnProperty.call(a.h, f) && delete a.h[f]);
         null != d.firstTimes ? (c.firstTimes.h[b] = d.firstTimes) : ((a = c.firstTimes), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.chests ? (c.chests.h[b] = d.chests) : ((a = c.chests), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.toSmelt ? (c.toSmelt.h[b] = d.toSmelt) : ((a = c.toSmelt), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.toGrow ? (c.toGrow.h[b] = d.toGrow) : ((a = c.toGrow), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.water ? (c.water.h[b] = d.water) : ((a = c.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.wheat ? (c.wheat.h[b] = d.wheat) : ((a = c.wheat), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.toBrew ? (c.toBrew.h[b] = d.toBrew) : ((a = c.toBrew), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.signs ? (c.signs.h[b] = d.signs) : ((a = c.signs), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         null != d.hasSignal ? (c.hasSignal.h[b] = d.hasSignal) : ((a = c.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
         return d;
       };
       Y.prototype = { __class__: Y };
       var ha = function (b, a) {
         this.y = 0;
         this.startCloud = !1;
         this.cloudCols = 0;
         this.cloudSize = 26;
         this.cloudCount = 0;
         this.clouds = [];
         this.game = b;
         this.world = a;
         var c = sa.getWhitePixel(),
           d = Fa.getShader(),
           f = new e(),
           l = w.repeatArray([1], 24);
         f.h.color = l;
         l = w.repeatArray([0], 24);
         f.h.colorOffset = l;
         this.entity = new da(c, null, d, f);
         this.entity.isTransparent = !0;
         this.entity.layer = -5;
         this.y = Math.floor(-a.worldHeight - 3.3333333333333335);
         if (1 == a.sceneNum)
           for (this.cloudCols = Math.ceil(b.scene.get_width() / this.cloudSize + 1), f = 0, b = this.cloudCols; f < b; )
             (c = f++),
               0 == ((Math.random() * (5 - 2 * a.raining)) | 0) && 1 != this.startCloud && (this.startCloud = !0),
               1 == this.startCloud &&
                 (0 != ((Math.random() * (5 + 3 * a.raining)) | 0) && this.appendCloud(c * this.cloudSize - this.cloudSize / 2, this.cloudSize),
                 1 < J.qual &&
                   (0 != ((Math.random() * (5 + 3 * a.raining)) | 0) && this.appendCloud(c * this.cloudSize - this.cloudSize / 2, 0),
                   0 != ((Math.random() * (5 + 3 * a.raining)) | 0) && this.appendCloud(c * this.cloudSize - this.cloudSize / 2, -this.cloudSize)),
                 1 == ((Math.random() * (10 + 3 * a.raining)) | 0) && (this.startCloud = !1));
       };
       r.Clouds = ha;
       ha.__name__ = "Clouds";
       ha.prototype = {
         appendCloud: function (b, a) {
           0.1 > Math.random()
             ? this.clouds.push({ x: b, y: a, alpha: 0, upTween: !0, alphaUp: !1, alphaDown: !1, rain: 0 < this.world.raining })
             : this.clouds.push({ x: b, y: a, alpha: 1, upTween: !1, alphaUp: !1, alphaDown: !1, rain: 0 < this.world.raining });
         },
         prependCloud: function (b, a) {
           0.1 > Math.random()
             ? this.clouds.unshift({ x: b, y: a, alpha: 0, upTween: !0, alphaUp: !1, alphaDown: !1, rain: 0 < this.world.raining })
             : this.clouds.unshift({ x: b, y: a, alpha: 1, upTween: !1, alphaUp: !1, alphaDown: !1, rain: 0 < this.world.raining });
         },
         update: function () {
           if (1 == this.world.sceneNum) {
             this.game.pawsed ||
               ((this.cloudCount += 0.5),
               this.cloudCount >= this.cloudSize &&
                 ((this.cloudCount = 0),
                 0 == ((Math.random() * (5 - 2 * this.world.raining)) | 0) && 0 == this.startCloud && (this.startCloud = !0),
                 1 == this.startCloud &&
                   (0 != ((Math.random() * (5 + 3 * this.world.raining)) | 0) && this.prependCloud(-this.cloudSize / 2, this.cloudSize),
                   1 < J.qual &&
                     (0 != ((Math.random() * (5 + 3 * this.world.raining)) | 0) && this.prependCloud(-this.cloudSize / 2, 0),
                     0 != ((Math.random() * (5 + 3 * this.world.raining)) | 0) && this.prependCloud(-this.cloudSize / 2, -this.cloudSize)),
                   1 == ((Math.random() * (10 + 3 * this.world.raining)) | 0) && (this.startCloud = !1))));
             var b = this.y > this.game.camera.y - this.game.scene.get_height() / 2 / this.game.zoom - this.cloudSize && this.y < this.game.camera.y + this.game.scene.get_height() / 2 / this.game.zoom + 2 * this.cloudSize;
             this.entity.clearPool(!0);
             for (var a = -1, c = 0, d = this.clouds.length; c < d; ) {
               var f = c++,
                 l = this.clouds[f];
               this.game.pawsed ||
                 ((l.x += 0.5),
                 1.6666666666666666e-4 > Math.random() && (l.upTween ? (l.alphaUp = !0) : (l.alphaDown = !0)),
                 l.alphaUp && (1 > l.alpha ? (l.alpha += 0.01) : ((l.alphaUp = !1), (l.upTween = !1))),
                 l.alphaDown && (0 < l.alpha ? (l.alpha -= 0.01) : ((l.alphaDown = !1), (l.upTween = !0))));
               0 < this.world.raining && (l.rain = !0);
               if (l.x >= this.game.scene.get_width() + this.cloudSize) -1 == a && (a = f);
               else if (b) {
                 f = this.entity;
                 var k = new M((l.x - this.cloudSize / 2) / 30, (l.y - this.cloudSize / 2) / 30),
                   C = new h(1, 1),
                   g = new h(this.cloudSize / 30, this.cloudSize / 30),
                   Ba = new e();
                 l = w.repeatArray([l.rain ? 0 : 1, l.rain ? 0 : 1, l.rain ? 0 : 1, 0.2 * l.alpha], 6);
                 Ba.h.color = l;
                 f.addQuad(k, null, C, !0, g, null, null, Ba);
               }
             }
             -1 < a && this.clouds.splice(a, this.clouds.length - a);
             b &&
               (this.entity.transform
                 .reset()
                 .translate(0, Math.floor((this.y - this.game.camera.y) * this.game.zoom) / this.game.zoom)
                 .scale(this.game.zoom, this.game.zoom, this.game.zoom)
                 .translate(0, this.game.scene.get_height() / 2),
               this.game.scene.draw(this.entity));
           }
         },
         __class__: ha,
       };
       var V = function () {};
       r.Colors = V;
       V.__name__ = "Colors";
       var za = function (b, a) {
         this.messageHeight = 15;
         this.messages = [];
         this.lastMessage = 0;
         this.game = b;
         this.world = a;
         b = sa.getWhitePixel();
         a = Fa.getShader();
         var c = new e(),
           d = w.repeatArray([1], 24);
         c.h.color = d;
         d = w.repeatArray([0], 24);
         c.h.colorOffset = d;
         this.entity = new da(b, null, a, c);
         this.entity.isTransparent = !0;
         this.entity.layer = 7;
       };
       r.Console = za;
       za.__name__ = "Console";
       za.prototype = {
         newLine: function (b) {
           this.lastMessage++;
           for (var a = 0, c = this.messages; a < c.length; ) c[a++].y -= this.messageHeight;
           this.messages.unshift({ text: b, y: 0, timer: 0, alpha: 1 });
         },
         clearAll: function () {
           this.messages = [];
         },
         update: function (b) {
           null == b && (b = !0);
           this.entity.clearPool(!0);
           for (var a = -1, c = 0, d = this.messages.length; c < d; ) {
             var f = c++,
               l = this.messages[f];
             if (!this.game.pawsed && (l.timer++, 400 < l.timer || -105 > l.y) && ((l.alpha -= 0.025), 0 >= l.alpha)) {
               -1 == a && (a = f);
               continue;
             }
             if (b) {
               var k = this.entity,
                 C = new M(0, l.y),
                 g = new h(1, 1),
                 Ba = new h(this.game.scene.get_width() - 50, this.messageHeight),
                 A = new e(),
                 m = w.repeatArray([0, 0, 0, 0.3 * l.alpha], 6);
               A.h.color = m;
               k.addQuad(C, null, g, !0, Ba, null, null, A);
               f = R.get("console" + f, l.text, new h(28, this.game.scene.get_height() - 118 + l.y), x.get_basis33(), new F(16777216 * Math.floor(255 * l.alpha) + 16777215), 1);
               f.layer = 8;
               f.isTransparent = !0;
               this.game.scene.draw(f);
             }
           }
           -1 < a && this.messages.splice(a, this.messages.length - a);
           b && (this.entity.transform.reset().translate(25, this.game.scene.get_height() - 118), this.game.scene.draw(this.entity));
         },
         __class__: za,
       };
       var Ra = function (b, a) {
         this.r = new RegExp(b, a.split("u").join(""));
       };
       r.EReg = Ra;
       Ra.__name__ = "EReg";
       Ra.prototype = {
         match: function (b) {
           this.r.global && (this.r.lastIndex = 0);
           this.r.m = this.r.exec(b);
           this.r.s = b;
           return null != this.r.m;
         },
         split: function (b) {
           return b.replace(this.r, "#__delim__#").split("#__delim__#");
         },
         __class__: Ra,
       };
       var Ca = function (b, a, c) {
         this.id = b;
         this.entity = a;
         this.entityScale = c;
       };
       r.EntityPool = Ca;
       Ca.__name__ = "EntityPool";
       Ca.prototype = { __class__: Ca };
       var x = function () {};
       r.Fonts = x;
       x.__name__ = "Fonts";
       x.get_volter = function () {
         null == x.volter &&
           (x.volter = new Uf(
             P.getImage("font_volter"),
             "33333333\n53332333\n23333313\n334\n33333433\n76471333\n34343313\n33\n36333333\n33\n37121152\n35524335\n54411667\n56644316\n1\n\n33333313\n13333335\n55553333\n33133333\n3\n33333313\n33333777\n66333333\n11333333",
             "ABCDEFGH\nIJKLMNOP\nQRSTUVWX\nYZ \nabcdefgh\nijklmnop\nqrstuvwx\nyz\n01234567\n89\n~!@#$%^&\n*()_-+=[\n]{}|\\;:'\n\",.<>?/`\n\u2122\n\n\u00c4\u00c1\u00c0\u00c3\u00c2\u00c5\u00c6\u00c7\n\u0152\u00df\u00cb\u00c9\u00c8\u1ebc\u00ca\u00cf\n\u00cd\u00cc\u0128\u00ce\u00d1\u00d6\u00d3\u00d2\n\u00d5\u00d4\u00d8\u00dc\u00da\u00d9\u0168\u00db\n\u0178\n\u00e4\u00e1\u00e0\u00e3\u00e2\u00e5\u00e6\u00e7\n\u00eb\u00e9\u00e8\u1ebd\u00ea\u00ef\u00ed\u00ec\n\u0129\u00ee\u00f1\u00f6\u00f3\u00f2\u00f5\u00f4\n\u00f8\u0153\u00fc\u00fa\u00f9\u0169\u00fb\u00ff",
             32
           ));
         return x.volter;
       };
       x.get_basis33 = function () {
         null == x.basis33 &&
           (x.basis33 = new Uf(
             P.getImage("font_basis33"),
             "11111111\n11111111\n11111111\n111\n11111111\n11111111\n11111111\n11\n11111111\n11\n11111111\n11111111\n11111111\n11111111\n\n\n11111111\n11111111\n11111111\n11111111\n1\n11111111\n11111111\n11111111\n11111111",
             "ABCDEFGH\nIJKLMNOP\nQRSTUVWX\nYZ \nabcdefgh\nijklmnop\nqrstuvwx\nyz\n01234567\n89\n~!@#$%^&\n*()_-+=[\n]{}|\\;:'\n\",.<>?/`\n\n\n\u00c4\u00c1\u00c0\u00c3\u00c2\u00c5\u00c6\u00c7\n\u0152\u00df\u00cb\u00c9\u00c8\u1ebc\u00ca\u00cf\n\u00cd\u00cc\u0128\u00ce\u00d1\u00d6\u00d3\u00d2\n\u00d5\u00d4\u00d8\u00dc\u00da\u00d9\u0168\u00db\n\u0178\n\u00e4\u00e1\u00e0\u00e3\u00e2\u00e5\u00e6\u00e7\n\u00eb\u00e9\u00e8\u1ebd\u00ea\u00ef\u00ed\u00ec\n\u0129\u00ee\u00f1\u00f6\u00f3\u00f2\u00f5\u00f4\n\u00f8\u0153\u00fc\u00fa\u00f9\u0169\u00fb\u00ff",
             32
           ));
         return x.basis33;
       };
       var g = function (b, a, c, d, f, l, k, C) {
         null == C && (C = !1);
         null == k && (k = !1);
         null == l && (l = 1);
         null == f && (f = !0);
         null == c && (c = !1);
         this.mouseWheelThing = !1;
         this.lastMouseDown = this.lastRightMouseDown = 0;
         this.treatingClickAsRightClick = this.isDoubleClick = this.isDoubleRightClick = !1;
         this.mouseD = this.rMouseD = 0;
         this.bgPlaying = this.shifting = !1;
         this.bgFrame = 0;
         this.loadedSkinFrames = new e();
         this.skinLoadingCallbacks = new e();
         this.portalling = !1;
         this.endOfFrameTasks = [];
         this.lastAirBarBubble = this.popLastAirBarBubble = 0;
         this.wasMouseOverInventoryButton = !1;
         this.hotbarSlots = [];
         this.touchPad1Pressed = this.touchPad2Pressed = this.touchPad3Pressed = this.touchPad4Pressed = this.touchButtonPressed1 = this.touchButtonPressed2 = this.touchButtonPressed3 = !1;
         this.touchButtonPosition3 = new h();
         this.touchButtonPosition2 = new h();
         this.touchButtonPosition1 = new h();
         this.touchPadPosition = new h();
         this.touchScale = 1;
         this.touchControlsMatrix = new T();
         this.inventoryButtonBounds = new t();
         this.hotbarBounds = new t();
         this.enchantBookTypesList = "Caps Shirts Pants Shoes Pickaxes Axes Shovels Swords FishingRods Bows".split(" ");
         this.effectData = new e();
         this.potionData = new e();
         this.itemMessageText = "";
         this.itemMessageCountdown = 0;
         this.currentlyMiningBlock = [-1e3, -1e3];
         this.currentlyMining = "";
         this.ranWorldLogicOnce = !1;
         this.renamedBalloons = new e();
         this.animate = 1;
         this.armorOffsets = [
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
         ];
         this.characterArmorRenderers = [];
         this.charColor = [];
         this.characterColorTransform = [1, 1, 1, 1, 0, 0, 0, 0];
         this.characterSkinVisible = !0;
         this.characterRotation = this.characterFrameTimer = this.characterFrameNumber = this.characterWalkAnimation = 0;
         this.characterCurrentFrame = this.characterXScale = 1;
         this.characterMatrix = new T();
         this.characterQuad = 0;
         this.blockAtFeet = this.blockAtLegs = this.blockAtHead = this.standingOn1 = this.standingOn2 = "";
         this.blockX = this.blockY = 0;
         this.wasSprinting = !1;
         this.leftSprinting = this.rightSprinting = 0;
         this.doThunder = this.keysX = !1;
         this.bowDrawbackBowQuad = this.bowDrawbackX = this.bowDrawbackY = 0;
         this.bowDrawbackFrame = "1";
         this.interactLock = 0;
         this.isShiftClickAndContinue = this.waitTillMouseIsUp = this.waitTillRightMouseIsUp = this.stopMiningAnimation = !1;
         this.screenTilter = 0;
         this.playingRainSound = !1;
         this.startUnderwaterTimer = 0;
         this.miningAnimation = !1;
         this.transformMobs = new e();
         this.upKey = this.sneaking = !1;
         this.jumpTimer = this.visibility = this.rainVol = this.rainPan = this.airTimer = 0;
         this.eatingAnimation = this.bowAnimation = !1;
         this.itemUseAnimationSelectedItemType = "";
         this.itemUseAnimationTimer = this.itemUseAnimationSelectedItem = -1;
         this.generateEnder = this.generateNether = this.finishedNether = this.inRoom = this.snowyRegion = !1;
         this.ngMedalsUnlocked = new e();
         this.gCMTimer = 15;
         this.rotAngle = 0;
         this.soundCarousel = new e();
         this.hudToggle = !0;
         this.signLastShowed = !1;
         this.signAlpha = 0;
         this.signText = "";
         this.bossBarFrame = 1;
         this.achievementMessage = "";
         this.achievementsEntityFrame = 1;
         this.effectIconLabels = "poison slowness speed weakness nightvision regeneration hunger invisibility jumpboost strength fireresistance waterbreathing".split(" ");
         this.loadedEffectIcons = new e();
         this.effectIcons = [];
         this.hurtAnimation = this.takeScreenshot = this.mouseCaptured = !1;
         this.timeUntilNextBiome = this.deepness = 0;
         this.noWater = !0;
         this.atHeight = 58;
         this.lastWorldHeight = this.slope = this.currentY = this.currentX = 0;
         this.oddStoneFrequency = this.topazFrequency = this.reach = 4;
         this.goldFrequency = 3;
         this.diamondFrequency = 2;
         this.gravelFrequency = 1;
         this.redstoneFrequency = 5;
         this.coalIronFrequency = 15;
         this.placeDelay = this.distanceX = 0;
         this.closeRains = [[0, 0]];
         this.caves = [];
         this.cantMove = !1;
         this.liquids = ["wr", "la", "ad"];
         this.canReach = !1;
         this.selectedBlockPoint = new h();
         this.lastSelectedBlock = new h();
         this.mouseWorldPosition = new h();
         this.particles = new e();
         this.entityPools = new e();
         this.renderChunks = new e();
         this.musicCountdown = 0;
         this.ENDING = null;
         this.sessionDeaths = 0;
         this.timeDarkness = [
           0.3,
           0.2,
           0.1,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0.1,
           0.2,
           0.3,
           0.4,
           0.5,
           0.6,
           0.6,
           0.6,
           0.6,
           0.6,
           0.6,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.7,
           0.6,
           0.6,
           0.6,
           0.6,
           0.6,
           0.6,
           0.5,
           0.4,
         ];
         this.darkness = 0;
         this.zoom = 30;
         this.camera = new h(500, -120);
         this.saveWarning = 0;
         this.defeatedEnder = this.firstTime = !1;
         this.generatingWorld = 0;
         this.pawsed = this.showPauseScreenOnNextFrame = this.making = !1;
         this.world = b;
         b.player.game = this;
         this.scene = a;
         this.blockSelector = new ma([], ba.createQuad(1, 1), Na.getShader());
         Na.setupEntity(this.blockSelector, y.blockTextures, y.getTexture("select", "far"));
         this.blockSelector.isTransparent = !0;
         this.blockSelector.layer = -2;
         this.miningCracks = new ma([], ba.createQuad(1, 1), Na.getShader());
         Na.setupEntity(this.miningCracks, y.blockTextures, y.getTexture("break", "4"));
         this.miningCracks.isTransparent = !0;
         this.miningCracks.layer = -2;
         P.getImage("reticle").set_premultiplied(!1);
         this.reticlePlus = new ma([], ba.createQuad(12, 12), Na.getShader());
         Na.setupEntity(this.reticlePlus, P.getImage("reticle"), new t(0, 0, 12, 12));
         this.reticlePlus.isTransparent = !0;
         this.reticleLine = new ma([], ba.createQuad(50, 4), Na.getShader());
         Na.setupEntity(this.reticleLine, P.getImage("reticle"), new t(12, 4, 50, 4));
         this.reticleLine.isTransparent = !0;
         this.vectorRenderer = new Vf(a.get_width(), a.get_height(), 0);
         this.vectorEntity = new ma([], ba.createQuad(), Na.getShader());
         Na.setupEntity(this.vectorEntity, this.vectorRenderer);
         this.vectorEntity.transform.reset().translate(0.5, 0.5).scale(a.get_width(), a.get_height());
         this.vectorEntity.isTransparent = !0;
         this.vectorEntity.layer = -1;
         a = Ab.getShader();
         var g = new e(),
           Ba = w.repeatArray([1], 24);
         g.h.colori = Ba;
         Ba = w.repeatArray([1, 1, 1, 0], 6);
         g.h.coloro = Ba;
         Ba = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
         g.h.position = Ba;
         this.worldGradientEntity = new da(null, null, a, g);
         this.worldGradientEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.worldGradientEntity.isTransparent = !0;
         this.worldGradientEntity.layer = 3;
         this.lighting = new Ob(this);
         this.clouds = new ha(this, b);
         this.console = new za(this, b);
         a = y.blockTextures;
         var A = Fa.getShader(xa.NORMAL);
         g = new e();
         Ba = w.repeatArray([1], 24);
         g.h.color = Ba;
         Ba = w.repeatArray([0], 24);
         g.h.colorOffset = Ba;
         this.particleEntity = new da(a, null, A, g);
         this.particleEntity.isTransparent = !0;
         this.particleEntity.layer = 0;
         this.spawnskinTextureManager = new ec(this);
         this.initSky();
         this.initEffects();
         this.initPotionData();
         this.resetEffectIcons();
         this.generateRecipes();
         this.loadWorld = !c;
         this.generateItemNumberTexture();
         this.inventario = new Wa(this, b);
         this.blackScreen = new lc(this);
         this.musicCountdown = (m.Instance.get_fps() * (120 * Math.random() + 240)) | 0;
         this.resize();
         c && ((this.firstTime = !0), this.initializeWorldGen(d, f, l, k, C));
         null != window.gameplayStart && window.gameplayStart();
       };
       r.Game = g;
       g.__name__ = "Game";
       g.emptyItem = function () {
         return ["air", 0, 0, g.makeDynamicMap(new e())];
       };
       g.item = function (b, a, c, d) {
         null == c && (c = 0);
         null == a && (a = 1);
         null == d && (d = new e());
         return g.makeDynamicArray([b, a, c, d]);
       };
       g.migrateDampening = function (b) {
         return Math.sqrt(b);
       };
       g.migrateAcc = function (b, a) {
         return b / 2 / (1 + Math.sqrt(a));
       };
       g.migrateSpeed = function (b) {
         return b / 2;
       };
       g.angleBetweenVectors = function (b, a) {
         b.normalize();
         a.normalize();
         return Math.acos(b.x * a.x + b.y * a.y);
       };
       g.parseCommandObject = function (b) {
         for (var a = new e(), c = "start", d = "", f = "", l = ["{"], k = [a], C = 0, g = 0; g < b.length; ) {
           var h = I.substr(b, g, 1);
           if ("start" == c) {
             if (" " == h) {
               ++g;
               continue;
             }
             if ("{" != h) return [-1, "invalid object"];
             c = "name";
           } else if ("name" == c)
             if (0 == d.length)
               if (" " == h) {
                 ++g;
                 continue;
               } else if ("}" == h)
                 if ((l.pop(), k.pop(), 0 == l.length)) {
                   C = g;
                   break;
                 } else "[" == l[l.length - 1] ? (c = "array") : "{" == l[l.length - 1] && (c = "object");
               else {
                 if (-1 == "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".indexOf(h)) return [-1, "name can not start with '" + h + "'"];
                 d += h;
               }
             else if (" " == h) (c = "colon"), (f = d), (d = "");
             else if (":" == h) (c = "value type"), (f = d), (d = "");
             else {
               if (-1 == "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_".indexOf(h)) return [-1, "unexpected '" + h + "' in name"];
               d += h;
             }
           else if ("colon" == c)
             if (" " == h) {
               ++g;
               continue;
             } else if (":" == h) c = "value type";
             else return [-1, "expected colon"];
           else if ("number" == c)
             if (" " == h) "[" == l[l.length - 1] ? (k[k.length - 1].push(parseFloat(d)), (d = ""), (c = "array")) : ((c = H.__cast(k[k.length - 1], e)), (d = parseFloat(d)), (c.h[f] = d), (d = ""), (c = "object"));
             else if ("," == h) "[" == l[l.length - 1] ? (k[k.length - 1].push(parseFloat(d)), (d = ""), (c = "value")) : ((c = H.__cast(k[k.length - 1], e)), (d = parseFloat(d)), (c.h[f] = d), (d = ""), (c = "name"));
             else if ("]" == h)
               if ("[" == l[l.length - 1]) k[k.length - 1].push(parseFloat(d)), (d = ""), l.pop(), k.pop(), "[" == l[l.length - 1] ? (c = "array") : "{" == l[l.length - 1] && (c = "object");
               else return [-1, "unexpected ] in number"];
             else if ("}" == h)
               if ("{" == l[l.length - 1])
                 if (((h = H.__cast(k[k.length - 1], e)), (d = parseFloat(d)), (h.h[f] = d), (d = ""), l.pop(), k.pop(), 0 == l.length)) {
                   C = g;
                   break;
                 } else "[" == l[l.length - 1] ? (c = "array") : "{" == l[l.length - 1] && (c = "object");
               else return [-1, "unexpected } in number"];
             else if (-1 != "0123456789".indexOf(h)) d += h;
             else if ("." == h) d += h;
             else return [-1, "unexpected '" + h + "' in number"];
           else if ("value type" == c)
             if (" " == h) {
               ++g;
               continue;
             } else if ("'" == h) c = "string'";
             else if ('"' == h) c = 'string"';
             else if ("t" == h.toLowerCase())
               if ("true" == I.substr(b, g, 4).toLowerCase()) "[" == l[l.length - 1] ? (k[k.length - 1].push(!0), (c = "array")) : ((H.__cast(k[k.length - 1], e).h[f] = !0), (c = "object")), (g += 3);
               else return [-1, "unexpected '" + h + "'"];
             else if ("f" == h.toLowerCase())
               if ("false" == I.substr(b, g, 5).toLowerCase()) "[" == l[l.length - 1] ? (k[k.length - 1].push(!1), (c = "array")) : ((H.__cast(k[k.length - 1], e).h[f] = !1), (c = "object")), (g += 4);
               else return [-1, "unexpected '" + h + "'"];
             else if (-1 != "0123456789".indexOf(h) || "-" == h) (d = h), (c = "number");
             else if ("[" == h) (H.__cast(k[k.length - 1], e).h[f] = []), k.push(H.__cast(k[k.length - 1], e).h[f]), l.push("["), (c = "value");
             else if ("{" == h) (H.__cast(k[k.length - 1], e).h[f] = new e()), k.push(H.__cast(k[k.length - 1], e).h[f]), l.push("{"), (c = "name");
             else return [-1, "expected ', \", [, or {, or number"];
           else if ("value" == c)
             if (" " == h) {
               ++g;
               continue;
             } else if ("'" == h) c = "string'";
             else if ('"' == h) c = 'string"';
             else if ("t" == h.toLowerCase())
               if ("true" == I.substr(b, g, 4).toLowerCase()) k[k.length - 1].push(!0), (c = "array"), (g += 3);
               else return [-1, "unexpected '" + h + "'"];
             else if ("f" == h.toLowerCase())
               if ("false" == I.substr(b, g, 5).toLowerCase()) k[k.length - 1].push(!1), (c = "array"), (g += 4);
               else return [-1, "unexpected '" + h + "'"];
             else if ("[" == h)
               "[" == l[l.length - 1] ? (k[k.length - 1].push([]), k.push(H.__cast(k[k.length - 1], Array)[(k[k.length - 1].length - 1) | 0])) : ((H.__cast(k[k.length - 1], e).h[f] = []), k.push(H.__cast(k[k.length - 1], e).h[f])),
                 l.push("["),
                 (c = "value");
             else if ("{" == h)
               "[" == l[l.length - 1] ? (k[k.length - 1].push(new e()), k.push(H.__cast(k[k.length - 1], Array)[(k[k.length - 1].length - 1) | 0])) : ((H.__cast(k[k.length - 1], e).h[f] = new e()), k.push(H.__cast(k[k.length - 1], e).h[f])),
                 l.push("{"),
                 (c = "name");
             else if (-1 != "0123456789".indexOf(h) || "-" == h) (d = h), (c = "number");
             else return [-1, "expected ', \", or number"];
           else if ("object" == c)
             if (" " == h) {
               ++g;
               continue;
             } else if ("," == h) c = "name";
             else if ("}" == h) l.pop(), k.pop(), 0 == l.length ? ((C = g), (g = b.length)) : "[" == l[l.length - 1] ? (c = "array") : "{" == l[l.length - 1] && (c = "object");
             else return [-1, "expected , or }"];
           else if ("array" == c)
             if (" " == h) {
               ++g;
               continue;
             } else if ("," == h) c = "value";
             else if ("]" == h) l.pop(), k.pop(), "[" == l[l.length - 1] ? (c = "array") : "{" == l[l.length - 1] && (c = "object");
             else return [-1, "expected , or ]"];
           else if ("string'" == c) {
             h = "nothing";
             var A = b.length - 1;
             0 < b.indexOf("'", g) && b.indexOf("'", g) < A && ("\\" == I.substr(b, b.indexOf("'", g) - 1, 1) ? ((h = "\\'"), (A = b.indexOf("\\'", g))) : ((h = "'"), (A = b.indexOf("'", g))));
             0 < b.indexOf('\\"', g) && b.indexOf('\\"', g) < A && ((h = '\\"'), (A = b.indexOf('\\"', g)));
             0 < b.indexOf("\\\\", g) && b.indexOf("\\\\", g) < A && ((h = "\\\\"), (A = b.indexOf("\\\\", g)));
             "'" == h
               ? ((d += I.substr(b, g, (A - g) | 0)), (g = A), "[" == l[l.length - 1] ? (k[k.length - 1].push(d), (d = ""), (c = "array")) : ((H.__cast(k[k.length - 1], e).h[f] = d), (d = ""), (c = "object")))
               : "\\'" == h
               ? ((d += I.substr(b, g, (A - g) | 0) + "'"), (g = A + 1))
               : '\\"' == h
               ? ((d += I.substr(b, g, (A - g) | 0) + '"'), (g = A + 1))
               : "\\\\" == h && ((d += I.substr(b, g, (A - g) | 0) + "\\"), (g = A + 1));
           } else
             'string"' == c &&
               ((h = "nothing"),
               (A = b.length - 1),
               0 < b.indexOf('"', g) && b.indexOf('"', g) < A && ("\\" == I.substr(b, b.indexOf('"', g) - 1, 1) ? ((h = '\\"'), (A = b.indexOf('\\"', g))) : ((h = '"'), (A = b.indexOf('"', g)))),
               0 < b.indexOf("\\'", g) && b.indexOf("\\'", g) < A && ((h = "\\'"), (A = b.indexOf("\\'", g))),
               0 < b.indexOf("\\\\", g) && b.indexOf("\\\\", g) < A && ((h = "\\\\"), (A = b.indexOf("\\\\", g))),
               '"' == h
                 ? ((d += I.substr(b, g, (A - g) | 0)), (g = A), "[" == l[l.length - 1] ? (k[k.length - 1].push(d), (d = ""), (c = "array")) : ((H.__cast(k[k.length - 1], e).h[f] = d), (d = ""), (c = "object")))
                 : '\\"' == h
                 ? ((d += I.substr(b, g, (A - g) | 0) + '"'), (g = A + 1))
                 : "\\'" == h
                 ? ((d += I.substr(b, g, (A - g) | 0) + "'"), (g = A + 1))
                 : "\\\\" == h && ((d += I.substr(b, g, (A - g) | 0) + "\\"), (g = A + 1)));
           ++g;
         }
         return 0 < l.length ? ("[" == l[l.length - 1] ? [-1, "unbalanced [ at end"] : [-1, "unbalanced { at end"]) : [C + 1, a];
       };
       g.makeDynamicMap = function (b) {
         return b;
       };
       g.makeDynamicArray = function (b) {
         return b;
       };
       g.makeArrayOfDynamicMaps = function (b) {
         return b;
       };
       g.prototype = {
         stringToSeed: function (b) {
           var a = parseFloat(b);
           if (isNaN(a)) {
             for (var c = (a = 0), d = b.length; c < d; ) {
               var f = c++;
               a += I.cca(b, f) * (f + 1);
             }
             return a;
           }
           return Math.floor(parseFloat(b));
         },
         getRandom: function () {
           this.seed = w.modulus(9301 * this.seed + 49297, 233280);
           return this.seed / 233280;
         },
         randomNumber: function (b, a) {
           return Math.floor(b + (a - b + 1) * this.getRandom());
         },
         getDifficultyNumber: function () {
           return "peaceful" == this.world.difficulty ? 0 : "easy" == this.world.difficulty ? 1 : "normal" == this.world.difficulty ? 2 : "hard" == this.world.difficulty ? 3 : 2;
         },
         initializeWorldGen: function (b, a, c, d, f) {
           null == f && (f = !1);
           null == d && (d = !1);
           null == c && (c = 1);
           null == a && (a = !0);
           null == b && (b = E.string(Math.floor(1e6 * Math.random())));
           this.seed = this.stringToSeed(b);
           1 == this.world.sceneNum && ((this.world.seedNum = null == b ? "null" : "" + b), (this.world.seed = this.seed));
           b = 0;
           for (var l = this.world.worldWidth + 5 + 1; b < l; ) this.world.scene[b++] = [];
           1 == this.randomNumber(0, 3)
             ? (this.biome = g.biomes[0])
             : 1 == this.randomNumber(0, 3)
             ? (this.biome = g.biomes[1])
             : 1 == this.randomNumber(0, 2)
             ? (this.biome = g.biomes[2])
             : 1 == this.randomNumber(0, 2)
             ? (this.biome = g.biomes[3])
             : 1 == this.randomNumber(0, 2)
             ? (this.biome = g.biomes[4])
             : 1 == this.randomNumber(0, 2)
             ? (this.biome = g.biomes[5])
             : 1 != this.randomNumber(0, 3)
             ? (this.biome = g.biomes[0])
             : (this.biome = g.biomes[6]);
           this.noWater = !0;
           this.timeUntilNextBiome = Math.floor(40 + this.randomNumber(0, 20));
           1 == this.world.sceneNum &&
             ((this.bonusChest = f),
             (this.world.cheats = a),
             (this.world.gameRules = new e()),
             (this.world.gamemode = c),
             (this.world.fly = !1),
             (this.world.hardcore = d),
             (this.world.difficulty = this.world.hardcore ? "hard" : "normal"),
             (this.defeatedEnder = !1));
           this.making = !1;
           this.generatingWorld = 1;
           this.lastWorldHeight = Math.floor(this.randomNumber(0, 9) + Math.round(0.8 * this.world.worldHeight) - 10);
           this.slope = Math.floor(this.randomNumber(0, 2) - 1);
           this.currentY = Math.floor(this.lastWorldHeight);
           this.currentX = 0;
           this.atHeight = 58;
         },
         run: function () {
           this.pawsed || this.vectorRenderer.clear();
           if (0 < this.endOfFrameTasks.length) {
             for (var b = 0, a = this.endOfFrameTasks; b < a.length; ) a[b++]();
             this.endOfFrameTasks = [];
           }
           if (this.world.loadingWorld) (this.blackScreen.statis = "Loading world..."), (this.blackScreen.loadingBar = 1), this.blackScreen.gotoAndStop(2), this.blackScreen.run();
           else if (0 != this.generatingWorld || this.making || this.generateEnder || this.generateNether) this.ef2(), this.blackScreen.gotoAndStop(2), this.blackScreen.run();
           else {
             2 == this.blackScreen.currentFrame && this.blackScreen.gotoAndStop(1);
             this.mouseCaptured = this.isMouseOverUI();
             this.inGame();
             0.033 >= this.zoom && (this.zoom = 0.033);
             this.renderPlayer();
             this.renderSky();
             this.renderWorld();
             b = this.entityPools.h;
             a = Object.keys(b);
             for (var c = a.length, d = 0; d < c; ) {
               var f = b[a[d++]];
               0 < f.entity.numQuads &&
                 (f.entity.transform
                   .reset()
                   .scale2D(f.entityScale)
                   .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
                   .scale2D(this.zoom)
                   .translate(this.scene.get_width() / 2, this.scene.get_height() / 2),
                 this.scene.draw(f.entity));
             }
             this.runParticles();
             this.scene.draw(this.vectorEntity);
             this.worldGradientEntity.transform
               .reset()
               .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
               .scale(this.zoom, this.zoom, this.zoom)
               .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
             this.scene.draw(this.worldGradientEntity);
             this.mouseWorldPosition.set((m.Instance.mouse.x - this.scene.get_width() / 2) / this.zoom + this.camera.x, (m.Instance.mouse.y - this.scene.get_height() / 2) / this.zoom + this.camera.y);
             this.pawsed || (this.lastSelectedBlock.set(this.selectedBlockPoint.x, this.selectedBlockPoint.y), this.selectedBlockPoint.set(Math.floor(this.mouseWorldPosition.x), Math.floor(-this.mouseWorldPosition.y)));
             this.renderSelector();
             this.renderReticle();
             b = !1;
             this.selectedBlockPoint.x != this.lastSelectedBlock.x || this.selectedBlockPoint.y != this.lastSelectedBlock.y
               ? (null != this.world.getBlock(this.lastSelectedBlock.x, this.lastSelectedBlock.y) && this.world.getBlock(this.lastSelectedBlock.x, this.lastSelectedBlock.y).mouseOutEvent(),
                 (this.canReach = w.distance(this.blockX - this.selectedBlockPoint.x, this.blockY + 1 - this.selectedBlockPoint.y) <= this.reach + 1) &&
                   null != this.world.getBlock(this.selectedBlockPoint.x, this.selectedBlockPoint.y) &&
                   this.world.getBlock(this.selectedBlockPoint.x, this.selectedBlockPoint.y).mouseOverEvent(),
                 (b = !0))
               : w.distance(this.blockX - this.selectedBlockPoint.x, this.blockY + 1 - this.selectedBlockPoint.y) <= this.reach + 1 != this.canReach &&
                 ((this.canReach = w.distance(this.blockX - this.selectedBlockPoint.x, this.blockY + 1 - this.selectedBlockPoint.y) <= this.reach + 1),
                 null != this.world.getBlock(this.selectedBlockPoint.x, this.selectedBlockPoint.y) &&
                   (this.canReach ? this.world.getBlock(this.selectedBlockPoint.x, this.selectedBlockPoint.y).mouseOverEvent() : this.world.getBlock(this.selectedBlockPoint.x, this.selectedBlockPoint.y).mouseOutEvent()),
                 (b = !0));
             b && (this.canReach ? this.blockSelector.setUniform("texClip", y.getTexture("select", "break").toArray()) : this.blockSelector.setUniform("texClip", y.getTexture("select", "far").toArray()));
             this.lighting.update();
             this.clouds.update();
             this.renderVignette();
             this.console.update(this.hudToggle);
             this.hudToggle && (this.renderHUD(), m.Instance.volumeAndClose(), this.renderAchievementMessage(), this.renderEffectIcons(), this.renderBossBar());
             this.renderSign();
             this.inventario.update();
             0 == this.pawsed && this.takeScreenshot && ((this.takeScreenshot = !1), this.scene.render(), (this.pawsed = !0), this.blackScreen.setScreenshot(this.scene.get_image()), this.blackScreen.gotoAndStop(7));
             this.blackScreen.run();
             this.showPauseScreenOnNextFrame && ((this.showPauseScreenOnNextFrame = !1), 1 == this.blackScreen.currentFrame && this.pawsed && this.blackScreen.gotoAndStop(3));
           }
         },
         initEffectsIcons: function () {
           this.effectIconsEntity = new da(P.getImage("effects"));
           this.effectIconsEntity.layer = 12;
           this.effectIconsEntity.transform.reset();
           this.effectIconsEntity.isTransparent = !0;
         },
         resetEffectIcons: function () {
           null == this.effectIconsEntity && this.initEffectsIcons();
           this.effectIconsEntity.clearPool();
           this.loadedEffectIcons = new e();
           this.effectIcons = [];
           for (var b = Object.keys(this.world.effects.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             if (!Object.prototype.hasOwnProperty.call(this.loadedEffectIcons.h, d) && 1 == this.world.effects.h[d].h.showIcon) {
               this.loadedEffectIcons.h[d] = this.effectIcons.length;
               var f = new e();
               f.h.type = d;
               f.h.duration = this.world.effects.h[d].h.duration;
               this.effectIcons.push(g.makeDynamicMap(f));
             }
           }
           this.effectIcons.sort(function (a, b) {
             return b.h.duration - a.h.duration;
           });
           f = 0;
           for (b = this.effectIcons.length; f < b; ) {
             var l = f++;
             this.effectIconsEntity.addQuad(new M(this.scene.get_width() - 73 - 28 * l - 12, 3), new h(0, 48), new h(24, 24));
             a = this.effectIconsEntity;
             c = this.scene.get_width() - 73 - 28 * l - 8;
             d = (this.effectIconLabels.indexOf(this.effectIcons[l].h.type) % 4) * 16;
             l = 16 * Math.floor(this.effectIconLabels.indexOf(this.effectIcons[l].h.type) / 4);
             a.addQuad(new M(c, 7), new h(d, l), new h(16, 16));
           }
           this.effectIconsEntity.resetUnusedQuads();
         },
         initBottomTooltip: function () {
           if (null == this.bottomTooltipEntity) {
             var b = P.getImage("ui"),
               a = Fa.getShader(),
               c = new e(),
               d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.bottomTooltipEntity = new da(b, null, a, c);
             this.bottomTooltipEntity.isTransparent = !0;
             this.bottomTooltipEntity.layer = 30;
             this.bottomTooltipEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
           }
         },
         renderEffectIcons: function () {
           if (1 == this.inventario.currentFrame && !J.hideGUI && null != this.effectIconsEntity) {
             this.scene.draw(this.effectIconsEntity);
             for (var b = 0, a = this.effectIcons.length; b < a; ) {
               var c = b++;
               new t(this.scene.get_width() - 73 - 28 * c - 12, 3, 24, 24).contains(m.Instance.mouse.x, m.Instance.mouse.y) &&
                 this.showBottomTooltip(
                   E.string(this.effectData.h[this.effectIcons[c].h.type].h.name) +
                     " " +
                     E.string(this.world.effects.h[this.effectIcons[c].h.type].h.level) +
                     " - " +
                     this.secondsToString(this.world.effects.h[this.effectIcons[c].h.type].h.duration)
                 );
             }
           }
         },
         showBottomTooltip: function (b) {
           null == this.bottomTooltipEntity && this.initBottomTooltip();
           b = R.get("bottomTooltip", b, new h(), x.get_volter(), F.white, 1.625, Q.LEFT, 1);
           b.layer = 31;
           var a = new h(Math.max(19, (13 * b.calculatedWidth) / 8 / 2 + 8), (13 * b.calculatedHeight) / 8 / 2 + 8),
             c = new h(Math.min(this.scene.get_width() - 16, m.Instance.mouse.x) - 2 * a.x + 28, m.Instance.mouse.y);
           this.bottomTooltipEntity.update9Slice(0, new t(0, 0, a.x, a.y), new t(19, 112, 19, 8), new t(2, 5, 1, 1));
           this.bottomTooltipEntity.transform.reset().scale2D(2).translate(c.x, c.y);
           this.scene.draw(this.bottomTooltipEntity);
           b.transform
             .reset()
             .scale2D(1.625)
             .translate(c.x + 8, c.y + 12);
           this.scene.draw(b);
         },
         initAchievementsMessage: function () {
           this.achievementsEntity = new ma([], ba.createQuad(1, 1), Na.getShader());
           this.achievementsEntity.layer = 6;
           this.achievementsEntity.transform.reset().translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 151 + G.toFloat(P.getImage("sign").height) / G.toFloat(2));
           this.achievementsEntity.isTransparent = !0;
         },
         renderAchievementMessage: function () {
           if (1 < this.achievementsEntityFrame) {
             null == this.achievementsEntity && this.initAchievementsMessage();
             if (120 > this.achievementsEntityFrame) {
               2 == this.achievementsEntityFrame && (Na.setupEntity(this.achievementsEntity, P.getImage("achievements"), new t(0, 0, 190, 43)), this.achievementsEntity.transform.reset().translate(0.5, 0.5).scale(228, 51.6).translate(5, 5));
               this.scene.draw(this.achievementsEntity);
               var b = R.get("achievementsTitle", "Achievement get!", new h(), x.get_volter(), F.black, 1.511111111111111, Q.CENTER, 1.5);
               b.layer = 7;
               b.transform.reset().scale2D(1.511111111111111).translate(121, 13);
               this.scene.draw(b);
               b = R.get("achievementsMessage", this.achievementMessage, new h(), x.get_volter(), new F(-16738048), 1.511111111111111, Q.LEFT, 1.5);
               b.layer = 7;
               b.transform.reset().scale2D(1.511111111111111).translate(14, 34);
             } else
               120 == this.achievementsEntityFrame &&
                 (Na.setupEntity(this.achievementsEntity, P.getImage("achievements"), new t(0, 43, 150, 23)), this.achievementsEntity.transform.reset().translate(0.5, 0.5).scale(180, 27.599999999999998).translate(7, 7)),
                 this.scene.draw(this.achievementsEntity),
                 (b = R.get("achievementsTitle", "Press " + E.string(J.keyBindings.h.tasks.h.name) + " for tasks", new h(), x.get_volter(), F.black, 1.511111111111111, Q.CENTER, 1.5)),
                 (b.layer = 7),
                 b.transform.reset().scale2D(1.511111111111111).translate(97, 15);
             this.scene.draw(b);
             this.achievementsEntityFrame++;
             200 < this.achievementsEntityFrame && (this.achievementsEntityFrame = 1);
           }
         },
         initBossBar: function () {
           this.bossBarEntity = new da(P.getImage("boss_bar"));
           this.bossBarEntity.layer = 5;
           this.bossBarEntity.transform.reset();
           this.bossBarEntity.isTransparent = !0;
           this.bossBarEntity.transform
             .reset()
             .scale2D(3)
             .translate(this.scene.get_width() / 2, 30);
         },
         renderBossBar: function () {
           if (1 < this.bossBarFrame) {
             null == this.bossBarEntity && this.initBossBar();
             this.bossBarEntity.updateQuad(0, new M(-50, -2, 0), new h(0, 5), new h(100, 5));
             var b = this.bossBarFrame - 1;
             this.bossBarEntity.updateQuad(1, new M(-50, -2, 0), new h(), new h(b, 5));
             b = R.get("bossTextShadow", "Boss Health", new h(), x.get_volter(), new F(-16777216), 1, Q.CENTER);
             b.layer = 5;
             b.transform
               .reset()
               .scale2D(2)
               .translate(this.scene.get_width() / 2 + 2, 5);
             this.scene.draw(b);
             b = R.get("bossText", "Boss Health", new h(), x.get_volter(), new F(-3407617), 1, Q.CENTER);
             b.layer = 5;
             b.transform
               .reset()
               .scale2D(2)
               .translate(this.scene.get_width() / 2, 3);
             this.scene.draw(b);
             this.scene.draw(this.bossBarEntity);
           }
         },
         showSign: function (b) {
           this.signText = b;
           this.signAlpha = Math.min(1, this.signAlpha + 0.05);
           this.signLastShowed = !0;
         },
         initSign: function () {
           this.signEntity = P.getImage("sign").toEntity();
           this.signEntity.layer = 6;
           this.signEntity.transform.reset().translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 151 + G.toFloat(P.getImage("sign").height) / G.toFloat(2));
           this.signEntity.isTransparent = !0;
         },
         renderSign: function () {
           this.signLastShowed || (this.signAlpha = Math.max(0, this.signAlpha - 0.05));
           this.signLastShowed = !1;
           if (0 < this.signAlpha) {
             null == this.signEntity && this.initSign();
             this.signEntity.setUniform("color", [1, 1, 1, this.signAlpha]);
             var b = R.get("signTextShadow", this.signText, new h(), x.get_volter(), new F(16777216 * Math.floor(255 * this.signAlpha) + 13665846), 1, Q.CENTER);
             b.layer = 7;
             b.setWordWrap(127);
             b.transform
               .reset()
               .scale2D(2)
               .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 151 + 7);
             this.scene.draw(b);
             b = R.get("signText", this.signText, new h(), x.get_volter(), new F(16777216 * Math.floor(255 * this.signAlpha)), 1, Q.CENTER);
             b.layer = 8;
             b.setWordWrap(127);
             b.transform
               .reset()
               .scale2D(2)
               .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 151 + 6);
             this.scene.draw(b);
             this.scene.draw(this.signEntity);
           }
         },
         runParticles: function () {
           for (var b = this.particles.h, a = Object.keys(b), c = a.length, d = 0; d < c; ) b[a[d++]].update();
           this.particleEntity.resetUnusedQuads();
           this.particleEntity.transform
             .reset()
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.scene.draw(this.particleEntity);
         },
         makeBlock: function (b, a) {
           this.reloadBlock(b, a);
         },
         openPauseMenu: function () {
           3 <= this.blackScreen.currentFrame ? ((this.pawsed = !1), this.blackScreen.gotoAndStop(1)) : 1 != this.inventario.currentFrame ? this.inventario.requestClose() : (this.showPauseScreenOnNextFrame = this.pawsed = !0);
         },
         openInventario: function () {
           1 == this.blackScreen.currentFrame && 0 == this.world.sleepingAnimation && (this.world.gamemode == U.gamemodes.h.CREATIVE ? this.inventario.gotoAndStop("inventory1") : this.inventario.gotoAndStop("inventory"));
         },
         rTA: function (b, a, c) {
           ("air" != this.world.getFG(b, a) && "sl" != this.world.getFG(b, a) && "lv" != I.substr(this.world.getFG(b, a), 0, 2)) || this.world.setFG(b, a, c);
         },
         makeCavern: function (b, a, c) {
           for (var d = a - 1, f = 1; 9 > f; ) {
             ++f;
             ++b;
             a += Math.floor(this.randomNumber(0, 2) - 1);
             for (var l = Math.floor(-this.randomNumber(0, 2)), e = Math.floor(this.randomNumber(1, 3) + 1); l < e; )
               for (var g = l++, h = Math.floor(-this.randomNumber(0, 2)), Ba = Math.floor(this.randomNumber(1, 3) + 1); h < Ba; ) {
                 var A = h++;
                 a + A <= d
                   ? (this.world.setFG(b + g, a + A, c), (this.world.firstTimes.h["blockX" + (b + g) + "Y" + (a + A)] = !0), (this.world.water.h["blockX" + (b + g) + "Y" + (a + A)] = [10, 10]))
                   : a + A == d + this.randomNumber(0, 1) + 1 && "r" == this.world.getFG(b + g, a + A) && this.world.setFG(b + g, a + A, "air");
               }
           }
         },
         makeMine: function (b, a, c, d, f, l, e, g) {
           null == e && (e = !1);
           null == l && (l = !0);
           this.world.setFG(b, a, f);
           1 == e ? ((e = Math.floor(10 + 80 * this.randomNumber(0, 1))), (g = 50)) : ((e = Math.floor(this.randomNumber(0, 99))), (g = Math.floor(this.randomNumber(0, 99))));
           for (var k = 1; k <= Math.floor(d - 1); ) {
             e >= this.randomNumber(0, 99) ? ++b : e <= this.randomNumber(0, 99) && --b;
             g >= this.randomNumber(0, 99) ? ++a : g <= this.randomNumber(0, 99) && --a;
             for (var h = 1; ; ) {
               ++h;
               var C = Math.round(this.randomNumber(0, c - 1)),
                 m = Math.round(this.randomNumber(0, c - 1));
               "cy1" == f && "sd" == this.world.getFG(b + C, a + m)
                 ? this.world.setFG(b + C, a + m, f)
                 : ("air" == f || ("dirt" != this.world.getFG(b + C, a + m) && "sd" != this.world.getFG(b + C, a + m) && "ss" != this.world.getFG(b + C, a + m))) &&
                   "lv" != this.world.getFG(b + C, a + m) &&
                   "wd1" != this.world.getFG(b + C, a + m + 1) &&
                   ("coral" == f || ("wr" != this.world.getFG(b + C, a + m) && "wr" != this.world.getFG(b + C, a + m + 1) && "wr" != this.world.getFG(b + C, a + m + 2)))
                 ? ("no" == l ||
                     ("air" != this.world.getFG(b + C, a + m) &&
                       "wd" != this.world.getFG(b + C, a + m) &&
                       "lv" != this.world.getFG(b + C, a + m) &&
                       "lv1" != this.world.getFG(b + C, a + m) &&
                       "lv2" != this.world.getFG(b + C, a + m) &&
                       "lv3" != this.world.getFG(b + C, a + m) &&
                       "lv4" != this.world.getFG(b + C, a + m) &&
                       "fl1" != this.world.getFG(b + C, a + m) &&
                       "fl2" != this.world.getFG(b + C, a + m) &&
                       "ct" != this.world.getFG(b + C, a + m) &&
                       "sw" != this.world.getFG(b + C, a + m) &&
                       "coral" != this.world.getFG(b + C, a + m) &&
                       "ms" != this.world.getFG(b + C, a + m))) &&
                   this.world.setFG(b + C, a + m, f)
                 : ((h = Math.floor(c * c + 1)), ++k);
               if (!(h <= c * c)) break;
             }
             ++k;
           }
         },
         makeEnderMine: function (b, a) {
           for (var c = a; 0 <= c; ) {
             for (var d = Math.round(0.6 * -(a - c)) + b; d <= 0.6 * (a - c) + b; ) this.world.setFG(d, c, "air"), ++d;
             --c;
           }
         },
         makeMobSpawner: function (b, a) {
           b -= 6;
           for (var c = Math.floor(this.randomNumber(0, 1)), d = -4 - c, f = 4 + c + 1; d < f; ) {
             var l = d++;
             this.world.setFG(b + l, a, "ms");
             this.world.setFG(b + l, a + 1, "air");
             this.world.setFG(b + l, a + 2, "air");
             this.world.setFG(b + l, a + 3, "air");
             this.world.setFG(b + l, a + 4, "air");
             this.world.setFG(b + l, a + 5, "cs");
             if (l == -4 - c || l == 4 + c) this.world.setFG(b + l, a + 1, "cs"), this.world.setFG(b + l, a + 2, "cs"), this.world.setFG(b + l, a + 3, "cs"), this.world.setFG(b + l, a + 4, "cs");
           }
           1 == this.randomNumber(1, 4)
             ? (this.world.setFG(b - 3 - c, a + 1, "chest"), this.prizeChest(b - 3 - c, a + 1), this.world.setFG(b + 3 + c, a + 1, "chest"), this.prizeChest(b + 3 + c, a + 1))
             : 0 != this.randomNumber(0, 1)
             ? (this.world.setFG(b - 3 - c, a + 1, "chest"), this.prizeChest(b - 3 - c, a + 1))
             : (this.world.setFG(b + 3 + c, a + 1, "chest"), this.prizeChest(b + 3 + c, a + 1));
           this.world.setFG(b, a + 1, "mobSpawner");
         },
         makeGiantMushroom: function (b, a, c, d) {
           null == d && (d = !1);
           c =
             1 == c
               ? [
                   ["msb4", 0, 0],
                   ["msb4", 0, 1],
                   ["msb4", 0, 2],
                   ["msb4", 0, 3],
                   ["msb4", 0, 4],
                   ["msb3", 0, 5],
                   ["msb3", 1, 5],
                   ["msb3", 2, 5],
                   ["msb3", 3, 5],
                   ["msb3", -1, 5],
                   ["msb3", -2, 5],
                   ["msb3", -3, 5],
                 ]
               : [
                   ["msb2", 0, 0],
                   ["msb2", 0, 1],
                   ["msb2", 0, 2],
                   ["msb2", 0, 3],
                   ["msb2", 0, 4],
                   ["msb1", 0, 5],
                   ["msb1", 1, 5],
                   ["msb1", 2, 5],
                   ["msb1", -1, 5],
                   ["msb1", -2, 5],
                   ["msb1", -3, 4],
                   ["msb1", 3, 4],
                   ["msb1", -3, 3],
                   ["msb1", 3, 3],
                   ["msb1", -3, 2],
                   ["msb1", 3, 2],
                 ];
           for (var f = 0, l = c.length; f < l; ) {
             var e = f++;
             "air" == this.world.getFG(b + c[e][1] - 1, a + c[e][2] - 1) && (this.rTA(b + c[e][1] - 1, a + c[e][2] - 1, c[e][0]), d || this.makeBlock(b + c[e][1] - 1, a + c[e][2] - 1));
           }
         },
         makeTree: function (b, a, c, d) {
           null == d && (d = !1);
           null == c && (c = !1);
           var f = c ? Math.floor(this.randomNumber(1, 23) - 1) : Math.floor(23 * Math.random());
           d = d ? "lv3" : 13 > f ? "lv" : 16 > f ? "lv1" : 20 > f ? "lv2" : "lv4";
           f = !1;
           1 != c && (f = !0);
           this.rTA(b - 1, a, "wd1");
           this.rTA(b - 1, a + 1, "wd1");
           this.rTA(b - 1, a + 2, "wd1");
           this.rTA(b - 1, a + 3, "wd1");
           this.rTA(b - 1, a + 4, "wd1");
           f && (this.makeBlock(b - 1, a), this.makeBlock(b - 1, a + 1), this.makeBlock(b - 1, a + 2), this.makeBlock(b - 1, a + 3), this.makeBlock(b - 1, a + 4));
           if (0 != (c ? Math.floor(this.randomNumber(0, 1)) : Math.floor(2 * Math.random())))
             for (
               var l = [
                   [-2, 3],
                   [0, 3],
                   [-2, 4],
                   [0, 4],
                   [-3, 4],
                   [1, 4],
                   [-2, 5],
                   [-3, 5],
                   [-1, 5],
                   [0, 5],
                   [1, 5],
                   [-1, 6],
                   [0, 6],
                   [-2, 6],
                 ],
                 e = 0,
                 g = l.length;
               e < g;
 
             ) {
               var h = e++;
               "air" == this.world.getFG(b + l[h][0], a + l[h][1]) &&
                 (c
                   ? 1 == this.randomNumber(0, 3)
                     ? this.rTA(b + l[h][0], a + l[h][1], d)
                     : this.rTA(b + l[h][0], a + l[h][1], "lv")
                   : 1 == Math.floor(4 * Math.random())
                   ? this.rTA(b + l[h][0], a + l[h][1], d)
                   : this.rTA(b + l[h][0], a + l[h][1], "lv"),
                 f && this.makeBlock(b + l[h][0], a + l[h][1]));
             }
           else
             for (
               this.rTA(b - 1, a + 5, "wd1"),
                 f && this.makeBlock(b - 1, a + 5),
                 l = [
                   [-2, 3],
                   [0, 3],
                   [-2, 4],
                   [0, 4],
                   [-3, 4],
                   [1, 4],
                   [-4, 5],
                   [-3, 5],
                   [-2, 5],
                   [0, 5],
                   [1, 5],
                   [2, 5],
                   [-1, 6],
                   [-2, 6],
                   [-3, 6],
                   [-4, 6],
                   [0, 6],
                   [1, 6],
                   [2, 6],
                   [-1, 7],
                   [-2, 7],
                   [-3, 7],
                   [0, 7],
                   [1, 7],
                   [-1, 8],
                   [-2, 8],
                   [0, 8],
                 ],
                 e = 0,
                 g = l.length;
               e < g;
 
             )
               (h = e++),
                 null == this.world.scene[b + l[h][0]] && (this.world.scene[b + l[h][0]] = []),
                 "air" == this.world.getFG(b + l[h][0], a + l[h][1]) &&
                   (c
                     ? 1 == this.randomNumber(0, 3)
                       ? this.rTA(b + l[h][0], a + l[h][1], d)
                       : this.rTA(b + l[h][0], a + l[h][1], "lv")
                     : 1 == Math.floor(4 * Math.random())
                     ? this.rTA(b + l[h][0], a + l[h][1], d)
                     : this.rTA(b + l[h][0], a + l[h][1], "lv"),
                   f && this.makeBlock(b + l[h][0], a + l[h][1]));
         },
         sameExtras: function (b, a) {
           return this.deepCompare(b, a);
         },
         deepCompare: function (b, a) {
           if (null == b || "" == E.string(b)) {
             if (null == a || "" == E.string(a)) return !0;
             if ("Object" == O.getQualifiedClassName(a)) {
               for (var c = Object.keys(H.__cast(a, e).h).length; 0 < c; ) return !1;
               return !0;
             }
             return "Array" == O.getQualifiedClassName(a) ? (0 < H.__cast(a, Array).length ? !1 : !0) : !1;
           }
           if (null == a || "" == E.string(a)) {
             if ("Object" == O.getQualifiedClassName(b)) {
               for (c = Object.keys(H.__cast(b, e).h).length; 0 < c; ) return !1;
               return !0;
             }
             return "Array" == O.getQualifiedClassName(b) ? (0 < H.__cast(b, Array).length ? !1 : !0) : !1;
           }
           if ("Object" != O.getQualifiedClassName(b) && "Array" != O.getQualifiedClassName(b)) return "Object" != O.getQualifiedClassName(a) && "Array" != O.getQualifiedClassName(a) ? b == a : !1;
           if ("Object" != O.getQualifiedClassName(a) && "Array" != O.getQualifiedClassName(a)) return !1;
           if ("Object" == O.getQualifiedClassName(b) && "Object" == O.getQualifiedClassName(a)) {
             var d = Object.keys(H.__cast(b, e).h);
             c = d.length;
             for (var f = 0; f < c; ) {
               var l = d[f++];
               if (0 == this.deepCompare(H.__cast(b, e).h[l], H.__cast(a, e).h[l])) return !1;
             }
             d = Object.keys(H.__cast(a, e).h);
             c = d.length;
             for (f = 0; f < c; ) if (((l = d[f++]), 0 == this.deepCompare(H.__cast(b, e).h[l], H.__cast(a, e).h[l]))) return !1;
           } else if ("Array" == O.getQualifiedClassName(b) && "Array" == O.getQualifiedClassName(a)) {
             c = 0;
             for (d = H.__cast(b, Array).length; c < d; ) if (((l = c++), 0 == this.deepCompare(H.__cast(b, Array)[l], H.__cast(a, Array)[l]))) return !1;
             c = 0;
             for (d = H.__cast(a, Array).length; c < d; ) if (((l = c++), 0 == this.deepCompare(H.__cast(b, Array)[l], H.__cast(a, Array)[l]))) return !1;
           } else return !1;
           return !0;
         },
         hasExtras: function (b, a) {
           if (null == a) return !0;
           null == b && (b = new e());
           for (var c = Object.keys(a.h), d = c.length, f = 0; f < d; ) {
             var l = c[f++];
             if (b.h[l] != a.h[l]) return !1;
           }
           return !0;
         },
         hasEnchantment: function (b) {
           b = b.h;
           for (var a = Object.keys(b), c = a.length, d = 0; d < c; ) if ("enchant" == b[a[d++]]) return !0;
           return !1;
         },
         blockSound: function (b, a, c, d) {
           "air" != this.world.getFG(b, a) &&
             "wr" != this.world.getFG(b, a) &&
             ("slimeb" == this.world.getFG(b, a)
               ? this.requestSound("slimeland" + (Math.floor(4 * Math.random()) + 1), c, d)
               : null != q.get(this.world.getFG(b, a), "isStone")
               ? this.requestSound("stone", c, d)
               : null != q.get(this.world.getFG(b, a), "isGrass")
               ? this.requestSound("crunch" + (Math.floor(3 * Math.random()) + 1), c, d)
               : null != q.get(this.world.getFG(b, a), "isWood")
               ? this.requestSound("wood", c, d)
               : null != q.get(this.world.getFG(b, a), "isMush") && this.requestSound("smush", c, d));
         },
         requestSound: function (b, a, c, d) {
           null == d && (d = 1);
           null == c && (c = 0);
           null == a && (a = 0);
           if (!m.Instance.MUTED) {
             c = this.getVolumeToPlayer(a, c) * d;
             if (0.002 > c) return null;
             Object.prototype.hasOwnProperty.call(this.soundCarousel.h, b) ? ((d = this.soundCarousel.h[b] + 1), (this.soundCarousel.h[b] = d), (this.soundCarousel.h[b] = d % 5)) : (this.soundCarousel.h[b] = 0);
             if (null != P.getSound(b + "_" + this.soundCarousel.h[b])) return P.getSound(b + "_" + this.soundCarousel.h[b]).play(c, this.getPanToPlayer(a), 0, 0, 1, !0), P.getSound(b + "_" + this.soundCarousel.h[b]);
             Ia.trace("Warning: Could not find sound '" + b + "_" + this.soundCarousel.h[b] + "'", { fileName: "src/Game.hx", lineNumber: 1127, className: "Game", methodName: "requestSound" });
           }
           return null;
         },
         getVolumeToPlayer: function (b, a) {
           return ((J.soundVol / 100) * Math.max(Math.min(100 - Math.sqrt(b * b + a * a) / 0.03333333333333333 / 4, 100) - 10 * this.deepness, 0)) / 100;
         },
         getPanToPlayer: function (b) {
           return Math.max(-1, Math.min(1, b / 6.666666666666667));
         },
         ouch: function (b, a, c) {
           if (!(0 < this.world.dead) && this.world.gamemode != U.gamemodes.h.CREATIVE && this.world.gamemode != U.gamemodes.h.SPECTATOR && null == this.world.mobs.h[this.ENDING]) {
             if ("anvil" == c || "fall" == c || "lava" == c || "acid" == c || "explosion" == c || "fire" == c || "lightning" == c || "attack" == c || "arrow" == c || "cactus" == c) {
               if (("fire" == c || "lava" == c || "lightning" == c) && this.hasEffect("fireresistance")) return;
               for (var d = 0, f, l = 0, k = this.world.armors.length; l < k; ) {
                 var h = l++;
                 f = 0;
                 if ("anvil" == c && 0 == h)
                   this.damageArmor(h, Math.floor(a / 2)),
                     "Leather" == this.world.armors[h][0].substr(0, 7)
                       ? (a *= 0.8)
                       : "Gold" == this.world.armors[h][0].substr(0, 4)
                       ? (a *= 0.6)
                       : "Iron" == this.world.armors[h][0].substr(0, 4)
                       ? (a *= 0.4)
                       : "Diamond" == this.world.armors[h][0].substr(0, 7)
                       ? (a *= 0.3)
                       : "Dragon" == this.world.armors[h][0].substr(0, 6) && (a *= 0.2);
                 else if ("hunger" != c && "void" != c) {
                   null == this.world.armors[h][2] && (this.world.armors[h][2] = new e());
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protection1")
                     ? (f = 0.02)
                     : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protection2")
                     ? (f = 0.035)
                     : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protection3")
                     ? (f = 0.05)
                     : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protection4") && (f = 0.065);
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protection5") && (f += 0.08);
                   if ("lava" == c || "fire" == c || "lightning" == c)
                     Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFire1")
                       ? (f += 0.04)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFire2")
                       ? (f += 0.055)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFire3") && (f += 0.07);
                   "explosion" == c &&
                     (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionBlast1")
                       ? (f += 0.04)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionBlast2")
                       ? (f += 0.055)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionBlast3") && (f += 0.07));
                   "arrow" == c &&
                     (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionProjectile1")
                       ? (f += 0.04)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionProjectile2")
                       ? (f += 0.055)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionProjectile3") && (f += 0.07));
                   "fall" == c &&
                     (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFalling1")
                       ? (f += 0.09)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFalling2")
                       ? (f += 0.12)
                       : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[h][2]).h, "protectionFalling3") && (f += 0.16));
                 }
                 "anvil" != c &&
                   null != q.get(this.world.armors[h][0], "life") &&
                   this.world.armors[h][1] <= q.get(this.world.armors[h][0], "life") &&
                   ("Leather" == this.world.armors[h][0].substr(0, 7)
                     ? ((f = a * (Math.random() * (0.02 + f) + 0.07)), this.damageArmor(h, 3 * f), (d += f))
                     : "Gold" == this.world.armors[h][0].substr(0, 4)
                     ? ((f = a * (Math.random() * (0.04 + f) + 0.1)), this.damageArmor(h, 3 * f), (d += f))
                     : "Iron" == this.world.armors[h][0].substr(0, 4)
                     ? ((f = a * (Math.random() * (0.05 + f) + 0.13)), this.damageArmor(h, 3 * f), (d += f))
                     : "Diamond" == this.world.armors[h][0].substr(0, 7)
                     ? ((f = a * (Math.random() * (0.07 + f) + 0.15)), this.damageArmor(h, 3 * f), (d += f))
                     : "Dragon" == this.world.armors[h][0].substr(0, 6) &&
                       ((f = a * (Math.random() * (0.09 + f) + 0.15)), this.damageArmor(h, 3 * f), (d = "fire" == c || "lightning" == c || "lava" == c ? d + Math.pow(Math.random(), 3) * f : d + f)));
                 parseFloat(E.string(this.world.armors[h][1])) >= parseFloat(E.string(q.get(this.world.armors[h][0], "life"))) &&
                   1 == q.get(this.world.armors[h][0], "tool") &&
                   ((this.world.armors[h] = ["air", 0, new e()]), this.updateArmorRenderers());
               }
               a -= Math.round(d);
             }
             0 != a && ((this.world.health += Math.floor(a)), 0 > a && (2 == b ? this.requestSound("ouch2", 0, 0) : this.requestSound("ouch1", 0, 0), (this.hurtAnimation = !0), this.screenTilter++));
           }
         },
         getRotAngle: function () {
           return (this.rotAngle = Math.atan2(this.mouseWorldPosition.y - (this.world.worldY - 1), this.mouseWorldPosition.x - this.world.worldX));
         },
         getClosestBlock: function (b) {
           null == b && (b = !1);
           null == b && (b = !1);
           var a = [null, null, null, null],
             c = this.reach + 1,
             d = this.mouseWorldPosition.x | 0,
             f = -this.mouseWorldPosition.y | 0,
             l = d - this.mouseWorldPosition.x / 1,
             k = f + this.mouseWorldPosition.y / 1,
             h = Math.sqrt(Math.pow(Math.floor(this.world.worldX / 1) - d, 2) + Math.pow(Math.floor(-this.world.worldY) - (f - 1), 2));
           if (3 >= h && (1 == this.mouseD || 1 == this.rMouseD) && this.world.gamemode != U.gamemodes.h.SPECTATOR) {
             for (var z = Object.keys(this.world.rafts.h), Ba = z.length, A = 0; A < Ba; ) {
               var m = z[A++];
               if (1.6666666666666667 > Math.abs(this.world.rafts.h[m][1] - this.mouseWorldPosition.x) && 1.6666666666666667 > Math.abs(this.world.rafts.h[m][2] - this.mouseWorldPosition.y))
                 return (
                   1 == this.rMouseD
                     ? ((this.world.rafts.h[m][5] = this.world.player.id), (this.world.riding = m), (this.waitTillRightMouseIsUp = !0))
                     : (this.world.gamemode == U.gamemodes.h.SURVIVAL
                         ? H.__cast(this.world.entities.h[this.world.rafts.h[m][0]], Oc).damag--
                         : this.world.gamemode == U.gamemodes.h.CREATIVE && (H.__cast(this.world.entities.h[this.world.rafts.h[m][0]], Oc).damag -= 5),
                       (H.__cast(this.world.entities.h[this.world.rafts.h[m][0]], Oc).rotation += 30 * (2 * ((2 * Math.random()) | 0) - 1)),
                       (this.waitTillMouseIsUp = !0)),
                   a
                 );
             }
             Ba = Object.keys(this.world.fireballs.h);
             A = Ba.length;
             for (m = 0; m < A; )
               if (((z = this.world.fireballs.h[Ba[m++]]), 1.6666666666666667 > Math.abs(z.h.x - this.mouseWorldPosition.x) && 1.6666666666666667 > Math.abs(z.h.y - this.mouseWorldPosition.y)))
                 return (
                   1 != this.rMouseD &&
                     z.h.returnedBy != this.world.player.id &&
                     ((b = Math.sqrt(Math.pow(z.h.speedX, 2) + Math.pow(z.h.speedY, 2))), (z.h.speedX = b * Math.cos(this.rotAngle)), (z.h.speedY = b * Math.sin(this.rotAngle)), (z.h.returnedBy = this.world.player.id)),
                   a
                 );
             Ba = Object.keys(this.world.carts.h);
             A = Ba.length;
             for (m = 0; m < A; )
               if (((z = Ba[m++]), 1.3333333333333333 > Math.abs(this.world.carts.h[z].h.x - this.mouseWorldPosition.x) && 1.3333333333333333 > Math.abs(this.world.carts.h[z].h.y - 0.6666666666666666 - this.mouseWorldPosition.y))) {
                 if (1 == this.rMouseD)
                   if ("" == this.world.carts.h[z].h.type) (this.world.carts.h[z].h.riddenBy = this.world.player.id), (this.world.riding = z), (this.waitTillRightMouseIsUp = !0);
                   else if ("chest" == this.world.carts.h[z].h.type) {
                     if (null == this.world.chests.h[z]) for (this.world.chests.h[z] = [], c = 0; 27 > c; ) this.world.chests.h[z][c++] = g.emptyItem();
                     this.inventario.chest = z;
                     this.inventario.gotoAndStop(5);
                     this.waitTillRightMouseIsUp = !0;
                   } else
                     "oven" == this.world.carts.h[z].h.type &&
                       (null != q.get(this.world.get_selectedInventoryItemType(), "fuel") &&
                         (null == this.world.carts.h[z].h.fuel && (this.world.carts.h[z].h.fuel = 0),
                         (c = this.world.carts.h[z]),
                         (b = this.world.carts.h[z].h.fuel + q.get(this.world.get_selectedInventoryItemType(), "fuel")),
                         (c.h.fuel = b),
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           ("lbk" == this.world.get_selectedInventoryItemType()
                             ? (this.world.inventoryList[this.world.selectedInventoryItem][0] = "bk")
                             : 2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? this.world.inventoryList[this.world.selectedInventoryItem][1]--
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))),
                       (this.waitTillRightMouseIsUp = !0));
                 else
                   this.world.gamemode == U.gamemodes.h.SURVIVAL ? ((b = this.world.carts), --b.h[z].h.health) : this.world.gamemode == U.gamemodes.h.CREATIVE && ((d = this.world.carts.h[z]), (d.h.health -= 5)),
                     (H.__cast(this.world.entities.h[z], ib).rotation += g.migrateSpeed(29 * (2 * ((2 * Math.random()) | 0) - 1))),
                     (this.waitTillMouseIsUp = !0);
                 return a;
               }
             Ba = Object.keys(this.world.balloons.h);
             A = Ba.length;
             for (m = 0; m < A; )
               if (((z = Ba[m++]), null == g.makeDynamicMap(this.world.balloons.h[z]).h.attached || H.__cast(g.makeDynamicMap(this.world.balloons.h[z]).h.attached, e).h.id != this.world.player.id))
                 if (1 == this.rMouseD) {
                   if (
                     !this.waitTillRightMouseIsUp &&
                     1 > Math.abs(g.makeDynamicMap(this.world.balloons.h[z]).h.stringX - this.mouseWorldPosition.x) &&
                     1 > Math.abs(g.makeDynamicMap(this.world.balloons.h[z]).h.stringY - this.mouseWorldPosition.y)
                   ) {
                     c = new e();
                     c.h.type = g.makeDynamicMap(this.world.balloons.h[z]).h.type;
                     1 <= g.makeDynamicMap(this.world.balloons.h[z]).h.unbreaking &&
                       4 >= g.makeDynamicMap(this.world.balloons.h[z]).h.unbreaking &&
                       (c.h["unbreaking" + E.string(g.makeDynamicMap(this.world.balloons.h[z]).h.unbreaking)] = "enchant");
                     for (d = 0; 9 > d; )
                       if (((b = d++), this.isEmpty(b)))
                         return (
                           (this.world.inventoryList[b] = ["bl", 1, q.get("bl", "life") - g.makeDynamicMap(this.world.balloons.h[z]).h.life, c]),
                           (c = g.makeDynamicMap(this.world.balloons.h[z])),
                           (d = new e()),
                           (d.h.slot = b),
                           (d.h.of = this.world.player.id),
                           (c.h.inventory = g.makeDynamicMap(d)),
                           (c = g.makeDynamicMap(this.world.balloons.h[z])),
                           (d = new e()),
                           (d.h.type = "player"),
                           (d.h.id = this.world.player.id),
                           (c.h.attached = g.makeDynamicMap(d)),
                           (this.world.balloons.h["Hand" + b + "Of" + this.world.player.id] = this.world.balloons.h[z]),
                           (this.renamedBalloons.h[z] = "Hand" + b + "Of" + this.world.player.id),
                           (this.world.selectedInventoryItem = b),
                           this.updateSelectedInventoryItemStuff(),
                           this.removeEntity(z, this.world.balloons),
                           (this.waitTillRightMouseIsUp = !0),
                           a
                         );
                     if (1 == this.addToInventory("bl", 1, (q.get("bl", "life") - g.makeDynamicMap(this.world.balloons.h[z]).h.life) | 0, c))
                       return this.removeEntity(z, this.world.balloons), this.requestSound("pop"), (this.waitTillRightMouseIsUp = !0), a;
                     this.addDrop("bl", g.makeDynamicMap(this.world.balloons.h[z]).h.x, g.makeDynamicMap(this.world.balloons.h[z]).h.y, 1, (q.get("bl", "life") - g.makeDynamicMap(this.world.balloons.h[z]).h.life) | 0, c);
                     this.removeEntity(z, this.world.balloons);
                     this.waitTillRightMouseIsUp = !0;
                     return a;
                   }
                 } else if (1 > Math.abs(g.makeDynamicMap(this.world.balloons.h[z]).h.x - this.mouseWorldPosition.x) && 1 > Math.abs(g.makeDynamicMap(this.world.balloons.h[z]).h.y - this.mouseWorldPosition.y))
                   return (b = g.makeDynamicMap(this.world.balloons.h[z])), (b.h.speedX += 5 * Math.cos(this.rotAngle)), (b = g.makeDynamicMap(this.world.balloons.h[z])), (b.h.speedY += 5 * Math.sin(this.rotAngle)), a;
             if (3 == this.world.sceneNum)
               for (z = Object.keys(this.world.enderCrystals.h), Ba = z.length, A = 0; A < Ba; )
                 (m = z[A++]),
                   1.6666666666666667 > Math.abs(this.mouseWorldPosition.x - (this.world.enderCrystals.h[m][0] + 0.5)) &&
                     1.6666666666666667 > Math.abs(this.mouseWorldPosition.y - (-this.world.enderCrystals.h[m][1] - 0.5)) &&
                     null != this.world.entities.h[m] &&
                     H.__cast(this.world.entities.h[m], Bc).explod();
           }
           z = this.world.getFG(d, f);
           return h <= c / 1 &&
             "air" != z &&
             ((1 == q.get(this.world.get_selectedInventoryItemType(), "backdrop") && "" != this.world.get_selectedInventoryItemType() && 1 == q.get(z, "replaceable")) || 1 != q.get(z, "backdrop")) &&
             ((b && null != this.world.water.h["blockX" + d + "Y" + f] && 10 == this.world.water.h["blockX" + d + "Y" + f][0] && 10 == this.world.water.h["blockX" + d + "Y" + f][1]) || 1 != q.get(z, "liquid"))
             ? [d, f, l, k]
             : a;
         },
         selectedBlock: function () {
           var b = this.mouseWorldPosition.x | 0,
             a = -this.mouseWorldPosition.y | 0;
           return Math.sqrt(Math.pow(Math.floor(this.world.worldX / 1) - b, 2) + Math.pow(Math.floor(-this.world.worldY) - (a - 1), 2)) <= this.reach / 1 ? new h(b, a) : null;
         },
         getFurthestEmptyBlock: function (b, a, c) {
           null == c && (c = !1);
           null == b && (b = !1);
           a = this.reach + 1;
           var d = this.mouseWorldPosition.x | 0,
             f = -this.mouseWorldPosition.y | 0,
             l = d - this.mouseWorldPosition.x / 1,
             e = f + this.mouseWorldPosition.y / 1,
             h = Math.sqrt(Math.pow(Math.floor(this.world.worldX / 1) - d, 2) + Math.pow(Math.floor(-this.world.worldY) - (f - 1), 2)),
             g = this.world.getFG(d, f);
           return h <= a / 1 &&
             ("air" == g || 1 == q.get(g, "liquid") || (1 == q.get(g, "replaceable") && 1 != q.get(this.world.get_selectedInventoryItemType(), "replaceable"))) &&
             (("air" != this.world.getFG(d, f) && (1 != q.get(this.world.getFG(d, f), "liquid") || c)) ||
               ("air" != this.world.getFG(d - 1, f) && (1 != q.get(this.world.getFG(d - 1, f), "liquid") || c)) ||
               ("air" != this.world.getFG(d + 1, f) && (1 != q.get(this.world.getFG(d + 1, f), "liquid") || c)) ||
               ("air" != this.world.getFG(d, f - 1) && (1 != q.get(this.world.getFG(d, f - 1), "liquid") || c)) ||
               ("air" != this.world.getFG(d, f + 1) && (1 != q.get(this.world.getFG(d, f + 1), "liquid") || c)))
             ? [d, f, l, e]
             : 1 != b
             ? [null]
             : [d, f, l, e];
         },
         getFurthestEmptyBlock2: function (b) {
           null == b && (b = !1);
           for (var a = this.reach, c = 1, d = (this.reach * Math.cos(this.rotAngle)) / ((a + 1) / c) + this.world.worldX, f = (this.reach * Math.sin(this.rotAngle)) / ((a + 1) / c) + (this.world.worldY - 1), l, e; ; ) {
             c += 0.3333333333333333;
             l = d;
             e = f;
             d = (this.reach * Math.cos(this.rotAngle)) / ((a + 1) / c) + this.world.worldX;
             f = (this.reach * Math.sin(this.rotAngle)) / ((a + 1) / c) + (this.world.worldY - 1);
             var h = this.world.getFG(Math.floor(d / 1), Math.floor(-f));
             if ("air" != h && 1 != q.get(h, "liquid") && 1 != q.get(h, "walkThroughBlockHit")) return [Math.floor(l / 1), Math.floor(-e)];
             if (!(c <= a)) break;
           }
           return 1 != b ? null : [Math.floor(l / 1), Math.floor(-e)];
         },
         getClosestMob: function () {
           if (15 <= this.gCMTimer && ((this.gCMTimer = 0), 0 != this.mouseD || 0 != this.rMouseD))
             for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               if (!(0 < this.world.mobs.h[d].h.dead)) {
                 var f = Math.pow(this.world.worldX - this.world.mobs.h[d].h.x, 2) + Math.pow(this.world.worldY - this.world.mobs.h[d].h.y, 2);
                 if ("enderdragon" == this.world.mobs.h[d].h.type) {
                   if (
                     49 > f &&
                     ((1.5 >= Math.abs(this.world.mobs.h[d].h.x - this.mouseWorldPosition.x) && 1.5 >= Math.abs(this.world.mobs.h[d].h.y - (this.mouseWorldPosition.y + 1))) ||
                       (null != this.getMob(d) &&
                         7 >= Math.abs(H.__cast(this.getMob(d), Ja).get_bodyCenter().x - this.mouseWorldPosition.x) &&
                         7 >= Math.abs(H.__cast(this.getMob(d), Ja).get_bodyCenter().y - (this.mouseWorldPosition.y + 1))))
                   )
                     return d;
                 } else if (
                   16 > f &&
                   1.5 >= Math.abs(this.world.mobs.h[d].h.x - this.mouseWorldPosition.x) &&
                   1.5 >= Math.abs(this.world.mobs.h[d].h.y - (this.mouseWorldPosition.y + 1)) &&
                   !this.collision(
                     this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 2,
                     this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 2,
                     0.03333333333333333,
                     0.03333333333333333,
                     0.03333333333333333
                   ) &&
                   !this.collision(
                     this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 4,
                     this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 4,
                     0.03333333333333333,
                     0.03333333333333333,
                     0.03333333333333333
                   ) &&
                   !this.collision(
                     this.world.worldX + (3 * (this.mouseWorldPosition.x - this.world.worldX)) / 4,
                     this.world.worldY - 1 + (3 * (this.mouseWorldPosition.y - (this.world.worldY - 1))) / 4,
                     0.03333333333333333,
                     0.03333333333333333,
                     0.03333333333333333
                   )
                 )
                   return d;
               }
             }
           return null;
         },
         getBreedableMob: function (b, a, c) {
           b = Object.keys(this.world.mobs.h);
           a = b.length;
           for (var d = 0; d < a; ) {
             var f = b[d++];
             if (null != this.getMob(f) && this.getMob(f).mobCanBreed(f, this.world.player.id)) {
               if (null != c) {
                 if (null == this.world.mobData.h[this.world.mobs.h[f].h.type].h.breedItems) continue;
                 if (null == g.makeDynamicMap(this.world.mobData.h[this.world.mobs.h[f].h.type].h.breedItems).h[c]) continue;
               }
               if (
                 1.5 >= Math.abs(this.world.mobs.h[f].h.x - this.mouseWorldPosition.x) &&
                 1.5 >= Math.abs(this.world.mobs.h[f].h.y - (this.mouseWorldPosition.y + 1)) &&
                 16 > Math.pow(this.world.worldX - this.world.mobs.h[f].h.x, 2) + Math.pow(this.world.worldY - this.world.mobs.h[f].h.y, 2) &&
                 !this.collision(
                   this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 2,
                   this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 2,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 ) &&
                 !this.collision(
                   this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 4,
                   this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 4,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 ) &&
                 !this.collision(
                   this.world.worldX + (3 * (this.mouseWorldPosition.x - this.world.worldX)) / 4,
                   this.world.worldY - 1 + (3 * (this.mouseWorldPosition.y - (this.world.worldY - 1))) / 4,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 )
               )
                 return f;
             }
           }
           return null;
         },
         getGrowableMob: function (b, a, c) {
           b = Object.keys(this.world.mobs.h);
           a = b.length;
           for (var d = 0; d < a; ) {
             var f = b[d++];
             if (0 < this.world.mobs.h[f].h.babyTimer) {
               if (null != c) {
                 if (null == this.world.mobData.h[this.world.mobs.h[f].h.type].h.breedItems) continue;
                 if (null == g.makeDynamicMap(this.world.mobData.h[this.world.mobs.h[f].h.type].h.breedItems).h[c]) continue;
               }
               if (
                 1.5 >= Math.abs(this.world.mobs.h[f].h.x - this.mouseWorldPosition.x) &&
                 1.5 >= Math.abs(this.world.mobs.h[f].h.y - (this.mouseWorldPosition.y + 1)) &&
                 16 > Math.pow(this.world.worldX - this.world.mobs.h[f].h.x, 2) + Math.pow(this.world.worldY - this.world.mobs.h[f].h.y, 2) &&
                 !this.collision(
                   this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 2,
                   this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 2,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 ) &&
                 !this.collision(
                   this.world.worldX + (this.mouseWorldPosition.x - this.world.worldX) / 4,
                   this.world.worldY - 1 + (this.mouseWorldPosition.y - (this.world.worldY - 1)) / 4,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 ) &&
                 !this.collision(
                   this.world.worldX + (3 * (this.mouseWorldPosition.x - this.world.worldX)) / 4,
                   this.world.worldY - 1 + (3 * (this.mouseWorldPosition.y - (this.world.worldY - 1))) / 4,
                   0.03333333333333333,
                   0.03333333333333333,
                   0.03333333333333333
                 )
               )
                 return f;
             }
           }
           return null;
         },
         ifDark: function (b, a) {
           for (var c = 0, d = b - 5, f = b + 5 + 1; d < f; )
             for (var l = d++, e = a - 5, h = a + 5 + 1; e < h; ) {
               var g = e++;
               b = this.world.getFG(l, g);
               switch (b) {
                 case "light":
                   1 == this.world.states.h["blockX" + l + "Y" + g] && ++c;
                   break;
                 case "ortorch":
                   --c;
                   break;
                 case "jl":
                 case "lant":
                 case "th":
                   ++c;
               }
             }
           return 0 < c
             ? !1
             : 0 > c
             ? !0
             : 2 == this.world.sceneNum || 3 == this.world.sceneNum || 270 <= a || (50 > this.world.tim && 0 <= this.world.tim && 2 != this.world.raining && ((1 == this.world.raining && 80 <= a) || 70 <= a))
             ? !1
             : !0;
         },
         explode: function (b, a, c, d, f, l) {
           null == l && (l = "");
           null == f && (f = !0);
           null == d && (d = !1);
           this.requestSound("boom", b - this.world.worldX, -a - this.world.worldY);
           1 < J.particles && this.addParticles("shockwave", Math.floor(Math.min(30, 3 * c)), 0, new h(b + 0.5 - c / 2, c), new h(-a - 0.5 - c / 2, c), !0);
           2 < J.particles && this.addParticles("smoke2", Math.floor(Math.min(30, 3 * c)), 0, new h(b + 0.5 - (c / 2) * 0.7, 0.7 * c), new h(-a - 0.5 - (c / 2) * 0.7, 0.7 * c), !0);
           for (var e = Object.keys(this.world.mobs.h), C = e.length, z = 0; z < C; ) {
             var m = e[z++];
             if (Math.abs(this.world.mobs.h[m].h.x / 1 - (b + 0.5)) < c && Math.abs(-this.world.mobs.h[m].h.y - (a + 0.5)) < c && null != this.getMob(m)) {
               var A = (4 * Math.max(0, c - Math.sqrt(Math.pow(this.world.mobs.h[m].h.x / 1 - (b + 0.5), 2) + Math.pow(-this.world.mobs.h[m].h.y - (a + 0.5), 2)))) | 0;
               this.getMob(m).hurtMob(m, A, "explosion", l);
             }
           }
           Math.abs(this.world.worldX / 1 - (b + 0.5)) < c &&
             Math.abs(-this.world.worldY - (a + 0.5)) < c &&
             this.ouch(1, -Math.max(0, 4 * ((c - Math.sqrt(Math.pow(this.world.worldX / 1 - (b + 0.5), 2) + Math.pow(-this.world.worldY - (a + 0.5), 2))) | 0)), "explosion");
           e = Object.keys(this.world.carts.h);
           C = e.length;
           for (z = 0; z < C; )
             (m = e[z++]),
               Math.abs(this.world.carts.h[m].h.x - 0.5 - b) < c &&
                 Math.abs(-this.world.carts.h[m].h.y - 0.5 - a) < c &&
                 ("TNT" == this.world.carts.h[m].h.type
                   ? (this.world.carts.h[m].h.fuse = 2)
                   : ((l = this.world.carts.h[m]),
                     (l.h.health -= Math.floor(2 * Math.max(0, c - Math.sqrt(Math.pow(this.world.carts.h[m].h.x - 0.5 - b, 2) + Math.pow(-this.world.carts.h[m].h.y - 0.5 - a, 2))))),
                     (H.__cast(this.world.entities.h[m], ib).rotation += Math.floor(5 * Math.max(0, c - Math.sqrt(Math.pow(this.world.carts.h[m].h.x - 0.5 - b, 2) + Math.pow(-this.world.carts.h[m].h.y - 0.5 - a, 2)))))));
           e = Object.keys(this.world.rafts.h);
           C = e.length;
           for (z = 0; z < C; )
             (m = e[z++]),
               Math.abs(this.world.rafts.h[m][1] - 0.5 - b) < c &&
                 Math.abs(-this.world.rafts.h[m][2] - 0.5 - a) < c &&
                 ((H.__cast(this.world.entities.h[this.world.rafts.h[m][0]], Oc).damag += (2 * Math.max(0, c - Math.sqrt(Math.pow(this.world.rafts.h[m][1] - 0.5 - b, 2) + Math.pow(-this.world.rafts.h[m][2] - 0.5 - a, 2)))) | 0),
                 (H.__cast(this.world.entities.h[this.world.rafts.h[m][0]], Oc).tilt += (2 * Math.max(0, c - Math.sqrt(Math.pow(this.world.rafts.h[m][1] - 0.5 - b, 2) + Math.pow(-this.world.rafts.h[m][2] - 0.5 - a, 2)))) | 0));
           l = this.world.fallingBlocks.h;
           var xc = Object.keys(l);
           e = xc.length;
           for (C = 0; C < e; )
             if (((z = l[xc[C++]]), Math.abs(z[2] - 0.5 - b) < c && Math.abs(-z[3] - 0.5 - a) < c)) {
               A = Math.atan2(z[3] / 1 + 0.5 + a, z[2] / 1 - 0.5 - b);
               var p = Math.max(0.1, Math.sqrt(Math.pow(z[2] / 1 - 0.5 - b, 2) + Math.pow(z[3] / 1 + 0.5 + a, 2)));
               z[4] += g.migrateSpeed((3 * Math.cos(A) * c) / p);
               z[5] += g.migrateSpeed((3 * Math.sin(A) * c) / p);
               1 == z[7] &&
                 (Object.prototype.hasOwnProperty.call(this.world.playingTNT.h, "fallingBlock" + E.string(z[0])) || (this.world.playingTNT.h["fallingBlock" + E.string(z[0])] = 1),
                 (A = this.world.playingTNT),
                 (p = "fallingBlock" + E.string(z[0])),
                 (z = Math.min(98, Math.max(this.world.playingTNT.h["fallingBlock" + E.string(z[0])], 1) + 20 + ((20 * Math.random()) | 0)) | 0),
                 (A.h[p] = z));
             }
           e = Object.keys(this.world.balloons.h);
           C = e.length;
           for (z = 0; z < C; )
             (m = e[z++]),
               Math.abs(g.makeDynamicMap(this.world.balloons.h[m]).h.x / 1 - b) < c &&
                 Math.abs(-g.makeDynamicMap(this.world.balloons.h[m]).h.y - a) < c &&
                 ((A = Math.atan2(-g.makeDynamicMap(this.world.balloons.h[m]).h.y - a, g.makeDynamicMap(this.world.balloons.h[m]).h.x / 1 - b)),
                 (p = Math.max(0.1, Math.sqrt(Math.pow(g.makeDynamicMap(this.world.balloons.h[m]).h.x / 1 - b, 2) + Math.pow(-g.makeDynamicMap(this.world.balloons.h[m]).h.y - a, 2)))),
                 (l = g.makeDynamicMap(this.world.balloons.h[m])),
                 (l.h.speedX += g.migrateSpeed((3 * Math.cos(A) * c) / p)),
                 (xc = g.makeDynamicMap(this.world.balloons.h[m])),
                 (xc.h.speedY += g.migrateSpeed((3 * Math.sin(A) * c) / p)),
                 this.damageEntity(this.world.balloons, m, (2 * Math.max(0, c - Math.sqrt(Math.pow(g.makeDynamicMap(this.world.balloons.h[m]).h.x / 1 - b, 2) + Math.pow(-g.makeDynamicMap(this.world.balloons.h[m]).h.y - a, 2)))) | 0));
           if (f && "wr" != this.world.getFG(b, a + 1) && "wr" != this.world.getFG(b, a - 1) && "wr" != this.world.getFG(b + 1, a) && "wr" != this.world.getFG(b - 1, a)) {
             f = [];
             l = (b - Math.round(c / 2)) | 0;
             for (xc = (b - -Math.round(c / 2) + 1) | 0; l < xc; )
               for (p = l++, e = (a - Math.round(c / 2)) | 0, C = (a - -Math.round(c / 2) + 1) | 0; e < C; )
                 (z = e++),
                   "air" != this.world.getFG(p, z)
                     ? b == p && a == z
                       ? "b" != this.world.getFG(p, z) &&
                         "br" != this.world.getFG(p, z) &&
                         "stairbr" != this.world.getFG(p, z) &&
                         "halfbr" != this.world.getFG(p, z) &&
                         "ob" != this.world.getFG(p, z) &&
                         "stairob" != this.world.getFG(p, z) &&
                         "halfob" != this.world.getFG(p, z) &&
                         "portalstone" != this.world.getFG(p, z) &&
                         "pf" != this.world.getFG(p, z) &&
                         "bdob" != this.world.getFG(p, z) &&
                         1 != q.get(this.world.getFG(p, z), "liquid") &&
                         this.mineBlock(p, z, !0, !1)
                       : (p - b) * (p - b) + (z - a) * (z - a) <= c * c &&
                         0 != ((4 * Math.random()) | 0) &&
                         (1 < J.particles && this.addParticles("smoke", 3, 0, new h(p - 0.5, 1), new h(-z - 0.5, 1)),
                         "TNT" == this.world.getFG(p, z)
                           ? null != this.world.getBlock(p, z)
                             ? ((A = 70 + ((25 * Math.random()) | 0)), (H.__cast(this.world.getBlock(p, z), xd).setPlayingTNT = 2 * A), H.__cast(this.world.getBlock(p, z), xd).explode())
                             : this.igniteTNT(p, z)
                           : "b" != this.world.getFG(p, z) &&
                             "br" != this.world.getFG(p, z) &&
                             "stairbr" != this.world.getFG(p, z) &&
                             "halfbr" != this.world.getFG(p, z) &&
                             "ob" != this.world.getFG(p, z) &&
                             "stairob" != this.world.getFG(p, z) &&
                             "halfob" != this.world.getFG(p, z) &&
                             "portalstone" != this.world.getFG(p, z) &&
                             "pf" != this.world.getFG(p, z) &&
                             "bdob" != this.world.getFG(p, z) &&
                             1 != q.get(this.world.getFG(p, z), "liquid") &&
                             this.mineBlock(p, z, !0, !1))
                     : d && f.push({ x: p, y: z });
             if (d)
               for (l = 0, xc = f.length; l < xc; )
                 if (
                   ((b = f[l++]),
                   null != q.get(this.world.getFG(b.x + 1, b.y), "flamRate") ||
                     null != q.get(this.world.getFG(b.x - 1, b.y), "flamRate") ||
                     null != q.get(this.world.getFG(b.x, b.y + 1), "flamRate") ||
                     null != q.get(this.world.getFG(b.x, b.y - 1), "flamRate"))
                 )
                   this.world.setFG(b.x, b.y, "fire"), this.makeBlock(b.x, b.y);
           }
         },
         igniteTNT: function (b, a) {
           this.world.fallingBlockNum++;
           var c = this.world.fallingBlocks,
             d = E.string(this.world.fallingBlockNum),
             f = this.world.fallingBlockNum,
             l = g.migrateSpeed(2 * Math.random() - 1);
           c.h[d] = g.makeDynamicArray([f, "TNT", b + 0.5, -a - 0.5, l, g.migrateSpeed(-5), 10, !0]);
           null != this.world.getBlock(b, a + 1, !1) && this.world.getBlock(b, a + 1, !1).inter();
           this.requestRemove(b, a, !0, !1, !0);
         },
         newLightning: function () {
           var b = "lightning" + Math.random(),
             a = new Wf("lightning", new e(), b, [], this, this.world);
           return (this.world.entities.h[b] = a);
         },
         storeItem: function (b, a, c) {
           if ("chest" == this.world.getFG(a, c)) (a = this.world.chests.h["blockX" + a + "Y" + c]), (c = 27);
           else if ("echest" == this.world.getFG(a, c)) (a = this.world.enderChests.h["blockX" + a + "Y" + c]), (c = 27);
           else if ("dispense" == this.world.getFG(a, c) || "dropper" == this.world.getFG(a, c)) (a = this.world.states.h["blockX" + a + "Y" + c]), (c = 9);
           else return b[1];
           return this.storeItemToData(b, a, c);
         },
         storeItemToData: function (b, a, c) {
           for (var d = b[1], f = 0; f < d; ) {
             ++f;
             for (var l = !1, e = 0; e < c; ) {
               var h = e++;
               if (a[h][0] == b[0] && 64 > a[h][1] && 1 != q.get(b[0], "unstackable") && this.sameExtras(a[h][3], b[3])) {
                 l = a[h];
                 l[1]++;
                 b[1]--;
                 l = !0;
                 break;
               }
             }
             if (!l) break;
           }
           if (0 < b[1])
             for (f = 0, e = b[1]; f < e; ) {
               ++f;
               l = !1;
               for (d = 0; d < c; )
                 if (((h = d++), null == a[h][0] || "air" == a[h][0])) {
                   a[h] = [b[0], 1, b[2], b[3]];
                   b[1]--;
                   l = !0;
                   break;
                 } else if (a[h][0] == b[0] && 64 > a[h][1] && 1 != q.get(b[0], "unstackable") && this.sameExtras(a[h][3], b[3])) {
                   l = a[h];
                   l[1]++;
                   b[1]--;
                   l = !0;
                   break;
                 }
               if (!l) break;
             }
           return b[1];
         },
         collisionWithLiquid: function (b, a, c, d, f, e) {
           null == e && (e = !1);
           for (var l, h, g = b; g <= b + c; ) {
             for (var m = a; m <= a + d; ) {
               l = Math.floor(g / 1);
               h = Math.floor(-m);
               l = this.world.getFG(l, h);
               if (1 == q.get(l, "liquidCollision") && (!e || "wr" == l || "sw" == l)) return !0;
               m += f;
             }
             g += f;
           }
           return !1;
         },
         collision: function (b, a, c, d, f, e, k, h) {
           null == h && (h = !1);
           null == k && (k = !0);
           null == e && (e = !0);
           for (var l, g, C, m = b; m - (b + c) <= f / 2; ) {
             for (var p = a; p - (a + d) <= f / 2; ) {
               l = Math.floor(m / 1);
               g = Math.floor(-p);
               C = this.world.getFG(l, g);
               if (h && 1 == q.get(C, "liquidCollision")) return !0;
               if (1 != q.get(C, k ? "walkThroughBlockHit" : "walkThroughBlock"))
                 if (1 == q.get(C, "halfBlock"))
                   if (2 == this.world.states.h["blockX" + l + "Y" + g]) {
                     if (0.5 < w.modulus(-p, 1)) return !0;
                   } else {
                     if (0.5 > w.modulus(-p, 1)) return !0;
                   }
                 else if (1 == q.get(C, "stairBlock"))
                   if (4 == this.world.states.h["blockX" + l + "Y" + g]) {
                     if (0.5 > w.modulus(m, 1) || 0.5 < w.modulus(-p, 1)) return !0;
                   } else if (2 == this.world.states.h["blockX" + l + "Y" + g]) {
                     if (0.5 > w.modulus(m, 1) || 0.5 > w.modulus(-p, 1)) return !0;
                   } else if (3 == this.world.states.h["blockX" + l + "Y" + g]) {
                     if (0.5 < w.modulus(m, 1) || 0.5 < w.modulus(-p, 1)) return !0;
                   } else {
                     if (0.5 < w.modulus(m, 1) || 0.5 > w.modulus(-p, 1)) return !0;
                   }
                 else if ("lp" == I.substr(C, 0, 2)) {
                   if (0.5 > w.modulus(-p, 1)) return !0;
                 } else return !0;
               else if ("fnc" == I.substr(C, -3, 3)) {
                 if (
                   ((this.world.getFG(l - 1, g).split("g")[0] != C && 1 == q.get(this.world.getFG(l - 1, g), "walkThroughBlockHit")) ||
                     (this.world.getFG(l + 1, g).split("g")[0] != C && 1 == q.get(this.world.getFG(l + 1, g), "walkThroughBlockHit"))) &&
                   0.3333333333333333 < w.modulus(m, 1) &&
                   0.6666666666666666 > w.modulus(m, 1)
                 )
                   return !0;
               } else if ("fncg" == I.substr(C, -4, 4) && 1 != this.world.states.h["blockX" + l + "Y" + g]) {
                 if (0.3333333333333333 < w.modulus(m, 1) && 0.6666666666666666 > w.modulus(m, 1)) return !0;
               } else if ("ibar" == C) {
                 if (
                   (("ibar" != this.world.getFG(l - 1, g) && 1 == q.get(this.world.getFG(l - 1, g), "walkThroughBlockHit")) || ("ibar" != this.world.getFG(l + 1, g) && 1 == q.get(this.world.getFG(l + 1, g), "walkThroughBlockHit"))) &&
                   0.3333333333333333 < w.modulus(m, 1) &&
                   0.6666666666666666 > w.modulus(m, 1)
                 )
                   return !0;
               } else if (e) {
                 C = this.world.getFG(l, g - 1);
                 var n = this.world.getFG(l, g - 2);
                 if (0.3333333333333333 < w.modulus(m, 1) && 0.6666666666666666 > w.modulus(m, 1))
                   if ("fnc" == I.substr(C, -3, 3)) {
                     if (
                       (this.world.getFG(l - 1, g - 1).split("g")[0] != C && 1 == q.get(this.world.getFG(l - 1, g - 1), "walkThroughBlockHit")) ||
                       (this.world.getFG(l + 1, g - 1).split("g")[0] != C && 1 == q.get(this.world.getFG(l + 1, g - 1), "walkThroughBlockHit"))
                     )
                       return !0;
                   } else if ("fnc" == I.substr(n, -3, 3) && 1 == q.get(C, "walkThroughBlockHit")) {
                     if (
                       (this.world.getFG(l - 1, g - 2).split("g")[0] != n && 1 == q.get(this.world.getFG(l - 1, g - 2), "walkThroughBlockHit")) ||
                       (this.world.getFG(l + 1, g - 2).split("g")[0] != n && 1 == q.get(this.world.getFG(l + 1, g - 2), "walkThroughBlockHit"))
                     )
                       return !0;
                   } else if (
                     ("fncg" == I.substr(C, -4, 4) && 1 != this.world.states.h["blockX" + l + "Y" + (g - 1)]) ||
                     ("fncg" == I.substr(n, -4, 4) && 1 != this.world.states.h["blockX" + l + "Y" + (g - 2)] && 1 == q.get(C, "walkThroughBlockHit"))
                   )
                     return !0;
               }
               p += f;
             }
             m += f;
           }
           return !1;
         },
         raycastSolidBlock: function (b, a, c, d) {
           b /= 1;
           a /= -1;
           c = new h(Math.cos(c), -Math.sin(c));
           var f = new h(0 <= c.x ? 1 : -1, 0 <= c.y ? 1 : -1),
             l = new h();
           l.x = 0 < f.x ? (1 - w.modulus(b, 1)) / c.x : w.modulus(b, 1) / -c.x;
           l.y = 0 < f.y ? (1 - w.modulus(a, 1)) / c.y : w.modulus(a, 1) / -c.y;
           for (var k = new h(Math.abs(1 / c.x), Math.abs(1 / c.y)), g = new h(b, a); Math.pow(g.x - b, 2) + Math.pow(g.y - a, 2) <= d * d; ) {
             var z = !0;
             l.x < l.y ? ((l.x += k.x), (g.x += f.x)) : ((z = !1), (l.y += k.y), (g.y += f.y));
             if (1 != q.get(this.world.getFG(g.x, g.y), "walkThroughBlockHit"))
               return (
                 (d = new e()),
                 (d.h.x = Math.floor(g.x)),
                 (d.h.y = Math.floor(g.y)),
                 (d.h.pixelX = b + Math.min(l.x, l.y) * c.x),
                 (d.h.pixelY = a + Math.min(l.x, l.y) * c.y),
                 (d.h.previousX = Math.floor(g.x + (z ? f.x : 0))),
                 (d.h.previousY = Math.floor(g.y + (z ? 0 : f.y))),
                 d
               );
           }
           return null;
         },
         unlockNewgroundsMedal: function (b) {
           1 != this.ngMedalsUnlocked.h[b] && ((this.ngMedalsUnlocked.h[b] = !0), m.Instance.API.unlockMedal(b));
         },
         unlockAchieve: function (b) {
           if (
             this.world.gamemode != U.gamemodes.h.CREATIVE &&
             this.world.gamemode != U.gamemodes.h.SPECTATOR &&
             (1 != this.world.achieve[b] && ((this.world.achieve[b] = 1), (this.achievementsEntityFrame = 2), (this.achievementMessage = g.achievements[b])), 0 == this.world.cheats)
           ) {
             b = 0;
             for (var a = this.world.achieve.length; b < a; ) {
               var c = b++;
               1 == this.world.achieve[c] && this.unlockNewgroundsMedal(g.newgroundsAchievementNames[c]);
             }
           }
         },
         damageTool: function () {
           if (this.world.gamemode != U.gamemodes.h.CREATIVE && null != q.get(this.world.get_selectedInventoryItemType(), "life") && "bl" != this.world.get_selectedInventoryItemType()) {
             var b = this.world.get_selectedInventoryItemExtra();
             Object.prototype.hasOwnProperty.call(b.h, "unbreakable") ||
               ((b = this.world.get_selectedInventoryItemExtra()),
               Object.prototype.hasOwnProperty.call(b.h, "unbreaking1")
                 ? 1 <= 3 * Math.random() && ((b = this.world.inventoryList[this.world.selectedInventoryItem]), b[2]++)
                 : ((b = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(b.h, "unbreaking2")
                     ? 1 <= 2 * Math.random() && ((b = this.world.inventoryList[this.world.selectedInventoryItem]), b[2]++)
                     : ((b = this.world.get_selectedInventoryItemExtra()),
                       Object.prototype.hasOwnProperty.call(b.h, "unbreaking3")
                         ? 1 > 3 * Math.random() && ((b = this.world.inventoryList[this.world.selectedInventoryItem]), b[2]++)
                         : ((b = this.world.get_selectedInventoryItemExtra()),
                           Object.prototype.hasOwnProperty.call(b.h, "unbreaking4")
                             ? 1 > 4 * Math.random() && ((b = this.world.inventoryList[this.world.selectedInventoryItem]), b[2]++)
                             : ((b = this.world.inventoryList[this.world.selectedInventoryItem]), b[2]++)))),
               parseFloat(E.string(this.world.inventoryList[this.world.selectedInventoryItem][2])) >= parseFloat(E.string(q.get(this.world.get_selectedInventoryItemType(), "life"))) &&
                 (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()));
           }
         },
         damageArmor: function (b, a) {
           this.world.gamemode == U.gamemodes.h.CREATIVE ||
             Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[b][2]).h, "unbreakable") ||
             (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[b][2]).h, "unbreaking1")
               ? 0 != Math.floor(3 * Math.random()) && (this.world.armors[b][1] -= Math.round(a))
               : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[b][2]).h, "unbreaking2")
               ? 0 != Math.floor(2 * Math.random()) && (this.world.armors[b][1] -= Math.round(a))
               : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[b][2]).h, "unbreaking3")
               ? 0 == Math.floor(3 * Math.random()) && (this.world.armors[b][1] -= Math.round(a))
               : Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[b][2]).h, "unbreaking4")
               ? 0 == Math.floor(4 * Math.random()) && (this.world.armors[b][1] -= Math.round(a))
               : (this.world.armors[b][1] -= Math.round(a)),
             parseFloat(E.string(this.world.armors[b][1])) >= parseFloat(E.string(q.get(this.world.armors[b][0], "life"))) && ((this.world.armors[b] = ["air", 0, new e()]), this.updateArmorRenderers()));
         },
         isEmptyItem: function (b) {
           return null == b || null == b[0] || "" == b[0] || "air" == b[0] || "na" == b[0] || 1 > b[1] ? !0 : !1;
         },
         isEmptyBlock: function (b) {
           b = b.toLowerCase();
           return "undefined" == b || "" == b || "na" == b || "air" == b ? !0 : !1;
         },
         addDrop: function (b, a, c, d, f, l) {
           null == d && (d = 1);
           if ("undefined" == b || "air" == b || null == b || "na" == b || "" == b || 1 > d) return !1;
           var k = Math.floor(Math.random() * w.MAX_INT()),
             h = new e();
           null != q.get(b, "defaultItemExtra") && (h = O.clone(q.get(b, "defaultItemExtra")));
           if (null != l) {
             l = l.h;
             for (var g = Object.keys(l), m = g.length, A = 0; A < m; ) {
               var p = g[A++],
                 n = O.clone(l[p]);
               h.h[p] = n;
             }
           }
           b = [a, c, b, 0, null != f ? f : 0, d, h];
           this.world.drops.h["drop" + k] = b;
           b = new Pb("drop", this.world.drops, "drop" + k, b, this, this.world);
           this.world.entities.h["drop" + k] = b;
           b.set_x(a);
           b.set_y(c);
           b.speedX = 2 * Math.random() - 1;
           b.speedY = 4 * Math.random() - 2;
           return "drop" + k;
         },
         dropXP: function (b, a, c, d, f, l) {
           null == f && (f = !1);
           null == d && (d = 0);
           d = Math.max(0, c + Math.random() * d);
           if (0 != d)
             for (c = f ? 1 : Math.max(1, Math.log(c) / Math.log(2.5)) | 0, f = Math.floor(d / c), l = 0; l < c; ) {
               var e = (Math.random() * w.MAX_INT()) | 0,
                 h = this.world.xpOrbs,
                 z = g.makeDynamicArray(["xpOrb" + e, b, a, g.migrateSpeed(6 * Math.random() - 3), g.migrateSpeed(6 * Math.random() - 3), l++ == c - 1 ? d : f, 300 * m.Instance.get_fps()]);
               h.h["xpOrb" + e] = z;
               d -= f;
               h = this.world.entities;
               z = new Cd("xpOrb", this.world.xpOrbs, "xpOrb" + e, this.world.xpOrbs.h["xpOrb" + e], this, this.world);
               h.h["xpOrb" + e] = z;
               H.__cast(this.world.entities.h["xpOrb" + e], Cd).enderDragonOrb = !0;
             }
         },
         addToInventoryOrDrop: function (b, a, c, d, f, l) {
           null == c && (c = 0);
           null == a && (a = 1);
           var e = this.addToInventory(b, a, c, d);
           0 != a - e && (null == f && (f = this.world.worldX), null == l && (l = this.world.worldY), this.addDrop(b, f, l, a - e, c, d));
         },
         addToInventory: function (b, a, c, d) {
           null == c && (c = 0);
           null == a && (a = 1);
           null == d && (d = new e());
           for (var f = a, l = !1, k = 0, h = a; k < h; ) {
             ++k;
             l = !1;
             for (var g = 0; 45 > g; ) {
               var m = g++;
               if (this.world.inventoryItem(m)[0] == b && 64 > this.world.inventoryItem(m)[1] && 1 != q.get(b, "unstackable") && this.sameExtras(this.world.inventoryItem(m)[3], d)) {
                 l = this.world.inventoryItem(m);
                 l[1]++;
                 --a;
                 l = !0;
                 break;
               }
             }
             if (!l) break;
           }
           if (0 < a)
             for (k = 0, h = a; k < h; ) {
               ++k;
               for (g = 0; 45 > g; )
                 if (((m = g++), this.isEmpty(m))) {
                   this.world.inventoryList[m] = [b, 1, c, O.clone(d)];
                   --a;
                   l = !0;
                   break;
                 } else if (this.world.inventoryItem(m)[0] == b && 64 > this.world.inventoryItem(m)[1] && 1 != q.get(b, "unstackable") && this.sameExtras(this.world.inventoryItem(m)[3], d)) {
                   l = this.world.inventoryItem(m);
                   l[1]++;
                   --a;
                   l = !0;
                   break;
                 }
               if (!l) break;
             }
           return f - a;
         },
         ef2: function () {
           if (this.generateEnder) {
             var b = 1,
               a = O.getTimer();
             this.blackScreen.statis = "Generating the End...";
             this.blackScreen.loadingBar = this.currentX / (this.world.worldWidth / 3);
             for (var c = !1; 1 == b; )
               null == this.world.scene[this.currentX] && (this.world.scene[this.currentX] = []),
                 0 < this.currentY
                   ? (this.rTA(this.currentX - 1, this.currentY - 1, "es"), 5 >= this.randomNumber(0, 599) && 40 > this.currentY && this.makeMine(this.currentX - 1, this.currentY - 1, 3, 2 + this.randomNumber(0, 3), "egem"))
                   : (this.currentX > this.world.worldWidth / 3 && ((c = !0), (b = 0)),
                     0 == this.randomNumber(0, 7) && (this.atHeight = Math.floor(Math.min(68, Math.max(58, this.atHeight + 2 * this.randomNumber(0, 1) - 1)))),
                     (this.currentY = this.atHeight),
                     this.currentX++,
                     null == this.world.scene[this.currentX] && (this.world.scene[this.currentX] = [])),
                 this.currentY--,
                 a + 500 < O.getTimer() && (b = 0);
             if (1 == c) {
               this.makeEnderMine(1, 75);
               this.makeEnderMine(Math.round(this.world.worldWidth / 3), 75);
               for (b = 45; b <= this.world.worldWidth / 3 - 45; ) this.makeEnderMine(b, Math.floor(this.randomNumber(4, 45))), (b += Math.floor(this.randomNumber(1, 4)));
               for (var d = 15; 0 <= d; ) {
                 var f = Math.round((d / 15) * (this.world.worldWidth / 3 - 80) + 40 + this.randomNumber(-3, 3));
                 if (10 < this.world.scene[f].length) {
                   var l = this.world.scene[f].length - 5,
                     e = this.randomNumber(1, 2),
                     C = this.randomNumber(8, 25);
                   b = 0;
                   for (a = Math.floor(C + 1); b < a; ) {
                     var z = b++;
                     for (c = Math.floor(-e); 1 > c; ) {
                       var m = c++;
                       z == C || (8 <= z && 1 != this.randomNumber(1, 3)) ? (this.rTA(f + m, l + z, "ob"), this.rTA(f - m, l + z, "ob")) : (this.rTA(f + m, l + z, "bdob"), this.rTA(f - m, l + z, "bdob"));
                     }
                   }
                   this.world.enderCrystals.h["blockX" + f + "Y" + (l + C + 1)] = [Math.floor(f), Math.floor(l + C + 1)];
                 }
                 --d;
               }
               b = Math.round(this.world.worldWidth / 6) - 3;
               for (a = Math.round(this.world.worldWidth / 6) + 3 + 1; b < a; ) for (d = b++, c = 51; 55 > c; ) (f = c++), 51 == f && this.world.setFG(d, f - 1, "ob"), this.world.setFG(d, f, "air");
               this.world.setFG(Math.round(this.world.worldWidth / 6) - 2, 51, "th");
               this.world.setFG(Math.round(this.world.worldWidth / 6) + 2, 51, "th");
               for (b = 0; 26 > b; ) (c = b++), null == this.world.scene[Math.round(this.world.worldWidth / 3) + c] && (this.world.scene[Math.round(this.world.worldWidth / 3) + c] = []);
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 20, 61, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 21, 61, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 21, 60, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 22, 61, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 22, 60, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 22, 59, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 22, 62, "sign");
               this.world.signs.h["blockX" + (Math.round(this.world.worldWidth / 3) + 22) + "Y62"] = "\nFus Ro Dah!";
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 23, 61, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 23, 60, "es");
               this.world.setFG(Math.round(this.world.worldWidth / 3) + 24, 61, "es");
               b = K.nextMobID();
               a = K.prepareMobData("enderdragon", b, 50, 80, 333);
               a.h.official = !0;
               this.world.mobs.h[b] = a;
               this.generatingWorld = 0;
               this.generateEnder = this.generateNether = !1;
               this.making = !0;
             }
           } else if (this.generateNether) {
             b = 1;
             a = O.getTimer();
             this.blackScreen.statis = "Generating Nether...";
             this.blackScreen.loadingBar = this.currentX / this.world.worldWidth;
             for (this.finishedNether = !1; 1 == b; )
               null == this.world.scene[this.currentX] && (this.world.scene[this.currentX] = []),
                 0 <= this.currentY
                   ? 10 >= this.randomNumber(0, 999)
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 3, 2 + this.randomNumber(0, 2), "ob")
                     : 10 >= this.randomNumber(0, 999)
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 3, 2 + this.randomNumber(0, 3), "boneb")
                     : this.rTA(this.currentX - 1, this.currentY - 1, "n")
                   : (this.currentX > this.world.worldWidth && ((this.finishedNether = !0), (b = 0)),
                     (this.currentY = this.world.worldHeight),
                     this.currentX++,
                     null == this.world.scene[this.currentX] && (this.world.scene[this.currentX] = [])),
                 this.currentY--,
                 a + 500 < O.getTimer() && (b = 0);
             if (1 == this.finishedNether) {
               b = 0;
               for (a = 120 + this.randomNumber(0, 30) + 1; b < a; ) ++b, this.makeMine(this.randomNumber(0, this.world.worldWidth - 1), 10 + this.randomNumber(0, this.world.worldHeight - 10), this.randomNumber(0, 3) + 5, 30, "air", !0, !0);
               for (b = 0; 501 > b; )
                 for (++b, a = this.randomNumber(0, this.world.worldHeight), c = this.randomNumber(0, this.world.worldWidth), d = 0; -20 <= d; )
                   "n" == this.world.getFG(c, a + 1 + d) && "air" == this.world.getFG(c, a + d) && (this.makeMine(c, a + d, 3, 3, "glow"), (d = -21)), --d;
               b = 0;
               for (a = 80 + this.randomNumber(0, 20) + 1; b < a; ) ++b, this.makeMine(this.randomNumber(0, this.world.worldWidth - 1), this.randomNumber(0, this.world.worldHeight), 4, 10, "la", !0, !0);
               this.makeMine(Math.floor(this.world.worldWidth / 2), 30, 5, 5, "air", !0, !0);
               this.makeMine(Math.floor(this.world.worldWidth / 2), 30, 5, 5, "air", !0, !0);
               this.makeMine(Math.floor(this.world.worldWidth / 2), 30, 5, 5, "air", !0, !0);
               this.world.setFG(this.world.worldWidth / 2, 29, "portalstone");
               this.world.setFG(this.world.worldWidth / 2 - 1, 29, "portalstone");
               this.world.setFG(this.world.worldWidth / 2 - 2, 29, "portalstone");
               this.world.setFG(this.world.worldWidth / 2 + 1, 29, "portalstone");
               this.world.setFG(this.world.worldWidth / 2 - 2, 30, "portalstone");
               this.world.setFG(this.world.worldWidth / 2 + 1, 30, "portalstone");
               this.world.setFG(this.world.worldWidth / 2, 30, "portal");
               this.world.setFG(this.world.worldWidth / 2 - 1, 30, "portal");
               this.world.setFG(this.world.worldWidth / 2, 31, "air");
               this.world.setFG(this.world.worldWidth / 2 - 1, 31, "air");
               this.world.setFG(this.world.worldWidth / 2 + 1, 31, "air");
               this.world.setFG(this.world.worldWidth / 2 - 2, 31, "air");
               b = 0;
               for (a = this.world.worldHeight - 1 + 1; b < a; ) this.world.setFG(0, b++, "br");
               b = 0;
               for (a = this.world.worldWidth - 2 + 1; b < a; ) this.world.setFG(b++, 0, "br");
               b = 0;
               for (a = this.world.worldWidth - 2 + 1; b < a; ) this.world.setFG(b++, this.world.worldHeight - 1, "br");
               b = 0;
               for (a = this.world.worldHeight - 1 + 1; b < a; ) this.world.setFG(this.world.worldWidth - 2, b++, "br");
               this.generatingWorld = 0;
               this.generateNether = !1;
               this.making = !0;
             }
           } else if (1 == this.generatingWorld)
             for (b = 1, this.blackScreen.statis = "Generating world...", a = O.getTimer(), this.blackScreen.loadingBar = this.currentX / this.world.worldWidth; ; ) {
               if (0 <= this.currentY)
                 if (
                   (this.lastWorldHeight + this.slope >= 1.1 * this.world.worldHeight && --this.slope,
                   this.lastWorldHeight + this.slope <= 0.7 * this.world.worldHeight && (this.slope += 1),
                   this.lastWorldHeight + this.slope <= 0.76 * this.world.worldHeight && ((this.slopeNoMatterWhat = 2), (this.slope = 1)),
                   this.currentY - 1 >= this.lastWorldHeight - 2)
                 ) {
                   1 == this.randomNumber(0, 6) && ((c = this.randomNumber(0, 50)), (this.slope = 25 >= c ? 0 : 40 >= c ? 2 * this.randomNumber(0, 1) - 1 : 4 * this.randomNumber(0, 1) - 2));
                   this.timeUntilNextBiome--;
                   0 >= this.timeUntilNextBiome &&
                     (1 == this.randomNumber(0, 3)
                       ? (this.biome = g.biomes[0])
                       : 1 == this.randomNumber(0, 3)
                       ? (this.biome = g.biomes[1])
                       : 1 == this.randomNumber(0, 2)
                       ? (this.biome = g.biomes[2])
                       : 1 == this.randomNumber(0, 2)
                       ? (this.biome = g.biomes[3])
                       : 1 == this.randomNumber(0, 2)
                       ? (this.biome = g.biomes[4])
                       : 1 == this.randomNumber(0, 2)
                       ? (this.biome = g.biomes[5])
                       : 1 != this.randomNumber(0, 3)
                       ? (this.biome = g.biomes[0])
                       : (this.biome = g.biomes[6]),
                     (this.timeUntilNextBiome = 40 + this.randomNumber(0, 20)));
                   0 == this.randomNumber(0, 100) && (this.snowyRegion = !1);
                   0 == this.randomNumber(0, 200) && (this.snowyRegion = !0);
                   this.world.biomeList[this.currentX] = this.biome;
                   "water" != this.biome && (this.noWater = !0);
                   if ("ruins" == this.biome)
                     (this.slopeNoMatterWhat = 0),
                       1 != this.inRoom
                         ? 1 == this.randomNumber(0, 4) &&
                           ((this.lastPole = this.currentX - 1),
                           (this.inRoom = !0),
                           this.rTA(this.currentX - 1, this.currentY, "cs"),
                           this.rTA(this.currentX - 1, this.currentY + 1, "cs"),
                           this.rTA(this.currentX - 1, this.currentY + 2, "cs"),
                           0 != this.randomNumber(0, 2)
                             ? (this.rTA(this.currentX - 1, this.currentY + 3, "cs"),
                               0 != this.randomNumber(0, 2)
                                 ? this.rTA(this.currentX - 1, this.currentY + 4, "cs")
                                 : (this.rTA(this.currentX - 1, this.currentY + 4, "moss"), 0 != this.randomNumber(0, 2) && (this.rTA(this.currentX, this.currentY + 3, "cs"), this.rTA(this.currentX, this.currentY + 4, "moss"))))
                             : (this.rTA(this.currentX - 1, this.currentY + 3, "moss"), 0 != this.randomNumber(0, 2) && (this.rTA(this.currentX, this.currentY + 2, "cs"), this.rTA(this.currentX, this.currentY + 3, "moss"))))
                         : this.lastPole + 3 + this.randomNumber(0, 3) < this.currentX - 1
                         ? 1 == this.randomNumber(0, 3) &&
                           ((this.lastPole = this.currentX - 1),
                           (this.inRoom = !0),
                           this.rTA(this.currentX - 1, this.currentY, "cs"),
                           this.rTA(this.currentX - 1, this.currentY + 1, "cs"),
                           this.rTA(this.currentX - 1, this.currentY + 2, "cs"),
                           0 != this.randomNumber(0, 2)
                             ? (this.rTA(this.currentX - 1, this.currentY + 3, "cs"),
                               0 != this.randomNumber(0, 2)
                                 ? this.rTA(this.currentX - 1, this.currentY + 4, "cs")
                                 : (this.inRoom && 0 != this.randomNumber(0, 2) && (this.rTA(this.currentX, this.currentY + 4, "moss"), this.rTA(this.currentX, this.currentY + 3, "cs")),
                                   0 != this.randomNumber(0, 2) && (this.rTA(this.currentX - 2, this.currentY + 4, "moss"), this.rTA(this.currentX - 2, this.currentY + 3, "cs"))))
                             : (this.inRoom && 0 != this.randomNumber(0, 2) && (this.rTA(this.currentX, this.currentY + 3, "moss"), this.rTA(this.currentX, this.currentY + 2, "cs")),
                               0 != this.randomNumber(0, 2) && (this.rTA(this.currentX - 2, this.currentY + 3, "moss"), this.rTA(this.currentX - 2, this.currentY + 2, "cs"))))
                         : 1 == this.randomNumber(0, 10) && (this.rTA(this.currentX - 1, this.currentY, "chest"), this.prizeChest(this.currentX - 1, this.currentY));
                   else if ("water" == this.biome)
                     if (1 == this.noWater) (this.noWater = !1), (this.waterHeight = this.currentY - 1), (this.slope = -4), (this.slopeNoMatterWhat = -3);
                     else {
                       c = 0;
                       d = !1;
                       0 == this.randomNumber(0, 25) && this.rTA(this.currentX - 2, this.waterHeight + 1, "lp");
                       for (f = this.waterHeight; 30 < f; )
                         "air" == this.world.getFG(this.currentX - 2, f)
                           ? (1 == this.randomNumber(0, 40) && (d = !0), d ? this.rTA(this.currentX - 2, f, "sw") : this.rTA(this.currentX - 2, f, "wr"), ++c)
                           : (1 == this.randomNumber(0, 30) && 1 < c && this.makeMine(this.currentX - 2, this.currentY, 3, 3, "coral"), (f = 0)),
                           --f;
                       0 == c && 0 == this.randomNumber(0, 5) ? (this.timeUntilNextBiome = 0) : 2 == this.timeUntilNextBiome && ((this.timeUntilNextBiome = 3), (this.slopeNoMatterWhat = 2));
                       this.slope = 25 < this.timeUntilNextBiome ? Math.floor(Math.max(this.slope - this.randomNumber(-3, 6), -6)) : Math.floor(Math.min(this.slope + this.randomNumber(-3, 6), 6));
                     }
                   else
                     "mountain" == this.biome &&
                       (this.slope = this.slopeNoMatterWhat = 20 < this.timeUntilNextBiome ? Math.floor(Math.min(this.slope + this.randomNumber(-1, 2), 4)) : Math.floor(Math.max(this.slope - this.randomNumber(-1, 2), -4)));
                   1 == this.world.snowRegions.h[this.currentX - 5] && "desert" != this.biome && 0 <= this.currentX - 5 && this.rTA(this.currentX - 5, this.world.scene[this.currentX - 5].length, "snow");
                   "desert" != this.biome && 1 != this.snowyRegion && 1 == this.randomNumber(0, 150) && (this.snowyRegion = !0);
                   this.snowyRegion && ((this.world.snowRegions.h[this.currentX - 1] = !0), 1 == this.randomNumber(0, 50) && (this.snowyRegion = !1));
                   "desert" == this.biome || "water" == this.biome
                     ? this.rTA(this.currentX - 1, this.currentY - 1, "sd")
                     : "mushroom" == this.biome
                     ? this.rTA(this.currentX - 1, this.currentY - 1, "myc")
                     : "ruins" == this.biome
                     ? (this.rTA(this.currentX - 1, this.currentY - 1, "cs"), "air" == this.world.getFG(this.currentX - 1, this.currentY) && this.rTA(this.currentX - 1, this.currentY, "moss"))
                     : this.rTA(this.currentX - 1, this.currentY - 1, "dt");
                   if (1 == this.randomNumber(0, 100) || (1 == this.startBamboo && "desert" != this.biome && "water" != this.biome && "mountain" != this.biome && "mushroom" != this.biome))
                     1 != this.startBamboo && ((this.startBamboo = !0), (this.numBamboo = this.randomNumber(3, 7))),
                       this.numBamboo--,
                       this.rTA(this.currentX - 1, this.currentY, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + this.currentY] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 1, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 1)] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 2, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 2)] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 3, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 3)] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 4, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 4)] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 5, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 5)] = !0),
                       this.rTA(this.currentX - 1, this.currentY + 6, "bb"),
                       (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 6)] = !0),
                       0 != this.randomNumber(0, 2) &&
                         (this.rTA(this.currentX - 1, this.currentY + 7, "bb"),
                         (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 7)] = !0),
                         0 != this.randomNumber(0, 2) &&
                           (this.rTA(this.currentX - 1, this.currentY + 8, "bb"),
                           (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 8)] = !0),
                           0 != this.randomNumber(0, 2) &&
                             (this.rTA(this.currentX - 1, this.currentY + 9, "bb"),
                             (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 9)] = !0),
                             0 != this.randomNumber(0, 2) && (this.rTA(this.currentX - 1, this.currentY + 10, "bb"), (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 10)] = !0))))),
                       0 >= this.numBamboo && (this.startBamboo = !1);
                   else if ((1 == this.randomNumber(0, 400) || (1 == this.startPumpkinPatch && 1 == this.randomNumber(0, 2))) && "desert" != this.biome && "water" != this.biome && "mountain" != this.biome && "mushroom" != this.biome)
                     1 != this.startPumpkinPatch && ((this.startPumpkinPatch = !0), (this.numPumpkins = this.randomNumber(3, 7))),
                       this.numPumpkins--,
                       this.rTA(this.currentX - 1, this.currentY, "pk"),
                       0 >= this.numPumpkins && (this.startPumpkinPatch = !1);
                   else if ("desert" == this.biome)
                     (this.startPumpkinPatch = !1),
                       1 == this.randomNumber(0, 6)
                         ? (this.rTA(this.currentX - 1, this.currentY, "ct"),
                           (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + this.currentY] = !0),
                           this.rTA(this.currentX - 1, this.currentY + 1, "ct"),
                           (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 1)] = !0),
                           0 != this.randomNumber(0, 2) && (this.rTA(this.currentX - 1, this.currentY + 2, "ct"), (this.world.firstTimes.h["blockX" + (this.currentX - 1) + "Y" + (this.currentY + 2)] = !0)))
                         : 0 == this.randomNumber(0, 2) && (1 == this.randomNumber(1, 3) ? this.rTA(this.currentX - 1, this.currentY, "shrub") : 1 == this.randomNumber(1, 3) && this.rTA(this.currentX - 1, this.currentY, "ds"));
                   else if ("forest" == this.biome && 0 == this.randomNumber(0, 3) && "wd1" != this.world.getFG(this.currentX - 1, this.currentY + 2) && "wd1" != this.world.getFG(this.currentX - 2, this.currentY + 2))
                     this.makeTree(this.currentX, this.currentY, !0);
                   else if ("mushroom" == this.biome)
                     0 != this.randomNumber(0, 1)
                       ? this.rTA(this.currentX - 1, this.currentY, "ms" + this.randomNumber(1, 2))
                       : 0 == this.randomNumber(0, 3) &&
                         "ms" != I.substr(this.world.getFG(this.currentX - 1, this.currentY + 2), 0, 2) &&
                         "ms" != I.substr(this.world.getFG(this.currentX - 2, this.currentY + 2), 0, 2) &&
                         "ms" != I.substr(this.world.getFG(this.currentX - 3, this.currentY + 2), 0, 2) &&
                         "ms" != I.substr(this.world.getFG(this.currentX - 4, this.currentY + 2), 0, 2) &&
                         this.makeGiantMushroom(this.currentX, this.currentY, Math.floor(this.randomNumber(1, 2)), !0);
                   else if ("plain" == this.biome || "forest" == this.biome)
                     1 == this.randomNumber(0, 100)
                       ? (this.rTA(this.currentX - 1, this.currentY, "sc"), this.rTA(this.currentX - 1, this.currentY + 1, "sc"), this.rTA(this.currentX - 1, this.currentY + 2, "sc"))
                       : 1 == this.randomNumber(0, 5)
                       ? 1 != this.randomNumber(1, 4)
                         ? this.rTA(this.currentX - 1, this.currentY, "fw" + this.randomNumber(1, 2))
                         : 1 == this.randomNumber(1, 2) && this.rTA(this.currentX - 1, this.currentY, "ms" + this.randomNumber(1, 2))
                       : 0 != this.randomNumber(0, 5)
                       ? 1 == this.randomNumber(1, 2) && this.rTA(this.currentX - 1, this.currentY, "lgr")
                       : 0 != this.randomNumber(0, 3) && 1 == this.randomNumber(1, 2) && this.rTA(this.currentX - 1, this.currentY, "shrub");
                 } else
                   this.randomNumber(0, 1300) <= this.coalIronFrequency
                     ? 1 == this.randomNumber(0, 1)
                       ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 2 + this.randomNumber(0, 2), "clore")
                       : this.makeMine(this.currentX - 1, this.currentY - 1, 2, 2 + this.randomNumber(0, 2), "in")
                     : this.randomNumber(0, 1500) <= this.goldFrequency && 60 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 3 + this.randomNumber(0, 2), "gd")
                     : this.randomNumber(0, 1500) <= this.goldFrequency && 60 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 3 + this.randomNumber(0, 2), "lap")
                     : this.randomNumber(0, 1500) <= this.redstoneFrequency && 50 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 2 + this.randomNumber(0, 2), "rs")
                     : this.randomNumber(0, 1500) <= this.diamondFrequency && 40 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 2 + this.randomNumber(0, 1), "dmore")
                     : this.randomNumber(0, 1500) <= this.topazFrequency && 50 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 2, 2 + this.randomNumber(0, 1), "to")
                     : this.randomNumber(0, 1200) <= this.oddStoneFrequency && 60 > this.currentY
                     ? this.makeMine(this.currentX - 1, this.currentY - 1, 3, 2 + this.randomNumber(0, 2), "os")
                     : this.randomNumber(0, 1200) <= this.gravelFrequency
                     ? this.makeMine(this.currentX - 3, this.currentY - 1, 5, 5, "gv")
                     : this.currentY - 1 >= this.lastWorldHeight - 4 - this.randomNumber(0, 3) - ("desert" == this.biome ? 3 : 0) + ("mountain" == this.biome ? 3 : 0)
                     ? "desert" == this.biome || "water" == this.biome
                       ? (this.currentY - 1 <= this.lastWorldHeight - 4 - this.randomNumber(0, 2) - ("desert" == this.biome ? 3 : 0)
                           ? this.rTA(this.currentX - 1, this.currentY - 1, "ss")
                           : this.rTA(this.currentX - 1, this.currentY - 1, "sd"),
                         "desert" == this.biome && 1 == this.randomNumber(0, 30) && this.makeMine(this.currentX - 1, this.currentY - 1, 3, 5, "cy1"))
                       : this.rTA(this.currentX - 1, this.currentY - 1, "dt")
                     : this.rTA(this.currentX - 1, this.currentY - 1, "r");
               else {
                 if ("desert" == this.biome || "plain" == this.biome || "water" == this.biome) this.slope = Math.round(this.slope / 3);
                 this.lastSlope = 0;
                 null != this.slopeNoMatterWhat
                   ? ((this.lastSlope = this.slopeNoMatterWhat), (this.lastWorldHeight += this.slopeNoMatterWhat), (this.slopeNoMatterWhat = null))
                   : 0 != this.randomNumber(0, 2) &&
                     (1 == this.randomNumber(0, 50) && "water" != this.biome && "plain" != this.biome
                       ? this.lastWorldHeight <= 0.7 * this.world.worldHeight
                         ? ((this.largeSlope = this.randomNumber(7, 10)),
                           (this.lastWorldHeight += this.largeSlope),
                           (this.lastSlope = this.largeSlope),
                           1 == this.randomNumber(0, 1) && this.caves.push([this.currentX + 2, Math.round(this.lastWorldHeight + this.largeSlope / 2), this.largeSlope]))
                         : this.lastWorldHeight >= 1.1 * this.world.worldHeight
                         ? ((this.largeSlope = -this.randomNumber(7, 10)),
                           (this.lastWorldHeight += this.largeSlope),
                           (this.lastSlope = this.largeSlope),
                           1 == this.randomNumber(0, 1) && this.caves.push([this.currentX - 2, Math.round(this.lastWorldHeight + this.largeSlope / 2), this.largeSlope]))
                         : ((this.largeSlope = (2 * this.randomNumber(0, 1) - 1) * this.randomNumber(7, 10)),
                           (this.lastWorldHeight += this.largeSlope),
                           (this.lastSlope = this.largeSlope),
                           1 == this.randomNumber(0, 1) && this.caves.push([this.currentX + (0 < this.largeSlope ? 1 : 0), Math.round(this.lastWorldHeight + this.largeSlope / 2), this.largeSlope]))
                       : ((this.lastSlope = this.slope), (this.lastWorldHeight += this.slope)));
                 this.currentY = Math.floor(this.lastWorldHeight);
                 this.currentX++;
               }
               this.currentY--;
               this.currentX > this.world.worldWidth && ((this.generatingWorld = 2), (b = 0), (this.making = !0));
               a + 500 < O.getTimer() && (b = 0);
               if (1 != b) break;
             }
           else if (2 == this.generatingWorld) {
             a = {};
             for (b = 0; 16 > b; ) a[b++] = [];
             b = Math.floor(this.world.worldWidth / 2 + this.randomNumber(-300, 200));
             c = 7;
             d = 9;
             l = "library;empty;empty2;chest1;chest2;lava;water;well;acid;mob spawner;fountain".split(";");
             this.buildRoom(126 + b, 240, 12, 6, "portal");
             a[7][9] = ["portal"];
             this.world.endPortal = new h(126 + b + 6, 249);
             f = 1;
             for (
               e = [
                 [1, 1],
                 [-1, -1],
                 [-1, 1],
                 [1, -1],
                 [1, 0],
                 [0, 1],
                 [-1, 0],
                 [0, -1],
               ];
               60 >= f;
 
             ) {
               C = this.randomNumber(0, 7);
               for (z = 50; 0 <= z; ) {
                 if (0 < c + e[C][0] && 15 > c + e[C][0] && 0 < d + e[C][1] && 10 > d + e[C][1] && (null == a[c + e[C][0]] || null == a[c + e[C][0]][d + e[C][1]] || null == a[c + e[C][0]][d + e[C][1]][0] || 10 > z))
                   if (-1 == e[C][0] && 1 == e[C][1]) {
                     if (null == a[c - 1] || null == a[c - 1][d + 1] || -1 != a[c - 1][d + 1][1] || (null != a[c - 1][d + 1] && 1 == a[c - 1][d + 1][2]))
                       if (null == a[c - 1] || null == a[c - 1][d] || -1 != a[c - 1][d][1] || (null != a[c - 1][d] && 1 == a[c - 1][d][2]))
                         if (null == a[c][d + 1] || 1 != a[c][d + 1][1] || (null != a[c][d + 1] && -1 == a[c][d + 1][2]))
                           if (null == a[c][d] || 1 != a[c][d][1] || (null != a[c][d] && -1 == a[c][d][2]))
                             if (null == a[c - 1] || null == a[c - 1][d - 1] || -1 != a[c - 1][d - 1][1] || null == a[c - 1] || null == a[c - 1][d - 1] || -1 != a[c - 1][d - 1][2])
                               if (null == a[c][d + 2] || 1 != a[c][d + 2][1] || null == a[c][d + 2] || 1 != a[c][d + 2][2]) break;
                   } else if (-1 == e[C][0] && -1 == e[C][1]) {
                     if (null == a[c - 1] || null == a[c - 1][d - 1] || -1 != a[c - 1][d - 1][1] || (null != a[c - 1][d - 1] && -1 == a[c - 1][d - 1][2]))
                       if (null == a[c - 1] || null == a[c - 1][d] || -1 != a[c - 1][d][1] || (null != a[c - 1][d] && -1 == a[c - 1][d][2]))
                         if (null == a[c][d - 1] || 1 != a[c][d - 1][1] || (null != a[c][d - 1] && 1 == a[c][d - 1][2]))
                           if (null == a[c][d] || 1 != a[c][d][1] || (null != a[c][d] && 1 == a[c][d][2]))
                             if (null == a[c - 1] || null == a[c - 1][d + 1] || -1 != a[c - 1][d + 1][1] || null == a[c - 1] || null == a[c - 1][d + 1] || 1 != a[c - 1][d + 1][2])
                               if (null == a[c][d - 2] || 1 != a[c][d - 2][1] || null == a[c][d - 2] || -1 != a[c][d - 2][2]) break;
                   } else if (1 == e[C][0] && 1 == e[C][1]) {
                     if (null == a[c + 1] || null == a[c + 1][d + 1] || 1 != a[c + 1][d + 1][1] || (null != a[c + 1][d + 1] && 1 == a[c + 1][d + 1][2]))
                       if (null == a[c + 1] || null == a[c + 1][d] || 1 != a[c + 1][d][1] || (null != a[c + 1][d] && 1 == a[c + 1][d][2]))
                         if (null == a[c][d + 1] || -1 != a[c][d + 1][1] || (null != a[c][d + 1] && -1 == a[c][d + 1][2]))
                           if (null == a[c][d] || -1 != a[c][d][1] || (null != a[c][d] && -1 == a[c][d][2]))
                             if (null == a[c + 1] || null == a[c + 1][d - 1] || 1 != a[c + 1][d - 1][1] || null == a[c + 1] || null == a[c + 1][d - 1] || -1 != a[c + 1][d - 1][2])
                               if (null == a[c][d + 2] || -1 != a[c][d + 2][1] || null == a[c][d + 2] || 1 != a[c][d + 2][2]) break;
                   } else if (1 == e[C][0] && -1 == e[C][1]) {
                     if (null == a[c + 1] || null == a[c + 1][d - 1] || 1 != a[c + 1][d - 1][1] || (null != a[c + 1][d - 1] && -1 == a[c + 1][d - 1][2]))
                       if (null == a[c + 1] || null == a[c + 1][d] || 1 != a[c + 1][d][1] || (null != a[c + 1][d] && -1 == a[c + 1][d][2]))
                         if (null == a[c][d - 1] || -1 != a[c][d - 1][1] || (null != a[c][d - 1] && 1 == a[c][d - 1][2]))
                           if (null == a[c][d] || -1 != a[c][d][1] || (null != a[c][d] && 1 == a[c][d][2]))
                             if (null == a[c + 1] || null == a[c + 1][d + 1] || 1 != a[c + 1][d + 1][1] || null == a[c + 1] || null == a[c + 1][d + 1] || 1 != a[c + 1][d + 1][2])
                               if (null == a[c][d - 2] || -1 != a[c][d - 2][1] || null == a[c][d - 2] || -1 != a[c][d - 2][2]) break;
                   } else if (-1 == e[C][0] && 0 == e[C][1]) {
                     if (null == a[c][d] || 1 != a[c][d][1] || (null != a[c][d] && 0 == a[c][d][2]))
                       if (null == a[c - 1] || null == a[c - 1][d] || -1 != a[c - 1][d][1] || (null != a[c - 1][d] && 0 == a[c - 1][d][2]))
                         if (null == a[c][d + 1] || 1 != a[c][d + 1][1] || null == a[c][d + 1] || 1 != a[c][d + 1][2])
                           if (null == a[c - 1] || null == a[c - 1][d + 1] || -1 != a[c - 1][d + 1][1] || null == a[c - 1] || null == a[c - 1][d + 1] || 1 != a[c - 1][d + 1][2])
                             if (null == a[c - 1] || null == a[c - 1][d - 1] || -1 != a[c - 1][d - 1][1] || null == a[c - 1] || null == a[c - 1][d - 1] || -1 != a[c - 1][d - 1][2])
                               if (null == a[c][d - 1] || 1 != a[c][d - 1][1] || null == a[c][d - 1] || -1 != a[c][d - 1][2]) break;
                   } else if (1 == e[C][0] && 0 == e[C][1]) {
                     if (null == a[c][d] || 1 != a[c][d][1] || (null != a[c][d] && 0 == a[c][d][2]))
                       if (null == a[c + 1] || null == a[c + 1][d] || 1 != a[c + 1][d][1] || (null != a[c + 1][d] && 0 == a[c + 1][d][2]))
                         if (null == a[c][d + 1] || -1 != a[c][d + 1][1] || null == a[c][d + 1] || 1 != a[c][d + 1][2])
                           if (null == a[c - 1] || null == a[c - 1][d + 1] || 1 != a[c - 1][d + 1][1] || null == a[c - 1] || null == a[c - 1][d + 1] || 1 != a[c - 1][d + 1][2])
                             if (null == a[c + 1] || null == a[c + 1][d - 1] || 1 != a[c + 1][d - 1][1] || null == a[c + 1] || null == a[c + 1][d - 1] || -1 != a[c + 1][d - 1][2])
                               if (null == a[c][d - 1] || -1 != a[c][d - 1][1] || null == a[c][d - 1] || -1 != a[c][d - 1][2]) break;
                   } else break;
                 C = this.randomNumber(0, 7);
                 --z;
               }
               c += e[C][0];
               d += e[C][1];
               z = !1;
               null == a[c] || (null != a[c][d] && null != a[c][d][0])
                 ? null != a[c] && null != a[c][d] && ((a[c][d][3] = e[C][0]), (a[c][d][4] = e[C][1]))
                 : ((z = l[this.randomNumber(0, l.length - 1)]), this.buildRoom(12 * c + 6 * c + b, 6 * d + 4 * d + 150, 12, 6, z), (a[c][d] = [z, e[C][0], e[C][1]]), ++f, (z = !0));
               z &&
                 ((c -= e[C][0]),
                 (d -= e[C][1]),
                 1 == e[C][0] && 0 == e[C][1]
                   ? this.buildHall(12 * c + 6 * c + b + 12, 6 * d + 4 * d + 150)
                   : -1 == e[C][0] && 0 == e[C][1]
                   ? this.buildHall(12 * (c - 1) + 6 * (c - 1) + b + 12, 6 * d + 4 * d + 150)
                   : 0 == e[C][0] && 1 == e[C][1]
                   ? this.buildLadder(12 * c + 6 * c + b + 1, 6 * d + 4 * d + 151)
                   : 0 == e[C][0] && -1 == e[C][1]
                   ? this.buildLadder(12 * c + 6 * c + b + 12 - 1, 6 * (d - 1) + 4 * (d - 1) + 151)
                   : 1 == e[C][0] && 1 == e[C][1]
                   ? this.buildStaircase("up", 12 * c + 6 * c + b + 12, 6 * d + 4 * d + 150)
                   : -1 == e[C][0] && -1 == e[C][1]
                   ? this.buildStaircase("up", 12 * (c - 1) + 6 * (c - 1) + b + 12, 6 * (d - 1) + 4 * (d - 1) + 150)
                   : 1 == e[C][0] && -1 == e[C][1]
                   ? this.buildStaircase("down", 12 * c + 6 * c + b + 12, 6 * d + 4 * d + 150)
                   : -1 == e[C][0] && 1 == e[C][1] && this.buildStaircase("down", 12 * (c - 1) + 6 * (c - 1) + b + 12, 6 * (d + 1) + 4 * (d + 1) + 150),
                 (c += e[C][0]),
                 (d += e[C][1]));
             }
             this.generatingWorld = 3;
             this.blackScreen.loadingBar = 1;
           } else if (3 == this.generatingWorld) {
             this.blackScreen.statis = "Adding spawners...";
             for (b = 0; 21 > b; ) ++b, this.makeMobSpawner(this.randomNumber(0, this.world.worldWidth - 1), this.randomNumber(0, 79));
             this.blackScreen.statis = "Adding mines...";
             for (b = 0; 81 > b; ) ++b, this.makeMine(this.randomNumber(0, this.world.worldWidth - 1), this.randomNumber(0, 90), 3 + this.randomNumber(0, 3), 55, null);
             this.blackScreen.statis = "Adding caverns...";
             b = 0;
             for (a = this.randomNumber(70, 80) + 1; b < a; ) ++b, this.makeCavern(this.randomNumber(0, this.world.worldWidth - 1), this.randomNumber(0, 70), this.liquids[this.randomNumber(0, this.liquids.length - 1)]);
             this.blackScreen.statis = "Adding caves...";
             b = 0;
             for (a = this.caves.length; b < a; ) (c = b++), this.makeMine(Math.floor(this.caves[c][0]), Math.floor(this.caves[c][1] + 4), 4, 7, "air");
             this.blackScreen.statis = "Adding bedrock...";
             for (b = 0; 301 > b; ) (c = b++), this.world.setFG(this.world.worldWidth - 1, c, "br"), this.world.setFG(0, c, "br"), this.world.setFG(-1, c, "air");
             b = 0;
             for (a = this.world.worldWidth - 2 + 1; b < a; ) (c = b++), this.world.setFG(c, 0, "br"), this.world.setFG(c, -1, "air");
             for (
               b = !1;
               (a = this.randomNumber(1, this.world.worldWidth - 1)),
                 (c = this.randomNumber(1, 39)),
                 "r" == this.world.getFG(a, c) && (0 == this.world.cheats && this.world.gamemode != U.gamemodes.h.CREATIVE && this.world.setFG(a, c, "j"), (b = !0)),
                 1 != b;
 
             );
             if (this.bonusChest) {
               this.blackScreen.statis = "Adding bonus chest...";
               b = Math.floor(Math.min(this.world.scene[Math.round(this.world.worldWidth / 2)].length, 140));
               for (a = 200; null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2), b), "walkThroughBlockHit") && 0 < --a; ) --b;
               for (a = 1; 10 > a; ) {
                 for (c = 1; 10 > c; ) {
                   if (
                     null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) + a, b + c), "walkThroughBlockHit") &&
                     null == q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) + a, b - 1 + c), "walkThroughBlockHit")
                   ) {
                     this.world.setFG(Math.round(this.world.worldWidth / 2) + a, b + c, "chest");
                     this.prizeChest(Math.round(this.world.worldWidth / 2) + a, b + c, "bonus");
                     a = 100;
                     break;
                   }
                   if (
                     null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) - a, b + c), "walkThroughBlockHit") &&
                     null == q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) - a, b - 1 + c), "walkThroughBlockHit")
                   ) {
                     this.world.setFG(Math.round(this.world.worldWidth / 2) - a, b + c, "chest");
                     this.prizeChest(Math.round(this.world.worldWidth / 2) - a, b + c, "bonus");
                     a = 100;
                     break;
                   }
                   if (
                     null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) + a, b - c), "walkThroughBlockHit") &&
                     null == q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) + a, b - 1 - c), "walkThroughBlockHit")
                   ) {
                     this.world.setFG(Math.round(this.world.worldWidth / 2) + a, b - c, "chest");
                     this.prizeChest(Math.round(this.world.worldWidth / 2) + a, b - c, "bonus");
                     a = 100;
                     break;
                   }
                   if (
                     null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) - a, b - c), "walkThroughBlockHit") &&
                     null == q.get(this.world.getFG(Math.round(this.world.worldWidth / 2) - a, b - 1 - c), "walkThroughBlockHit")
                   ) {
                     this.world.setFG(Math.round(this.world.worldWidth / 2) - a, b - c, "chest");
                     this.prizeChest(Math.round(this.world.worldWidth / 2) - a, b - c, "bonus");
                     a = 100;
                     break;
                   }
                   ++c;
                 }
                 ++a;
               }
             }
             this.generatingWorld = 0;
             this.making = !0;
           } else if (1 == this.making) {
             this.blackScreen.statis = "Get ready...";
             if (this.firstTime) {
               b = Math.floor(Math.min(this.world.scene[Math.round(this.world.worldWidth / 2)].length, 140));
               for (a = 200; null != q.get(this.world.getFG(Math.round(this.world.worldWidth / 2), b), "walkThroughBlockHit") && 0 < --a; ) --b;
               this.world.worldX = Math.round(this.world.worldWidth / 2) + 0.5;
               this.world.worldY = -b;
               this.world.spawnPoint = new h(this.world.worldX, this.world.worldY);
               this.world.savee();
             }
             this.firstTime = !1;
             this.resetCamera();
             this.making = !1;
             this.updateSelectedInventoryItemStuff();
           }
         },
         onCertainInterval: function () {
           if (0 == this.generatingWorld && 1 != this.making) {
             this.getRotAngle();
             if (this.world.sceneNum == U.sceneNums.h.OVERWORLD && (this.musicCountdown--, 0 >= this.musicCountdown)) {
               this.musicCountdown = (m.Instance.get_fps() * (120 * Math.random() + 240)) | 0;
               var b = Math.floor(5 * Math.random() + 1);
               1 == b
                 ? P.getSound("song" + b).play(1, 0, 0, 86.401)
                 : 2 == b
                 ? P.getSound("song" + b).play(1, 0, 0, 51.699)
                 : 3 == b
                 ? P.getSound("song" + b).play(1, 0, 0, 54.869)
                 : 4 == b
                 ? P.getSound("song" + b).play(1, 0, 0, 49.714)
                 : 5 == b && P.getSound("song" + b).play(1, 0, 0, 59.072);
             }
             if (0 == this.world.tick % (((300 * m.Instance.get_fps()) / 25) | 0)) {
               b = Object.keys(this.world.wheat.h);
               for (var a = b.length, c = 0; c < a; ) {
                 var d = b[c++];
                 if (1 == ((10 * Math.random()) | 0))
                   if (7 > this.world.wheat.h[d]) this.world.wheat.h[d] += 1;
                   else {
                     if (0.3333333333333333 > Math.random()) {
                       var f = E.parseInt(d.split("X")[1].split("Y")[0]),
                         l = E.parseInt(d.split("X")[1].split("Y")[1]);
                       if ("wseed" == this.world.getFG(f, l)) {
                         if (!(("mel" == this.world.getFG(f + 1, l) && 1 == this.world.states.h[d]) || ("mel" == this.world.getFG(f - 1, l) && -1 == this.world.states.h[d]))) {
                           var k = "air" != this.world.getFG(f - 1, l) ? 1 : "air" != this.world.getFG(f + 1, l) ? -1 : 2 * ((2 * Math.random()) | 0) - 1;
                           if (1 == k && "dt" != this.world.getFG(f + 1, l - 1) && "farm" != this.world.getFG(f + 1, l - 1)) {
                             if (((k = -1), "dt" != this.world.getFG(f - 1, l - 1) && "farm" != this.world.getFG(f - 1, l - 1))) continue;
                           } else if (-1 == k && "dt" != this.world.getFG(f - 1, l - 1) && "farm" != this.world.getFG(f - 1, l - 1) && ((k = 1), "dt" != this.world.getFG(f + 1, l - 1) && "farm" != this.world.getFG(f + 1, l - 1))) continue;
                           1 == k ? ((this.world.states.h[d] = 1), this.world.setFG(f + 1, l, "mel")) : -1 == k && ((this.world.states.h[d] = -1), this.world.setFG(f - 1, l, "mel"));
                         }
                       } else if ("pseed" == this.world.getFG(f, l) && !(("pk" == this.world.getFG(f + 1, l) && 1 == this.world.states.h[d]) || ("pk" == this.world.getFG(f - 1, l) && -1 == this.world.states.h[d]))) {
                         k = "air" != this.world.getFG(f - 1, l) ? 1 : "air" != this.world.getFG(f + 1, l) ? -1 : 2 * ((2 * Math.random()) | 0) - 1;
                         if (1 == k && "dt" != this.world.getFG(f + 1, l - 1) && "farm" != this.world.getFG(f + 1, l - 1)) {
                           if (((k = -1), "dt" != this.world.getFG(f - 1, l - 1) && "farm" != this.world.getFG(f - 1, l - 1))) continue;
                         } else if (-1 == k && "dt" != this.world.getFG(f - 1, l - 1) && "farm" != this.world.getFG(f - 1, l - 1) && ((k = 1), "dt" != this.world.getFG(f + 1, l - 1) && "farm" != this.world.getFG(f + 1, l - 1))) continue;
                         1 == k ? ((this.world.states.h[d] = 1), this.world.setFG(f + 1, l, "pk"), this.makeBlock(f + 1, l)) : -1 == k && ((this.world.states.h[d] = -1), this.world.setFG(f - 1, l, "pk"), this.makeBlock(f - 1, l));
                       }
                     }
                     this.unlockAchieve(23);
                   }
               }
               1 > this.world.food / 100 && 5 < this.world.health && "peaceful" != this.world.difficulty && this.ouch(1, -1, "hunger");
               1 == this.getGameRule("dodaylightcycle") && (this.world.tim++, 100 <= this.world.tim && (this.world.day++, (this.world.tim = 0)));
             }
             if (this.world.tick % (((156 * m.Instance.get_fps()) / 25) | 0) == (((45 * m.Instance.get_fps()) / 25) | 0))
               for (this.world.threadedSave(), this.world.food -= 3, 6 <= this.world.food / 100 && 9 >= this.world.food / 100 && (this.world.health += 1), b = Object.keys(this.world.toGrow.h), a = b.length, c = 0; c < a; )
                 (d = b[c++]),
                   (f = E.parseInt(I.substr(d, 6, d.indexOf("Y") - 6))),
                   (l = E.parseInt(I.substr(d, d.indexOf("Y") + 1, null))),
                   1 == ((70 * Math.random()) | 0) &&
                     ((("sl" != this.world.getFG(f, l) || ("dt" != this.world.getFG(f, l - 1) && "cdt" != this.world.getFG(f, l - 1))) &&
                       ("gasd" != this.world.getFG(f, l) || ("gb" != this.world.getFG(f, l - 1) && "gdt" != this.world.getFG(f, l - 1)))) ||
                       "air" != this.world.getFG(f, l + 1) ||
                       "air" != this.world.getFG(f, l + 2) ||
                       "air" != this.world.getFG(f, l + 3) ||
                       "air" != this.world.getFG(f, l + 4) ||
                       "air" != this.world.getFG(f, l + 5) ||
                       "air" != this.world.getFG(f, l + 6) ||
                       "air" != this.world.getFG(f, l + 7) ||
                       ((k = "gasd" == this.world.getFG(f, l)),
                       this.world.setFG(f, l, "wd1"),
                       this.unlockAchieve(10),
                       k && ("gb" == this.world.getFG(f, l - 1) ? (this.world.setFG(f, l - 1, "gdt"), this.makeBlock(f, l - 1)) : "gdt" == this.world.getFG(f, l - 1) && (this.world.setFG(f, l - 1, "dt"), this.makeBlock(f, l - 1))),
                       this.makeTree(f + 1, l, !1, k),
                       null != this.world.getBlock(f, l, !1) && this.world.getBlock(f, l).reload()),
                     (f = this.world.toGrow),
                     Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d]);
             this.world.tick % (((82 * m.Instance.get_fps()) / 25) | 0) == (((78 * m.Instance.get_fps()) / 25) | 0) && K.recalculateMobCount();
             if (this.world.tick % (((63 * m.Instance.get_fps()) / 25) | 0) == (((33 * m.Instance.get_fps()) / 25) | 0)) {
               if (9 < this.world.food / 100 || "peaceful" == this.world.difficulty) this.world.health += 1;
               this.doThunder && ((this.doThunder = !1), this.requestSound("distantThunder" + ((10 * Math.random() + 1) | 0), (200 * ((2 * Math.random()) | 0) - 100) / 30, 0));
               ((2 == this.world.raining && 1 == this.world.sceneNum) || 2 == this.world.sceneNum) &&
                 1 == ((4 * Math.random()) | 0) &&
                 ((30 < this.blockY || 2 == this.world.sceneNum) && this.lighting.bgLightPlay(), 1 == ((10 * Math.random()) | 0) && 1 == this.world.sceneNum ? this.newLightning().play() : (this.doThunder = !0));
               3 == this.world.sceneNum
                 ? "peaceful" != this.world.difficulty &&
                   20 > this.world.endermanNum &&
                   1 == ((3 * Math.random()) | 0) &&
                   ((b = K.findSpawnArea("none", 4, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("enderman", b[0] + 0.5, -b[1]))
                 : 2 == this.world.sceneNum
                 ? "peaceful" != this.world.difficulty &&
                   (5 > this.world.nethereyeNum && 1 == ((9 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("nethereye", b[0] + 0.5, -b[1])),
                   5 > this.world.ghastNum && 1 == ((10 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 5, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("ghast", b[0] + 0.5, -b[1])),
                   5 > this.world.blazeNum && 1 == ((8 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("blaze", b[0] + 0.5, -b[1])),
                   4 > this.world.magmacubeNum && 1 == ((8 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 5, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("magmacube", b[0] + 0.5, -b[1])),
                   9 > this.world.zombiepigmanNum && 1 == ((12 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("zombiepigman", b[0] + 0.5, -b[1])),
                   5 > this.world.endermanNum && 1 == ((13 * Math.random()) | 0) && ((b = K.findSpawnArea("both", 4, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("enderman", b[0] + 0.5, -b[1])))
                 : 1 == this.world.sceneNum &&
                   ("peaceful" != this.world.difficulty &&
                     (this.world.spiderNum < 5 + (53 < this.world.tim ? 5 : 0) &&
                       Math.random() < 0.025 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 3, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("spider", b[0] + 0.5, -b[1])),
                     this.world.zombieNum < 7 + (53 < this.world.tim ? 5 : 0) &&
                       Math.random() < 0.05 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("zombie", b[0] + 0.5, -b[1])),
                     this.world.endermanNum < 5 + (53 < this.world.tim ? 15 : 0) &&
                       Math.random() < 0.02 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 4, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("enderman", b[0] + 0.5, -b[1])),
                     this.world.slimeNum < 4 + (53 < this.world.tim ? 3 : 0) &&
                       Math.random() < 0.016666666666666666 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("both", 5, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && 40 > b[1] && K.spawnMob("slime", b[0] + 0.5, -b[1])),
                     this.world.skeletonNum < 5 + (53 < this.world.tim ? 5 : 0) &&
                       Math.random() < 0.03333333333333333 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("skeleton", b[0] + 0.5, -b[1])),
                     this.world.creeperNum < 4 + (53 < this.world.tim ? 5 : 0) &&
                       Math.random() < 0.03333333333333333 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("creeper", b[0] + 0.5, -b[1])),
                     5 > this.world.nethereyeNum &&
                       Math.random() < 0.02 * (1 + this.getDifficultyNumber() / 3) &&
                       ((b = K.findSpawnArea("dark", 2, !1, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("nethereye", b[0] + 0.5, -b[1]))),
                   1 == this.getGameRule("passivemobs") &&
                     (7 > this.world.squidNum &&
                       0.008333333333333333 > Math.random() &&
                       ((b = K.findSpawnArea("none", 6, !0, "it was a momentous victory", this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("squid", b[0] + 0.5, -b[1])),
                     10 > this.world.pigNum && 0.01 > Math.random() && ((b = K.findSpawnArea("none", 3, !0, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("pig", b[0] + 0.5, -b[1])),
                     10 > this.world.cowNum &&
                       0.01 > Math.random() &&
                       ((b = K.findSpawnArea("light", 3, !1, null, this.world.worldX, this.world.worldY, 15, 60)),
                       null != b &&
                         ("myc" == this.world.getFG(b[0], b[1] - 1)
                           ? K.spawnMob("mooshroom", b[0] + 0.5, -b[1])
                           : "desert" == this.getBiome(b[0])
                           ? 0.3333333333333333 > Math.random() &&
                             ("dt" == this.world.getFG(b[0], b[1] - 1) || "cdt" == this.world.getFG(b[0], b[1] - 1) || "sd" == this.world.getFG(b[0], b[1] - 1)) &&
                             K.spawnMob("cowctus", b[0] + 0.5, -b[1])
                           : ("dt" == this.world.getFG(b[0], b[1] - 1) || "cdt" == this.world.getFG(b[0], b[1] - 1)) && K.spawnMob("cow", b[0] + 0.5, -b[1]))),
                     10 > this.world.sheepNum && 0.01 > Math.random() && ((b = K.findSpawnArea("light", 3, !0, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("sheep", b[0] + 0.5, -b[1])),
                     10 > this.world.chickenNum && 0.01 > Math.random() && ((b = K.findSpawnArea("light", 2, !0, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("chicken", b[0] + 0.5, -b[1])),
                     10 > this.world.rabbitNum && 0.006666666666666667 > Math.random() && ((b = K.findSpawnArea("light", 2, !0, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("rabbit", b[0] + 0.5, -b[1])),
                     10 > this.world.wolfNum && 0.006666666666666667 > Math.random() && ((b = K.findSpawnArea("light", 3, !0, null, this.world.worldX, this.world.worldY, 15, 60)), null != b && K.spawnMob("wolf", b[0] + 0.5, -b[1])),
                     10 > this.world.batNum && 0.02 > Math.random() && ((b = K.findSpawnArea("dark", 1, !1, null, this.world.worldX, this.world.worldY, 15, 60, !0)), null != b && 60 > b[1] && K.spawnMob("bat", b[0] + 0.5, -b[1]))));
             }
             if (this.world.tick % (((27 * m.Instance.get_fps()) / 25) | 0) == ((m.Instance.get_fps() / 25) | 0)) {
               -5 > this.blockY && this.ouch(1, -4, "void");
               this.world.gamemode == U.gamemodes.h.CREATIVE && -40 > this.blockY && (this.world.health = 0);
               this.keysX && (this.world.food -= 3);
               if (0 < this.leftSprinting || 0 < this.rightSprinting) this.world.food -= 5;
               b = Object.keys(this.world.toSmelt.h);
               a = b.length;
               for (c = 0; c < a; )
                 if (((d = b[c++]), (l = this.world.toSmelt.h[d]), null == l)) (f = this.world.toSmelt), Object.prototype.hasOwnProperty.call(f.h, d) && delete f.h[d];
                 else {
                   k = E.parseInt(I.substr(d, 6, d.indexOf("Y") - 6));
                   var h = E.parseInt(I.substr(d, d.indexOf("Y") + 1, null));
                   null == l.h.input && (l.h.input = g.emptyItem());
                   null == l.h.fuel && (l.h.fuel = g.emptyItem());
                   null == l.h.output && (l.h.output = g.emptyItem());
                   O.tripleEqual(l.h.input[1], "") && (l.h.input[1] = 1);
                   null == l.h.fuelTimer && (l.h.fuelTimer = 0);
                   null == l.h.smeltTimer && (l.h.smeltTimer = 0);
                   O.tripleEqual(l.h.fuel[1], "") && (l.h.fuel[1] = 1);
                   O.tripleEqual(l.h.output[1], "") && (l.h.output[1] = 1);
                   0 == l.h.fuelTimer &&
                     null != l.h.fuel[0] &&
                     1 <= l.h.fuel[1] &&
                     null != l.h.input[0] &&
                     1 <= l.h.input[1] &&
                     ((f = q.get(l.h.fuel[0], "fuel")),
                     (l.h.fuelTimerTotal = f),
                     (l.h.fuelTimer = f),
                     "" == l.h.fuel[1] || 1 == l.h.fuel[1] ? ("lbk" == l.h.fuel[0] ? (l.h.fuel[0] = "bk") : ((l.h.fuel[0] = null), (l.h.fuel[1] = 0))) : l.h.fuel[1]--);
                   if (0 < l.h.fuelTimer) {
                     if (
                       (--l.h.fuelTimer,
                       null != this.world.getBlock(k, h, !1) && this.world.getBlock(k, h, !1).updateEvent(),
                       null != l.h.input[0] &&
                         null != q.get(l.h.input[0], "smeltsInto") &&
                         !this.isEmptyItem(l.h.input) &&
                         64 != l.h.output[1] &&
                         (0 == l.h.output[1] ||
                           null == l.h.output[1] ||
                           ("Array" == O.getQualifiedClassName(q.get(l.h.input[0], "smeltsInto"))
                             ? q.get(l.h.input[0], "smeltsInto")[0] == l.h.output[0] && q.get(l.h.input[0], "smeltsInto")[1] == H.__cast(l.h.output[3], e).h.type
                             : q.get(l.h.input[0], "smeltsInto") == l.h.output[0])) &&
                         ((l.h.smeltTimer += 1), 10 <= l.h.smeltTimer))
                     ) {
                       l.h.smeltTimer = 0;
                       l.h.input[1]--;
                       if ("TNT" == l.h.input[0]) {
                         this.explode(E.parseInt(d.split("X")[1].split("Y")[0]), E.parseInt(d.split("X")[1].split("Y")[1]), 5, !1);
                         continue;
                       }
                       this.isEmptyItem(l.h.output) &&
                         ("Array" == O.getQualifiedClassName(q.get(l.h.input[0], "smeltsInto"))
                           ? ((l.h.output[0] = q.get(l.h.input[0], "smeltsInto")[0]), (k = H.__cast(l.h.output[3], e)), (d = q.get(l.h.input[0], "smeltsInto")[1]), (k.h.type = d))
                           : (l.h.output[0] = q.get(l.h.input[0], "smeltsInto")));
                       0 == l.h.input[1] && (l.h.input[0] = "air");
                       l.h.output[1]++;
                     }
                   } else (l.h.smeltTimer = 0), null != this.world.getBlock(k, h, !1) && this.world.getBlock(k, h, !1).updateEvent();
                   0 == l.h.input[1] && (l.h.input[0] = "air");
                   0 == l.h.fuel[1] && (l.h.fuel[0] = "air");
                   this.isEmptyItem(l.h.output) && ((l.h.output[0] = "air"), (l.h.output[1] = 0));
                 }
               b = Object.keys(this.world.toBrew.h);
               a = b.length;
               for (c = 0; c < a; )
                 if (
                   ((d = this.world.toBrew.h[b[c++]]),
                   null == d.h.input && (d.h.input = g.emptyItem()),
                   null == d.h.fuel && (d.h.fuel = g.emptyItem()),
                   null == d.h.output && (d.h.output = [g.emptyItem(), g.emptyItem(), g.emptyItem()]),
                   0 >= d.h.fuelUsed && "bp" == d.h.fuel[0] && 0 < d.h.fuel[1] && ((d.h.fuelUsed = 20), d.h.fuel[1]--, 0 == d.h.fuel[1] && (d.h.fuel[0] = null)),
                   0 != d.h.fuelUsed && null != d.h.input[0] && 0 < d.h.input[1] && (null != d.h.output[0][0] || null != d.h.output[1][0] || null != d.h.output[2][0]))
                 ) {
                   f = !1;
                   for (l = 0; 3 > l; )
                     if (((k = g.makeDynamicArray(d.h.output)[l++]), null != this.potionData.h[g.makeDynamicMap(k[3]).h.type] && null != g.makeDynamicMap(this.potionData.h[g.makeDynamicMap(k[3]).h.type].h.recipes).h[d.h.input[0]])) {
                       f = !0;
                       break;
                     } else if ("gp" == d.h.input[0] && "splash" != g.makeDynamicMap(k[3]).h.category && !this.emptyPotion(g.makeDynamicMap(k[3]).h.type)) {
                       f = !0;
                       break;
                     }
                   if (f) {
                     if (((d.h.brewTimer += 1), 20 <= d.h.brewTimer)) {
                       for (l = d.h.brewTimer = 0; 3 > l; )
                         (k = g.makeDynamicArray(d.h.output)[l++]),
                           null != this.potionData.h[g.makeDynamicMap(k[3]).h.type] && null != g.makeDynamicMap(this.potionData.h[g.makeDynamicMap(k[3]).h.type].h.recipes).h[d.h.input[0]]
                             ? ((f = g.makeDynamicMap(this.potionData.h[g.makeDynamicMap(k[3]).h.type].h.recipes).h[d.h.input[0]]),
                               (g.makeDynamicMap(k[3]).h.type = f),
                               null != this.potionData.h[f].h.effects && (this.unlockAchieve(43), (k = g.makeDynamicMap(k[3])), (f = O.clone(this.potionData.h[f].h.effects)), (k.h.effects = f)))
                             : "gp" == d.h.input[0] && "splash" != g.makeDynamicMap(k[3]).h.category && (g.makeDynamicMap(k[3]).h.category = "splash");
                       --d.h.fuelUsed;
                       d.h.input[1]--;
                       0 >= d.h.input[1] && (d.h.input[0] = null);
                     }
                   } else d.h.brewTimer = 0;
                 } else d.h.brewTimer = 0;
             }
             this.world.tick % (((600 * m.Instance.get_fps()) / 25) | 0) == (((597 * m.Instance.get_fps()) / 25) | 0) &&
               (0 == ((10 * Math.random()) | 0) && 1 == this.defeatedEnder && this.unlockAchieve(36), this.world.rainDay != this.world.day || 1 == ((30 * Math.random()) | 0)) &&
               ((this.world.rainDay = this.world.day), (this.world.raining = 1 == ((10 * Math.random()) | 0) ? ((2 * Math.random()) | 0) + 1 : 0));
           }
         },
         inGame: function () {
           if (0 == this.pawsed) {
             var b = ++this.world.tick,
               a = w.MAX_INT();
             this.world.tick = b % a;
             b = 0;
             for (a = this.hotbarSlots.length; b < a; ) {
               var c = b++;
               this.hotbarSlots[c].setItem(this.world.inventoryList[c]);
             }
             this.inGame1();
           }
           1 == this.mouseD && (this.mouseD = 2);
           0 < this.rMouseD && this.rMouseD++;
           for (b = m.Instance.mouses.iterator(); b.hasNext(); )
             (a = b.next()),
               "" == a.type &&
                 m.Instance.tick - a.tick == Math.floor(m.Instance.get_fps() / 2) &&
                 (a.afterQuickShiftClick ? ((m.Instance.quickShiftClick = 0), (this.rMouseD = 1), (this.waitTillRightMouseIsUp = !1)) : ((this.mouseD = 1), (this.waitTillMouseIsUp = !1)), (a.pressed = !0));
           if (0 < m.Instance.quickShiftClick)
             if ((m.Instance.quickShiftClick--, m.Instance.quickShiftClick == Math.floor(2 + m.Instance.get_fps() / 3))) {
               if (null == q.get(this.world.get_selectedInventoryItemType(), "timerToUse") || 0 == q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) (this.rMouseD = 1), (this.waitTillRightMouseIsUp = !1);
             } else m.Instance.quickShiftClick == Math.floor(m.Instance.get_fps() / 3) && ((this.rMouseD = 0), (this.waitTillRightMouseIsUp = !1));
           G.gt(m.Instance.keyDown(J.intToKey.h[J.keyBindings.h.secondClick.h.id]), 0) && 1 == J.useRightClickKey ? (this.shifting = !0) : (this.shifting = !1);
           this.mouseWheelThing = !0;
         },
         inGame1: function () {
           this.onCertainInterval();
           this.manageEffects(this.world.player.id);
           0 > this.world.food && (this.world.food = 0);
           if (20 < this.world.health || (this.world.gamemode == U.gamemodes.h.CREATIVE && 0 < this.world.health)) this.world.health = 20;
           0 > this.world.experience && (this.world.experience = 0);
           if (1e3 < this.world.food || this.world.gamemode == U.gamemodes.h.CREATIVE) this.world.food = 1e3;
           this.world.health = Math.floor(this.world.health);
           this.world.food = Math.floor(this.world.food);
           this.world.experience = Math.floor(this.world.experience);
           null != this.world.mobs.h[this.ENDING] && this.world.sceneNum != U.sceneNums.h.END && (this.ENDING = null);
           if (0 >= this.world.health || 0 != this.world.dead)
             if (
               (this.world.dead++,
               (this.characterColorTransform = [1, 0.3, 0.3, 1, 0.0784313725490196, 0, 0, 0]),
               (this.characterRotation = (0 > this.characterXScale ? 1 : -1) * Math.sqrt(Math.min(1, this.world.dead / 20)) * 90),
               30 < this.world.dead)
             ) {
               this.inventario.requestClose(!0);
               if (!this.getGameRule("keepinventory")) {
                 for (var b = 0; 45 > b; ) {
                   var a = b++;
                   this.isEmptyItem(this.world.inventoryList[a]) ||
                     this.addDrop(this.world.inventoryList[a][0], this.world.worldX, this.world.worldY, this.world.inventoryList[a][1], this.world.inventoryList[a][2], this.world.inventoryList[a][3]);
                 }
                 null != this.world.armors[0] &&
                   null != this.world.armors[0][0] &&
                   "" != this.world.armors[0][0] &&
                   "air" != this.world.armors[0][0] &&
                   this.addDrop(this.world.armors[0][0], this.world.worldX, this.world.worldY, 1, this.world.armors[0][1], this.world.armors[0][2]);
                 null != this.world.armors[1] &&
                   null != this.world.armors[1][0] &&
                   "" != this.world.armors[1][0] &&
                   "air" != this.world.armors[1][0] &&
                   this.addDrop(this.world.armors[1][0], this.world.worldX, this.world.worldY, 1, this.world.armors[1][1], this.world.armors[1][2]);
                 null != this.world.armors[2] &&
                   null != this.world.armors[2][0] &&
                   "" != this.world.armors[2][0] &&
                   "air" != this.world.armors[2][0] &&
                   this.addDrop(this.world.armors[2][0], this.world.worldX, this.world.worldY, 1, this.world.armors[2][1], this.world.armors[2][2]);
                 null != this.world.armors[3] &&
                   null != this.world.armors[3][0] &&
                   "" != this.world.armors[3][0] &&
                   "air" != this.world.armors[3][0] &&
                   this.addDrop(this.world.armors[3][0], this.world.worldX, this.world.worldY, 1, this.world.armors[3][1], this.world.armors[3][2]);
                 for (b = 0; 45 > b; ) this.world.inventoryList[b++] = g.emptyItem();
                 this.dropXP(this.world.worldX, this.world.worldY, Math.floor(0.5 * this.world.experience), 0, !0, !1);
                 this.world.armors = [
                   ["air", 0, new e()],
                   ["air", 0, new e()],
                   ["air", 0, new e()],
                   ["air", 0, new e()],
                 ];
                 this.updateArmorRenderers();
                 this.world.experience = 0;
               }
               this.world.hardcore && this.setGamemode(U.gamemodes.h.SPECTATOR);
               this.world.riding = "";
               this.world.xSpeed = 0;
               this.world.ySpeed = 0;
               this.world.health = 20;
               this.world.food = 1e3;
               this.world.effects = new e();
               this.resetEffectIcons();
               this.world.dead = 0;
               this.characterColorTransform = [1, 1, 1, 1, 0, 0, 0, 0];
               this.characterRotation = 0;
               this.cantMove = !1;
               this.world.savee();
               this.world.loadScene(1);
               this.world.worldX = this.world.spawnPoint.x;
               this.world.worldY = this.world.spawnPoint.y;
               m.Instance.set_frame("respawn");
               this.sessionDeaths++;
               0 == this.sessionDeaths % 2 && (Aa.loaded ? Aa.run() : p.requestInterstitial());
               return;
             }
           1 == this.inventario.currentFrame &&
             (1 == m.Instance.keyDown(J.intToKey.h[J.keyBindings.h.dropItem.h.id]) &&
               "air" != this.world.get_selectedInventoryItemType() &&
               0 < this.world.inventoryItem(this.world.selectedInventoryItem)[1] &&
               ((b = this.getFurthestEmptyBlock2(!0)),
               G.gt(m.Instance.keyDown(1073742049), 0)
                 ? (this.addDrop(
                     this.world.get_selectedInventoryItemType(),
                     b[0] + 1 - 0.5,
                     -(b[1] + 1) + 0.5,
                     this.world.inventoryItem(this.world.selectedInventoryItem)[1],
                     this.world.inventoryItem(this.world.selectedInventoryItem)[2],
                     this.world.inventoryItem(this.world.selectedInventoryItem)[3]
                   ),
                   (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))
                 : (this.addDrop(this.world.get_selectedInventoryItemType(), b[0] + 1 - 0.5, -(b[1] + 1) + 0.5, 1, this.world.inventoryItem(this.world.selectedInventoryItem)[2], this.world.inventoryItem(this.world.selectedInventoryItem)[3]),
                   "" == this.world.inventoryItem(this.world.selectedInventoryItem)[1] && (this.world.inventoryList[this.world.selectedInventoryItem][1] = 1),
                   this.world.inventoryItem(this.world.selectedInventoryItem)[1]--,
                   0 >= this.world.inventoryItem(this.world.selectedInventoryItem)[1] && (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))),
             1 == this.blackScreen.currentFrame &&
               0 == this.world.sleepingAnimation &&
               (1 == m.Instance.keyDown(J.getKeyBinding("tasks")) && ((this.pawsed = !0), this.blackScreen.gotoAndStop(6)), 1 == m.Instance.keyDown(J.getKeyBinding("commands")) && this.inventario.gotoAndStop("chat")));
           1 == m.Instance.keyDown(J.getKeyBinding("inventory")) && 0 == this.world.sleepingAnimation && (1 != this.inventario.currentFrame ? this.inventario.requestClose() : this.openInventario());
           -1 < this.itemUseAnimationTimer &&
             (1 != this.inventario.currentFrame ||
             1 != this.blackScreen.currentFrame ||
             this.itemUseAnimationSelectedItem != this.world.selectedInventoryItem ||
             this.itemUseAnimationSelectedItemType != this.world.get_selectedInventoryItemType() ||
             0 == this.rMouseD
               ? this.resetUseItem()
               : (this.useItemAnimation(), 0 == this.itemUseAnimationTimer && this.useItem(), this.itemUseAnimationTimer--));
           this.cantMove = 1 == this.inventario.currentFrame ? !1 : !0;
           0 < this.world.dead && (this.cantMove = !0);
           this.cantMove ||
             (0 != this.rMouseD && (this.furthestEmptyBlock = this.getFurthestEmptyBlock(!1, !0)),
             (this.closestMinableBlock = this.getClosestBlock(!1)),
             this.world.gamemode == U.gamemodes.h.CREATIVE && "Sword" != I.substr(this.world.get_selectedInventoryItemType(), -5, 5) && (this.placeDelay += 6),
             this.placeDelay++,
             this.gCMTimer++,
             this.world.gamemode != U.gamemodes.h.SPECTATOR
               ? this.mineAndPlaceCode()
               : 1 == this.rMouseD &&
                 1 == q.get(this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]), "shiftClickSpectator") &&
                 null != this.world.getBlock(this.closestMinableBlock[0] | 0, this.closestMinableBlock[1] | 0) &&
                 this.world.getBlock(this.closestMinableBlock[0] | 0, this.closestMinableBlock[1] | 0).useEvent());
           b = Object.keys(this.transformMobs.h);
           a = b.length;
           for (var c = 0; c < a; ) {
             var d = b[c++];
             "pig" == this.world.mobs.h[d].h.type
               ? (K.spawnMob("zombiepigman", this.world.mobs.h[d].h.x, this.world.mobs.h[d].h.y, this.world.mobs.h[d].h.mobName), this.world.riding == d && (this.world.riding = ""), this.getMob(d).removeMob(d))
               : "creeper" == this.world.mobs.h[d].h.type && (this.world.mobs.h[d].h.charged = !0);
           }
           this.transformMobs.h = Object.create(null);
           this.doPlayerLogic();
           this.runBlockEventsFrame();
           this.runWorldLogic();
           if (0 < this.world.raining && this.world.sceneNum == U.sceneNums.h.OVERWORLD) {
             c = a = 0;
             if (!this.playingRainSound || 3 > this.closeRains.length || m.Instance.MUTED) c = a = 0;
             else
               for (b = 0, d = this.closeRains.length; b < d; ) {
                 var f = b++,
                   l = 1 - Math.max(0, Math.min(1, Math.sqrt(Math.pow(this.closeRains[f][0], 2) + Math.pow(this.closeRains[f][1], 2)) / 276));
                 a += l;
                 c += Math.max(-1, Math.min(1, this.closeRains[f][0] / 276)) * l;
               }
             this.rainVol = 0.99 * this.rainVol + (a / 50) * 0.01;
             this.rainPan = 0.99 * this.rainPan + (c / 50) * 0.04;
             this.playingRainSound
               ? (P.getSound("rainsound_0").set_volume(this.rainVol), P.getSound("rainsound_0").set_pan(this.rainPan))
               : ((this.playingRainSound = !0), P.getSound("rainsound_0").play(this.rainVol, this.rainPan, 0, 6.861, 1e6));
             for (; this.closeRains.shift(), 50 < this.closeRains.length; );
             0 == this.world.tick % 10 && this.closeRains.shift();
             for (b = 0; 3 > b; )
               ++b,
                 0.5 > Math.random() ||
                   ((a = this.camera.x - 9.2 + ((700 * Math.random()) | 0) / 30 - 3.3333333333333335),
                   "desert" != this.getBiome(Math.round(a)) &&
                     (0 == this.getSnowRegion(Math.round(a))
                       ? new Xf(a, Math.floor(-this.world.worldHeight - 3.3333333333333335), this, this.world)
                       : 1 == ((5 * Math.random()) | 0) && new Yf(a, Math.floor(-this.world.worldHeight - 3.3333333333333335), this, this.world)));
           } else
             0 < this.rainVol &&
               ((this.rainVol *= 0.99),
               (this.rainPan *= 0.99),
               0.01 >= this.rainVol && (this.rainVol = 0),
               this.playingRainSound && (0 == this.rainVol ? ((this.playingRainSound = !1), P.getSound("rainsound_0").stop()) : (P.getSound("rainsound_0").set_volume(this.rainVol), P.getSound("rainsound_0").set_pan(this.rainPan))));
           this.world.sceneNum == U.sceneNums.h.NETHER
             ? (this.darkness = 0.5)
             : this.world.sceneNum == U.sceneNums.h.END
             ? (this.darkness = 0.42)
             : ((b = 0),
               this.hasEffect("nightvision") || ((b += Math.max(this.timeDarkness[this.world.tim] - 0.2, 0)), (b += (25 * this.world.raining) / 100)),
               "ShadesCap" == this.world.armors[0][0] && (b = Math.max(10, b) / 100),
               (b += (3 * this.deepness * (this.hasEffect("waterbreathing") ? 0.5 : 1)) / 100),
               (this.darkness =
                 70 == this.world.worldHeight
                   ? 50 <= this.blockY
                     ? Math.min(0.1 + b, 0.85)
                     : 30 >= this.blockY
                     ? 0.9
                     : Math.min(0.1 + 0.85 * (1 - (this.blockY - 30) / 20) + b, 0.85)
                   : 300 < this.blockY
                   ? 0.9
                   : 270 < this.blockY
                   ? Math.min(0.9, Math.min(0.1 + b, 0.85) + ((this.blockY - 270) / 30) * 0.8)
                   : 90 <= this.blockY
                   ? Math.min(0.1 + b, 0.85)
                   : 70 >= this.blockY
                   ? 0.9
                   : Math.min(0.1 + 0.85 * (1 - (this.blockY - 70) / 20) + b, 0.85)));
           this.hasEffect("nightvision") ? ((this.lighting.playerFrame = 2), (this.lighting.playerAlpha = 1)) : ((this.lighting.playerFrame = 1), (this.lighting.playerAlpha = Math.max(0, 2 * this.darkness - 1)));
           null != this.vignetteEntity && this.vignetteEntity.setUniform("coloro", [0, 0, 0, 0.8 * Math.min(1, this.darkness + 0.5)]);
           this.lighting.bgLightAlpha = Math.max(0, 1.2 * (this.darkness - 0.9) + 0.99);
           b = Object.keys(this.skinLoadingCallbacks.h);
           a = b.length;
           for (c = 0; c < a; ) this.getSkinObject(b[c++]);
         },
         addParticles: function (b, a, c, d, f, l, k) {
           null == l && (l = !1);
           null == c && (c = 5);
           null == a && (a = 0);
           if (0 != J.particles || l)
             switch (((a += c * (J.particles - 1)), null == k && (k = new e()), b)) {
               case "chicken":
               case "magmacube":
               case "portal":
               case "slime":
               case "snowball":
                 for (c = 0; c < a; )
                   ++c,
                     (l = new te(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world)),
                     "slime" == b ? (l.slime = !0) : "snowball" == b ? (l.snowball = !0) : "chicken" == b ? (l.chicken = !0) : "magmacube" == b ? (l.magmacube = !0) : "portal" == b && (l.portal = !0),
                     l.init();
                 break;
               case "criticalhit":
                 for (c = 0; c < a; ) ++c, new Zf(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "effect":
                 for (c = 0; c < a; ) ++c, new $f(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world, [k.h.r, k.h.g, k.h.b]);
                 break;
               case "ender":
                 for (c = 0; c < a; ) ++c, new ag(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "grow":
                 for (c = 0; c < a; ) ++c, new bg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "heart":
                 for (c = 0; c < a; ) ++c, new ld(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "lavabubble":
                 for (c = 0; c < a; ) ++c, new cg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "mining":
                 for (c = 0; c < a; ) ++c, (l = new te(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world)), (b = k.h.color), l.init(), null != b && (l.color = new F().fromRGB(b[0], b[1], b[2]));
                 break;
               case "raythings":
                 for (c = 0; c < a; ) ++c, new dg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "shockwave":
                 for (c = 0; c < a; ) ++c, (l = new eg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world)), null != k.h.scale && (l.scale = k.h.scale);
                 break;
               case "smoke":
                 for (c = 0; c < a; ) ++c, new fg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "smoke2":
                 for (c = 0; c < a; ) ++c, new Dd(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                 break;
               case "torchtip":
                 new gg(d.x, f.x, this, this.world);
                 break;
               case "water":
                 for (c = 0; c < a; ) {
                   ++c;
                   l = new hg(d.x + Math.random() * d.y, f.x + Math.random() * f.y, this, this.world);
                   if ("up" == k.h.bubble || "down" == k.h.bubble) l.bubbleDirection = k.h.bubble;
                   l.init();
                 }
             }
         },
         fallingBlockCollision: function (b, a, c, d) {
           b = new t(b, a, c, d);
           a = Object.keys(this.world.fallingBlocks.h);
           c = a.length;
           for (d = 0; d < c; ) {
             var f = a[d++];
             if (new t(this.world.fallingBlocks.h[f][2] - 0.5, this.world.fallingBlocks.h[f][3] - 0.5, 1, 1).intersects(b)) return f;
           }
           return null;
         },
         resetCamera: function () {
           null == this.world.mobs.h[this.ENDING] &&
             (0 < this.screenTilter && (this.screenTilter = ++this.screenTilter % 5),
             (this.camera.x = this.world.worldX / 1 + (0 < this.screenTilter ? (10 * Math.sin(1.6 * Math.floor(this.world.tick / 2))) / this.zoom : 0)),
             (this.camera.y = this.world.worldY / 1 + (0 < this.screenTilter ? (10 * Math.cos(1.6 * Math.floor(this.world.tick / 2))) / this.zoom : 0)));
         },
         mineAndPlaceCode: function () {
           0 == this.mouseD && (this.interactLock = 0);
           this.mouseBlock = this.selectedBlock();
           if (0 == this.world.sleepingAnimation && !(6 > this.placeDelay))
             if (0 != this.rMouseD) {
               if (!this.waitTillRightMouseIsUp) {
                 var b = !1,
                   a = !1,
                   c = !1;
                 1 == this.rMouseD &&
                   null != q.get(this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]), "shiftClickBlock") &&
                   ((c = !0),
                   (this.isShiftClickAndContinue = !1),
                   (this.waitTillRightMouseIsUp = !0),
                   null != this.world.getBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]) && this.world.getBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]).useEvent(),
                   (this.placeDelay = 0));
                 if (!c || this.isShiftClickAndContinue) {
                   c = this.getClosestMob();
                   if (null != c) {
                     var d = this.getBreedableMob(this.mouseWorldPosition.x | 0, this.mouseWorldPosition.y | 0, this.world.get_selectedInventoryItemType());
                     if (null != d) {
                       if (this.world.gamemode != U.gamemodes.h.CREATIVE)
                         if (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]) {
                           var f = this.world.inventoryList[this.world.selectedInventoryItem];
                           f[1]--;
                         } else this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.waitTillRightMouseIsUp = !0;
                       this.addParticles("heart", 5, 0, new h(this.world.mobs.h[d].h.x, 0), new h(this.world.mobs.h[d].h.y - 2, 0), !0);
                       f = this.world.mobs.h[d];
                       c = 30 * m.Instance.get_fps();
                       f.h.breedTimer = c;
                       this.world.mobs.h[d].h.breedTarget = "";
                       return;
                     }
                     d = this.getGrowableMob(this.mouseWorldPosition.x | 0, this.mouseWorldPosition.y | 0, this.world.get_selectedInventoryItemType());
                     if (null != d) {
                       this.world.gamemode != U.gamemodes.h.CREATIVE &&
                         (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                           ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                           : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()));
                       this.addParticles("grow", 5, 0, new h(this.world.mobs.h[d].h.x, 0), new h(this.world.mobs.h[d].h.y - 2, 0), !0);
                       d = this.world.mobs.h[d];
                       d.h.babyTimer *= 0.8;
                       return;
                     }
                   }
                   if (null == q.get(this.world.get_selectedInventoryItemType(), "usable")) {
                     if (null != c)
                       if ("wolf" == this.world.mobs.h[c].h.type) {
                         if (1 == this.world.mobs.h[c].h.tamed) {
                           this.world.mobs.h[c].h.sitting = !this.world.mobs.h[c].h.sitting;
                           this.world.mobs.h[c].h.target = null;
                           this.waitTillRightMouseIsUp = !0;
                           return;
                         }
                       } else if ("pig" == this.world.mobs.h[c].h.type && null != this.world.mobs.h[c].h.saddleItem && "saddle" == this.world.mobs.h[c].h.saddleItem[0]) {
                         this.world.riding = c;
                         this.world.mobs.h[c].h.riddenBy = this.world.player.id;
                         this.waitTillRightMouseIsUp = !0;
                         return;
                       }
                   } else if (null != q.get(this.world.get_selectedInventoryItemType(), "food") && 1 != q.get(this.world.get_selectedInventoryItemType(), "placeable"))
                     null != g.makeDynamicMap(q.get(this.world.get_selectedInventoryItemType(), "food")).h.dog && null != c && "wolf" == this.world.mobs.h[c].h.type && 1 == this.world.mobs.h[c].h.tamed && 20 > this.world.mobs.h[c].h.health
                       ? (this.useUpItem(), (this.world.mobs.h[c].h.health = Math.min(20, this.world.mobs.h[c].h.health + 5)))
                       : this.canEatFood(this.world.get_selectedInventoryItemType()) && this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("potion" == this.world.get_selectedInventoryItemType())
                     1 == this.emptyPotion(this.world.get_selectedInventoryItemExtra().h.type)
                       ? ((c = this.getClosestBlock(!0)),
                         null != c &&
                           "wr" == this.world.getFG(c[0], c[1]) &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()),
                           (d = new e()),
                           (d.h.type = "water"),
                           this.addDrop("potion", this.world.worldX, this.world.worldY, 1, null, d)),
                         (this.waitTillRightMouseIsUp = !0))
                       : this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("mbk" == this.world.get_selectedInventoryItemType()) this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("bk" == this.world.get_selectedInventoryItemType() || (this.world.gamemode == U.gamemodes.h.CREATIVE && "bk" == I.substr(this.world.get_selectedInventoryItemType(), -2, 2)))
                     null != c && "cow" == this.world.mobs.h[c].h.type && 0 == this.world.mobs.h[c].h.babyTimer && ((this.world.inventoryList[this.world.selectedInventoryItem][0] = "mbk"), (this.waitTillRightMouseIsUp = !0)),
                       (c = this.getClosestBlock(!0)),
                       "wr" == this.world.getFG(c[0], c[1])
                         ? ("bk" == this.world.get_selectedInventoryItemType() && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "wbk"), this.requestRemove(c[0], c[1], !0, !1, !0), (b = this.waitTillRightMouseIsUp = !0))
                         : "la" == this.world.getFG(c[0], c[1])
                         ? ("bk" == this.world.get_selectedInventoryItemType() && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "lbk"), this.requestRemove(c[0], c[1], !0, !1, !0), (b = this.waitTillRightMouseIsUp = !0))
                         : "ad" == this.world.getFG(c[0], c[1]) &&
                           ("bk" == this.world.get_selectedInventoryItemType() && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "abk"), this.requestRemove(c[0], c[1], !0, !1, !0), (b = this.waitTillRightMouseIsUp = !0));
                   else if ("raft" == this.world.get_selectedInventoryItemType())
                     (this.closestMinableBlock = this.getClosestBlock(!0)),
                       "wr" == this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]) &&
                         (this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                         (c = (1e9 * Math.random()) | 0),
                         (this.world.rafts.h["raft" + c] = g.makeDynamicArray(["raft" + c, this.closestMinableBlock[0], -1 * this.closestMinableBlock[1], 0, 0, this.world.player.id])),
                         (this.world.riding = "raft" + c),
                         (this.waitTillRightMouseIsUp = !0));
                   else if ("fas" == this.world.get_selectedInventoryItemType())
                     null != c
                       ? ((this.world.onFire.h[c] = !0), this.damageTool())
                       : null != this.mouseBlock &&
                         (this.canFireExistAt(this.mouseBlock.x | 0, this.mouseBlock.y | 0)
                           ? "portalstone" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y - 1) &&
                             "portalstone" == this.world.getFG(this.mouseBlock.x + 1, this.mouseBlock.y - 1) &&
                             "portalstone" == this.world.getFG(this.mouseBlock.x + 1 + 1, this.mouseBlock.y - 1) &&
                             "portalstone" == this.world.getFG(this.mouseBlock.x + 1 + 1, this.mouseBlock.y) &&
                             "portalstone" == this.world.getFG(this.mouseBlock.x - 1, this.mouseBlock.y - 1) &&
                             "portalstone" == this.world.getFG(this.mouseBlock.x - 1, this.mouseBlock.y) &&
                             "air" == this.world.getFG(this.mouseBlock.x + 1, this.mouseBlock.y)
                             ? (this.unlockAchieve(31),
                               this.world.setFG(this.mouseBlock.x, this.mouseBlock.y, "portal"),
                               this.world.setFG(this.mouseBlock.x + 1, this.mouseBlock.y, "portal"),
                               this.makeBlock(this.mouseBlock.x | 0, this.mouseBlock.y | 0),
                               this.makeBlock((this.mouseBlock.x | 0) + 1, this.mouseBlock.y | 0),
                               this.damageTool())
                             : "portalstone" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y - 1) &&
                               "portalstone" == this.world.getFG(this.mouseBlock.x - 1, this.mouseBlock.y - 1) &&
                               "portalstone" == this.world.getFG(this.mouseBlock.x - 1 - 1, this.mouseBlock.y - 1) &&
                               "portalstone" == this.world.getFG(this.mouseBlock.x - 1 - 1, this.mouseBlock.y) &&
                               "portalstone" == this.world.getFG(this.mouseBlock.x + 1, this.mouseBlock.y - 1) &&
                               "portalstone" == this.world.getFG(this.mouseBlock.x + 1, this.mouseBlock.y) &&
                               "air" == this.world.getFG(this.mouseBlock.x - 1, this.mouseBlock.y)
                             ? (this.unlockAchieve(31),
                               this.world.setFG(this.mouseBlock.x, this.mouseBlock.y, "portal"),
                               this.world.setFG(this.mouseBlock.x - 1, this.mouseBlock.y, "portal"),
                               this.makeBlock(this.mouseBlock.x | 0, this.mouseBlock.y | 0),
                               this.makeBlock((this.mouseBlock.x | 0) - 1, this.mouseBlock.y | 0),
                               this.damageTool())
                             : "air" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y) &&
                               (this.world.setFG(this.mouseBlock.x, this.mouseBlock.y, "fire"), this.makeBlock(this.mouseBlock.x | 0, this.mouseBlock.y | 0), this.damageTool())
                           : this.canBeOnFire(this.mouseBlock.x | 0, this.mouseBlock.y | 0) &&
                             (this.canFireExistAt(this.mouseBlock.x | 0, (this.mouseBlock.y + 1) | 0)
                               ? "air" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y + 1) &&
                                 (this.world.setFG(this.mouseBlock.x, this.mouseBlock.y + 1, "fire"), this.makeBlock(this.mouseBlock.x | 0, (this.mouseBlock.y + 1) | 0), this.damageTool())
                               : this.blockX < this.mouseBlock.x
                               ? this.canFireExistAt((this.mouseBlock.x - 1) | 0, this.mouseBlock.y | 0) &&
                                 "air" == this.world.getFG(this.mouseBlock.x - 1, this.mouseBlock.y) &&
                                 (this.world.setFG(this.mouseBlock.x - 1, this.mouseBlock.y, "fire"), this.makeBlock((this.mouseBlock.x - 1) | 0, this.mouseBlock.y | 0), this.damageTool())
                               : this.blockX > this.mouseBlock.x &&
                                 this.canFireExistAt((this.mouseBlock.x + 1) | 0, this.mouseBlock.y | 0) &&
                                 "air" == this.world.getFG(this.mouseBlock.x + 1, this.mouseBlock.y) &&
                                 (this.world.setFG(this.mouseBlock.x + 1, this.mouseBlock.y, "fire"), this.makeBlock((this.mouseBlock.x + 1) | 0, this.mouseBlock.y | 0), this.damageTool()))),
                       (this.waitTillRightMouseIsUp = !0);
                   else if ("Shear" == this.world.get_selectedInventoryItemType())
                     null != c &&
                       ("sheep" != this.world.mobs.h[c].h.type || this.world.mobs.h[c].h.sheared
                         ? "cow" == this.world.mobs.h[c].h.type && null != this.getMob(c) && this.getMob(c).shearMob(c) && this.damageTool()
                         : null != this.getMob(c) && this.getMob(c).shearMob(c) && this.damageTool());
                   else if ("snowb" == this.world.get_selectedInventoryItemType()) {
                     this.world.gamemode != U.gamemodes.h.CREATIVE &&
                       (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                         ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                         : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()));
                     this.requestSound("throwsfx");
                     this.waitTillRightMouseIsUp = !0;
                     f = this.world.snowballs;
                     var l = this.uniqueID(this.world.snowballs, "snowball");
                     d = new e();
                     d.h.x = this.world.worldX + (20 * Math.cos(this.rotAngle)) / 30;
                     d.h.y = this.world.worldY - 1.5 + (20 * Math.sin(this.rotAngle)) / 30;
                     d.h.speedX = g.migrateSpeed(20 * Math.cos(this.rotAngle));
                     d.h.speedY = g.migrateSpeed(20 * Math.sin(this.rotAngle));
                     d.h.rotation = this.rotAngle;
                     d.h.timer = 0;
                     d.h.shotBy = this.world.player.id;
                     c = 0.4 * m.Instance.get_fps();
                     d.h.cooldown = c;
                     f.h[l] = g.makeDynamicMap(d);
                   } else if ("megg" == this.world.get_selectedInventoryItemType())
                     null != this.mouseBlock &&
                       ((c = g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.type),
                       (f = !1),
                       this.world.gamemode == U.gamemodes.h.ADVENTURE
                         ? this.matchCanPlaceOn(this.mouseBlock.x | 0, this.mouseBlock.y | 0, this.world.get_selectedInventoryItemExtra().h.canPlaceOn) &&
                           ((f = !0),
                           this.requestSound("throwsfx"),
                           K.spawnMob(c, this.mouseBlock.x + 0.5, -this.mouseBlock.y - 0.5, null != this.world.get_selectedInventoryItemExtra().h.nameChange ? this.world.get_selectedInventoryItemExtra().h.nameChange : null))
                         : ((f = !0),
                           this.requestSound("throwsfx"),
                           K.spawnMob(c, this.mouseBlock.x + 0.5, -this.mouseBlock.y - 0.5, null != this.world.get_selectedInventoryItemExtra().h.nameChange ? this.world.get_selectedInventoryItemExtra().h.nameChange : null)),
                       f &&
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                         (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                           ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                           : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))),
                       (this.waitTillRightMouseIsUp = !0);
                   else if ("egg" == this.world.get_selectedInventoryItemType() || "fireegg" == this.world.get_selectedInventoryItemType() || "ep" == this.world.get_selectedInventoryItemType())
                     this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("eoe" == this.world.get_selectedInventoryItemType())
                     1 == this.world.sceneNum &&
                       ((this.closestMinableBlock = this.getClosestBlock(!0)),
                       "pf" != this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]) &&
                         (this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                         this.requestSound("throwsfx"),
                         (this.waitTillRightMouseIsUp = !0),
                         (c = this.uniqueID(this.world.entities, "eyeOfEnder")),
                         (f = new ig("eyeOfEnder", null, c, null, this, this.world)),
                         (this.world.entities.h[c] = f),
                         f.set_x(this.blockX + 1),
                         f.set_y(-1 * this.blockY - 2)));
                   else if ("bow" == this.world.get_selectedInventoryItemType())
                     (this.world.gamemode != U.gamemodes.h.CREATIVE && -1 == this.findInInventory("arrow")) || this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("boe" == this.world.get_selectedInventoryItemType())
                     this.world.gamemode != U.gamemodes.h.CREATIVE &&
                       (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                         ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                         : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()),
                       (d = new e()),
                       (d.h.type = "empty"),
                       this.addDrop("potion", this.world.worldX, this.world.worldY, 1, null, d)),
                       (this.waitTillRightMouseIsUp = !0),
                       this.dropXP(this.world.worldX + (60 * Math.cos(this.rotAngle)) / 30, this.world.worldY - 1 + (60 * Math.sin(this.rotAngle)) / 30, 1e3);
                   else if ("spear" == this.world.get_selectedInventoryItemType()) this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("bl" == this.world.get_selectedInventoryItemType()) {
                     if (((this.waitTillRightMouseIsUp = !0), null != this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id])) {
                       this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.requestSound("throwsfx");
                       g.makeDynamicMap(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id]).h.attached = null;
                       g.makeDynamicMap(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id]).h.inventory = null;
                       this.closestMinableBlock = this.getClosestBlock(!0);
                       if ("fnc" == this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]) || "nfnc" == this.world.getFG(this.closestMinableBlock[0], this.closestMinableBlock[1]))
                         (f = g.makeDynamicMap(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id])),
                           (d = new e()),
                           (d.h.type = "block"),
                           (d.h.x = this.closestMinableBlock[0]),
                           (d.h.y = this.closestMinableBlock[1]),
                           (f.h.attached = d);
                       else if (null != c) {
                         f = !0;
                         d = Object.keys(this.world.balloons.h);
                         l = d.length;
                         for (var k = 0; k < l; ) {
                           var C = d[k++];
                           if (
                             null != g.makeDynamicMap(this.world.balloons.h[C]).h.attached &&
                             "mob" == g.makeDynamicMap(g.makeDynamicMap(this.world.balloons.h[C]).h.attached).h.type &&
                             g.makeDynamicMap(g.makeDynamicMap(this.world.balloons.h[C]).h.attached).h.id == c
                           ) {
                             f = !1;
                             break;
                           }
                         }
                         f && ((f = g.makeDynamicMap(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id])), (d = new e()), (d.h.type = "mob"), (d.h.id = c), (f.h.attached = d));
                       }
                       c = this.uniqueID(this.world.balloons, "balloon");
                       this.world.balloons.h[c] = this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id];
                       this.renamedBalloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id] = c;
                       l = "Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id;
                       c = this.world.balloons;
                       Object.prototype.hasOwnProperty.call(c.h, l) && delete c.h[l];
                       null != this.world.entities.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id] && this.world.entities.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id].remove();
                     }
                   } else if ("bshur" == this.world.get_selectedInventoryItemType()) this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse"));
                   else if ("fr" == this.world.get_selectedInventoryItemType())
                     (this.waitTillRightMouseIsUp = !0),
                       Object.prototype.hasOwnProperty.call(this.world.entities.h, "bobber_" + this.world.player.id) ||
                         ((f = this.world.entities), (l = "bobber_" + this.world.player.id), (c = new ue("bobber", new e(), "bobber_" + this.world.player.id, [], this, this.world)), (f.h[l] = c)),
                       H.__cast(this.world.entities.h["bobber_" + this.world.player.id], ue).throwIt();
                   else if ("Cap" == I.substr(this.world.get_selectedInventoryItemType(), -3, 3)) {
                     if ("air" == this.world.armors[0][0] || "" == this.world.armors[0][0] || null == this.world.armors[0][0]) {
                       this.world.armors[0][0] = this.world.inventoryList[this.world.selectedInventoryItem][0];
                       this.world.armors[0][1] = this.world.inventoryList[this.world.selectedInventoryItem][2];
                       this.world.armors[0][2] = new e();
                       d = Object.keys(this.world.get_selectedInventoryItemExtra().h);
                       l = d.length;
                       for (k = 0; k < l; ) (C = d[k++]), (f = g.makeDynamicMap(this.world.armors[0][2])), (c = this.world.get_selectedInventoryItemExtra().h[C]), (f.h[C] = c);
                       this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.updateArmorRenderers();
                     }
                   } else if ("Shirt" == I.substr(this.world.get_selectedInventoryItemType(), -5, 5)) {
                     if ("air" == this.world.armors[1][0] || "" == this.world.armors[1][0] || null == this.world.armors[1][0]) {
                       this.world.armors[1][0] = this.world.inventoryList[this.world.selectedInventoryItem][0];
                       this.world.armors[1][1] = this.world.inventoryList[this.world.selectedInventoryItem][2];
                       this.world.armors[1][2] = new e();
                       d = Object.keys(this.world.get_selectedInventoryItemExtra().h);
                       l = d.length;
                       for (k = 0; k < l; ) (C = d[k++]), (f = g.makeDynamicMap(this.world.armors[1][2])), (c = this.world.get_selectedInventoryItemExtra().h[C]), (f.h[C] = c);
                       this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.updateArmorRenderers();
                     }
                   } else if ("Pants" == I.substr(this.world.get_selectedInventoryItemType(), -5, 5)) {
                     if ("air" == this.world.armors[2][0] || "" == this.world.armors[2][0] || null == this.world.armors[2][0]) {
                       this.world.armors[2][0] = this.world.inventoryList[this.world.selectedInventoryItem][0];
                       this.world.armors[2][1] = this.world.inventoryList[this.world.selectedInventoryItem][2];
                       this.world.armors[2][2] = new e();
                       d = Object.keys(this.world.get_selectedInventoryItemExtra().h);
                       l = d.length;
                       for (k = 0; k < l; ) (C = d[k++]), (f = g.makeDynamicMap(this.world.armors[2][2])), (c = this.world.get_selectedInventoryItemExtra().h[C]), (f.h[C] = c);
                       this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.updateArmorRenderers();
                     }
                   } else if ("Shoes" == I.substr(this.world.get_selectedInventoryItemType(), -5, 5)) {
                     if ("air" == this.world.armors[3][0] || "" == this.world.armors[3][0] || null == this.world.armors[3][0]) {
                       this.world.armors[3][0] = this.world.inventoryList[this.world.selectedInventoryItem][0];
                       this.world.armors[3][1] = this.world.inventoryList[this.world.selectedInventoryItem][2];
                       this.world.armors[3][2] = new e();
                       d = Object.keys(this.world.get_selectedInventoryItemExtra().h);
                       l = d.length;
                       for (k = 0; k < l; ) (C = d[k++]), (f = g.makeDynamicMap(this.world.armors[3][2])), (c = this.world.get_selectedInventoryItemExtra().h[C]), (f.h[C] = c);
                       this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
                       this.updateArmorRenderers();
                     }
                   } else if ("cart" == I.substr(this.world.get_selectedInventoryItemType(), 0, 4))
                     null != this.mouseBlock &&
                       "rail" == I.substr(this.world.getFG(this.mouseBlock.x, this.mouseBlock.y), 0, 4) &&
                       (this.world.gamemode != U.gamemodes.h.CREATIVE &&
                         (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                           ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                           : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                       (this.waitTillRightMouseIsUp = !0),
                       (l = this.uniqueID(this.world.carts, "cart")),
                       (f = this.world.carts),
                       (d = new e()),
                       (d.h.id = l),
                       (d.h.x = this.closestMinableBlock[0] + 0.5),
                       (d.h.y = -1 * this.closestMinableBlock[1]),
                       (d.h.speedX = 0),
                       (d.h.speedY = 0),
                       (d.h.riddenBy = null),
                       (d.h.onActivator = !1),
                       (c = I.substr(this.world.get_selectedInventoryItemType(), 4, null)),
                       (d.h.type = c),
                       (d.h.health = 3),
                       (d.h.tilt = 0),
                       (d.h.onRail = 0),
                       (f.h[l] = g.makeDynamicMap(d)));
                   else if ("Hoe" == I.substr(this.world.get_selectedInventoryItemType(), -3, 3))
                     null == this.mouseBlock ||
                       ("dt" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y) && "cdt" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y)) ||
                       (this.world.gamemode == U.gamemodes.h.ADVENTURE
                         ? this.matchCanPlaceOnDirect(this.closestMinableBlock[0], this.closestMinableBlock[1], this.world.get_selectedInventoryItemExtra().h.canPlaceOn) &&
                           (this.world.setFG(this.closestMinableBlock[0], this.closestMinableBlock[1], "farm"), this.reloadBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]), (this.placeDelay = 0), this.damageTool())
                         : (this.world.setFG(this.closestMinableBlock[0], this.closestMinableBlock[1], "farm"), this.reloadBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]), (this.placeDelay = 0), this.damageTool()));
                   else if ("bonem" == this.world.get_selectedInventoryItemType())
                     (d = !1),
                       null != c &&
                         ("sheep" == this.world.mobs.h[c].h.type && "white" != this.world.mobs.h[c].h.color
                           ? ((this.world.mobs.h[c].h.color = "white"), (d = !0))
                           : "wolf" == this.world.mobs.h[c].h.type &&
                             1 == this.world.mobs.h[c].h.tamed &&
                             this.world.mobs.h[c].h.tamedBy == this.world.player.id &&
                             "white" != this.world.mobs.h[c].h.collarColor &&
                             ((this.world.mobs.h[c].h.collarColor = "white"), (d = !0))),
                       d || null == this.mouseBlock || (d = this.useBonemeal(this.mouseBlock.x | 0, this.mouseBlock.y | 0)),
                       (this.waitTillRightMouseIsUp = !0),
                       d &&
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                         ((this.placeDelay = 0),
                         2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                           ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                           : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()));
                   else if ("sw" == this.world.get_selectedInventoryItemType()) {
                     if (null != this.mouseBlock)
                       if ("wr" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y)) a = !0;
                       else if (10 != this.world.water.h["blockX" + this.mouseBlock.x + "Y" + this.mouseBlock.y][0] || 10 != this.world.water.h["blockX" + this.mouseBlock.x + "Y" + this.mouseBlock.y][1]) a = !0;
                   } else
                     "bowl" == this.world.get_selectedInventoryItemType()
                       ? null != c && "cow" == this.world.mobs.h[c].h.type && "mooshroom" == this.world.mobs.h[c].h.variant && ((this.world.inventoryList[this.world.selectedInventoryItem][0] = "soup"), (b = !0))
                       : "tag" == this.world.get_selectedInventoryItemType()
                       ? null != this.world.get_selectedInventoryItemExtra().h.nameChange &&
                         null != c &&
                         ((f = this.world.mobs.h[c]),
                         (c = this.world.get_selectedInventoryItemExtra().h.nameChange),
                         (f.h.name = c),
                         (this.waitTillRightMouseIsUp = !0),
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))
                       : "cbook" == this.world.get_selectedInventoryItemType()
                       ? null != this.world.get_selectedInventoryItemExtra().h.command &&
                         (this.interpretCommand(this.world.get_selectedInventoryItemExtra().h.command),
                         (this.waitTillRightMouseIsUp = !0),
                         null != this.world.get_selectedInventoryItemExtra().h.uses &&
                           (0 < this.world.get_selectedInventoryItemExtra().h.uses && ((f = this.world.get_selectedInventoryItemExtra().h.uses), (this.world.get_selectedInventoryItemExtra().h.uses = f - 1)),
                           0 == this.world.get_selectedInventoryItemExtra().h.uses && (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))
                       : "saddle" == this.world.get_selectedInventoryItemType()
                       ? null != c &&
                         "pig" == this.world.mobs.h[c].h.type &&
                         (null == this.world.mobs.h[c].h.saddleItem || "saddle" != H.__cast(this.world.mobs.h[c].h.saddleItem, Array)[0]) &&
                         0 >= this.world.mobs.h[c].h.babyTimer &&
                         ((this.world.mobs.h[c].h.saddleItem = g.makeDynamicArray(["saddle", 1, 0, new e()])),
                         (this.waitTillRightMouseIsUp = !0),
                         this.world.gamemode != U.gamemodes.h.CREATIVE && (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))
                       : "dye" == this.world.get_selectedInventoryItemType()
                       ? ((d = !1),
                         null != c &&
                           ("sheep" == this.world.mobs.h[c].h.type
                             ? ((f = V.colors),
                               (l = this.world.get_selectedInventoryItemExtra().h.type),
                               Object.prototype.hasOwnProperty.call(f.h, l) &&
                                 "rainbow" != this.world.get_selectedInventoryItemExtra().h.type &&
                                 this.world.mobs.h[c].h.color != this.world.get_selectedInventoryItemExtra().h.type &&
                                 ((f = this.world.mobs.h[c]), (c = this.world.get_selectedInventoryItemExtra().h.type), (f.h.color = c), (d = this.waitTillRightMouseIsUp = !0)))
                             : "wolf" == this.world.mobs.h[c].h.type &&
                               (1 == this.world.mobs.h[c].h.tamed && this.world.mobs.h[c].h.tamedBy == this.world.player.id
                                 ? ((f = V.colors), (l = this.world.get_selectedInventoryItemExtra().h.type), (f = Object.prototype.hasOwnProperty.call(f.h, l)))
                                 : (f = !1),
                               f &&
                                 "rainbow" != this.world.get_selectedInventoryItemExtra().h.type &&
                                 this.world.mobs.h[c].h.collarColor != this.world.get_selectedInventoryItemExtra().h.type &&
                                 ((f = this.world.mobs.h[c]), (c = this.world.get_selectedInventoryItemExtra().h.type), (f.h.collarColor = c), (d = this.waitTillRightMouseIsUp = !0)))),
                         d &&
                           this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))
                       : "ccb" == this.world.get_selectedInventoryItemType() || "ll" == this.world.get_selectedInventoryItemType() || "ink" == this.world.get_selectedInventoryItemType()
                       ? ((f = "brown"),
                         "ll" == this.world.get_selectedInventoryItemType() ? (f = "blue") : "ink" == this.world.get_selectedInventoryItemType() && (f = "black"),
                         (d = !1),
                         null != c &&
                           ("sheep" == this.world.mobs.h[c].h.type
                             ? this.world.mobs.h[c].h.color != f && ((this.world.mobs.h[c].h.color = f), (d = this.waitTillRightMouseIsUp = !0))
                             : "wolf" == this.world.mobs.h[c].h.type &&
                               1 == this.world.mobs.h[c].h.tamed &&
                               this.world.mobs.h[c].h.tamedBy == this.world.player.id &&
                               this.world.mobs.h[c].h.collarColor != f &&
                               ((this.world.mobs.h[c].h.collarColor = f), (d = this.waitTillRightMouseIsUp = !0))),
                         d &&
                           this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))
                       : "bone" == this.world.get_selectedInventoryItemType()
                       ? Object.prototype.hasOwnProperty.call(this.world.mobs.h, c) &&
                         "wolf" == this.world.mobs.h[c].h.type &&
                         this.world.mobs.h[c].h.target != this.world.player.id &&
                         !this.world.mobs.h[c].h.tamed &&
                         ((this.waitTillRightMouseIsUp = a = !0),
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                             : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                         0 == ((3 * Math.random()) | 0) &&
                           (this.unlockAchieve(11),
                           this.addParticles("heart", 5, 0, new h(this.world.mobs.h[c].h.x, 0), new h(this.world.mobs.h[c].h.y, 0), !0),
                           (this.world.mobs.h[c].h.tamed = !0),
                           (this.world.mobs.h[c].h.tamedBy = this.world.player.id),
                           (this.world.mobs.h[c].h.sitting = !0),
                           (this.world.mobs.h[c].h.target = null),
                           this.world.wolfNum--))
                       : "seed" == this.world.get_selectedInventoryItemType()
                       ? null != this.mouseBlock && "farm" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y - 1) && (a = !0)
                       : "carrot" == this.world.get_selectedInventoryItemType()
                       ? null != this.mouseBlock &&
                         "farm" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y - 1) &&
                         ((a = !0), this.canEatFood(this.world.get_selectedInventoryItemType()) && this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse")))
                       : "potato" == this.world.get_selectedInventoryItemType()
                       ? null != this.mouseBlock &&
                         "farm" != this.world.getFG(this.mouseBlock.x, this.mouseBlock.y - 1) &&
                         ((a = !0), this.canEatFood(this.world.get_selectedInventoryItemType()) && this.startUseItem(q.get(this.world.get_selectedInventoryItemType(), "timerToUse")))
                       : "lp" == this.world.get_selectedInventoryItemType() &&
                         (null != this.mouseBlock &&
                           "wr" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y) &&
                           "air" == this.world.getFG(this.mouseBlock.x, this.mouseBlock.y + 1) &&
                           Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.mouseBlock.x + "Y" + this.mouseBlock.y) &&
                           10 == this.world.water.h["blockX" + this.mouseBlock.x + "Y" + this.mouseBlock.y][0] &&
                           10 == this.world.water.h["blockX" + this.mouseBlock.x + "Y" + this.mouseBlock.y][1] &&
                           (this.world.gamemode == U.gamemodes.h.ADVENTURE
                             ? this.matchCanPlaceOn(this.mouseBlock.x | 0, (this.mouseBlock.y + 1) | 0, this.world.get_selectedInventoryItemExtra().h.canPlaceOn) &&
                               (this.world.setFG(this.mouseBlock.x, this.mouseBlock.y + 1, "lp"),
                               this.makeBlock(this.mouseBlock.x | 0, (this.mouseBlock.y + 1) | 0),
                               this.world.gamemode != U.gamemodes.h.CREATIVE &&
                                 (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                                   ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                                   : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))
                             : (this.world.setFG(this.mouseBlock.x, this.mouseBlock.y + 1, "lp"),
                               this.makeBlock(this.mouseBlock.x | 0, (this.mouseBlock.y + 1) | 0),
                               this.world.gamemode != U.gamemodes.h.CREATIVE &&
                                 (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                                   ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]), f[1]--)
                                   : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())))),
                         (a = !0));
                   if (
                     !b &&
                     !a &&
                     !this.cantMove &&
                     ((this.furthestEmptyBlock = this.getFurthestEmptyBlock(!1, !1, q.get(this.world.get_selectedInventoryItemType(), "placeNextToWater"))),
                     null != this.furthestEmptyBlock[0] &&
                       q.get(this.world.get_selectedInventoryItemType(), "placeable") &&
                       ((b = null != q.get(this.world.get_selectedInventoryItemType(), "placeDifferent") ? q.get(this.world.get_selectedInventoryItemType(), "placeDifferent") : this.world.get_selectedInventoryItemType()),
                       this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]) != b &&
                         (this.world.gamemode != U.gamemodes.h.ADVENTURE || this.matchCanPlaceOn(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], this.world.get_selectedInventoryItemExtra().h.canPlaceOn))))
                   ) {
                     if (
                       null != q.get(this.world.get_selectedInventoryItemType(), "placeOn") &&
                       ((c = q.get(this.world.get_selectedInventoryItemType(), "placeOn")), !this.matchBlockDataPlaceOn(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], c))
                     )
                       return;
                     c = !1;
                     f = [this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]];
                     q.get(this.world.get_selectedInventoryItemType(), "walkThroughBlockHit") && !q.get(this.world.get_selectedInventoryItemType(), "actuallyHasCollisionThough")
                       ? (c = !0)
                       : (f[0] == Math.floor(this.world.worldX - (10 + (this.sneakingOrUsingItem() ? 4 : 0)) / 30) && (f[1] == this.blockY + 1 || f[1] == this.blockY + 2)) ||
                         (f[0] == Math.floor((this.world.worldX + (10 + (this.sneakingOrUsingItem() ? 4 : 0)) / 30) / 1) && (f[1] == this.blockY + 1 || f[1] == this.blockY + 2)) ||
                         null != this.fallingBlockCollision(f[0], -f[1] - 1, 1, 1) ||
                         ("air" != this.world.getFG(f[0], f[1]) && null == q.get(this.world.getFG(f[0], f[1]), "liquid") && null == q.get(this.world.getFG(f[0], f[1]), "replaceable")) ||
                         (c = !0);
                     c &&
                       0 <= this.world.selectedInventoryItem &&
                       8 >= this.world.selectedInventoryItem &&
                       ((this.placeDelay = 0),
                       "carpet" == this.world.get_selectedInventoryItemType() ||
                       "cloth" == this.world.get_selectedInventoryItemType() ||
                       "bdcloth" == this.world.get_selectedInventoryItemType() ||
                       "gs" == this.world.get_selectedInventoryItemType() ||
                       "bdgs" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           null != this.world.get_selectedInventoryItemExtra() &&
                             null != this.world.get_selectedInventoryItemExtra().h.type &&
                             ((f = this.world.states), (l = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])), (c = this.world.get_selectedInventoryItemExtra().h.type), (f.h[l] = c)))
                         : "mh" == this.world.get_selectedInventoryItemType() ||
                           "carpet" == this.world.get_selectedInventoryItemType() ||
                           "cloth" == this.world.get_selectedInventoryItemType() ||
                           "bdcloth" == this.world.get_selectedInventoryItemType() ||
                           "gs" == this.world.get_selectedInventoryItemType() ||
                           "bdgs" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           null != this.world.get_selectedInventoryItemExtra() &&
                             null != this.world.get_selectedInventoryItemExtra().h.type &&
                             ((f = this.world.states), (l = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])), (c = this.world.get_selectedInventoryItemExtra().h.type), (f.h[l] = c)),
                           this.blockX > this.furthestEmptyBlock[0]
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1]) + "_2"] = 2)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1]) + "_2"] = 1))
                         : "chest" == this.world.get_selectedInventoryItemType() ||
                           "oven" == this.world.get_selectedInventoryItemType() ||
                           "brew" == this.world.get_selectedInventoryItemType() ||
                           "enchant" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           null != this.world.get_selectedInventoryItemExtra() && null != this.world.get_selectedInventoryItemExtra().h.nameChange
                             ? ((f = this.world.states), (l = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])), (c = this.world.get_selectedInventoryItemExtra().h.nameChange), (f.h[l] = c))
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = ""))
                         : "dropper" == this.world.get_selectedInventoryItemType() || "dispense" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           null != this.world.get_selectedInventoryItemExtra() &&
                             null != this.world.get_selectedInventoryItemExtra().h.nameChange &&
                             ((f = this.world.states), (l = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1]) + "_3"), (c = this.world.get_selectedInventoryItemExtra().h.nameChange), (f.h[l] = c)),
                           this.blockX < this.furthestEmptyBlock[0] - 1
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                             : this.blockX > this.furthestEmptyBlock[0] + 1
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : this.blockY < this.furthestEmptyBlock[1]
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 4)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3))
                         : "anvil" == this.world.get_selectedInventoryItemType()
                         ? null != this.fallingBlockCollision(this.furthestEmptyBlock[0], -this.furthestEmptyBlock[1] - 1, 1, 1)
                           ? (a = !0)
                           : (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                             null != this.world.get_selectedInventoryItemExtra() &&
                               null != this.world.get_selectedInventoryItemExtra().h.damage &&
                               ((f = this.world.states), (l = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])), (c = this.world.get_selectedInventoryItemExtra().h.damage), (f.h[l] = c)))
                         : "wbk" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           (this.world.water.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = [10, 10]),
                           null != this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1) && H.__cast(this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]), Tc).ifWater(),
                           this.updateAround(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1),
                           (b = "wr"),
                           (this.waitTillRightMouseIsUp = !0))
                         : "lbk" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           (this.world.water.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = [10, 10]),
                           null != this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1) && H.__cast(this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]), ie).ifWater(),
                           this.updateAround(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1),
                           (b = "la"),
                           (this.waitTillRightMouseIsUp = !0))
                         : "abk" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           (this.world.water.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = [10, 10]),
                           null != this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1) && H.__cast(this.world.getBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]), je).ifWater(),
                           this.updateAround(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1),
                           (b = "ad"),
                           (this.waitTillRightMouseIsUp = !0))
                         : "sign" == this.world.get_selectedInventoryItemType()
                         ? null != q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                           ? (a = !0)
                           : (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                             (this.world.signs.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = "Enter sign text here"),
                             (this.inventario.sign = "blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])),
                             this.inventario.gotoAndStop("sign"))
                         : 1 == q.get(this.world.get_selectedInventoryItemType(), "stairBlock")
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           1 == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1), "walkThroughBlock") &&
                           1 != q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                             ? this.world.worldX < this.furthestEmptyBlock[0] + 0.5
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : 1 == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock") &&
                               1 != q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1), "walkThroughBlock")
                             ? this.world.worldX < this.furthestEmptyBlock[0] + 0.5
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 4)
                             : this.blockY > this.furthestEmptyBlock[1] - 1
                             ? this.world.worldX < this.furthestEmptyBlock[0] + 0.5
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : this.world.worldX < this.furthestEmptyBlock[0] + 0.5
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 4))
                         : 1 == q.get(this.world.get_selectedInventoryItemType(), "halfBlock")
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           1 == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1), "walkThroughBlock") &&
                           1 != q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                             : 1 == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock") &&
                               1 != q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1), "walkThroughBlock")
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : this.blockY > this.furthestEmptyBlock[1]
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2))
                         : "lant" == this.world.get_selectedInventoryItemType() ||
                           "th" == this.world.get_selectedInventoryItemType() ||
                           "ortorch" == this.world.get_selectedInventoryItemType() ||
                           "rstorch" == this.world.get_selectedInventoryItemType() ||
                           "button" == this.world.get_selectedInventoryItemType() ||
                           "lever" == this.world.get_selectedInventoryItemType()
                         ? this.blockX == this.furthestEmptyBlock[0]
                           ? null == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1))
                             : null == q.get(this.world.getFG(this.furthestEmptyBlock[0] - 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2))
                             : null == q.get(this.world.getFG(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3))
                             : (a = !0)
                           : this.blockX < this.furthestEmptyBlock[0]
                           ? null == q.get(this.world.getFG(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3))
                             : null == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1))
                             : null == q.get(this.world.getFG(this.furthestEmptyBlock[0] - 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2))
                             : (a = !0)
                           : null == q.get(this.world.getFG(this.furthestEmptyBlock[0] - 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2))
                           : null == q.get(this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1), "walkThroughBlock")
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1))
                           : null == q.get(this.world.getFG(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1]), "walkThroughBlock")
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3))
                           : (a = !0)
                         : "hay" == this.world.get_selectedInventoryItemType() || "wd" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           this.blockX < this.furthestEmptyBlock[0] - 1 || this.blockX > this.furthestEmptyBlock[0] + 1
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1))
                         : "piston" == this.world.get_selectedInventoryItemType() || "spiston" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                           this.blockX < this.furthestEmptyBlock[0] - 1
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 4)
                             : this.blockX > this.furthestEmptyBlock[0] + 1
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2)
                             : this.blockY > this.furthestEmptyBlock[1]
                             ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                             : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 3))
                         : "dt" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2))
                         : "dtg" == this.world.get_selectedInventoryItemType()
                         ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1), (b = "dt"), (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1))
                         : "dr" == this.world.get_selectedInventoryItemType()
                         ? "air" != this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1) && "air" == this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1)
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                             this.blockX > this.furthestEmptyBlock[0]
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2),
                             (b = "dr1"),
                             this.world.setFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1, "dr2"),
                             this.makeBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1))
                           : (a = !0)
                         : "bbdr" == this.world.get_selectedInventoryItemType()
                         ? "air" != this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1) && "air" == this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1)
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                             this.blockX > this.furthestEmptyBlock[0]
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2),
                             (b = "bdr1"),
                             this.world.setFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1, "bdr2"),
                             this.makeBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1))
                           : (a = !0)
                         : "idr" == this.world.get_selectedInventoryItemType()
                         ? "air" != this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] - 1) && "air" == this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1)
                           ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                             this.blockX > this.furthestEmptyBlock[0]
                               ? (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 1)
                               : (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = 2),
                             (b = "idr3"),
                             this.world.setFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1, "idr4"),
                             this.makeBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1] + 1))
                           : (a = !0)
                         : "bed" == this.world.get_selectedInventoryItemType() &&
                           ("air" == this.world.getFG(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1])
                             ? (this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                               (b = "white"),
                               null != this.world.get_selectedInventoryItemExtra() && null != this.world.get_selectedInventoryItemExtra().h.type && (b = this.world.get_selectedInventoryItemExtra().h.type),
                               (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0]) + "Y" + E.string(this.furthestEmptyBlock[1])] = b),
                               (this.world.states.h["blockX" + E.string(this.furthestEmptyBlock[0] + 1) + "Y" + E.string(this.furthestEmptyBlock[1])] = b),
                               (b = "bed1"),
                               this.world.setFG(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1], "bed2"),
                               this.makeBlock(this.furthestEmptyBlock[0] + 1, this.furthestEmptyBlock[1]))
                             : (a = !0)),
                       a ||
                         (this.unlockAchieve(1),
                         "air" != this.world.getFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]) && this.mineBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1, !1),
                         this.world.setFG(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], b),
                         this.makeBlock(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1]),
                         this.updateAround(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], !1),
                         "anvil" == b
                           ? this.requestSound("anvilsound")
                           : this.blockSound(this.furthestEmptyBlock[0], this.furthestEmptyBlock[1], this.world.worldX - this.furthestEmptyBlock[0], this.world.worldY - this.furthestEmptyBlock[1]),
                         this.world.gamemode != U.gamemodes.h.CREATIVE &&
                           ("bk" != I.substr(this.world.get_selectedInventoryItemType(), 1, 2)
                             ? ((f = this.world.inventoryList[this.world.selectedInventoryItem]),
                               f[1]--,
                               0 >= this.world.inventoryList[this.world.selectedInventoryItem][1] && (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()))
                             : (this.world.inventoryList[this.world.selectedInventoryItem][0] = "bk"))));
                   }
                 }
               }
             } else if (0 != this.mouseD && !this.waitTillMouseIsUp)
               if (((c = null), 1 != this.interactLock && (c = this.getClosestMob()), null != c)) {
                 if (((this.interactLock = 2), (this.world.lastTarget = c), (this.world.mobs.h[c].h.target = this.world.player.id), (a = 0), "wolf" != this.world.mobs.h[c].h.type || 1 != this.world.mobs.h[c].h.tamed)) {
                   b = null != this.world.effects.h.strength ? g.makeDynamicMap(this.world.effects.h.strength).h.level * g.makeDynamicMap(this.effectData.h.strength).h.perLevel : 0;
                   b += null != this.world.effects.h.weakness ? g.makeDynamicMap(this.world.effects.h.weakness).h.level * g.makeDynamicMap(this.effectData.h.weakness).h.perLevel : 0;
                   if (null == q.get(this.world.get_selectedInventoryItemType(), "hitStrength"))
                     -1 > this.world.ySpeed && (++b, (a += 5), 1 != J.particles && this.addParticles("criticalhit", 5, 0, new h(this.world.mobs.h[c].h.x, 0), new h(this.world.mobs.h[c].h.y - 1, 0))),
                       "cow" == this.world.mobs.h[c].h.type && "cowctus" == this.world.mobs.h[c].h.variant && this.ouch(1, Math.floor(Math.max(1, (1 + b) / 2)), "attack"),
                       null != this.getMob(c) && this.getMob(c).hurtMob(c, Math.max(1, 1 + b), "attack", this.world.player.id);
                   else {
                     f = this.world.get_selectedInventoryItemExtra();
                     Object.prototype.hasOwnProperty.call(f.h, "sharpness1")
                       ? (b += ((2 * Math.random()) | 0) + 1)
                       : ((f = this.world.get_selectedInventoryItemExtra()),
                         Object.prototype.hasOwnProperty.call(f.h, "sharpness2")
                           ? (b += ((3 * Math.random()) | 0) + 2)
                           : ((f = this.world.get_selectedInventoryItemExtra()),
                             Object.prototype.hasOwnProperty.call(f.h, "sharpness3")
                               ? (b += ((4 * Math.random()) | 0) + 3)
                               : ((f = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(f.h, "sharpness4") && (b += ((5 * Math.random()) | 0) + 4))));
                     if ("zombie" == this.world.mobs.h[c].h.type || "skeleton" == this.world.mobs.h[c].h.type || "zombiepigman" == this.world.mobs.h[c].h.type)
                       (f = this.world.get_selectedInventoryItemExtra()),
                         Object.prototype.hasOwnProperty.call(f.h, "smite1")
                           ? (b += ((2 * Math.random()) | 0) + 1)
                           : ((f = this.world.get_selectedInventoryItemExtra()),
                             Object.prototype.hasOwnProperty.call(f.h, "smite2")
                               ? (b += ((3 * Math.random()) | 0) + 2)
                               : ((f = this.world.get_selectedInventoryItemExtra()),
                                 Object.prototype.hasOwnProperty.call(f.h, "smite3")
                                   ? (b += ((4 * Math.random()) | 0) + 3)
                                   : ((f = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(f.h, "smite4") && (b += ((5 * Math.random()) | 0) + 4))));
                     "spider" == this.world.mobs.h[c].h.type &&
                       ((f = this.world.get_selectedInventoryItemExtra()),
                       Object.prototype.hasOwnProperty.call(f.h, "baneOfArthropods1")
                         ? (b += ((3 * Math.random()) | 0) + 2)
                         : ((f = this.world.get_selectedInventoryItemExtra()),
                           Object.prototype.hasOwnProperty.call(f.h, "baneOfArthropods2")
                             ? (b += ((4 * Math.random()) | 0) + 3)
                             : ((f = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(f.h, "baneOfArthropods3") && (b += ((5 * Math.random()) | 0) + 4))));
                     -1 > this.world.ySpeed &&
                       ((b += Math.floor(((q.get(this.world.get_selectedInventoryItemType(), "hitStrength") + b) * (((20 * Math.random()) | 0) + 30)) / 100)),
                       (a += 5),
                       1 != J.particles && this.addParticles("criticalhit", 5, 0, new h(this.world.mobs.h[c].h.x, 0), new h(this.world.mobs.h[c].h.y - 1, 0)));
                     null != this.getMob(c) && this.getMob(c).hurtMob(c, Math.max(1, (q.get(this.world.get_selectedInventoryItemType(), "hitStrength") + b) | 0), "attack", this.world.player.id);
                     this.damageTool();
                   }
                   this.stopMiningAnimation = this.miningAnimation = !0;
                   f = this.world.get_selectedInventoryItemExtra();
                   Object.prototype.hasOwnProperty.call(f.h, "knockback1")
                     ? (a += 10)
                     : ((f = this.world.get_selectedInventoryItemExtra()),
                       Object.prototype.hasOwnProperty.call(f.h, "knockback2") ? (a += 20) : ((f = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(f.h, "knockback3") && (a += 30)));
                   f = this.world.get_selectedInventoryItemExtra();
                   Object.prototype.hasOwnProperty.call(f.h, "fireAspect") && (this.world.onFire.h[c] = !0);
                   "squid" == this.world.mobs.h[c].h.type
                     ? ((a = Math.atan2(this.world.worldY - this.world.mobs.h[c].h.y, this.world.worldX - this.world.mobs.h[c].h.x)), (this.world.mobs.h[c].h.speedX = 2 * Math.cos(a)), (this.world.mobs.h[c].h.speedY = 2 * Math.sin(a)))
                     : ((d = this.world.mobs.h[c]),
                       (d.h.speedX +=
                         (this.world.mobs.h[c].h.x > this.world.worldX ? 1 : -1) *
                         (7 * (1 + (null != this.world.effects.h.speed ? (g.makeDynamicMap(this.world.effects.h.speed).h.level * g.makeDynamicMap(this.effectData.h.speed).h.perLevel) / 100 : 0)) +
                           (0 != this.leftSprinting || 0 != this.rightSprinting ? 15 : 0) +
                           a)),
                       null != this.getMob(c) &&
                         this.collision(this.world.mobs.h[c].h.x + 0.7 * this.getMob(c).mobCollisionBounds(c).get_left(), this.world.mobs.h[c].h.y + 1, 0.7 * this.getMob(c).mobCollisionBounds(c).width, 0, 4, !1) &&
                         ((d = this.world.mobs.h[c]), (d.h.speedY += g.migrateSpeed(4 + (0 != this.leftSprinting || 0 != this.rightSprinting ? 4 : 0) + a / 4)), (d = this.world.mobs.h[c]), (d.h.y -= 0.3333333333333333)));
                   this.placeDelay = 0;
                 }
               } else
                 2 != this.interactLock && null != this.closestMinableBlock && this.canMineBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]) && this.startMiningBlock(this.closestMinableBlock[0], this.closestMinableBlock[1]);
         },
         getMob: function (b) {
           return H.__cast(this.world.entities.h[b], K);
         },
         matchCanPlaceOn: function (b, a, c) {
           if (null == c) return !1;
           var d = -1 < c.indexOf("all");
           return -1 < c.indexOf(q.get(this.world.getFG(b + 1, a), "identifier")) ||
             -1 < c.indexOf(q.get(this.world.getFG(b, a + 1), "identifier")) ||
             -1 < c.indexOf(q.get(this.world.getFG(b + -1, a), "identifier")) ||
             -1 < c.indexOf(q.get(this.world.getFG(b, a + -1), "identifier")) ||
             -1 < c.indexOf(q.get(this.world.getFG(b, a), "identifier"))
             ? !d
             : d;
         },
         matchCanPlaceOnDirect: function (b, a, c) {
           if (null == c) return !1;
           var d = -1 < c.indexOf("all");
           return -1 < c.indexOf(q.get(this.world.getFG(b, a), "identifier")) ? !d : d;
         },
         matchBlockDataPlaceOn: function (b, a, c) {
           if ("Object" == O.getQualifiedClassName(c[0]))
             for (var d = Object.keys(c[0].h), f = d.length, e = 0; e < f; )
               if ("SOLID" == d[e++]) {
                 if (1 != q.get(this.world.getFG(b, a - 1), "walkThroughBlock")) return !0;
               } else {
                 var k = this.world.getFG(b, a - 1);
                 if (Object.prototype.hasOwnProperty.call(c[0].h, k)) return !0;
               }
           if ("Object" == O.getQualifiedClassName(c[2]))
             for (d = Object.keys(c[2].h), f = d.length, e = 0; e < f; )
               if ("SOLID" == d[e++]) {
                 if (1 != q.get(this.world.getFG(b, a + 1), "walkThroughBlock")) return !0;
               } else if (((k = this.world.getFG(b, a + 1)), Object.prototype.hasOwnProperty.call(c[2].h, k))) return !0;
           if ("Object" == O.getQualifiedClassName(c[1]))
             for (d = Object.keys(c[1].h), f = d.length, e = 0; e < f; )
               if ("SOLID" == d[e++]) {
                 if (1 != q.get(this.world.getFG(b - 1, a), "walkThroughBlock") || 1 != q.get(this.world.getFG(b + 1, a), "walkThroughBlock")) return !0;
               } else {
                 k = this.world.getFG(b - 1, a);
                 if (Object.prototype.hasOwnProperty.call(c[1].h, k)) return !0;
                 k = this.world.getFG(b + 1, a);
                 if (Object.prototype.hasOwnProperty.call(c[1].h, k)) return !0;
               }
           return !1;
         },
         canMineBlock: function (b, a) {
           var c = this.world.getFG(b, a);
           return "air" == this.world.getFG(b, a) || 1 == q.get(c, "liquid") || ("br" == c && this.world.gamemode != U.gamemodes.h.CREATIVE)
             ? !1
             : this.world.gamemode == U.gamemodes.h.ADVENTURE
             ? null != this.world.get_selectedInventoryItemExtra().h.canDestroy
               ? ((c = -1 < this.world.get_selectedInventoryItemExtra().h.canDestroy.indexOf("all")), -1 < this.world.get_selectedInventoryItemExtra().h.canDestroy.indexOf(q.get(this.world.getFG(b, a), "identifier")) ? !c : c)
               : !1
             : !0;
         },
         startMiningBlock: function (b, a) {
           this.interactLock = 1;
           var c = !1;
           this.currentlyMining = this.world.getFG(b, a);
           this.currentlyMiningBlock = [b, a];
           if (null == this.world.getBlock(b, a)) this.world.getBlock(b, a, !0);
           else if (this.world.gamemode == U.gamemodes.h.CREATIVE && "Sword" != I.substr(this.world.get_selectedInventoryItemType(), -5, 5))
             1 != this.world.getBlock(b, a).goingIn && ((this.world.getBlock(b, a).goingIn = 1), (this.world.getBlock(b, a).miningCountdown = 0), this.world.getBlock(b, a).gotoAndStop("mining")), (this.placeDelay = 4);
           else {
             if (1 == this.world.get_selectedInventoryTool()) {
               var d = q.get(this.world.getFG(b, a), "mining");
               if (null != d) {
                 var f = this.world.get_selectedInventoryItemType();
                 f = Object.prototype.hasOwnProperty.call(d.h, f);
               } else f = !1;
               f &&
                 ((c = g.makeDynamicMap(q.get(this.world.getFG(b, a), "mining"))),
                 (f = this.world.get_selectedInventoryItemType()),
                 (f = c.h[f]),
                 (c = this.world.get_selectedInventoryItemExtra()),
                 Object.prototype.hasOwnProperty.call(c.h, "efficiency1") ? (f *= 0.7) : ((c = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(c.h, "efficiency2") && (f *= 0.4)),
                 this.inWater && null != this.world.armors[0][2] && !Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[0][2]).h, "aguaAffinity") && (f *= 2),
                 this.world.getBlock(b, a).goingIn != Math.floor(f) &&
                   ((f = ((Math.max(1, Math.floor(f)) / 25) * m.Instance.get_fps()) | 0), (this.world.getBlock(b, a).goingIn = this.world.getBlock(b, a).miningCountdown = f), this.world.getBlock(b, a).gotoAndStop("mining")),
                 (this.placeDelay = 0),
                 (c = !0));
             }
             0 == c &&
               ((d = q.get(this.world.getFG(b, a), "mining")),
               null != d &&
                 Object.prototype.hasOwnProperty.call(d.h, "None") &&
                 ((f = g.makeDynamicMap(q.get(this.world.getFG(b, a), "mining")).h.None),
                 this.inWater && (f *= 2),
                 this.world.getBlock(b, a).goingIn != Math.floor(f) &&
                   ((f = ((Math.max(1, Math.floor(f)) / 25) * m.Instance.get_fps()) | 0), (this.world.getBlock(b, a).goingIn = this.world.getBlock(b, a).miningCountdown = f), this.world.getBlock(b, a).gotoAndStop("mining")),
                 (this.placeDelay = 0)));
           }
         },
         startUseItem: function (b) {
           null == b && (b = 0);
           this.itemUseAnimationTimer = b;
           this.itemUseAnimationSelectedItem = this.world.selectedInventoryItem;
           this.itemUseAnimationSelectedItemType = this.world.inventoryList[this.world.selectedInventoryItem][0];
           this.waitTillRightMouseIsUp = !0;
           this.canEatFood(this.world.get_selectedInventoryItemType()) || "mbk" == this.world.get_selectedInventoryItemType()
             ? (this.eatingAnimation = !0)
             : "bow" == this.world.get_selectedInventoryItemType() ||
               "spear" == this.world.get_selectedInventoryItemType() ||
               "bshur" == this.world.get_selectedInventoryItemType() ||
               "egg" == this.world.get_selectedInventoryItemType() ||
               "fireegg" == this.world.get_selectedInventoryItemType() ||
               "ep" == this.world.get_selectedInventoryItemType()
             ? (this.bowAnimation = !0)
             : "potion" == this.world.get_selectedInventoryItemType() && ("splash" == this.world.get_selectedInventoryItemExtra().h.category ? (this.bowAnimation = !0) : (this.eatingAnimation = !0));
         },
         renderBowDrawback: function () {
           if (null == this.bowDrawbackPool) {
             var b = y.blockTextures,
               a = Fa.getShader(xa.NORMAL),
               c = new e(),
               d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.bowDrawbackPool = new ja(b, La.NORMAL, a, c);
             this.bowDrawbackPool.layer = 0;
             this.bowDrawbackPool.isTransparent = !0;
             this.bowDrawbackPool.forceNoCulling = !0;
             this.bowDrawbackPool.updateQuad(this.bowDrawbackBowQuad, null, null, null, new h());
             this.bowDrawbackItemRenderer = new bb(this.bowDrawbackPool, 0, 0, this, this.world, []);
           }
           this.bowDrawbackPool.updateQuad(this.bowDrawbackBowQuad, null, new h(), new h());
           switch (this.bowDrawbackFrame) {
             case "1":
               return;
             case "2":
             case "3":
             case "4":
             case "5":
               this.bowDrawbackPool.currentMatrix
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(24)
                 .rotate2D((3 * -Math.PI) / 4);
               this.bowDrawbackItemRenderer.set_item(["arrow", 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               this.bowDrawbackPool.currentMatrix
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(32)
                 .rotate2D((3 * -Math.PI) / 4);
               b = y.getTexture("bow", "2" == this.bowDrawbackFrame ? "" : "drawback_" + (E.parseInt(this.bowDrawbackFrame) - 2));
               this.bowDrawbackPool.updateQuad(this.bowDrawbackBowQuad, new M(), new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
               break;
             case "bshur":
               this.bowDrawbackPool.currentMatrix
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(24)
                 .rotate2D(-Math.PI / 4);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "egg":
               this.bowDrawbackPool.currentMatrix.reset().translate(-0.5, -0.5).scale2D(15.36).rotate2D(this.rotAngle);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "ep":
               this.bowDrawbackPool.currentMatrix.reset().translate(-0.5, -0.5).scale2D(15.36).rotate2D(this.rotAngle);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "fireegg":
               this.bowDrawbackPool.currentMatrix.reset().translate(-0.5, -0.5).scale2D(15.36).rotate2D(this.rotAngle);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "potion":
               this.bowDrawbackPool.currentMatrix
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(32)
                 .rotate2D(-Math.PI / 4);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, this.world.get_selectedInventoryItemExtra()]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "spear":
               this.bowDrawbackPool.currentMatrix
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(28)
                 .rotate2D(-Math.PI / 4);
               this.bowDrawbackItemRenderer.set_item([this.bowDrawbackFrame, 1, 0, g.makeDynamicMap(new e())]);
               this.bowDrawbackItemRenderer.render();
               break;
             case "teleporter":
               this.bowDrawbackPool.currentMatrix.reset().translate(-0.5, -0.5).scale2D(23.04).rotate2D(this.rotAngle);
               c = new e();
               c.h.nameChange = "teleporter";
               this.bowDrawbackItemRenderer.set_item(["ep", 1, 0, c]);
               this.bowDrawbackItemRenderer.render();
               break;
             default:
               return;
           }
           this.bowDrawbackPool.transform
             .reset()
             .rotate2D(-this.rotAngle)
             .scale2D(1 / this.zoom)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(Math.floor(this.bowDrawbackX * this.zoom) / this.zoom, Math.floor(this.bowDrawbackY * this.zoom) / this.zoom)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.scene.draw(this.bowDrawbackPool);
         },
         resetUseItem: function () {
           0 == this.rMouseD &&
             this.world.get_selectedInventoryItemType() == this.itemUseAnimationSelectedItemType &&
             ("bow" == this.world.get_selectedInventoryItemType() ||
               "spear" == this.world.get_selectedInventoryItemType() ||
               "bshur" == this.world.get_selectedInventoryItemType() ||
               "egg" == this.world.get_selectedInventoryItemType() ||
               "fireegg" == this.world.get_selectedInventoryItemType() ||
               "ep" == this.world.get_selectedInventoryItemType() ||
               ("potion" == this.world.get_selectedInventoryItemType() && "splash" == this.world.get_selectedInventoryItemExtra().h.category)) &&
             this.useItem();
           this.itemUseAnimationTimer = -1;
           this.bowAnimation = this.eatingAnimation = !1;
           this.bowDrawbackFrame = "1";
         },
         useItemAnimation: function () {
           if (
             "bow" == this.world.get_selectedInventoryItemType() ||
             "spear" == this.world.get_selectedInventoryItemType() ||
             "bshur" == this.world.get_selectedInventoryItemType() ||
             "egg" == this.world.get_selectedInventoryItemType() ||
             "fireegg" == this.world.get_selectedInventoryItemType() ||
             "ep" == this.world.get_selectedInventoryItemType() ||
             ("potion" == this.world.get_selectedInventoryItemType() && "splash" == this.world.get_selectedInventoryItemExtra().h.category)
           ) {
             var b = ((this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) * 10 + 27) / 30;
             this.bowDrawbackX = this.world.worldX + Math.cos(this.rotAngle) * b;
             this.bowDrawbackY = this.world.worldY - 1.5 + Math.sin(this.rotAngle) * b;
             "bow" == this.world.get_selectedInventoryItemType()
               ? (this.bowDrawbackFrame = E.string((Math.min(3, Math.floor(4 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")))) + 2) | 0))
               : "ep" == this.world.get_selectedInventoryItemType() && "teleporter" == E.string(this.world.get_selectedInventoryItemExtra().h.nameChange).toLowerCase()
               ? (this.bowDrawbackFrame = "teleporter")
               : (this.bowDrawbackFrame = this.world.get_selectedInventoryItemType());
           }
         },
         useItem: function () {
           if (null != q.get(this.world.get_selectedInventoryItemType(), "food")) {
             if (((this.eatingAnimation = !1), this.canEatFood(this.world.get_selectedInventoryItemType()))) {
               var b = q.get(this.world.get_selectedInventoryItemType(), "food");
               this.unlockAchieve(25);
               null != b.h.hunger && (this.world.food += b.h.hunger);
               null != b.h.health && (this.world.health += b.h.health);
               if (null != b.h.effects)
                 for (var a = b.h.effects, c = Object.keys(a.h), d = c.length, f = 0; f < d; ) {
                   var l = c[f++],
                     k = a.h[l];
                   (null == k.h.chance || Math.random() < 1 / k.h.chance) && this.addEffect(this.world.player.id, l, k.h.duration, 1, !0, 1 == k.h.showParticles);
                 }
               "potion" == this.world.get_selectedInventoryItemType() || null != b.h.drink
                 ? (this.requestSound("drink" + (((2 * Math.random()) | 0) + 1)),
                   null != q.get(this.world.get_selectedInventoryItemType(), "color")
                     ? ((d = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                       (f = new h(this.world.worldY - 1.5, 0)),
                       (b = new e()),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (c = a.h[l].h.r),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (k = a.h[l].h.g),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (b.h.color = [c, k, a.h[l].h.b]))
                     : ((d = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                       (f = new h(this.world.worldY - 1.5, 0)),
                       (b = new e()),
                       (b.h.color = [V.colors.h.lightblue.h.r, V.colors.h.lightblue.h.g, V.colors.h.lightblue.h.b])))
                 : (this.requestSound("eat" + (((4 * Math.random()) | 0) + 1)),
                   null != q.get(this.world.get_selectedInventoryItemType(), "color")
                     ? ((d = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                       (f = new h(this.world.worldY - 1.5, 0)),
                       (b = new e()),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (c = a.h[l].h.r),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (k = a.h[l].h.g),
                       (a = V.colors),
                       (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                       (b.h.color = [c, k, a.h[l].h.b]))
                     : ((d = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                       (f = new h(this.world.worldY - 1.5, 0)),
                       (b = new e()),
                       (b.h.color = [V.colors.h.brown.h.r, V.colors.h.brown.h.g, V.colors.h.brown.h.b])));
               this.addParticles("mining", 10, 0, d, f, !0, b);
               this.useUpItem();
               this.waitTillRightMouseIsUp = !1;
             }
           } else if ("bow" == this.world.get_selectedInventoryItemType())
             if (0 != this.rMouseD) this.itemUseAnimationTimer++;
             else {
               this.bowAnimation = !1;
               this.bowDrawbackFrame = "1";
               b = this.findInInventory("arrow");
               if (this.world.gamemode == U.gamemodes.h.CREATIVE || -1 != b)
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (this.unlockAchieve(33),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "infinity") || (2 <= this.world.inventoryList[b][1] ? ((d = this.world.inventoryList[b]), d[1]--) : (this.world.inventoryList[b] = g.emptyItem()))),
                   (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                   this.damageTool(),
                   this.requestSound("bowsfx"),
                   (d = this.uniqueID(this.world.arrows, "arrow")),
                   (a = this.world.arrows),
                   (b = new e()),
                   (b.h.x = this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                   (b.h.y = this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                   (b.h.speedX = Math.cos(this.rotAngle) * c),
                   (b.h.speedY = Math.sin(this.rotAngle) * c),
                   (b.h.rotation = this.rotAngle),
                   (b.h.timer = 0),
                   (b.h.shotBy = this.world.player.id),
                   (c = 0.4 * m.Instance.get_fps()),
                   (b.h.cooldown = c),
                   (a.h[d] = g.makeDynamicMap(b)),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "punch1") && (g.makeDynamicMap(this.world.arrows.h[d]).h.punch = 1),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "punch2") && (g.makeDynamicMap(this.world.arrows.h[d]).h.punch = 2),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "power1") && (g.makeDynamicMap(this.world.arrows.h[d]).h.power = 1),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "power2") && (g.makeDynamicMap(this.world.arrows.h[d]).h.power = 2),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "power3") && (g.makeDynamicMap(this.world.arrows.h[d]).h.power = 3),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "flame") && (g.makeDynamicMap(this.world.arrows.h[d]).h.flame = 1),
                   (a = this.world.get_selectedInventoryItemExtra()),
                   Object.prototype.hasOwnProperty.call(a.h, "infinity") && (g.makeDynamicMap(this.world.arrows.h[d]).h.infinity = 1);
               this.waitTillRightMouseIsUp = !1;
             }
           else if ("spear" == this.world.get_selectedInventoryItemType())
             0 != this.rMouseD
               ? this.itemUseAnimationTimer++
               : ((this.bowAnimation = !1),
                 (this.bowDrawbackFrame = "1"),
                 (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                     ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--)
                     : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                 this.requestSound("throwsfx"),
                 (a = this.world.spears),
                 (d = this.uniqueID(this.world.spears, "spear")),
                 (b = new e()),
                 (b.h.x = this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                 (b.h.y = this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                 (b.h.speedX = Math.cos(this.rotAngle) * c),
                 (b.h.speedY = Math.sin(this.rotAngle) * c),
                 (b.h.rotation = this.rotAngle),
                 (b.h.timer = 0),
                 (b.h.shotBy = this.world.player.id),
                 (c = 0.4 * m.Instance.get_fps()),
                 (b.h.cooldown = c),
                 (a.h[d] = g.makeDynamicMap(b)),
                 (this.waitTillRightMouseIsUp = !1));
           else if ("bshur" == this.world.get_selectedInventoryItemType())
             0 != this.rMouseD
               ? this.itemUseAnimationTimer++
               : ((this.bowAnimation = !1),
                 (this.bowDrawbackFrame = "1"),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                     ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--)
                     : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                 (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                 this.requestSound("shurikenthrow"),
                 (a = this.world.shurikens),
                 (d = this.uniqueID(this.world.shurikens, "shuriken")),
                 (b = new e()),
                 (b.h.x = this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                 (b.h.y = this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                 (b.h.speedX = Math.cos(this.rotAngle) * c),
                 (b.h.speedY = Math.sin(this.rotAngle) * c),
                 (b.h.rotation = this.rotAngle),
                 (b.h.timer = 0),
                 (b.h.shotBy = this.world.player.id),
                 (b.h.type = "bone"),
                 (c = 0.4 * m.Instance.get_fps()),
                 (b.h.cooldown = c),
                 (a.h[d] = g.makeDynamicMap(b)),
                 (this.waitTillRightMouseIsUp = !1));
           else if ("egg" == this.world.get_selectedInventoryItemType())
             0 != this.rMouseD
               ? this.itemUseAnimationTimer++
               : ((this.bowAnimation = !1),
                 (this.bowDrawbackFrame = "1"),
                 (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                     ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--)
                     : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                 this.requestSound("throwsfx"),
                 (a = "egg" + Math.random()),
                 (d = new ve("egg", null, a, null, this, this.world)),
                 (this.world.entities.h[a] = d),
                 d.set_x(this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                 d.set_y(this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                 (d.xSpeed = Math.cos(this.rotAngle) * c),
                 (d.ySpeed = Math.sin(this.rotAngle) * c),
                 (this.waitTillRightMouseIsUp = !1));
           else if ("fireegg" == this.world.get_selectedInventoryItemType())
             0 != this.rMouseD
               ? this.itemUseAnimationTimer++
               : ((this.bowAnimation = !1),
                 (this.bowDrawbackFrame = "1"),
                 (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                     ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--)
                     : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                 this.requestSound("throwsfx"),
                 (a = "fireegg" + Math.random()),
                 (d = new we("fireegg", null, a, null, this, this.world)),
                 (this.world.entities.h[a] = d),
                 d.set_x(this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                 d.set_y(this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                 (d.xSpeed = Math.cos(this.rotAngle) * c),
                 (d.ySpeed = Math.sin(this.rotAngle) * c),
                 (this.waitTillRightMouseIsUp = !1));
           else if ("ep" == this.world.get_selectedInventoryItemType())
             0 != this.rMouseD
               ? this.itemUseAnimationTimer++
               : ((this.bowAnimation = !1),
                 (this.bowDrawbackFrame = "1"),
                 (b = !1),
                 null != this.world.get_selectedInventoryItemExtra().h.nameChange && "teleporter" == this.world.get_selectedInventoryItemExtra().h.nameChange.toLowerCase() && (b = !0),
                 (c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6)),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]
                     ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--)
                     : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
                 this.requestSound("throwsfx"),
                 (a = "enderpearl" + Math.random()),
                 (d = new Wb("enderpearl", null, a, null, this, this.world)),
                 (this.world.entities.h[a] = d),
                 d.set_x(this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3),
                 d.set_y(this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3),
                 (d.xSpeed = Math.cos(this.rotAngle) * c),
                 (d.ySpeed = Math.sin(this.rotAngle) * c),
                 b && (d.henry = !0),
                 (this.waitTillRightMouseIsUp = !1));
           else if ("potion" == this.world.get_selectedInventoryItemType()) {
             if ("splash" == this.world.get_selectedInventoryItemExtra().h.category) {
               if (0 != this.rMouseD) {
                 this.itemUseAnimationTimer++;
                 return;
               }
               this.bowAnimation = !1;
               this.bowDrawbackFrame = "1";
               f = [];
               null != g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.effects
                 ? (f = g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.effects)
                 : null != this.potionData.h[g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.type] &&
                   null != g.makeDynamicMap(this.potionData.h[g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.type]).h.effects &&
                   (f = g.makeDynamicMap(this.potionData.h[g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.type]).h.effects);
               c = g.migrateSpeed(17 * (1 - this.itemUseAnimationTimer / q.get(this.world.get_selectedInventoryItemType(), "timerToUse")) + 6);
               this.requestSound("throwsfx");
               a = this.world.splashPotions;
               d = this.uniqueID(this.world.splashPotions, "splashPotion");
               b = new e();
               b.h.x = this.world.worldX + ((Math.cos(this.rotAngle) * c) / 30) * 3;
               b.h.y = this.world.worldY - 1.5 + ((Math.sin(this.rotAngle) * c) / 30) * 3;
               b.h.speedX = Math.cos(this.rotAngle) * c;
               b.h.speedY = Math.sin(this.rotAngle) * c;
               b.h.rotation = this.rotAngle;
               b.h.shotBy = this.world.player.id;
               b.h.timer = 0;
               b.h.cooldown = 10;
               b.h.type = g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.type;
               b.h.effects = f;
               b.h.showParticles =
                 null == g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.showParticles ? !0 : g.makeDynamicMap(this.world.inventoryList[this.world.selectedInventoryItem][3]).h.showParticles;
               a.h[d] = g.makeDynamicMap(b);
             } else {
               if (null != this.world.get_selectedInventoryItemExtra().h.effects)
                 for (a = this.world.get_selectedInventoryItemExtra().h.effects, b = 0, c = a.length; b < c; )
                   (d = a[b++]), this.addEffect(this.world.player.id, d.h.type, null != d.h.duration ? d.h.duration : 0, null != d.h.level ? d.h.level : 0, !0, 0 != this.world.get_selectedInventoryItemExtra().h.showParticles);
               else if (
                 ((a = this.potionData), (l = this.world.get_selectedInventoryItemExtra().h.type), null != a.h[l] && ((a = this.potionData), (l = this.world.get_selectedInventoryItemExtra().h.type), (a = a.h[l]), null != a.h.effects))
               )
                 for (b = 0, c = a.h.effects.length; b < c; )
                   (d = a.h.effects[b++]),
                     this.unlockAchieve(43),
                     this.addEffect(this.world.player.id, d.h.type, null != d.h.duration ? d.h.duration : 0, null != d.h.level ? d.h.level : 0, !0, 0 != this.world.get_selectedInventoryItemExtra().h.showParticles);
               this.world.gamemode != U.gamemodes.h.CREATIVE && ((b = new e()), (b.h.type = "empty"), this.addDrop("potion", this.world.worldX, this.world.worldY, 1, null, b));
               this.eatingAnimation = !1;
               this.requestSound("drink" + (((2 * Math.random()) | 0) + 1));
             }
             this.world.gamemode != U.gamemodes.h.CREATIVE &&
               (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1] ? ((d = this.world.inventoryList[this.world.selectedInventoryItem]), d[1]--) : (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem()));
             this.waitTillRightMouseIsUp = !1;
           } else
             "mbk" == this.world.get_selectedInventoryItemType() &&
               ((this.eatingAnimation = !1),
               (this.world.inventoryList[this.world.selectedInventoryItem][0] = "bk"),
               (this.world.effects = new e()),
               this.resetEffectIcons(),
               this.requestSound("drink" + (((2 * Math.random()) | 0) + 1)),
               (this.waitTillRightMouseIsUp = !1));
         },
         getBiome: function (b) {
           return 0 > b || b >= this.world.biomeList.length ? null : this.world.biomeList[b];
         },
         getSnowRegion: function (b) {
           return 1 == this.world.snowRegions.h[b];
         },
         doPlayerLogic: function () {
           this.blockX = Math.floor(this.world.worldX / 1);
           this.blockY = Math.floor(-this.world.worldY);
           this.standingOn1 = this.world.getFG(this.world.worldX + 0.3, this.blockY);
           this.standingOn2 = this.world.getFG(this.world.worldX - 0.3, this.blockY);
           if (this.world.gamemode == U.gamemodes.h.SPECTATOR) {
             this.keysX = !1;
             if (!this.cantMove) {
               G.gt(m.Instance.keyDown(J.getKeyBinding("left")), 0) || G.gt(m.Instance.keyDown(1073741904), 0) ? ((this.world.xSpeed -= g.migrateAcc(1, 0.94)), (this.characterXScale = 1), (this.keysX = !0)) : (this.leftSprinting = 0);
               G.gt(m.Instance.keyDown(J.getKeyBinding("right")), 0) || G.gt(m.Instance.keyDown(1073741903), 0) ? ((this.world.xSpeed += g.migrateAcc(1, 0.94)), (this.characterXScale = -1), (this.keysX = !0)) : (this.rightSprinting = 0);
               if (G.gt(m.Instance.keyDown(J.getKeyBinding("up")), 0) || G.gt(m.Instance.keyDown(1073741906), 0) || (J.spaceJump && G.gt(m.Instance.keyDown(32), 0))) this.world.ySpeed += g.migrateAcc(1, 0.94);
               if (G.gt(m.Instance.keyDown(J.getKeyBinding("down2")), 0) || G.gt(m.Instance.keyDown(1073741905), 0)) this.world.ySpeed -= g.migrateAcc(1, 0.94);
             }
             this.world.xSpeed *= g.migrateDampening(0.94);
             this.world.ySpeed *= g.migrateDampening(0.94);
             this.world.worldX += this.world.xSpeed / 30;
             this.world.worldY -= this.world.ySpeed / 30;
           } else {
             this.blockAtFeet = this.world.getFG(this.blockX, this.blockY);
             this.blockAtLegs = this.world.getFG(this.blockX, this.blockY + 1);
             this.blockAtHead = this.world.getFG(this.blockX, this.blockY + 2);
             (!G.gt(m.Instance.keyDown(J.getKeyBinding("down")), 0) && !G.gt(m.Instance.keyDown(1073741905), 0)) || this.world.fly || 0 != this.world.sleepingAnimation || this.cantMove ? (this.sneaking = !1) : (this.sneaking = !0);
             var b = this.world.worldX,
               a = this.world.worldY;
             if (!this.collision(b - 0.3, a + 0.03333333333333333, 0.6, 0, 0.1, !1)) {
               var c = -w.modulus(-this.world.worldY, 1);
               "st" == this.world.getFG(this.blockX, this.blockY) && -0.5 < c && !this.world.fly
                 ? (this.sneaking && 0 == this.world.tick % ((8 * m.Instance.get_fps()) / 25) ? (this.world.worldY += 0.6) : 0.06666666666666667 < Math.abs(0.5 + c) && (this.world.worldY -= 0.5 + c), (this.falling = !1))
                 : 0 == this.wasFalling && 0 >= this.world.ySpeed && (1 == q.get(this.world.getFG(this.blockX, this.blockY), "stairBlock") || 1 == q.get(this.world.getFG(this.blockX, this.blockY - 1), "stairBlock")) && !this.world.fly
                 ? ((this.world.worldY += 0.5), (this.falling = !1))
                 : (this.falling = !0);
             }
             this.falling ||
               (1 == this.wasFalling &&
                 ((this.wasFallingSpeed = -this.world.ySpeed),
                 (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker1") || Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker2")) &&
                   this.doFrostWalker(this.blockX, this.blockY, Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker2") ? 3 : 2)),
               (this.world.ySpeed = 0));
             c = !0;
             if (this.wasFalling && !this.falling && "" == this.world.riding) {
               if (0 >= this.wasFallingAndNotFalling)
                 if ("sd" == this.standingOn1 || "sd" == this.standingOn2) {
                   var d = 1;
                   for (b = 5 * (J.particles - 1) + 1; d < b; ) ++d, new Pc(this.world.worldX, this.world.worldY, this, this.world, this.world.xSpeed);
                   this.blockSound(this.blockX, this.blockY, 0, 0);
                 } else
                   "slimeb" == this.standingOn1 || "slimeb" == this.standingOn2
                     ? (this.addParticles("slime", 0, 5, new h(this.world.worldX, 0), new h(this.world.worldY, 0)), this.requestSound("slimeblockland"))
                     : this.blockSound(this.blockX, this.blockY, 0, 0);
               this.wasFallingAndNotFalling = 3;
               "bed" == I.substr(this.blockAtFeet, 0, 3)
                 ? (this.wasFallingSpeed *= 0.6)
                 : "slimeb" != this.blockAtFeet ||
                   this.sneaking ||
                   (this.wasFallingSpeed > g.migrateSpeed(6)
                     ? ((this.world.ySpeed = 0.78 * Math.max(0, this.wasFallingSpeed - g.migrateSpeed(5))), (this.wasFallingSpeed = 0), (this.world.worldY -= this.world.ySpeed / 2 / 30))
                     : (this.world.ySpeed = 0));
               if (this.wasFallingSpeed > g.migrateSpeed(23)) {
                 this.wasFallingSpeed -= g.migrateSpeed(14);
                 b = 0;
                 a = !1;
                 for (d = 0; 0 <= this.wasFallingSpeed; ) (b += 2), 10 < b && (a = !0), ++d, (this.wasFallingSpeed -= Math.max(g.migrateSpeed(11 - b), g.migrateSpeed(1)));
                 this.hasEffect("jumpboost") && (d -= Math.ceil(1.75 * g.makeDynamicMap(this.world.effects.h.jumpboost).h.level));
                 0 < d && this.ouch(1 + (a ? 1 : 0), -d, "fall");
               }
             } else this.wasFallingAndNotFalling--;
             this.world.gamemode == U.gamemodes.h.CREATIVE && this.world.fly && ((this.world.ySpeed *= g.migrateDampening(0.2)), (this.falling = !1));
             null == q.get(this.blockAtLegs, "walkThroughBlockHit") && "dr" != I.substr(this.blockAtLegs, -3, 2) && "lp" != this.blockAtLegs
               ? (0 == this.suffocate && ((this.suffocate = 15), this.ouch(1, -1, "suffocate")),
                 this.suffocate--,
                 null != q.get(this.world.getFG(this.blockX - 1, this.blockY + 1), "walkThroughBlockHit")
                   ? this.isRiding() || (this.world.worldX -= 0.5)
                   : null != q.get(this.world.getFG(this.blockX + 1, this.blockY + 1), "walkThroughBlockHit")
                   ? this.isRiding() || (this.world.worldX += 0.5)
                   : null != q.get(this.world.getFG(this.blockX, this.blockY + 2), "walkThroughBlockHit")
                   ? this.isRiding() || (this.world.worldY -= 0.5)
                   : null != q.get(this.world.getFG(this.blockX, this.blockY), "walkThroughBlockHit")
                   ? this.isRiding() || (this.world.worldY += 0.5)
                   : null == q.get(this.world.getFG(this.blockX, this.blockY - 1), "walkThroughBlockHit") || this.isRiding() || (this.world.worldY += 0.5))
               : (this.suffocate = 0);
             d = 0;
             null != this.world.armors[3] &&
               null != this.world.armors[3][2] &&
               (g.makeDynamicMap(this.world.armors[3][2]).h.depthStrider1 ? (d = 0.4) : g.makeDynamicMap(this.world.armors[3][2]).h.depthStrider2 ? (d = 0.7) : g.makeDynamicMap(this.world.armors[3][2]).h.depthStrider3 && (d = 1));
             Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.blockX + "Y" + (this.blockY + 1)) &&
               !this.world.fly &&
               (this.getWater(this.blockX, this.blockY + 1)[0] > this.getWater(this.blockX, this.blockY + 1)[1]
                 ? (this.world.xSpeed -= g.migrateAcc(1 - d, 0.55))
                 : this.getWater(this.blockX, this.blockY + 1)[0] < this.getWater(this.blockX, this.blockY + 1)[1] && (this.world.xSpeed += g.migrateAcc(1 - d, 0.55)),
               1 == this.world.states.h["blockX" + this.blockX + "Y" + (this.blockY + 1)]
                 ? (this.world.ySpeed += g.migrateAcc(3, 0.42))
                 : -1 == this.world.states.h["blockX" + this.blockX + "Y" + (this.blockY + 1)] && this.falling && (this.world.ySpeed -= g.migrateAcc(2, 0.42)));
             Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.blockX + "Y" + (this.blockY + 2)) &&
               !this.world.fly &&
               (this.getWater(this.blockX, this.blockY + 2)[0] > this.getWater(this.blockX, this.blockY + 2)[1]
                 ? (this.world.xSpeed -= g.migrateAcc(1 - d, 0.55))
                 : this.getWater(this.blockX, this.blockY + 2)[0] < this.getWater(this.blockX, this.blockY + 2)[1] && (this.world.xSpeed += g.migrateAcc(1 - d, 0.55)),
               1 == this.world.states.h["blockX" + this.blockX + "Y" + (this.blockY + 2)]
                 ? (this.world.ySpeed += g.migrateAcc(3, 0.42))
                 : -1 == this.world.states.h["blockX" + this.blockX + "Y" + (this.blockY + 2)] && this.falling && (this.world.ySpeed -= g.migrateAcc(2, 0.42)));
             b = this.world.worldX;
             a = this.world.worldY;
             var f = b + 0.6666666666666666,
               l = b - 0.6666666666666666;
             0 < this.rightSprinting && 1 != q.get(this.world.getFG(Math.floor(b / 1) + 1, Math.floor(-a) + 1), "stairBlock") && (f += Math.floor(-this.world.xSpeed / 2) / 30);
             0 < this.leftSprinting && 1 != q.get(this.world.getFG(Math.floor(b / 1) - 1, Math.floor(-a) + 1), "stairBlock") && (l += Math.floor(-this.world.xSpeed / 2) / 30);
             this.collision(f, a - 1.8333333333333333, 0, 1.1666666666666667, 0.13333333333333333) && ((this.rightable = !1), (this.rightSprinting = 0), 0 > this.world.xSpeed && (this.world.xSpeed = 0));
             this.collision(l, a - 1.8333333333333333, 0, 1.1666666666666667, 0.13333333333333333) && ((this.leftable = !1), (this.leftSprinting = 0), 0 < this.world.xSpeed && (this.world.xSpeed = 0));
             this.collision(b - 0.16666666666666666, a - 2, 0.3333333333333333, 0, 0.13333333333333333, !1) &&
               ((c = !1), 0 < this.world.ySpeed && ((this.world.ySpeed = -Math.abs(this.world.ySpeed / 2)), (this.world.worldY -= this.world.ySpeed / 30)));
             if (!this.world.fly) {
               if ("web" == this.world.getFG(this.blockX, this.blockY + 1) || "web" == this.world.getFG(this.blockX, this.blockY + 2))
                 (this.rightSprinting = this.leftSprinting = 0), (this.world.xSpeed *= g.migrateDampening(0.2)), (this.world.ySpeed *= g.migrateDampening(0.2));
               if ("ssd" == this.world.getFG(this.blockX, this.blockY) || "slimeb" == this.world.getFG(this.blockX, this.blockY)) this.world.xSpeed *= g.migrateDampening(0.5);
               if ("wr" == this.world.getFG(this.blockX, this.blockY + 1) || "wr" == this.world.getFG(this.blockX, this.blockY + 2))
                 (this.rightSprinting = this.leftSprinting = 0), (this.world.xSpeed *= g.migrateDampening(0.7 + 0.3 * d)), (this.world.ySpeed *= g.migrateDampening(0.7 + 0.3 * d));
             }
             if (this.isRiding() || !this.ranWorldLogicOnce || (null != this.ENDING && null != this.world.mobs.h[this.ENDING])) this.ranWorldLogicOnce && ((this.world.ySpeed = 0), (this.world.xSpeed = 0));
             else {
               this.world.riding = "";
               Math.abs(this.world.xSpeed) < g.migrateSpeed(0.25) && (this.world.xSpeed = 0);
               if (Math.abs(this.world.ySpeed) < g.migrateSpeed(0.2))
                 (this.world.ySpeed = 0),
                   (b = this.world.worldX),
                   (a = this.world.worldY),
                   !this.collision(b, a - 0.03333333333333333, 0, 0, 0.03333333333333333, !1) && this.collision(b, a + 0.06666666666666667, 0, 0, 0.03333333333333333, !1) && (this.world.worldY += 0.03333333333333333);
               else {
                 this.world.worldY -= this.world.ySpeed / 30;
                 b = this.world.worldX;
                 a = this.world.worldY;
                 for (d = 0; d <= Math.floor(Math.abs(this.world.ySpeed / 2)) && this.collision(b - (9 + this.world.xSpeed) / 30, a + ((this.world.ySpeed / Math.abs(this.world.ySpeed / 2)) * d - 4) / 30, 0.6, 0, 0.03333333333333333, !1); )
                   ++d;
                 this.world.worldY += ((this.world.ySpeed / Math.abs(this.world.ySpeed / 2)) * d) / 30;
                 a = this.world.worldY;
               }
               for (d = 0; 5 > d; ) {
                 ++d;
                 if (this.sneakingOrUsingItem() && !this.falling)
                   if (0 < this.world.xSpeed) {
                     if (!this.collision(b - 0.3, this.world.worldY, 0.5333333333333333, 0.6666666666666666, 0.16666666666666666)) {
                       this.world.xSpeed = 0;
                       break;
                     }
                   } else if (0 > this.world.xSpeed && !this.collision(b - 0.23333333333333334, this.world.worldY, 0.5333333333333333, 0.6666666666666666, 0.16666666666666666)) {
                     this.world.xSpeed = 0;
                     break;
                   }
                 this.world.worldX -= this.world.xSpeed / 5 / 30;
                 b = this.world.worldX;
                 if (!this.isRiding())
                   for (f = 9; 0 < f && this.collision(b - 0.3, a - 0.13333333333333333, 0.6, 0.03333333333333333, 0.1, !1) && !this.collision(b - 0.3, a - 1.8333333333333333, 0.6, 0.03333333333333333, 0.1, !1); )
                     --f, (this.world.worldY -= 0.06666666666666667), (this.world.ySpeed = 0), (a = this.world.worldY);
               }
             }
             this.deepness = 0;
             if (
               "sw" == this.world.getFG(this.blockX, this.blockY + 2) ||
               ("wr" == this.world.getFG(this.blockX, this.blockY + 2) &&
                 (!Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.blockX + "Y" + (this.blockY + 2)) || 9 <= this.getWater(this.blockX, this.blockY + 2)[0] || 9 <= this.getWater(this.blockX, this.blockY + 2)[1]))
             ) {
               this.startUnderwaterTimer = 5;
               null == this.world.armors[0][2] && (this.world.armors[0][2] = new e());
               this.hasEffect("waterbreathing")
                 ? ((this.airTimer = 60), (this.world.air = 11))
                 : null != g.makeDynamicMap(this.world.armors[0][2]).h.respiration1
                 ? 0 == Math.floor(2 * Math.random()) && this.airTimer--
                 : null != g.makeDynamicMap(this.world.armors[0][2]).h.respiration2
                 ? 0 == Math.floor(4 * Math.random()) && this.airTimer--
                 : null != g.makeDynamicMap(this.world.armors[0][2]).h.respiration3
                 ? 0 == Math.floor(6 * Math.random()) && this.airTimer--
                 : this.airTimer--;
               0 >= this.airTimer && ((this.airTimer = 60), 0 >= this.world.air ? this.ouch(1, -1, "water") : this.world.air--);
               0 == Math.floor(10 * Math.random()) && 1 != J.particles && this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2, 0));
               0 == this.inWater &&
                 (1 != J.particles &&
                   (this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0)),
                   this.addParticles("water", 1, 0, new h(this.world.worldX, 0), new h(this.world.worldY - 2.5, 0))),
                 P.getSound("underwater_0").play(1, 0, 0, 1.703, 1e6));
               this.inWater = !0;
               for (b = 1; this.deepness++, ++b, null != q.get(this.world.getFG(this.blockX, this.blockY + b), "liquid") || "sw" == this.world.getFG(this.blockX, this.blockY + b); );
               this.hasEffect("waterbreathing") && (this.deepness = Math.round(0.8 * this.deepness));
               P.getSound("underwater_0").set_volume(Math.min(this.deepness / 10, 1));
             } else if (((this.world.air = 11), (this.airTimer = 30), 0 >= this.startUnderwaterTimer)) {
               if (1 == this.inWater) {
                 d = 1;
                 for (b = 10 * (J.particles - 1) + 1; d < b; ) ++d, this.addParticles("water", 1, 0, new h(this.world.worldX - 0.5, 1), new h(this.world.worldY - 1, 0));
                 this.requestSound("splash", 0, 0);
               }
               this.inWater = !1;
               P.getSound("underwater_0").stop();
             } else this.startUnderwaterTimer--;
             this.falling
               ? (null != q.get(this.world.getFG(this.blockX, this.blockY + 1), "liquid") ? (this.world.xSpeed *= g.migrateDampening(0.55)) : (this.world.xSpeed *= g.migrateDampening(0.6)), (this.world.ySpeed -= g.migrateAcc(2, 0.94)))
               : "ice" == this.world.getFG(this.blockX, this.blockY) || "fice" == this.world.getFG(this.blockX, this.blockY)
               ? (this.world.xSpeed *= g.migrateDampening(0.9))
               : (this.world.xSpeed *= g.migrateDampening(0.7));
             1 != q.get(this.world.getFG(this.blockX, this.blockY + 1), "climbable") ||
               this.world.fly ||
               ((this.world.ySpeed *= g.migrateDampening(0.75)),
               ("ladder" == this.world.getFG(this.blockX, this.blockY + 1) || "rp" == this.world.getFG(this.blockX, this.blockY + 1)) && this.sneaking && 5 > Math.abs(this.world.ySpeed) && (this.world.ySpeed = 0));
             0 == this.world.tick % ((m.Instance.get_fps() / 25) * 15) &&
               (("ct" != this.blockAtFeet && "ct" != this.blockAtLegs && "ct" != this.blockAtHead) || this.sneaking || this.ouch(1, -1, "cactus"),
               ("la" == this.blockAtFeet && this.falling) || "la" == this.blockAtLegs || "la" == this.blockAtHead
                 ? this.ouch(1, -5, "lava")
                 : ("ad" == this.blockAtFeet && this.falling) || "ad" == this.blockAtLegs || "ad" == this.blockAtHead
                 ? this.ouch(1, -5, "acid")
                 : "magma" != this.blockAtFeet ||
                   this.sneaking ||
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker1") ||
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker2") ||
                   this.ouch(1, -2, "lava"));
             "" == this.world.riding &&
               ((this.distanceX += Math.abs(this.world.xSpeed) / 30),
               1 < this.distanceX &&
                 ((Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker1") || Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker2")) &&
                   this.doFrostWalker(this.blockX, this.blockY, Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "frostWalker2") ? 3 : 2),
                 (this.distanceX = 0),
                 1 != q.get(this.world.getFG(this.blockX, this.blockY), "walkThroughBlockHit") && this.blockSound(this.blockX, this.blockY, 0, 0)));
             this.keysX = !1;
             this.cantMove ||
               ((b =
                 2.2 *
                 (1 +
                   (this.hasEffect("speed") ? (H.__cast(this.world.effects.h.speed, e).h.level * H.__cast(this.effectData.h.speed, e).h.perLevel) / 100 : 0) +
                   (this.hasEffect("slowness") ? (H.__cast(this.world.effects.h.slowness, e).h.level * H.__cast(this.effectData.h.slowness, e).h.perLevel) / 100 : 0))),
               (a = b + 2.2),
               G.gt(m.Instance.keyDown(J.getKeyBinding("right")), 0) || G.gt(m.Instance.keyDown(1073741903), 0)
                 ? ((this.rightKey = !0),
                   this.rightable &&
                     ((this.characterXScale = -1),
                     this.sneakingOrUsingItem()
                       ? (this.world.xSpeed -= g.migrateAcc(0.5, 0.7))
                       : 0 != this.rightSprinting
                       ? (("sd" != this.standingOn1 && "sd" != this.standingOn2) || 3 != J.particles || "" != this.world.riding || new Pc(this.world.worldX, this.world.worldY, this, this.world, this.world.xSpeed),
                         (this.world.xSpeed -= g.migrateAcc(a, 0.7)))
                       : (this.world.xSpeed -= g.migrateAcc(b, 0.7)),
                     (this.keysX = !0)))
                 : ((this.rightSprinting = 0), (this.rightKey = !1)),
               G.gt(m.Instance.keyDown(J.getKeyBinding("left")), 0) || G.gt(m.Instance.keyDown(1073741904), 0)
                 ? ((this.leftKey = !0),
                   this.leftable &&
                     ((this.characterXScale = 1),
                     this.sneakingOrUsingItem()
                       ? (this.world.xSpeed += g.migrateAcc(0.5, 0.7))
                       : 0 != this.leftSprinting
                       ? (("sd" != this.standingOn1 && "sd" != this.standingOn2) || 3 != J.particles || "" != this.world.riding || new Pc(this.world.worldX, this.world.worldY, this, this.world, this.world.xSpeed),
                         (this.world.xSpeed += g.migrateAcc(a, 0.7)))
                       : (this.world.xSpeed += g.migrateAcc(b, 0.7)),
                     (this.keysX = !0)))
                 : ((this.leftSprinting = 0), (this.leftKey = !1)));
             this.cantMove ||
               (this.jumpTimer--,
               G.gt(m.Instance.keyDown(J.getKeyBinding("up")), 0) || G.gt(m.Instance.keyDown(1073741906), 0) || (J.spaceJump && G.gt(m.Instance.keyDown(32), 0))
                 ? ((this.upKey = !0),
                   (b = 0),
                   (1 == q.get(this.world.getFG(this.blockX, this.blockY), "climbable") &&
                     1 != q.get(this.world.getFG(this.blockX, this.blockY + 1), "climbable") &&
                     1 != q.get(this.world.getFG(this.blockX, this.blockY + 2), "climbable") &&
                     1 != q.get(this.world.getFG(this.blockX, this.blockY + 3), "climbable")) ||
                   (1 == q.get(this.world.getFG(this.blockX, this.blockY + 1), "climbable") && 1 == q.get(this.world.getFG(this.blockX, this.blockY + 2), "walkThroughBlockHit"))
                     ? c &&
                       (this.world.fly
                         ? ((this.world.ySpeed = g.migrateSpeed(7)), (this.world.worldY -= 0.11666666666666667))
                         : ((b = 1 == q.get(this.world.getFG(this.blockX, this.blockY + 1), "liquidCollision") ? 4.4 : 3),
                           10 > this.world.ySpeed && (this.world.ySpeed += g.migrateAcc(b, 0.7)),
                           0 == this.falling && (this.world.worldY -= b / 2 / 30)))
                     : 0 >= this.jumpTimer
                     ? ("st" == this.world.getFG(this.blockX, this.blockY) && "st" != this.world.getFG(this.blockX, this.blockY + 1)
                         ? (this.jumpTimer = Math.floor(12 * (m.Instance.get_fps() / 25)))
                         : (this.jumpTimer = Math.floor(6 * (m.Instance.get_fps() / 25))),
                       c &&
                         ("bed" == I.substr(this.world.getFG(this.blockX, this.blockY), 0, 3) && 0 == this.falling
                           ? (b = 17)
                           : "web" == this.world.getFG(this.blockX, this.blockY) || "web" == this.world.getFG(this.blockX, this.blockY + 1)
                           ? (b = 2)
                           : 0 == this.falling && (b = 15),
                         "slimeb" == this.world.getFG(this.blockX, this.blockY) && 0 == this.falling && this.requestSound("slimeblockjump", 0, 0)),
                       0 < b && (this.hasEffect("jumpboost") && (b += 3.5 * g.makeDynamicMap(this.world.effects.h.jumpboost).h.level), b > this.world.ySpeed && ((this.world.ySpeed = g.migrateSpeed(b)), (this.world.worldY -= b / 2 / 30))))
                     : this.world.fly && c && 0 == this.falling && ((this.world.ySpeed = g.migrateSpeed(7)), (this.world.worldY -= 0.11666666666666667)))
                 : (this.upKey = !1),
               this.world.gamemode == U.gamemodes.h.CREATIVE && this.world.fly && (G.gt(m.Instance.keyDown(J.getKeyBinding("down2")), 0) || G.gt(m.Instance.keyDown(1073741905), 0)) && (this.world.ySpeed -= g.migrateAcc(30, 0.7)));
             this.wasFalling = !1;
             1 == this.falling && (this.wasFalling = !0);
             this.falling = !1;
             this.wasRightable = this.rightable;
             this.wasLeftable = this.leftable;
             this.leftable = this.rightable = !0;
             this.wasSprinting = 0 != this.rightSprinting || 0 != this.leftSprinting ? !0 : !1;
             this.sneakingOrUsingItem() && (this.rightSprinting = this.leftSprinting = 0);
             0 < this.leftSprinting && this.leftSprinting++;
             0 < this.rightSprinting && this.rightSprinting++;
             this.leftSprinting >= 15 * m.Instance.get_fps() && (this.leftSprinting = 0);
             this.rightSprinting >= 15 * m.Instance.get_fps() && (this.rightSprinting = 0);
             300 >= this.world.food && (this.leftSprinting = this.rightSprinting = 0);
             if (!this.pawsed && 1 == this.inventario.currentFrame) {
               if (300 < this.world.food) {
                 if (1 == m.Instance.keyDownDouble(J.getKeyBinding("left")) || 1 == m.Instance.keyDownDouble(1073741904)) this.leftSprinting = 1;
                 if (1 == m.Instance.keyDownDouble(J.getKeyBinding("right")) || 1 == m.Instance.keyDownDouble(1073741903)) this.rightSprinting = 1;
               }
               (1 == m.Instance.keyDownDouble(J.getKeyBinding("up")) || 1 == m.Instance.keyDownDouble(1073741906) || (J.spaceJump && 1 == m.Instance.keyDownDouble(32))) &&
                 this.world.gamemode == U.gamemodes.h.CREATIVE &&
                 (this.world.fly = !this.world.fly);
             }
           }
           this.resetCamera();
         },
         isRiding: function () {
           return "" == this.world.riding ? !1 : Object.prototype.hasOwnProperty.call(this.world.entities.h, this.world.riding);
         },
         sneakingOrUsingItem: function () {
           return this.sneaking ? !0 : -1 < this.itemUseAnimationTimer;
         },
         renderPlayer: function () {
           if (this.hurtAnimation || "" != this.world.riding || this.cantMove) this.miningAnimation = !1;
           this.animate = 1;
           1 == this.miningAnimation
             ? (this.animate = 3)
             : this.wasFalling && null != q.get(this.standingOn1, "walkThroughBlockHit") && null != q.get(this.standingOn2, "walkThroughBlockHit") && "st" != this.standingOn1 && "st" != this.standingOn2
             ? (this.animate = 5)
             : 1 == this.keysX && this.world.fly
             ? (this.animate = 5)
             : 1 == this.keysX && !this.cantMove && Math.abs(this.world.xSpeed) > g.migrateSpeed(0.5)
             ? (this.animate = 2)
             : "fr" == this.world.get_selectedInventoryItemType() && Object.prototype.hasOwnProperty.call(this.world.entities.h, "bobber_" + this.world.player.id) && (this.animate = 3);
           if (1 == this.hurtAnimation || 0 != this.world.dead) this.animate = 4;
           if ("raft" == I.substr(this.world.riding, 0, 4) || null != this.world.mobs.h[this.world.riding]) this.animate = 6;
           "cart" == I.substr(this.world.riding, 0, 4) &&
             (Object.prototype.hasOwnProperty.call(this.world.carts.h, this.world.riding)
               ? 1 == H.__cast(this.world.entities.h[this.world.riding], ib).currentFrame
                 ? (this.animate = 7)
                 : 2 == H.__cast(this.world.entities.h[this.world.riding], ib).currentFrame
                 ? (this.animate = 0 > this.characterXScale ? 8 : 9)
                 : 3 == H.__cast(this.world.entities.h[this.world.riding], ib).currentFrame && (this.animate = 0 < this.characterXScale ? 8 : 9)
               : (this.world.riding = ""));
           if (0 < this.world.sleepingAnimation)
             if ((this.pawsed || this.world.sleepingAnimation++, "bed1" != this.world.getFG(Math.floor(this.world.spawnPoint.x / 1), Math.floor(-this.world.spawnPoint.y)) || this.upKey))
               (this.characterRotation = this.world.sleepingAnimation = 0), this.world.player.teleportMob(new h(this.world.spawnPoint.x, this.world.spawnPoint.y), 0, 2, !1, !0), (this.lighting.bedFrame = 1);
             else {
               this.lighting.bedFrame = 2;
               var b = Math.min(1, this.world.sleepingAnimation / (4 * m.Instance.get_fps()));
               this.lighting.bedAlpha = 0.4 * b;
               this.characterXScale = this.animate = 1;
               this.characterRotation = 90;
               this.world.worldX = this.world.spawnPoint.x;
               this.world.worldY = this.world.spawnPoint.y - 0.6;
               this.world.riding = "";
               this.world.sleepingAnimation >= 4 * m.Instance.get_fps() &&
                 ((this.characterRotation = this.world.sleepingAnimation = 0),
                 this.world.player.teleportMob(new h(this.world.spawnPoint.x, this.world.spawnPoint.y), 0, 2, !1, !0),
                 (this.lighting.bedFrame = 1),
                 (this.world.tim = 2),
                 this.world.day++,
                 this.world.threadedSave(),
                 this.unlockAchieve(26));
             }
           if (null == this.characterPool) {
             b = y.blockTextures;
             var a = mc.getShader(xa.NORMAL),
               c = new e();
             c.h.texBlend = K.blendItems;
             var d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.characterPool = new ja(b, La.NORMAL, a, c);
             this.characterQuad = this.characterPool.addQuad(new M(), new h(), new h(16, 22));
             this.characterPool.layer = 1;
             this.characterPool.isTransparent = !0;
             this.characterPool.forceNoCulling = !0;
             this.characterPool.setTextureBuffer("texture2", ka.frames.skin);
             this.characterPool.setUniform("texSize2", [ka.frames.skin.width, ka.frames.skin.height]);
             b = y.blockTextures;
             a = Fa.getShader(xa.NORMAL);
             c = new e();
             d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.characterItemPool = new ja(b, La.NORMAL, a, c);
             this.characterItemPool.layer = 1;
             this.characterItemPool.isTransparent = !0;
             this.characterItemPool.forceNoCulling = !0;
             this.characterHandItemRenderer = new bb(this.characterItemPool, 0, 0, this, this.world, []);
             this.characterArmorRenderers = [new eb(this.characterPool), new rb(this.characterPool), new sb(this.characterPool), new tb(this.characterPool)];
           }
           this.characterCurrentFrame != this.animate && ((this.characterCurrentFrame = this.animate), (this.characterFrameTimer = this.characterFrameNumber = 0));
           this.characterMatrix
             .reset()
             .translate(-0.26666666666666666, -0.7333333333333333)
             .scale(2.7270000000000003 * this.characterXScale, 2.7270000000000003)
             .rotate2D((-this.characterRotation / 180) * Math.PI)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(Math.floor(this.world.worldX * this.zoom) / this.zoom, Math.floor(this.world.worldY * this.zoom) / this.zoom)
             .translate(0, -0.08)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           b = (this.characterSkinVisible ? 1 : 0) * (30 < this.world.dead ? 0 : 1);
           this.charColor = [this.characterColorTransform[0], this.characterColorTransform[1], this.characterColorTransform[2], this.characterColorTransform[3] * b];
           var f = [this.characterColorTransform[4] * b, this.characterColorTransform[5] * b, this.characterColorTransform[6] * b, this.characterColorTransform[7] * b];
           this.armorOffsets[1].hide = !1;
           this.armorOffsets[2].hide = !1;
           this.armorOffsets[3].hide = !1;
           this.armorOffsets[4].hide = !1;
           this.armorOffsets[5].hide = !1;
           switch (this.animate) {
             case 1:
               b = this.characterPool;
               a = this.characterQuad;
               var l = new h(this.sneakingOrUsingItem() ? 96 : 0),
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               b = this.sneakingOrUsingItem() ? -35.3 : -36.6;
               this.armorOffsets[0].y = b;
               this.armorOffsets[1].x = 0;
               b = this.sneakingOrUsingItem() ? -15.7 : -17;
               this.armorOffsets[1].y = b;
               this.armorOffsets[2].x = -2.9;
               this.armorOffsets[2].y = -8.9;
               this.armorOffsets[2].rotation = 0;
               this.armorOffsets[3].x = 2.8;
               this.armorOffsets[3].y = -8.9;
               this.armorOffsets[3].rotation = 0;
               this.armorOffsets[4].x = -5;
               this.armorOffsets[4].y = -3;
               this.armorOffsets[4].rotation = 90;
               b = this.sneakingOrUsingItem() ? 4.4 : 4.7;
               this.armorOffsets[5].x = b;
               this.armorOffsets[5].y = -3;
               this.armorOffsets[5].rotation = -90;
               break;
             case 2:
               this.sneakingOrUsingItem()
                 ? (1 != this.characterWalkAnimation && ((this.characterWalkAnimation = 1), (this.characterFrameTimer = 0)),
                   (this.characterFrameNumber = 6 + Math.floor(this.characterFrameTimer / 16)),
                   this.pawsed || (this.characterFrameTimer = ++this.characterFrameTimer % 32))
                 : this.wasSprinting
                 ? (2 != this.characterWalkAnimation && ((this.characterWalkAnimation = 2), (this.characterFrameNumber = 0)),
                   (this.characterFrameNumber = Math.floor(Math.min(5, 1 + Math.floor(this.characterFrameTimer / 2)))),
                   this.pawsed || (this.characterFrameTimer = ++this.characterFrameTimer % 12))
                 : (0 != this.characterWalkAnimation && (this.characterFrameNumber = this.characterWalkAnimation = 0),
                   (this.characterFrameNumber = Math.floor(Math.min(5, 1 + Math.floor(this.characterFrameTimer / 4)))),
                   this.pawsed || (this.characterFrameTimer = ++this.characterFrameTimer % 22));
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(16 * this.characterFrameNumber);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.armorOffsets[0].y = [-38.1, -38.1, -38.1, -36.3, -36.3, -33.6, -33.6][this.characterFrameNumber - 1];
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = [-17.5, -17.5, -17.5, -17, -17, -15.7, -15.7][this.characterFrameNumber - 1];
               this.armorOffsets[2].x = [-4.4, -6, -4.4, -1.2, -2.7, -2.1, -2.7][this.characterFrameNumber - 1];
               this.armorOffsets[2].y = [-8.5, -8.1, -8.4, -5.8, -8.7, -7, -8.7][this.characterFrameNumber - 1];
               this.armorOffsets[2].rotation = [15, 30, 15, 15, 0, -30, 0][this.characterFrameNumber - 1];
               this.armorOffsets[3].x = [2.9, 3.2, 2.9, -1.9, 3, 2, 2.9][this.characterFrameNumber - 1];
               this.armorOffsets[3].y = [-9.6, -10.1, -9.6, -5.9, -8.6, -7, -8.7][this.characterFrameNumber - 1];
               this.armorOffsets[3].rotation = [-30, -45, -30, 0, 0, 15, 0][this.characterFrameNumber - 1];
               this.armorOffsets[4].x = [-6.8, -9.6, -6.8, -2.5, -4.9, -3.4, -5.7][this.characterFrameNumber - 1];
               this.armorOffsets[4].y = [-3, -3.2, -2.9, -1.3, -1.9, -2.4, -2.5][this.characterFrameNumber - 1];
               this.armorOffsets[4].rotation = [90, 90, 90, 75, 90, 90, 90][this.characterFrameNumber - 1];
               this.armorOffsets[5].x = [7, 8.9, 7, 2, 4.6, 1.5, 5][this.characterFrameNumber - 1];
               this.armorOffsets[5].y = [-3.6, -6.2, -3.6, -0.5, -2, -2.6, -2.5][this.characterFrameNumber - 1];
               this.armorOffsets[5].rotation = [30, 0, 30, 30, -90, 75, -90][this.characterFrameNumber - 1];
               break;
             case 3:
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(16 * this.characterFrameNumber);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.characterHandItemRenderer.set_item(this.world.inventoryItem(this.world.selectedInventoryItem));
               "fr" == this.world.get_selectedInventoryItemType() &&
                 Object.prototype.hasOwnProperty.call(this.world.entities.h, "bobber_" + this.world.player.id) &&
                 ((H.__cast(this.characterHandItemRenderer.renderer, oe).inHand = !0), (this.characterFrameNumber = 12));
               c = a = b = 0;
               switch (this.characterFrameNumber) {
                 case 10:
                   b = 0.11944444444444445 * Math.PI;
                   a = -9.7;
                   c = -38;
                   break;
                 case 9:
                 case 11:
                   b = 0.2661111111111111 * Math.PI;
                   a = -14.9;
                   c = -35.5;
                   break;
                 case 12:
                   b = 0.61 * Math.PI;
                   a = -22.7;
                   c = -18.1;
                   break;
                 case 13:
                   (b = 0.8600000000000001 * Math.PI), (a = -19.9), (c = -10.5);
               }
               this.characterItemPool.transform
                 .reset()
                 .translate(-0.5, -0.5)
                 .scale2D(14.467711999999999)
                 .rotate2D(b)
                 .translate(a, c)
                 .scale2D(1.5 / this.zoom)
                 .scale(this.characterXScale)
                 .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
                 .translate(Math.floor(this.world.worldX * this.zoom) / this.zoom, Math.floor(this.world.worldY * this.zoom) / this.zoom)
                 .translate(0, -0.08)
                 .scale(this.zoom, this.zoom, this.zoom)
                 .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
               this.scene.draw(this.characterItemPool);
               this.armorOffsets[0].y = -36.6;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -17;
               this.armorOffsets[2].x = -2.9;
               this.armorOffsets[2].y = -8.9;
               this.armorOffsets[2].rotation = 0;
               this.armorOffsets[3].x = 2.8;
               this.armorOffsets[3].y = -8.9;
               this.armorOffsets[3].rotation = 0;
               this.armorOffsets[4].x = -5;
               this.armorOffsets[4].y = -3;
               this.armorOffsets[4].rotation = 90;
               this.armorOffsets[5].x = 4.7;
               this.armorOffsets[5].y = -3;
               this.armorOffsets[5].rotation = -90;
               this.pawsed || (this.characterFrameTimer = ++this.characterFrameTimer % 20);
               this.characterFrameNumber = 9 + Math.floor(this.characterFrameTimer / 4);
               0 == this.characterFrameTimer && this.stopMiningAnimation && (this.miningAnimation = this.stopMiningAnimation = !1);
               break;
             case 4:
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(224);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.pawsed || (this.characterFrameTimer = ++this.characterFrameTimer % 12);
               0 == this.characterFrameTimer && (this.hurtAnimation = !1);
               this.armorOffsets[0].y = -37.7;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -17;
               this.armorOffsets[2].x = -2.7;
               this.armorOffsets[2].y = -11.5;
               this.armorOffsets[2].rotation = 30;
               this.armorOffsets[3].x = 3.2;
               this.armorOffsets[3].y = -10.9;
               this.armorOffsets[3].rotation = -15;
               this.armorOffsets[4].x = -5.3;
               this.armorOffsets[4].y = -5;
               this.armorOffsets[4].rotation = 90;
               this.armorOffsets[5].x = 5.4;
               this.armorOffsets[5].y = -5;
               this.armorOffsets[5].rotation = -90;
               break;
             case 5:
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(128);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.armorOffsets[0].y = -38.8;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -17.5;
               this.armorOffsets[2].x = -6.1;
               this.armorOffsets[2].y = -8;
               this.armorOffsets[2].rotation = 30;
               this.armorOffsets[3].x = 3.1;
               this.armorOffsets[3].y = -10;
               this.armorOffsets[3].rotation = -45;
               this.armorOffsets[4].x = -9.7;
               this.armorOffsets[4].y = -3.1;
               this.armorOffsets[4].rotation = 90;
               this.armorOffsets[5].x = 8.9;
               this.armorOffsets[5].y = -6;
               this.armorOffsets[5].rotation = 0;
               break;
             case 6:
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(240);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.armorOffsets[0].y = -36.1;
               this.armorOffsets[1].x = -0.8;
               this.armorOffsets[1].y = -15.7;
               this.armorOffsets[2].x = -4.5;
               this.armorOffsets[2].y = -8.7;
               this.armorOffsets[2].rotation = 11;
               this.armorOffsets[4].x = -8.1;
               this.armorOffsets[4].y = -3.5;
               this.armorOffsets[4].rotation = 90;
               this.armorOffsets[3].hide = !0;
               this.armorOffsets[5].hide = !0;
               break;
             case 7:
               b = new T().reset().translate(0.03333333333333333, -0.06444444444444446).multiply(this.characterMatrix.values);
               this.characterMatrix.set(b.values);
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(256);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.armorOffsets[0].y = -37.9;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -21.7;
               this.armorOffsets[1].hide = !0;
               this.armorOffsets[2].hide = !0;
               this.armorOffsets[3].hide = !0;
               this.armorOffsets[4].hide = !0;
               this.armorOffsets[5].hide = !0;
               break;
             case 8:
               b = new T()
                 .reset()
                 .rotate2D(0.25 * Math.PI)
                 .translate(-0.3788888888888889, 0.2611111111111111)
                 .multiply(this.characterMatrix.values);
               this.characterMatrix.set(b.values);
               b = this.characterPool;
               a = this.characterQuad;
               l = new h(256);
               k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
               c = new e();
               c.h.texBlend = K.blendMob;
               d = w.repeatArray(this.charColor, 6);
               c.h.color = d;
               d = w.repeatArray(f, 6);
               c.h.colorOffset = d;
               b.updateQuad(a, null, l, null, null, k, null, c);
               this.armorOffsets[0].y = -37.9;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -21.7;
               this.armorOffsets[1].hide = !0;
               this.armorOffsets[2].hide = !0;
               this.armorOffsets[3].hide = !0;
               this.armorOffsets[4].hide = !0;
               this.armorOffsets[5].hide = !0;
               break;
             case 9:
               (b = new T()
                 .reset()
                 .rotate2D(-0.25 * Math.PI)
                 .translate(0.5455555555555556, -0.10333333333333335)
                 .multiply(this.characterMatrix.values)),
                 this.characterMatrix.set(b.values),
                 (b = this.characterPool),
                 (a = this.characterQuad),
                 (l = new h(256)),
                 (k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix)),
                 (c = new e()),
                 (c.h.texBlend = K.blendMob),
                 (d = w.repeatArray(this.charColor, 6)),
                 (c.h.color = d),
                 (d = w.repeatArray(f, 6)),
                 (c.h.colorOffset = d),
                 b.updateQuad(a, null, l, null, null, k, null, c),
                 (this.armorOffsets[0].y = -37.9),
                 (this.armorOffsets[1].x = 0),
                 (this.armorOffsets[1].y = -21.7),
                 (this.armorOffsets[1].hide = !0),
                 (this.armorOffsets[2].hide = !0),
                 (this.armorOffsets[3].hide = !0),
                 (this.armorOffsets[4].hide = !0),
                 (this.armorOffsets[5].hide = !0);
           }
           this.renderBowDrawback();
           this.renderArmor();
           this.scene.draw(this.characterPool);
           !this.pawsed &&
             this.eatingAnimation &&
             ("mbk" == this.world.get_selectedInventoryItemType() ||
             "potion" == this.world.get_selectedInventoryItemType() ||
             (null != q.get(this.world.get_selectedInventoryItemType(), "food") && null != q.get(this.world.get_selectedInventoryItemType(), "food").drink)
               ? (0 == this.itemUseAnimationTimer % 10 && 0 < this.itemUseAnimationTimer && this.requestSound("drink" + (Math.floor(2 * Math.random()) + 1), 0, 0, 0.3),
                 null != q.get(this.world.get_selectedInventoryItemType(), "color")
                   ? ((b = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                     (a = new h(this.world.worldY - 1.5, 0)),
                     (c = new e()),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (d = f.h[l].h.r),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (k = f.h[l].h.g),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (c.h.color = [d, k, f.h[l].h.b]))
                   : ((b = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                     (a = new h(this.world.worldY - 1.5, 0)),
                     (c = new e()),
                     (c.h.color = [V.colors.h.lightblue.h.r, V.colors.h.lightblue.h.g, V.colors.h.lightblue.h.b])))
               : (0 == this.itemUseAnimationTimer % 10 && 0 < this.itemUseAnimationTimer && this.requestSound("eat" + (Math.floor(2 * Math.random()) + 1), 0, 0, 0.3),
                 null != q.get(this.world.get_selectedInventoryItemType(), "color")
                   ? ((b = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                     (a = new h(this.world.worldY - 1.5, 0)),
                     (c = new e()),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (d = f.h[l].h.r),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (k = f.h[l].h.g),
                     (f = V.colors),
                     (l = q.get(this.world.get_selectedInventoryItemType(), "color")),
                     (c.h.color = [d, k, f.h[l].h.b]))
                   : ((b = new h(this.world.worldX + (0 > this.characterXScale ? 0.3333333333333333 : -0.3333333333333333), 0)),
                     (a = new h(this.world.worldY - 1.5, 0)),
                     (c = new e()),
                     (c.h.color = [V.colors.h.brown.h.r, V.colors.h.brown.h.g, V.colors.h.brown.h.b]))),
             this.addParticles("mining", 1, 0, b, a, !0, c));
           null != this.world.effects.h.invisibility
             ? ((this.characterSkinVisible = !1),
               (this.visibility = 0.1 + ("air" != this.world.armors[0][0] ? 0.2 : 0) + ("air" != this.world.armors[1][0] ? 0.2 : 0) + ("air" != this.world.armors[2][0] ? 0.2 : 0) + ("air" != this.world.armors[3][0] ? 0.2 : 0)))
             : ((this.visibility = 1), (this.characterSkinVisible = !0));
           this.visibility -= this.sneaking ? 0.2 : 0;
           this.armorOffsets[0].x = 0;
           if ("mh" == this.world.armors[0][0] && ((this.armorOffsets[0].x = 0.25), null != this.world.armors[0][2] && null != g.makeDynamicMap(this.world.armors[0][2]).h.type))
             switch (g.makeDynamicMap(this.world.armors[0][2]).h.type) {
               case "creeper":
                 this.armorOffsets[0].x = 1.5;
                 break;
               case "enderdragon":
                 (this.armorOffsets[0].x = -3.5),
                   2 == this.animate
                     ? (H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache =
                         ((H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache + g.migrateSpeed(Math.abs(this.world.xSpeed / g.migrateSpeed(1)) / 2) - 1) % 50) + 1)
                     : 1 < H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache &&
                       ((H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache += 0.5),
                       50 < H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache && (H.__cast(this.characterArmorRenderers[0], eb).dragonHeadAnimationCache = 1));
             }
         },
         updateArmorRenderers: function () {
           H.__cast(this.characterArmorRenderers[0], eb).remove();
           H.__cast(this.characterArmorRenderers[1], rb).remove();
           H.__cast(this.characterArmorRenderers[3], tb).remove();
           H.__cast(this.characterArmorRenderers[2], sb).remove();
           this.renderArmor();
         },
         renderArmor: function () {
           0 == J.showArmor
             ? (H.__cast(this.characterArmorRenderers[0], eb).remove(), H.__cast(this.characterArmorRenderers[1], rb).remove(), H.__cast(this.characterArmorRenderers[3], tb).remove(), H.__cast(this.characterArmorRenderers[2], sb).remove())
             : (this.armorOffsets[2].matrix
                 .reset()
                 .scale2D(16)
                 .rotate2D((-this.armorOffsets[2].rotation / 180) * Math.PI)
                 .translate(this.armorOffsets[2].x, this.armorOffsets[2].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               this.armorOffsets[3].matrix
                 .reset()
                 .scale(-16, 16)
                 .rotate2D((-this.armorOffsets[3].rotation / 180) * Math.PI)
                 .translate(this.armorOffsets[3].x, this.armorOffsets[3].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               (H.__cast(this.characterArmorRenderers[2], sb).parentColor = this.charColor),
               H.__cast(this.characterArmorRenderers[2], sb).setItem(this.world.armorsAsItem(2), this.characterQuad, this.armorOffsets[2].matrix, this.armorOffsets[3].matrix, this.armorOffsets[2].hide, this.armorOffsets[3].hide).update(),
               this.armorOffsets[4].matrix
                 .reset()
                 .scale2D(13.6)
                 .rotate2D((-(this.armorOffsets[4].rotation - 90) / 180) * Math.PI)
                 .translate(this.armorOffsets[4].x, this.armorOffsets[4].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               this.armorOffsets[5].matrix
                 .reset()
                 .scale(13.6 * (0 > this.armorOffsets[5].rotation ? -1 : 1), 13.6)
                 .rotate2D((-(this.armorOffsets[5].rotation - 90 * (0 > this.armorOffsets[5].rotation ? -1 : 1)) / 180) * Math.PI)
                 .translate(this.armorOffsets[5].x, this.armorOffsets[5].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               (H.__cast(this.characterArmorRenderers[3], tb).parentColor = this.charColor),
               H.__cast(this.characterArmorRenderers[3], tb).setItem(this.world.armorsAsItem(3), this.characterQuad, this.armorOffsets[4].matrix, this.armorOffsets[5].matrix, this.armorOffsets[4].hide, this.armorOffsets[5].hide).update(),
               this.armorOffsets[1].matrix
                 .reset()
                 .scale2D(16)
                 .rotate2D((this.armorOffsets[1].rotation / 180) * Math.PI)
                 .translate(this.armorOffsets[1].x, this.armorOffsets[1].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               (H.__cast(this.characterArmorRenderers[1], rb).parentColor = this.charColor),
               H.__cast(this.characterArmorRenderers[1], rb).setItem(this.world.armorsAsItem(1), this.characterQuad, this.armorOffsets[1].matrix, this.armorOffsets[1].hide).update(),
               this.armorOffsets[0].matrix
                 .reset()
                 .scale2D(16)
                 .rotate2D((this.armorOffsets[0].rotation / 180) * Math.PI)
                 .translate(this.armorOffsets[0].x, this.armorOffsets[0].y)
                 .scale2D(1.5 / this.zoom)
                 .scale2D(0.36670333700036667)
                 .translate(0.26666666666666666, 0.7333333333333333)
                 .multiply(this.characterMatrix.values),
               (H.__cast(this.characterArmorRenderers[0], eb).parentColor = this.charColor),
               H.__cast(this.characterArmorRenderers[0], eb).setItem(this.world.armorsAsItem(0), this.characterQuad, this.armorOffsets[0].matrix, this.armorOffsets[0].hide).update());
         },
         secondsToString: function (b) {
           return ((b / 60) | 0) + ":" + (10 > b % 60 ? "0" : "") + (b % 60 | 0);
         },
         getEffectsTooltips: function (b) {
           for (var a = [], c = 0, d = b.length; c < d; ) {
             var f = b[c++];
             null != f.h.duration && a.push(E.string(this.effectData.h[f.h.type].h.name) + " " + E.string(f.h.level) + " for " + this.secondsToString(f.h.duration));
             if (null != f.h.level && null != this.effectData.h[f.h.type]) {
               var e = f.h.level * this.effectData.h[f.h.type].h.perLevel;
               "percent" == this.effectData.h[f.h.type].h.strengthType
                 ? a.push("   " + (0 < e ? "+" : "") + e + "%")
                 : "hearts" == this.effectData.h[f.h.type].h.strengthType
                 ? a.push("   " + (0 < e ? "+" : "") + e + " Hearts")
                 : "heartsexponential" == this.effectData.h[f.h.type].h.strengthType
                 ? ((e = (Math.pow(2, Math.min(15, Math.max(0, f.h.level - 1))) * this.effectData.h[f.h.type].h.perLevel) | 0), a.push("   " + (0 < e ? "+" : "") + e + " Hearts"))
                 : "damage" == this.effectData.h[f.h.type].h.strengthType && a.push("   " + (0 < e ? "+" : "") + e + " Damage");
             }
           }
           return a;
         },
         runWorldLogic: function () {
           this.ranWorldLogicOnce = !0;
           if ("bl" == this.world.get_selectedInventoryItemType() && !Object.prototype.hasOwnProperty.call(this.world.balloons.h, "Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id)) {
             var b = this.world.balloons,
               a = "Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id,
               c = new e();
             c.h.x = this.world.worldX;
             c.h.y = this.world.worldY - 1;
             c.h.speedX = 0;
             c.h.speedY = -15;
             c.h.stringX = this.world.worldX;
             c.h.stringY = this.world.worldY;
             c.h.stringSpeedX = 0;
             c.h.stringSpeedY = 0;
             var d = new e();
             d.h.type = "player";
             d.h.id = this.world.player.id;
             c.h.attached = d;
             d = q.get("bl", "life");
             c.h.life = d - this.world.inventoryList[this.world.selectedInventoryItem][2];
             d = this.world.get_selectedInventoryItemExtra();
             d = Object.prototype.hasOwnProperty.call(d.h, "type") ? this.world.get_selectedInventoryItemExtra().h.type : "white";
             c.h.type = d;
             d = new e();
             d.h.slot = this.world.selectedInventoryItem;
             d.h.of = this.world.player.id;
             c.h.inventory = g.makeDynamicMap(d);
             b.h[a] = g.makeDynamicMap(c);
             null != this.world.get_selectedInventoryItemExtra().h.unbreaking1 && (H.__cast(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id], e).h.unbreaking = 1);
             null != this.world.get_selectedInventoryItemExtra().h.unbreaking2 && (H.__cast(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id], e).h.unbreaking = 2);
             null != this.world.get_selectedInventoryItemExtra().h.unbreaking3 && (H.__cast(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id], e).h.unbreaking = 3);
             null != this.world.get_selectedInventoryItemExtra().h.unbreaking4 && (H.__cast(this.world.balloons.h["Hand" + this.world.selectedInventoryItem + "Of" + this.world.player.id], e).h.unbreaking = 4);
           }
           b = Object.keys(this.world.mobs.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("mob", this.world.mobs, b[c++]);
           b = Object.keys(this.world.balloons.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("balloon", this.world.balloons, b[c++]);
           b = Object.keys(this.world.spears.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("spear", this.world.spears, b[c++]);
           b = Object.keys(this.world.arrows.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("arrow", this.world.arrows, b[c++]);
           b = Object.keys(this.world.snowballs.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("snowball", this.world.snowballs, b[c++]);
           b = Object.keys(this.world.shurikens.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("shuriken", this.world.shurikens, b[c++]);
           b = Object.keys(this.world.fireballs.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("fireball", this.world.fireballs, b[c++]);
           b = Object.keys(this.world.flameballs.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("flameball", this.world.flameballs, b[c++]);
           b = Object.keys(this.world.splashPotions.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("splashPotion", this.world.splashPotions, b[c++]);
           b = Object.keys(this.world.carts.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogic("cart", this.world.carts, b[c++]);
           b = Object.keys(this.world.xpOrbs.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogicXpOrb(this.world.xpOrbs, b[c++]);
           b = Object.keys(this.world.drops.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogicDrop(this.world.drops, b[c++]);
           b = Object.keys(this.world.fallingBlocks.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogicFallingBlock(this.world.fallingBlocks, b[c++]);
           b = Object.keys(this.world.enderCrystals.h);
           a = b.length;
           for (c = 0; c < a; ) (d = b[c++]), this.entityLogicEnderCrystal("enderCrystal", this.world.enderCrystals, d, this.world.enderCrystals.h[d]);
           b = Object.keys(this.world.rafts.h);
           a = b.length;
           for (c = 0; c < a; ) this.entityLogicRaft(this.world.rafts, b[c++]);
           b = this.world.entities.h;
           a = Object.keys(b);
           c = a.length;
           for (d = 0; d < c; ) H.__cast(b[a[d++]], pa).run();
           this.renamedBalloons.h = Object.create(null);
         },
         entityLogic: function (b, a, c) {
           var d = a.h[c];
           if (null == d) Object.prototype.hasOwnProperty.call(a.h, c) && delete a.h[c];
           else
             switch (b) {
               case "balloon":
                 this.entityLogicBalloon(b, a, c, d);
                 break;
               case "cart":
                 this.entityLogicCart(b, a, c, d);
                 break;
               case "flameball":
                 this.entityLogicFlameball(b, a, c, d);
                 break;
               case "mob":
                 this.entityLogicMob(b, a, c, d);
                 break;
               case "arrow":
               case "fireball":
               case "shuriken":
               case "snowball":
               case "spear":
                 this.entityLogicProjectile(b, a, c, d);
                 break;
               case "splashPotion":
                 this.entityLogicSplashPotion(b, a, c, d);
             }
         },
         entityLogicDrop: function (b, a) {
           var c = b.h[a];
           if (null == c) Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
           else if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, a)) {
             var d = this.world.entities;
             b = new Pb("drop", b, a, c, this, this.world);
             d.h[a] = b;
           }
         },
         entityLogicXpOrb: function (b, a) {
           var c = b.h[a];
           if (null == c) Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
           else if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, a)) {
             var d = this.world.entities;
             b = new Cd("xpOrb", b, a, c, this, this.world);
             d.h[a] = b;
           }
         },
         entityLogicRaft: function (b, a) {
           var c = b.h[a];
           if (null == c) Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
           else if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, a)) {
             var d = this.world.entities;
             b = new Oc("raft", b, a, c, this, this.world);
             d.h[a] = b;
           }
         },
         entityLogicCart: function (b, a, c, d) {
           d = a.h[c];
           null == d
             ? Object.prototype.hasOwnProperty.call(a.h, c) && delete a.h[c]
             : 0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c) && ((b = this.world.entities), (a = new ib("cart", a, c, d, this, this.world)), (b.h[c] = a));
         },
         entityLogicFallingBlock: function (b, a) {
           var c = b.h[a];
           if (null == c) Object.prototype.hasOwnProperty.call(b.h, a) && delete b.h[a];
           else if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, a)) {
             var d = this.world.entities;
             b = new jg("fallingBlock", b, a, c, this, this.world);
             d.h[a] = b;
           }
         },
         entityLogicBalloon: function (b, a, c, d) {
           if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c)) {
             var f = this.world.entities;
             b = new kg(b, a, c, d, this, this.world);
             f.h[c] = b;
           }
         },
         entityLogicSplashPotion: function (b, a, c, d) {
           if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c)) {
             var f = this.world.entities;
             b = new lg(b, a, c, d, this, this.world);
             f.h[c] = b;
           }
         },
         entityLogicProjectile: function (b, a, c, d) {
           if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c)) {
             var f = this.world.entities;
             b = new mg(b, a, c, d, this, this.world);
             f.h[c] = b;
           }
         },
         entityLogicFlameball: function (b, a, c, d) {
           if (0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c)) {
             var f = this.world.entities;
             b = new ng(b, a, c, d, this, this.world);
             f.h[c] = b;
           }
         },
         entityLogicEnderCrystal: function (b, a, c, d) {
           if (3 == this.world.sceneNum && 0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c)) {
             var f = this.world.entities;
             b = new Bc(b, a, c, d, this, this.world);
             f.h[c] = b;
           }
         },
         entityLogicMob: function (b, a, c, d) {
           null == this.world.mobs.h[c]
             ? ((b = this.world.mobs), Object.prototype.hasOwnProperty.call(b.h, c) && delete b.h[c])
             : 0 == Object.prototype.hasOwnProperty.call(this.world.entities.h, c) &&
               null != this.world.mobData.h[this.world.mobs.h[c].h.type] &&
               ((b = this.world.entities), (a = Za.createInstance(this.world.mobData.h[this.world.mobs.h[c].h.type].h.constructor, [c, this, this.world])), (b.h[c] = a));
         },
         removeEntity: function (b, a) {
           a == this.world.splashPotions && this.splashAPotion(g.makeDynamicMap(a.h[b]).h.x, g.makeDynamicMap(a.h[b]).h.y, g.makeDynamicMap(a.h[b]).h.effects, g.makeDynamicMap(a.h[b]).h.showParticles);
           var c = this.world.onFire;
           Object.prototype.hasOwnProperty.call(c.h, b) && delete c.h[b];
           Object.prototype.hasOwnProperty.call(this.world.entities.h, b) && this.world.entities.h[b].remove();
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
         },
         damageEntity: function (b, a, c) {
           null == c && (c = 1);
           if (b == this.world.balloons)
             for (var d = 0; d < c; ) {
               ++d;
               var f = g.makeDynamicMap(b.h[a]).h.unbreaking;
               Math.random() < 1 / (Math.pow(null != f ? f : 0, 1.5) + 1) && (g.makeDynamicMap(b.h[a]).h.life = g.makeDynamicMap(b.h[a]).h.life - 1);
             }
         },
         uniqueID: function (b, a) {
           null == a && (a = "");
           for (var c; (c = a + ((Math.random() * w.MAX_INT()) | 0)), null != b.h[c]; );
           return c;
         },
         splashAPotion: function (b, a, c, d) {
           null == d && (d = !0);
           null == c && (c = []);
           for (var f = 0, l = c.length; f < l; ) {
             var k = f++,
               g = new h(b - 1, 2),
               z = new h(a - 1, 2),
               m = new e();
             m.h.r = this.effectData.h[c[k].h.type].h.r;
             m.h.g = this.effectData.h[c[k].h.type].h.g;
             m.h.b = this.effectData.h[c[k].h.type].h.b;
             this.addParticles("effect", 20, 0, g, z, !1, m);
           }
           g = Object.keys(this.world.mobs.h);
           z = g.length;
           for (m = 0; m < z; ) {
             var A = g[m++],
               p = Math.sqrt(Math.pow(this.world.mobs.h[A].h.x - b, 2) + Math.pow(this.world.mobs.h[A].h.y - a, 2));
             if (4 >= p)
               for (f = 0, l = c.length; f < l; )
                 (k = f++), null == c[k].h.duration && (c[k].h.duration = 1), null == c[k].h.level && (c[k].h.level = 1), this.addEffect(A, c[k].h.type, (c[k].h.duration * (1 - p / 4)) | 0, c[k].h.level, !0, d, 1 - p / 4);
           }
           b = Math.sqrt(Math.pow(this.world.worldX - b, 2) + Math.pow(this.world.worldY - a, 2));
           if (this.world.gamemode != U.gamemodes.h.SPECTATOR && 4 >= b)
             for (f = 0, l = c.length; f < l; )
               (k = f++), null == c[k].h.duration && (c[k].h.duration = 1), null == c[k].h.level && (c[k].h.level = 1), this.addEffect(this.world.player.id, c[k].h.type, (c[k].h.duration * (1 - b / 4)) | 0, c[k].h.level, !0, d, 1 - b / 4);
         },
         getWater: function (b, a) {
           var c = this.world.water.h["blockX" + b + "Y" + a];
           return null != c ? c : 1 == q.get(this.world.getFG(b, a), "liquid") ? [10, 10] : [0, 0];
         },
         isFullWater: function (b, a) {
           b = this.getWater(b, a);
           return 10 == b[0] ? 10 == b[1] : !1;
         },
         doFrostWalker: function (b, a, c) {
           if (1 != q.get(this.world.getFG(b, a), "walkThroughBlockHit")) {
             var d = -c;
             for (c += 1; d < c; ) {
               var f = d++;
               "wr" == this.world.getFG(b + f, a) && this.isFullWater(b + f, a) && (this.requestRemove(b + f, a, !0, !0), this.world.setFG(b + f, a, "fice"));
             }
           }
         },
         findInInventory: function (b) {
           for (var a = 0; 45 > a; ) {
             var c = a++;
             if (this.world.inventoryList[c][0] == b && (1 <= this.world.inventoryList[c][1] || "" == this.world.inventoryList[c][1])) return c;
           }
           return -1;
         },
         canEatFood: function (b) {
           return null == q.get(b, "food") || 0 < this.world.sleepingAnimation
             ? !1
             : 900 >= this.world.food || (null != g.makeDynamicMap(q.get(b, "food")).h.health && 20 > this.world.health)
             ? !0
             : null != g.makeDynamicMap(q.get(b, "food")).h.effects;
         },
         useUpItem: function (b) {
           null == b && (b = -1);
           -1 == b && (b = this.world.selectedInventoryItem);
           var a = this.world.inventoryList[b][0],
             c = this.world.inventoryList[b][1];
           if (this.world.gamemode != U.gamemodes.h.CREATIVE)
             if ((2 <= c ? (this.world.inventoryList[b][1] = c - 1) : (this.world.inventoryList[b] = g.emptyItem()), "rabbitsoup" == a || "beetsoup" == a || "soup" == a || "icec" == a))
               this.addDrop("bowl", this.world.worldX, this.world.worldY);
             else if ("lade" == a || "orade" == a || "apade" == a) (b = new e()), (b.h.type = "empty"), this.addDrop("potion", this.world.worldX, this.world.worldY, 1, null, b);
         },
         useBed: function (b, a) {
           1 == this.world.sceneNum
             ? 50 <= this.world.tim
               ? "bed1" == this.world.getFG(b, a)
                 ? ((this.world.sleepingAnimation = 1), this.world.spawnPoint.set(b, -a))
                 : "bed2" == this.world.getFG(b, a) && ((this.world.sleepingAnimation = 1), this.world.spawnPoint.set(b - 1, -a))
               : (this.console.newLine("You can only sleep at night!"), (this.isShiftClickAndContinue = !0))
             : this.explode(b, a, 5, !0);
         },
         getGameRule: function (b) {
           b = b.toLowerCase();
           if (null == this.world.gameRules.h[b])
             if ("keepinventory" == b) this.world.gameRules.h.keepinventory = !1;
             else if ("dodaylightcycle" == b) this.world.gameRules.h.dodaylightcycle = !0;
             else if ("dofiretick" == b) this.world.gameRules.h.dofiretick = !0;
             else if ("mobgriefing" == b) this.world.gameRules.h.mobgriefing = !0;
             else if ("passivemobs" == b) this.world.gameRules.h.passivemobs = !0;
             else if ("domobloot" == b) this.world.gameRules.h.domobloot = !0;
             else if ("sendcommandfeedback" == b) this.world.gameRules.h.sendcommandfeedback = !0;
             else return null;
           return this.world.gameRules.h[b];
         },
         convertObjectToBlockState: function (b, a) {
           for (var c = new Y(), d = Object.keys(a.h), f = d.length, l = 0; l < f; ) {
             var k = d[l++],
               h = a.h[k];
             switch (k.toLowerCase()) {
               case "activated":
                 h = E.string(h).toLowerCase();
                 "lever" == b && "true" == h && (c.states2 = 1);
                 break;
               case "damage":
                 "anvil" != b || ("Number" != O.getQualifiedClassName(h) && "int" != O.getQualifiedClassName(h)) || (c.states1 = Math.max(1, Math.min(3, E.parseInt(E.string(h)))) | 0);
                 break;
               case "facing":
                 h = E.string(h).toLowerCase();
                 if ("lant" == b || "th" == b || "ortorch" == b || "rstorch" == b || "button" == b || "lever" == b) "right" == h ? (c.states1 = 2) : "left" == h ? (c.states1 = 3) : "up" == h && (c.states1 = 1);
                 else if ("piston" == b || "spiston" == b) "right" == h ? (c.states1 = 2) : "left" == h ? (c.states1 = 4) : "down" == h ? (c.states1 = 3) : "up" == h && (c.states1 = 1);
                 else if ("dispense" == b || "dropper" == b) "right" == h ? (c.states1 = 2) : "left" == h ? (c.states1 = 1) : "down" == h ? (c.states1 = 4) : "up" == h && (c.states1 = 3);
                 else if (1 == q.get(b, "stairBlock"))
                   if ("downleft" == h) c.states1 = 3;
                   else if ("downright" == h) c.states1 = 4;
                   else if ("left" == h || "upleft" == h) c.states1 = 1;
                   else {
                     if ("right" == h || "upright" == h) c.states1 = 2;
                   }
                 else if (1 == q.get(b, "halfBlock")) "down" == h && (c.states1 = 2);
                 else if ("hay" == b || "wd" == b)
                   if ("left" == h || "right" == h) c.states1 = 2;
                   else {
                     if ("up" == h || "down" == h) c.states1 = 1;
                   }
                 else "dr" == b || "bbdr" == b || "idr" == b ? ("left" == h && (c.states1 = 1), "right" == h && (c.states1 = 2)) : "mh" == b && ("left" == h && (c.states2 = 1), "right" == h && (c.states2 = 2));
                 break;
               case "fuel":
                 "oven" == b
                   ? "Object" == O.getQualifiedClassName(h) &&
                     ((h = this.convertObjectToItem(h)),
                     null != q.get(h[0], "fuel") && (null == c.toSmelt && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.output = g.emptyItem()), (c.toSmelt = k)), (c.toSmelt.h.fuel = h)))
                   : "brew" == b &&
                     "Object" == O.getQualifiedClassName(h) &&
                     ((h = this.convertObjectToItem(h)),
                     "bp" == h[0] &&
                       (null == c.toBrew && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.brewTimer = 0), (k.h.fuelUsed = 0), (k.h.output = [g.emptyItem(), g.emptyItem(), g.emptyItem()]), (c.toBrew = k)),
                       (c.toBrew.h.fuel = h)));
                 break;
               case "growth":
                 if ("wseed" == b || "pseed" == b || "seed" == b || "carrot" == b || "potato" == b || "nw" == b || "bseed" == b)
                   if ("Number" == O.getQualifiedClassName(h) || "int" == O.getQualifiedClassName(h)) c.wheat = Math.max(1, Math.min(7, E.parseInt(E.string(h)))) | 0;
                 break;
               case "input":
                 "oven" == b
                   ? "Object" == O.getQualifiedClassName(h) &&
                     ((h = this.convertObjectToItem(h)),
                     null != q.get(h[0], "smeltsInto") && (null == c.toSmelt && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.output = g.emptyItem()), (c.toSmelt = k)), (c.toSmelt.h.input = h)))
                   : "brew" == b &&
                     "Object" == O.getQualifiedClassName(h) &&
                     ((h = this.convertObjectToItem(h)),
                     null != q.get(h[0], "brewIngredient") &&
                       (null == c.toBrew && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.brewTimer = 0), (k.h.fuelUsed = 0), (k.h.output = [g.emptyItem(), g.emptyItem(), g.emptyItem()]), (c.toBrew = k)),
                       (c.toBrew.h.input = h)));
                 break;
               case "items":
                 if ("chest" == b)
                   if ("Array" == O.getQualifiedClassName(h))
                     for (c.chests = [], k = 0; 27 > k; ) {
                       var z = k++;
                       c.chests[z] = z >= h.length ? g.emptyItem() : this.convertObjectToItem(h[z]);
                     }
                   else {
                     if ("Object" == O.getQualifiedClassName(h)) for (c.chests = [], h = this.convertObjectToItem(h), k = 0; 27 > k; ) c.chests[k++] = O.clone(h);
                   }
                 else if ("dropper" == b || "dispense" == b)
                   if ("Array" == O.getQualifiedClassName(h)) for (c.states2 = [], k = 0; 27 > k; ) (z = k++), (c.states2[z] = z >= h.length ? g.emptyItem() : this.convertObjectToItem(h[z]));
                   else if ("Object" == O.getQualifiedClassName(h)) for (c.states2 = [], h = this.convertObjectToItem(h), k = 0; 27 > k; ) c.states2[k++] = O.clone(h);
                 break;
               case "name":
                 if ("String" == O.getQualifiedClassName(h))
                   if ("chest" == b || "oven" == b || "brew" == b || "enchant" == b) c.states1 = I.substr(O.restrict(h, "a-zA-Z0-9\\-=+|_!.,()[]<>'@$%\\^&*#?/ "), 0, 20);
                   else if ("dropper" == b || "dispense" == b) c.states3 = I.substr(O.restrict(h, "a-zA-Z0-9\\-=+|_!.,()[]<>'@$%\\^&*#?/ "), 0, 20);
                 break;
               case "output":
                 "oven" == b
                   ? "Object" == O.getQualifiedClassName(h) &&
                     ((h = this.convertObjectToItem(h)), null == c.toSmelt && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.output = g.emptyItem()), (c.toSmelt = k)), (c.toSmelt.h.output = h))
                   : "brew" == b &&
                     ("Array" == O.getQualifiedClassName(h)
                       ? (null == c.toBrew && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.brewTimer = 0), (k.h.fuelUsed = 0), (k.h.output = [g.emptyItem(), g.emptyItem(), g.emptyItem()]), (c.toBrew = k)),
                         0 >= h.length ? (c.toBrew.h.output[0] = g.emptyItem()) : ((k = this.convertObjectToItem(h[0])), "potion" != k[0] || this.emptyPotion(k[3].type) || (c.toBrew.h.output[0] = k)),
                         1 >= h.length ? (c.toBrew.h.output[1] = g.emptyItem()) : ((k = this.convertObjectToItem(h[1])), "potion" != k[0] || this.emptyPotion(k[3].type) || (c.toBrew.h.output[1] = k)),
                         2 >= h.length ? (c.toBrew.h.output[2] = g.emptyItem()) : ((h = this.convertObjectToItem(h[2])), "potion" != h[0] || this.emptyPotion(h[3].type) || (c.toBrew.h.output[2] = h)))
                       : "Object" == O.getQualifiedClassName(h) &&
                         ((h = this.convertObjectToItem(h)),
                         "potion" != h[0] ||
                           this.emptyPotion(h[3].type) ||
                           (null == c.toBrew && ((k = new e()), (k.h.input = g.emptyItem()), (k.h.fuel = g.emptyItem()), (k.h.brewTimer = 0), (k.h.fuelUsed = 0), (k.h.output = [g.emptyItem(), g.emptyItem(), g.emptyItem()]), (c.toBrew = k)),
                           (c.toBrew.h.output[0] = O.clone(h)),
                           (c.toBrew.h.output[1] = O.clone(h)),
                           (c.toBrew.h.output[2] = O.clone(h)))));
                 break;
               case "text":
                 "sign" == b &&
                   "String" == O.getQualifiedClassName(h) &&
                   (c.signs = I.substr(
                     O.restrict(
                       h,
                       "A-Za-z0-9 .,'\"@$#%\\^=+&*<>()[]{}|~!?/\\\\\\-_:;\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df\u00c1\u00e1\u00c9\u00e9\u00cd\u00ed\u00d3\u00f3\u00da\u00fa\u00c0\u00e0\u00c8\u00e8\u00cc\u00ec\u00d2\u00f2\u00d9\u00f9\u00e7\u00c7\u00c3\u00e3\u1ebc\u1ebd\u0128\u0129\u00d5\u00f5\u0168\u0169\u00c2\u00e2\u00ca\u00ea\u00ce\u00ee\u00d4\u00f4\u00db\u00fb\u0178\u00ff\u00d8\u00f8\u0152\u0153\u00d1\u00f1\u00cf\u00ef\u00cb\u00eb\u00c5\u00e5\u00c6\u00e6"
                     ),
                     0,
                     45
                   ));
                 break;
               case "type":
                 if ("carpet" == b || "cloth" == b || "bdcloth" == b) (k = V.colors), (z = h.split(" ").join("").toLowerCase()), null != k.h[z] && (c.states1 = h.split(" ").join("").toLowerCase());
                 else if ("gs" == b || "bdgs" == b || "bed1" == b) (k = V.colors), (z = h.split(" ").join("").toLowerCase()), null != k.h[z] && "rainbow" != h.toLowerCase() && (c.states1 = h.split(" ").join("").toLowerCase());
                 else if ("mh" == b)
                   switch (((h = E.string(h).split(" ").join("").toLowerCase()), h)) {
                     case "creeper":
                     case "enderdragon":
                     case "skeleton":
                     case "zombie":
                       c.states1 = h;
                       break;
                     default:
                       E.string(E.parseInt(h)) == h && (c.states1 = h);
                   }
             }
           }
           if ("sl" == b || "gasd" == b) c.toGrow = !0;
           return c;
         },
         convertObjectToItem: function (b, a) {
           null == a && (a = !0);
           if ("Object" != O.getQualifiedClassName(b) || null == b.h.id) return g.emptyItem();
           a && (b.h.id = O.trim(b.h.id));
           a = q.identifierToID;
           var c = b.h.id.toLowerCase();
           if (null == a.h[c]) return g.emptyItem();
           a = q.identifierToID;
           c = b.h.id.toLowerCase();
           a = a.h[c];
           c = 1;
           var d = 0;
           q.get(a, "unstackable")
             ? null != b.h.damage && (d = 0 > b.h.damage ? (q.get(a, "life") - Math.abs(E.parseInt(E.string(b.h.damage)))) | 0 : E.parseInt(E.string(b.h.damage)))
             : (null != b.h.quantity && (c = Math.max(1, Math.min(64, E.parseInt(E.string(b.h.quantity)))) | 0), "anvil" == a && null != b.h.damage && (d = Math.max(1, Math.min(3, E.parseInt(E.string(b.h.damage)))) | 0));
           Object.prototype.hasOwnProperty.call(b.h, "id") && delete b.h.id;
           Object.prototype.hasOwnProperty.call(b.h, "quantity") && delete b.h.quantity;
           Object.prototype.hasOwnProperty.call(b.h, "damage") && delete b.h.damage;
           return [a, c, d, this.convertObjectToExtras(a, b)];
         },
         convertObjectToExtras: function (b, a) {
           for (var c = new e(), d = Object.keys(a.h), f = d.length, l = 0; l < f; ) {
             var k = d[l++],
               h = a.h[k];
             switch (k.toLowerCase()) {
               case "anviluses":
                 ("Number" == O.getQualifiedClassName(h) || "int" == O.getQualifiedClassName(h)) && 1 <= h && (c.h.anvilUses = Math.min(100, Math.floor(h)));
                 break;
               case "candestroy":
                 if ("Array" == O.getQualifiedClassName(h)) {
                   c.h.canDestroy = [];
                   k = 0;
                   for (var z = h.length; k < z; ) {
                     var m = O.trim(h[k++].toLowerCase());
                     null != q.identifierToID.h[m] && 1 == q.get(q.identifierToID.h[m], "placeable")
                       ? -1 == c.h.canDestroy.indexOf(q.identifierToID.h[m]) && c.h.canDestroy.push(m)
                       : "all" == m && -1 == c.h.canDestroy.indexOf("all") && c.h.canDestroy.push("all");
                   }
                 } else
                   "String" == O.getQualifiedClassName(h) &&
                     ((c.h.canDestroy = []),
                     (h = O.trim(h.toLowerCase())),
                     null != q.identifierToID.h[h] && 1 == q.get(q.identifierToID.h[h], "placeable") ? -1 == c.h.canDestroy.indexOf(q.identifierToID.h[h]) && c.h.canDestroy.push(h) : "all" == h && (c.h.canDestroy = ["all"]));
                 break;
               case "canplaceon":
                 if (1 == q.get(b, "placeable"))
                   if ("Array" == O.getQualifiedClassName(h))
                     for (c.h.canPlaceOn = [], k = 0, z = h.length; k < z; )
                       (m = O.trim(h[k++].toLowerCase())),
                         null != q.identifierToID.h[m] && 1 == q.get(q.identifierToID.h[m], "placeable")
                           ? -1 == c.h.canPlaceOn.indexOf(q.identifierToID.h[m]) && c.h.canPlaceOn.push(m)
                           : "all" == m && -1 == c.h.canPlaceOn.indexOf("all") && c.h.canPlaceOn.push("all");
                   else
                     "String" == O.getQualifiedClassName(h) &&
                       ((h = O.trim(h.toLowerCase())),
                       (c.h.canPlaceOn = []),
                       null != q.identifierToID.h[h] && 1 == q.get(q.identifierToID.h[h], "placeable") ? -1 == c.h.canPlaceOn.indexOf(q.identifierToID.h[h]) && c.h.canPlaceOn.push(h) : "all" == h && (c.h.canPlaceOn = ["all"]));
                 break;
               case "category":
                 "potion" == b && "splash" == E.string(h).toLowerCase() && (c.h.category = "splash");
                 break;
               case "command":
                 "String" == O.getQualifiedClassName(h) && "cbook" == b && (c.h.command = h);
                 break;
               case "enchantments":
                 if ("Array" == O.getQualifiedClassName(h)) {
                   k = Object.create(null);
                   z = Object.create(null);
                   m = 0;
                   for (var A = h.length; m < A; ) {
                     var p = m++;
                     if ("String" == O.getQualifiedClassName(h[p]))
                       for (var n = Object.keys(g.enchantmentNames.h), t = n.length, r = 0; r < t; ) {
                         var w = n[r++];
                         null != k[I.substr(w, 0, w.length - 1).toLowerCase()] ||
                           (w.toLowerCase() != h[p].split(" ").join("").toLowerCase() && g.enchantmentNames.h[w].split(" ").join("").toLowerCase() != h[p].split(" ").join("").toLowerCase()) ||
                           ((k[I.substr(w, 0, w.length - 1)] = "enchant"), (z[w] = "enchant"));
                       }
                   }
                   h = Object.keys(z);
                   k = h.length;
                   for (z = 0; z < k; ) c.h[h[z++]] = "enchant";
                 }
                 break;
               case "name":
                 "String" == O.getQualifiedClassName(h) && ((h = I.substr(O.restrict(h, "a-zA-Z0-9\\-=+|_!.,()[]<>'@$%\\^&*#?/ "), 0, 20)), (c.h.nameChange = h));
                 break;
               case "showparticles":
                 "potion" != b || (0 != h && 0 != h && "false" != E.string(h).toLowerCase()) || (c.h.showParticles = !1);
                 break;
               case "type":
                 "String" == O.getQualifiedClassName(h) &&
                   ("megg" == b
                     ? null != K.matchMobID(h) && ((k = K.matchMobVariant(h)), (c.h.type = k))
                     : "potion" == b
                     ? ((k = this.potionData),
                       (z = h.toLowerCase().split(" ").join("")),
                       null != k.h[z] && ((k = h.toLowerCase().split(" ").join("")), (c.h.type = k), (k = this.potionData), (z = h.toLowerCase().split(" ").join("")), (k = O.clone(k.h[z].h.effects)), (c.h.effects = k)))
                     : "carpet" == b || "cloth" == b || "bdcloth" == b
                     ? ((k = V.colors), (z = h.split(" ").join("").toLowerCase()), null != k.h[z] && ((k = h.split(" ").join("").toLowerCase()), (c.h.type = k)))
                     : "bed" == b || "dye" == b || "LeatherShoes" == b || "LeatherShirt" == b || "LeatherPants" == b || "LeatherCap" == b || "gs" == b || "bdgs" == b
                     ? ((k = V.colors), (z = h.split(" ").join("").toLowerCase()), null != k.h[z] && "rainbow" != h.toLowerCase() && ((k = h.split(" ").join("").toLowerCase()), (c.h.type = k)))
                     : "bl" == b &&
                       ((k = V.colors),
                       (z = h.split(" ").join("").toLowerCase()),
                       null != k.h[z] && "rainbow" != h.toLowerCase() ? ((k = h.split(" ").join("").toLowerCase()), (c.h.type = k)) : "ghast" == h.toLowerCase() && ((k = h.toLowerCase()), (c.h.type = k))));
                 if (("String" == O.getQualifiedClassName(h) || "int" == O.getQualifiedClassName(h)) && "mh" == b)
                   switch (((h = E.string(h).split(" ").join("").toLowerCase()), h)) {
                     case "creeper":
                     case "enderdragon":
                     case "skeleton":
                     case "zombie":
                       c.h.type = h;
                       break;
                     default:
                       E.string(E.parseInt(h)) == h && (c.h.type = h);
                   }
                 break;
               case "unbreakable":
                 (O.tripleEqual(h, !0) || 1 == h || "true" == E.string(h).toLowerCase()) && q.get(b, "tool") && (c.h.unbreakable = !0);
                 break;
               case "uses":
                 ("Number" != O.getQualifiedClassName(h) && "int" != O.getQualifiedClassName(h)) || "cbook" != b || (c.h.uses = Math.floor(h));
             }
           }
           return c;
         },
         interpretCommand: function (b, a) {
           null == a && (a = !1);
           if ("/" == I.substr(b, 0, 1) || "\\" == I.substr(b, 0, 1)) b = I.substr(b, 1, b.length - 1);
           var c = O.trim(b);
           if (!(0 > c.length)) {
             b = c.toLowerCase();
             for (var d = b.split(" "), f = 0; f < d.length; ) "" == d[f] && (d.splice(f, 1), --f), ++f;
             f = this.getGameRule("sendcommandfeedback");
             if (O.tripleEqual(this.world.cheats, -1) && !a)
               switch (d[0]) {
                 case "cheats":
                   if ("enable" == d[1]) {
                     this.world.cheats = !0;
                     this.world.threadedSave();
                     this.console.newLine("[INFO] Cheats have been enabled. Enjoy!");
                     break;
                   } else if ("disable" == d[1]) {
                     this.world.cheats = !1;
                     this.world.threadedSave();
                     this.console.newLine("[INFO] Cheats have been disabled.");
                     break;
                   }
                   this.console.newLine("[INFO] cheats [enable|disable]");
                   break;
                 case "cls":
                   this.console.clearAll();
                   break;
                 case "seed":
                   this.console.newLine("[INFO] Seed: " + this.world.seed);
                   f && this.console.newLine("[INFO] Different game versions may generate different worlds.");
                   break;
                 default:
                   this.console.newLine("- - - - - - - - - - - - - - - [ Help ]- - - - - - - - - - - - -"),
                     this.console.newLine("Cheats are currently disabled!"),
                     this.console.newLine("Type 'cheats enable' to enable cheats."),
                     this.console.newLine("Type 'cheats disable' to permanently disable cheats."),
                     this.console.newLine("Note: You may not receive achievements if cheats are enabled."),
                     this.console.newLine("Commands: help, seed, cheats, cls"),
                     this.console.newLine("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
               }
             else if (1 == this.world.cheats || a)
               switch (d[0]) {
                 case "clear":
                   if (1 < d.length)
                     if (((d[1] = d[1].toLowerCase()), null != q.identifierToID.h[d[1]])) {
                       var l = w.MAX_INT();
                       a = -1;
                       var k = new e();
                       if (3 <= d.length) {
                         if (d[2] == parseFloat(E.string(d[2]))) 0 <= Math.floor(d[2]) && (l = Math.floor(d[2]));
                         else {
                           this.console.newLine("[INFO] Invalid quantity. Set quantity to -1 to clear all.");
                           break;
                         }
                         if (4 <= d.length) {
                           if (d[3] == Math.floor(parseFloat(d[3]))) q.get(q.identifierToID.h[d[1]], "tool") && (a = 0 > d[3] ? (q.get(q.identifierToID.h[d[1]], "life") - Math.abs(d[3])) | 0 : d[3]);
                           else {
                             this.console.newLine("[INFO] Invalid damage value. Set to -1 to ignore.");
                             break;
                           }
                           if (5 <= d.length)
                             if ("{" == d[4].substr(0, 1)) {
                               var C = g.parseCommandObject(I.substr(c, b.indexOf("{"), b.length));
                               if (-1 == C[0]) {
                                 this.console.newLine("[INFO] data_tags parse error: " + E.string(C[1]));
                                 break;
                               }
                               k = this.convertObjectToExtras(q.identifierToID.h[d[1]], C[1]);
                               this.hasEnchantment(k) && "book" == q.identifierToID.h[d[1]] && (d[1] = " enchanted_book");
                             } else {
                               this.console.newLine("[INFO] Invalid data_tags value.");
                               break;
                             }
                         }
                       }
                       for (var z = (b = 0); 45 > z; ) {
                         if (
                           this.world.inventoryList[z][0] == q.identifierToID.h[d[1]] &&
                           !(0 <= a && this.world.inventoryList[z][2] != a && 1 == q.get(this.world.inventoryList[z][0], "tool")) &&
                           this.hasExtras(this.world.inventoryList[z][3], k)
                         ) {
                           if (0 == l) {
                             this.console.newLine("[INFO] Found a match.");
                             return;
                           }
                           var Ba = Math.min(this.world.inventoryList[z][1], l - b) | 0;
                           this.world.inventoryList[z][1] -= Ba;
                           0 >= this.world.inventoryList[z][1] && (this.world.inventoryList[z] = g.emptyItem());
                           b += Ba;
                           if (b >= l) break;
                         }
                         ++z;
                       }
                       if (45 == z && 0 == l) {
                         this.console.newLine("[INFO] No matches.");
                         break;
                       }
                       f && this.console.newLine("[INFO] Removed " + b + " item" + (1 == b ? "" : "s") + ".");
                       break;
                     } else this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper item ID.');
                   else {
                     for (c = b = 0; 45 > c; ) (z = c++), (Ba = this.world.inventoryList[z][1]), (this.world.inventoryList[z] = g.emptyItem()), (b += Ba);
                     f && this.console.newLine("[INFO] Removed " + b + " item" + (1 == b ? "" : "s") + ".");
                     break;
                   }
                   this.console.newLine("[INFO] clear itemname [quantity|-1] [damage|-1] [data_tags]");
                   break;
                 case "clone":
                   if (7 <= d.length && 10 >= d.length) {
                     d[1] = this.parseCoordinate(d[1], "x");
                     d[2] = this.parseCoordinate(d[2], "y");
                     d[5] = this.parseCoordinate(d[5], "x");
                     d[6] = this.parseCoordinate(d[6], "y");
                     if (isNaN(d[1]) || isNaN(d[2])) this.console.newLine("[INFO] x1 and y1 must be valid coordinates.");
                     else if (d[3] == parseFloat(E.string(d[3])) && d[4] == parseFloat(E.string(d[4])) && 0 <= d[3] && 0 <= d[4])
                       if (isNaN(d[5]) || isNaN(d[6])) this.console.newLine("[INFO] xDest and yDest must be valid coordinates.");
                       else {
                         l = new t(Math.floor(d[1]), Math.floor(d[2]), Math.floor(d[3]), Math.floor(d[4]));
                         k = new t(Math.floor(d[5]), Math.floor(d[6]), Math.floor(d[3]), Math.floor(d[4]));
                         if (1e4 < (l.width + 1) * (l.height + 1)) {
                           this.console.newLine("[INFO] You may not involve more than a 10000-block region.");
                           break;
                         }
                         z = "replace";
                         Ba = "normal";
                         C = "";
                         if (8 <= d.length) {
                           10 <= d.length && (d[9] = d[9].toLowerCase());
                           if ("filtered" == d[7].toLowerCase())
                             if (((z = "filtered"), 10 > d.length)) {
                               this.console.newLine("[INFO] When using filtered mode, you must provide a mask block.");
                               break;
                             } else if (1 == q.get(q.identifierToID.h[d[9]], "placeable") || "air" == d[9]) C = d[10];
                             else {
                               this.console.newLine('[INFO] "' + E.string(d[9]) + '" is not a proper block ID.');
                               break;
                             }
                           else if ("masked" == d[7].toLowerCase()) z = "masked";
                           else if ("replace" != d[7].toLowerCase()) {
                             this.console.newLine("[INFO] Unrecognized filter mode: '" + E.string(d[7]) + "'.");
                             break;
                           }
                           if (9 <= d.length)
                             if ("force" == d[8].toLowerCase()) Ba = "force";
                             else if ("move" == d[8].toLowerCase()) Ba = "move";
                             else if ("normal" != d[8].toLowerCase()) {
                               this.console.newLine("[INFO] Unrecognized move mode: '" + E.string(d[8]) + "'.");
                               break;
                             }
                         }
                         a = 0;
                         var A = Object.create(null);
                         c = Math.floor(l.x);
                         for (b = Math.floor(l.get_right()); c < b; ) {
                           var p = c++;
                           if (null != this.world.scene[p]) {
                             d = Math.floor(l.get_top());
                             for (var n = Math.floor(l.get_bottom()); d < n; ) {
                               var r = d++;
                               if (!(0 > r || ("filtered" == z && C != this.world.getFG(p, r)) || ("masked" == z && this.isEmptyBlock(this.world.getFG(p, r))))) {
                                 var y = new e(),
                                   ka = this.world.getFG(p, r);
                                 y.h.type = ka;
                                 ka = this.createBlockStateObject(p, r);
                                 y.h.data = ka;
                                 A["blockX" + p + "Y" + r] = g.makeDynamicMap(y);
                                 "move" == Ba && this.requestRemove(p, r, !0, !1, !0);
                                 ++a;
                               }
                             }
                           }
                         }
                         c = Math.floor(k.x);
                         for (b = Math.floor(k.get_right()); c < b; )
                           if (((p = c++), null != this.world.scene[p]))
                             for (d = Math.floor(k.get_top()), n = Math.floor(k.get_bottom()); d < n; )
                               (r = d++),
                                 0 > r ||
                                   ((z = A["blockX" + (p - k.x + l.x) + "Y" + (r - k.y + l.y)]),
                                   null != z && (this.requestRemove(p, r, !0, !1, !0), this.world.setFG(p, r, z.h.type), this.applyBlockState(p, r, z.h.data), this.makeBlock(p, r)));
                         f && this.console.newLine("[INFO] " + a + " block" + (1 == a ? "" : "s") + " cloned");
                       }
                     else this.console.newLine("[INFO] width and height must be valid numbers.");
                     break;
                   } else this.console.newLine("[INFO] Unexpected number of parameters.");
                   this.console.newLine("[INFO] clone [~]x1 [~]y1 width height [~]xDest [~]yDest");
                   this.console.newLine("       [filtered|masked|replace] [force|move|normal] block_mask");
                   break;
                 case "cls":
                   this.console.clearAll();
                   break;
                 case "difficulty":
                   "peaceful" == d[1] || "p" == d[1] || "0" == d[1]
                     ? ((this.world.difficulty = "peaceful"), (this.world.fly = !1), f && this.console.newLine("[INFO] Difficulty is now set to peaceful."))
                     : "easy" == d[1] || "e" == d[1] || "1" == d[1]
                     ? ((this.world.difficulty = "easy"), (this.world.fly = !1), f && this.console.newLine("[INFO] Difficulty is now set to easy."))
                     : "normal" == d[1] || "n" == d[1] || "2" == d[1]
                     ? ((this.world.difficulty = "normal"), (this.world.fly = !1), f && this.console.newLine("[INFO] Difficulty is now set to normal."))
                     : "hard" == d[1] || "h" == d[1] || "3" == d[1]
                     ? ((this.world.difficulty = "hard"), (this.world.fly = !1), f && this.console.newLine("[INFO] Difficulty is now set to hard."))
                     : this.console.newLine("[INFO] difficulty <peaceful|easy|normal|hard>");
                   break;
                 case "enchant":
                   if (1 < d.length) {
                     d[1] = d[1].toLowerCase();
                     b = Object.keys(g.enchantmentNames.h);
                     a = b.length;
                     for (l = 0; l < a; )
                       if (((c = b[l++]), c.toLowerCase() == d[1].toLowerCase() || g.enchantmentNames.h[c].split(" ").join("").toLowerCase() == d[1].toLowerCase())) {
                         a = Object.keys(this.world.get_selectedInventoryItemExtra().h);
                         l = a.length;
                         for (k = 0; k < l; )
                           if (((b = a[k++]), I.substr(b, 0, b.length - 1) == I.substr(c, 0, c.length - 1))) {
                             n = E.parseInt(I.substr(b, -1, 1));
                             if (isNaN(n)) this.console.newLine("[INFO] enchantment is already on the item.");
                             else {
                               for (f = E.parseInt(I.substr(b, -1, 1)) + E.parseInt(I.substr(c, -1, 1)); null == g.enchantmentNames.h[I.substr(b, 0, b.length - 1) + (null == f ? "null" : "" + f)]; )
                                 if ((--f, 0 >= f)) {
                                   this.console.newLine("[INFO] enchantment is already on the item.");
                                   return;
                                 }
                               f > E.parseInt(I.substr(b, -1, 1))
                                 ? (this.console.newLine("[INFO] " + g.enchantmentNames.h[I.substr(b, 0, b.length - 1) + (null == f ? "null" : "" + f)] + " added to selected item"),
                                   (c = this.world.get_selectedInventoryItemExtra()),
                                   Object.prototype.hasOwnProperty.call(c.h, b) && delete c.h[b],
                                   (this.world.get_selectedInventoryItemExtra().h[I.substr(b, 0, b.length - 1) + (null == f ? "null" : "" + f)] = "enchant"))
                                 : this.console.newLine("[INFO] enchantment is already on the item.");
                             }
                             return;
                           }
                         "book" == this.world.inventoryList[this.world.selectedInventoryItem][0] && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "ebook");
                         this.world.get_selectedInventoryItemExtra().h[c] = "enchant";
                         f && this.console.newLine("[INFO] " + g.enchantmentNames.h[c] + " added to selected item");
                         this.updateSelectedInventoryItemStuff();
                         return;
                       }
                     if (null != d[1] && 0 <= d[1].length) {
                       this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper enchantment.');
                       break;
                     }
                   }
                   this.console.newLine("[INFO] enchant enchantment_id");
                   break;
                 case "explode":
                   if (d[1] == parseFloat(E.string(d[1]))) {
                     if (1 > d[1] || 10 < d[1]) {
                       this.console.newLine("[INFO] Explosion size must be a number from 1 to 10.");
                       break;
                     }
                     if (2 == d.length) {
                       this.explode(Math.floor(this.world.worldX / 1), Math.floor(-this.world.worldY), d[1], !1);
                       break;
                     } else if (4 == d.length)
                       if (((d[2] = this.parseCoordinate(d[2], "x")), (d[3] = this.parseCoordinate(d[3], "y")), isNaN(d[2]) || isNaN(d[3]))) this.console.newLine("[INFO] X and Y should be numbers.");
                       else {
                         this.explode(Math.floor(d[2]), Math.floor(d[3]), d[1], !1);
                         break;
                       }
                   }
                   this.console.newLine("[INFO] explode size [[~]x [~]y]");
                   break;
                 case "fill":
                   if (6 <= d.length) {
                     d[1] = d[1].toLowerCase();
                     if (null != q.identifierToID.h[d[1]])
                       if (1 == q.get(q.identifierToID.h[d[1]], "placeable") || q.get(q.identifierToID.h[d[1]], "placeDifferent") || "air" == d[1])
                         if (((d[2] = this.parseCoordinate(d[2], "x")), (d[3] = this.parseCoordinate(d[3], "y")), isNaN(d[2]) || isNaN(d[3]))) this.console.newLine("[INFO] x and y should be valid coordinates.");
                         else if (d[4] == parseFloat(E.string(d[4])) && d[5] == parseFloat(E.string(d[5])) && 0 <= d[4] && 0 <= d[5])
                           if (((l = new t(Math.floor(d[2]), Math.floor(d[3]), Math.floor(d[4]), Math.floor(d[5]))), 1e4 >= (l.width + 1) * (l.height + 1))) {
                             a = 0;
                             k = "replace";
                             z = null;
                             C = 6;
                             null != d[6] &&
                               ((d[6] = d[6].toLowerCase()), "replace" == d[6] || "keep" == d[6] || "hallow" == d[6] || "outline" == d[6] || "destroy" == d[6]) &&
                               ((C = 7), (k = d[6]), null != d[7] && "replace" == d[6] && null != q.identifierToID.h[d[7]] && ((C = 8), (z = d[7])));
                             Ba = null;
                             if (d.length > C)
                               if ("{" == d[C].substr(0, 1))
                                 if (-1 < b.indexOf("{")) {
                                   C = g.parseCommandObject(I.substr(c, b.indexOf("{"), b.length));
                                   if (-1 == C[0]) {
                                     this.console.newLine("[INFO] data_tags parse error: " + E.string(C[1]));
                                     break;
                                   }
                                   Ba =
                                     null != q.get(q.identifierToID.h[d[1]], "placeDifferent")
                                       ? this.convertObjectToBlockState(q.get(q.identifierToID.h[d[1]], "placeDifferent"), C[1])
                                       : this.convertObjectToBlockState(q.identifierToID.h[d[1]], C[1]);
                                 } else {
                                   this.console.newLine("[INFO] Invalid data_tags value.");
                                   break;
                                 }
                               else {
                                 6 == C
                                   ? (this.console.newLine("[INFO] Unknown oldBlockHandling value."), this.console.newLine("[INFO] Expected [replace|keep|outline|hollow|destroy]."))
                                   : "replace" == k
                                   ? this.console.newLine("[INFO] Unknown replace_block_type value.")
                                   : this.console.newLine("[INFO] Unexpected parameter after oldBlockHandling.");
                                 break;
                               }
                             C = null != q.get(q.identifierToID.h[d[1]], "placeDifferent") ? q.get(q.identifierToID.h[d[1]], "placeDifferent") : q.identifierToID.h[d[1]];
                             c = Math.floor(l.x);
                             for (b = Math.floor(l.get_right()); c < b; )
                               if (((A = c++), null != this.world.scene[A]))
                                 for (d = Math.floor(l.get_top()), n = Math.floor(l.get_bottom()); d < n; )
                                   if (((p = d++), "hallow" == k || "outline" == k))
                                     A == l.get_left() || A == l.get_right() || p == l.get_top() || p == l.get_bottom()
                                       ? (this.world.setFG(A, p, C), this.makeBlock(A, p), ++a)
                                       : "hallow" == k
                                       ? this.mineBlock(A, p, !1, !1)
                                       : this.requestRemove(A, p, !0, !1);
                                   else if ("undefined" == this.world.getFG(A, p) || "replace" == k || "destroy" == k)
                                     if (null == z || q.get(this.world.getFG(A, p), "identifier") == z)
                                       "destroy" == k ? this.mineBlock(A, p, !1, !1) : this.requestRemove(A, p, !0, !1), this.world.setFG(A, p, C), this.applyBlockState(A, p, Ba), this.makeBlock(A, p), ++a;
                             f && this.console.newLine("[INFO] " + a + " block" + (1 == a ? "" : "s") + " filled.");
                           } else this.console.newLine("[INFO] You may not involve more than a 10000-block region.");
                         else this.console.newLine("[INFO] X2 and Y2 should be numeric.");
                       else this.console.newLine('[INFO] "' + E.string(q.get(q.identifierToID.h[d[1]], "name")) + '" is not a placeable block.');
                     else this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper item ID.');
                     break;
                   }
                   this.console.newLine("[INFO] fill block_type [~]x [~]y width height");
                   this.console.newLine("       [(replace [replace_block_type])|keep|outline");
                   this.console.newLine("       |hollow|destroy] [data_tags]");
                   break;
                 case "gamemode":
                   "survival" == d[1] || "s" == d[1] || "0" == d[1]
                     ? (this.setGamemode(U.gamemodes.h.SURVIVAL), f && this.console.newLine("[INFO] You are now in survival mode."))
                     : "creative" == d[1] || "c" == d[1] || "1" == d[1]
                     ? (this.setGamemode(U.gamemodes.h.CREATIVE), f && this.console.newLine("[INFO] You are now in creative mode."))
                     : "adventure" == d[1] || "a" == d[1] || "2" == d[1]
                     ? (this.setGamemode(U.gamemodes.h.ADVENTURE), f && this.console.newLine("[INFO] You are now in adventure mode."))
                     : "spectator" == d[1] || "p" == d[1] || "3" == d[1]
                     ? (this.setGamemode(U.gamemodes.h.SPECTATOR), f && this.console.newLine("[INFO] You are now in spectator mode."))
                     : this.console.newLine("[INFO] gamemode <survival|creative|adventure|spectator>");
                   break;
                 case "gamerule":
                   if (3 == d.length)
                     if (((d[1] = d[1].toLowerCase()), (d[2] = d[2].toLowerCase()), "keepinventory" == d[1])) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.keepinventory = !1), f && this.console.newLine("[INFO] Inventory will be dropped upon death (default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.keepinventory = !0), f && this.console.newLine("[INFO] Inventory will be kept upon death (not default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("mobgriefing" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.mobgriefing = !1), f && this.console.newLine("[INFO] Mobs will not be able to change blocks (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.mobgriefing = !0), f && this.console.newLine("[INFO] Mobs will be able to change blocks (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("dodaylightcycle" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.dodaylightcycle = !1), f && this.console.newLine("[INFO] The daylight cycle will stop (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.dodaylightcycle = !0), f && this.console.newLine("[INFO] The daylight cycle will continue (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("dofiretick" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.dofiretick = !1), f && this.console.newLine("[INFO] Fire will not spread and not be naturally put out (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.dofiretick = !0), f && this.console.newLine("[INFO] Fire will spread and be naturally put out (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("passivemobs" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.passivemobs = !1), f && this.console.newLine("[INFO] Passive mobs will not spawn (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.passivemobs = !0), f && this.console.newLine("[INFO] Passive mobs will spawn (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("domobloot" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.domobloot = !1), f && this.console.newLine("[INFO] Mobs will not drop items (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.domobloot = !0), f && this.console.newLine("[INFO] Mobs will drop items (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else if ("sendcommandfeedback" == d[1]) {
                       "false" == d[2] || "0" == d[2]
                         ? ((this.world.gameRules.h.sendcommandfeedback = !1), f && this.console.newLine("[INFO] Commands will not return feedback (not default)."))
                         : "true" == d[2] || "1" == d[2]
                         ? ((this.world.gameRules.h.sendcommandfeedback = !0), this.console.newLine("[INFO] Commands will return feedback (default)."))
                         : this.console.newLine("[INFO] Unknown game rule value. <true|false> expected.");
                       break;
                     } else this.console.newLine("[INFO] Unknown game rule.");
                   this.console.newLine("[INFO] gamerule <keepinventory|dodaylightcycle|dofiretick|");
                   this.console.newLine("       domobloot|mobgriefing|sendcommandfeedback> value");
                   break;
                 case "give":
                   if (1 < d.length) {
                     d[1] = d[1].toLowerCase();
                     if (null != q.identifierToID.h[d[1]]) {
                       n = 1;
                       a = null;
                       k = new e();
                       if (3 <= d.length) {
                         if (d[2] == Math.floor(parseFloat(E.string(d[2]))) && 1e4 > d[2]) n = d[2];
                         else {
                           this.console.newLine("[INFO] Invalid quantity.");
                           break;
                         }
                         if (4 <= d.length) {
                           if (d[3] == Math.floor(parseFloat(d[3]))) 1 == q.get(q.identifierToID.h[d[1]], "tool") && (a = 0 > d[3] ? (q.get(q.identifierToID.h[d[1]], "life") - Math.abs(d[3])) | 0 : d[3]);
                           else {
                             this.console.newLine("[INFO] Invalid damage value.");
                             break;
                           }
                           if (4 < d.length)
                             if ("{" == d[4].substr(0, 1)) {
                               C = g.parseCommandObject(I.substr(c, b.indexOf("{"), b.length));
                               if (-1 == C[0]) {
                                 this.console.newLine("[INFO] data_tags parse error: " + E.string(C[1]));
                                 break;
                               }
                               k = this.convertObjectToExtras(q.identifierToID.h[d[1]], C[1]);
                               this.hasEnchantment(k) && "book" == q.identifierToID.h[d[1]] && (d[1] = " enchanted_book");
                             } else {
                               this.console.newLine("[INFO] Invalid data_tags value.");
                               break;
                             }
                         }
                       }
                       this.addDrop(q.identifierToID.h[d[1]], this.world.worldX, this.world.worldY, n, a, k);
                       f && this.console.newLine("[INFO] Gave " + n + ' "' + E.string(q.get(q.identifierToID.h[d[1]], "name")) + '".');
                     } else this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper item ID.');
                     break;
                   }
                   this.console.newLine("[INFO] give itemname [quantity] [damage] [data_tags]");
                   break;
                 case "heal":
                   this.world.health = 20;
                   f && this.console.newLine("[INFO] Health restored.");
                   break;
                 case "help":
                   this.console.newLine("- - - - - - - - - - - - - - - [ Help ]- - - - - - - - - - - - -");
                   this.console.newLine("Commands: help, gamemode, tp, home, time, weather, give,");
                   this.console.newLine("          explode, fill, gamerule, heal, kill, xp, spawnskin,");
                   this.console.newLine("          difficulty, lightning, enchant, clone, setblock, cls,");
                   this.console.newLine("          summon, say");
                   this.console.newLine("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
                   break;
                 case "home":
                   if ("set" == d[1])
                     if (2 == d.length) {
                       this.world.spawnPoint.set(this.world.worldX, this.world.worldY);
                       this.world.threadedSave();
                       f && this.console.newLine("[INFO] Your home position has been set to your current position.");
                       break;
                     } else {
                       if (((d[2] = this.parseCoordinate(d[2], "x")), (d[3] = this.parseCoordinate(d[3], "y")), !isNaN(d[2]) && !isNaN(d[3]))) {
                         this.world.xSpeed = 0;
                         this.world.ySpeed = 0;
                         this.world.worldX = d[2];
                         this.world.worldY = -d[3];
                         this.world.spawnPoint = new h(this.world.worldX, this.world.worldY);
                         this.world.riding = "";
                         this.world.threadedSave();
                         f && this.console.newLine("[INFO] Your home position has been set to x=" + Math.floor(100 * d[2]) / 100 + ", y=" + Math.floor(100 * d[3]) / 100 + ".");
                         break;
                       }
                     }
                   else if ("get" == d[1]) {
                     this.console.newLine("[INFO] Your current home position: x=" + Math.floor((this.world.spawnPoint.x / 1) * 100) / 100 + ", y=" + Math.floor(100 * -this.world.spawnPoint.y) / 100 + ".");
                     break;
                   } else if (1 == d.length) {
                     this.world.worldX = this.world.spawnPoint.x;
                     this.world.worldY = this.world.spawnPoint.y;
                     f && this.console.newLine("[INFO] Welcome home!");
                     break;
                   }
                   this.console.newLine("[INFO] home <get|set [~]x [~]y>");
                   f && this.console.newLine("[INFO] The middle of the world is at x=" + this.world.worldWidth + ".");
                   break;
                 case "kill":
                   this.world.health = -10;
                   f && this.console.newLine("[INFO] O_O");
                   break;
                 case "lightning":
                   if (2 < d.length)
                     if (((d[1] = this.parseCoordinate(d[1], "x")), (d[2] = this.parseCoordinate(d[2], "y")), isNaN(d[1]) || isNaN(d[2]))) this.console.newLine("[INFO] Invalid location.");
                     else {
                       this.newLightning().doAt(d[1], d[2]);
                       break;
                     }
                   else if (1 == d.length) {
                     this.newLightning().doAt(Math.floor(this.world.worldX / 1), Math.floor(-this.world.worldY));
                     break;
                   }
                   this.console.newLine("[INFO] lightning [[~]x [~]y]");
                   break;
                 case "resetspawnskins":
                   this.world.loadedSkins = new e();
                   f && this.console.newLine("[INFO] Spawnskins have been reset.");
                   break;
                 case "say":
                   f = !0;
                   a = this.parseSlashes(I.substr(c, 4, null)).split("\n");
                   c = 0;
                   for (b = a.length; c < b; )
                     for (l = c++, k = 0; k < a[l].length; ) {
                       z = 62;
                       Ba = !1;
                       if (a[l].length <= k + 62) z = 62;
                       else
                         for (C = 62; 1 < C; ) {
                           if (" " == I.substr(a[l], k + C, 1)) (z = C), (Ba = !0);
                           else if (Ba) break;
                           --C;
                         }
                       f ? this.console.newLine("[SAY] " + I.substr(a[l], k, z)) : this.console.newLine("      " + I.substr(a[l], k, z));
                       k += Math.floor(z + (Ba ? 1 : 0));
                       f = !1;
                     }
                   break;
                 case "seed":
                   this.console.newLine("[INFO] Seed: " + this.world.seed);
                   this.console.newLine("[INFO] Different game versions may generate different worlds.");
                   break;
                 case "setblock":
                   if (4 <= d.length) {
                     d[1] = d[1].toLowerCase();
                     if (null != q.identifierToID.h[d[1]])
                       if (1 == q.get(q.identifierToID.h[d[1]], "placeable") || null != q.get(q.identifierToID.h[d[1]], "placeDifferent") || "air" == d[1])
                         if (((d[2] = this.parseCoordinate(d[2], "x")), (d[3] = this.parseCoordinate(d[3], "y")), isNaN(d[2]) || isNaN(d[3]))) this.console.newLine("[INFO] x and y should be valid coordinates.");
                         else {
                           d[2] = Math.floor(d[2]);
                           d[3] = Math.floor(d[3]);
                           l = "replace";
                           null != d[4] && ((d[4] = d[4].toLowerCase()), (l = d[4]));
                           a = 0;
                           if ("keep" == l || "replace" == l || "destroy" == l) {
                             if ("keep" != l || "undefined" == this.world.getFG(d[2], d[3])) {
                               Ba = null;
                               if (5 < d.length)
                                 if ("{" == d[5].substr(0, 1)) {
                                   C = g.parseCommandObject(I.substr(c, b.indexOf("{"), b.length));
                                   if (-1 == C[0]) {
                                     this.console.newLine("[INFO] data_tags parse error: " + E.string(C[1]));
                                     break;
                                   }
                                   Ba =
                                     null != q.get(q.identifierToID.h[d[1]], "placeDifferent")
                                       ? this.convertObjectToBlockState(q.get(q.identifierToID.h[d[1]], "placeDifferent"), C[1])
                                       : this.convertObjectToBlockState(q.identifierToID.h[d[1]], C[1]);
                                 } else {
                                   this.console.newLine("[INFO] Invalid data_tags value.");
                                   break;
                                 }
                               "destroy" == l ? this.mineBlock(d[2], d[3], !1, !1) : this.requestRemove(d[2], d[3], !0, !1);
                               null != q.get(q.identifierToID.h[d[1]], "placeDifferent") ? this.world.setFG(d[2], d[3], q.get(q.identifierToID.h[d[1]], "placeDifferent")) : this.world.setFG(d[2], d[3], q.identifierToID.h[d[1]]);
                               this.applyBlockState(d[2], d[3], Ba);
                               this.makeBlock(d[2], d[3]);
                               a = 1;
                             }
                           } else {
                             this.console.newLine("[INFO] Unknown oldBlockHandling value.");
                             this.console.newLine("[INFO] Expected [replace|keep|destroy].");
                             break;
                           }
                           f && this.console.newLine("[INFO] " + a + " block" + (1 == a ? "" : "s") + " set.");
                         }
                       else this.console.newLine('[INFO] "' + E.string(q.get(q.identifierToID.h[d[1]], "name")) + '" is not a placeable block.');
                     else this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper item ID.');
                     break;
                   }
                   this.console.newLine("[INFO] setblock block_type [~]x [~]y [replace|keep|destroy]");
                   this.console.newLine("       [data_tags]");
                   break;
                 case "spawnskin":
                   if (1 < d.length) {
                     n = E.parseInt(d[1]);
                     if (!isNaN(n) && 1 <= d[1]) {
                       a = this.world.worldX;
                       l = this.world.worldY;
                       f = 1;
                       if (2 < d.length) {
                         n = E.parseInt(d[2]);
                         if (!isNaN(n) && 1 <= d[2] && 20 >= d[2]) f = d[2];
                         else {
                           this.console.newLine("[INFO] Amount must be a number from 1-20.");
                           break;
                         }
                         if (3 < d.length)
                           if (((d[3] = this.parseCoordinate(d[3], "x")), (d[4] = this.parseCoordinate(d[4], "y")), isNaN(d[3]) || isNaN(d[4]))) {
                             this.console.newLine("[INFO] Invalid location.");
                             break;
                           } else (a = d[3]), (l = -1 * d[4]);
                       }
                       c = 0;
                       for (b = f; c < b; ) ++c, this.world.spawnskinNum++, (f = K.nextMobID()), (C = this.world.mobs), (y = K.prepareMobData("spawnskin", f, a, l, 20)), (C.h[f] = y), (this.world.mobs.h[f].h.skin = d[1]);
                     } else this.console.newLine("[INFO] skin_id_number must be a number."), this.console.newLine("[INFO] You can find it at the end of each skin link.");
                     break;
                   }
                   this.console.newLine("[INFO] spawnskin skin_id_number [amount] [[~]x [~]y]");
                   break;
                 case "summon":
                   if (1 < d.length)
                     if (((d[1] = d[1].toLowerCase()), (A = K.matchMobID(d[1])), null != A && null != this.world.mobData.h[A])) {
                       k = K.matchMobVariant(d[1]);
                       Ba = 1;
                       z = Object.create(null);
                       a = this.world.worldX;
                       l = this.world.worldY;
                       if (3 <= d.length) {
                         d[2] == Math.floor(parseFloat(E.string(d[2]))) ? ((n = E.parseInt(d[2])), (Ba = !isNaN(n))) : (Ba = !1);
                         if (Ba && 1 <= d[2] && 20 >= d[2]) Ba = d[2];
                         else {
                           this.console.newLine("[INFO] Quantity must a number from 1-20.");
                           break;
                         }
                         if (5 <= d.length) {
                           d[3] = this.parseCoordinate(d[3], "x");
                           d[4] = this.parseCoordinate(d[4], "y");
                           if (d[3] == parseFloat(E.string(d[3])) && d[4] == parseFloat(E.string(d[4]))) (a = d[3]), (l = -1 * d[4]);
                           else {
                             this.console.newLine("[INFO] Invalid location.");
                             break;
                           }
                           if (6 <= d.length)
                             if ("{" == d[5].substr(0, 1)) {
                               C = g.parseCommandObject(I.substr(c, b.indexOf("{"), b.length));
                               if (-1 == C[0]) {
                                 this.console.newLine("[INFO] data_tags parse error: " + E.string(C[1]));
                                 break;
                               }
                               p = Object.keys(g.makeDynamicMap(C[1]).h);
                               r = p.length;
                               for (var Ga = 0; Ga < r; ) {
                                 c = p[Ga++];
                                 var x = g.makeDynamicMap(C[1]).h[c];
                                 switch (c.toLowerCase()) {
                                   case "aggro":
                                     "spawnskin" != A || "String" != O.getQualifiedClassName(x) || ("hostile" != x && "neutral" != x && "passive" != x) || (z.aggro = x);
                                     break;
                                   case "armor":
                                     if ("spawnskin" == A || "zombie" == A) {
                                       b = [g.emptyItem(), g.emptyItem(), g.emptyItem(), g.emptyItem()];
                                       d = [1, 1, 1, 1];
                                       if ("Array" == O.getQualifiedClassName(x))
                                         for (c = 0; 4 > c; )
                                           ((n = c++), x.length > n && "Object" == O.getQualifiedClassName(x[n]))
                                             ? null == q.identifierToID.h[O.trim(g.makeDynamicMap(x[n]).h.id).toLowerCase()] ||
                                               ((y = q.identifierToID.h[O.trim(g.makeDynamicMap(x[n]).h.id).toLowerCase()]), 0 == n && "Cap" != I.substr(y, -3, 3) && "jl" != y && "pk" != y && "mh" != y) ||
                                               (1 == n && "Shirt" != I.substr(y, -5, 5)) ||
                                               (2 == n && "Pants" != I.substr(y, -5, 5)) ||
                                               (3 == n && "Shoes" != I.substr(y, -5, 5)) ||
                                               ((ka = 0),
                                               g.makeDynamicMap(x[n]).h.damage == parseFloat(g.makeDynamicMap(x[n]).h.damage) &&
                                                 1 == q.get(y, "tool") &&
                                                 (ka = 0 > E.parseInt(g.makeDynamicMap(x[n]).h.damage) ? (q.get(y, "life") - Math.floor(Math.abs(g.makeDynamicMap(x[n]).h.damage))) | 0 : Math.floor(g.makeDynamicMap(x[n]).h.damage)),
                                               (b[n] = g.item(y, 1, ka, this.convertObjectToExtras(y, x[n]))),
                                               (d[n] = 1))
                                             : "String" != O.getQualifiedClassName(x[n]) ||
                                               null == q.identifierToID.h[O.trim(x[n]).toLowerCase()] ||
                                               ((y = q.identifierToID.h[O.trim(x[n]).toLowerCase()]), 0 == n && "Cap" != I.substr(y, -3, 3) && "jl" != y && "pk" != y && "mh" != y) ||
                                               (1 == n && "Shirt" != I.substr(y, -5, 5)) ||
                                               (2 == n && "Pants" != I.substr(y, -5, 5)) ||
                                               (3 == n && "Shoes" != I.substr(y, -5, 5)) ||
                                               ((b[n] = g.item(y, 1, 0, new e())), (d[n] = 1));
                                       z.armor = b;
                                       z.armorDropChanges = d;
                                     }
                                     break;
                                   case "attackstrength":
                                     "spawnskin" != A || ("int" != O.getQualifiedClassName(x) && "Number" != O.getQualifiedClassName(x)) || (z.attackDamage = Math.min(100, Math.max(-100, Math.floor(x))));
                                     break;
                                   case "baby":
                                     1 == this.world.mobData.h[A].h.canBeBaby &&
                                       (O.tripleEqual(x, "true") || O.tripleEqual(x, !0) ? (z.babyTimer = 1200 * m.Instance.get_fps()) : parseFloat(x) == x && 0 < x && (z.babyTimer = m.Instance.get_fps() * Math.floor(x)));
                                     break;
                                   case "charged":
                                     "creeper" != A || ("true" != x && 1 != x) || (z.charged = !0);
                                     break;
                                   case "color":
                                     ("sheep" != A && "wolf" != A) || "String" != O.getQualifiedClassName(x) || null == V.colors.h[x] || "rainbow" == x || (z.color = x);
                                     break;
                                   case "defaultdrops":
                                     if ("false" == x.toString() || 0 == x) z.defaultDrops = !1;
                                     break;
                                   case "drops":
                                     c = [];
                                     if ("Array" == O.getQualifiedClassName(x))
                                       for (b = 0, d = x.length; b < d; )
                                         if (((n = b++), "Object" == O.getQualifiedClassName(x[n]))) {
                                           var D = x[n];
                                           n = new e();
                                           n.h.type = "";
                                           n.h.properties = new e();
                                           "String" == O.getQualifiedClassName(D.h.item)
                                             ? null != q.identifierToID.h[O.trim(D.h.item).toLowerCase()] && (n.h.type = q.identifierToID.h[O.trim(D.h.item).toLowerCase()])
                                             : "Object" == O.getQualifiedClassName(D.h.item) &&
                                               null != q.identifierToID.h[O.trim(g.makeDynamicMap(D.h.item).h.id).toLowerCase()] &&
                                               ((n.h.type = q.identifierToID.h[O.trim(g.makeDynamicMap(D.h.item).h.id).toLowerCase()]),
                                               (y = this.convertObjectToExtras(n.h.type, g.makeDynamicMap(D.h.item))),
                                               (n.h.extras = y),
                                               g.makeDynamicMap(D.h.item).h.damage == parseFloat(g.makeDynamicMap(D.h.item).h.damage) &&
                                                 q.get(n.h.type, "tool") &&
                                                 (0 > parseFloat(g.makeDynamicMap(D.h.item).h.damage)
                                                   ? ((y = q.get(n.h.type, "life")), (n.h.damage = y - Math.abs(g.makeDynamicMap(D.h.item).h.damage)))
                                                   : ((y = parseFloat(g.makeDynamicMap(D.h.item).h.damage)), (n.h.damage = y))));
                                           if ("" != n.h.type) {
                                             n.h.quantity = 1;
                                             n.h.randomBonus = 0;
                                             n.h.lootBonus = 0;
                                             ("int" == O.getQualifiedClassName(D.h.quantity) || "Number" == O.getQualifiedClassName(D.h.quantity)) && 0 <= D.h.quantity && (n.h.quantity = Math.floor(D.h.quantity));
                                             ("int" == O.getQualifiedClassName(D.h.bonus) || "Number" == O.getQualifiedClassName(D.h.bonus)) && 0 <= D.h.bonus && (n.h.randomBonus = Math.floor(D.h.bonus));
                                             ("int" == O.getQualifiedClassName(D.h.lootBonus) || "Number" == O.getQualifiedClassName(D.h.lootBonus)) && 0 <= D.h.lootBonus && (n.h.lootBonus = Math.floor(D.h.lootBonus));
                                             "String" == O.getQualifiedClassName(D.h.dimension) &&
                                               ((y = D.h.dimension.toLowercase()), "overworld" == y ? (n.h.isDimension = 1) : "the_nether" == y ? (n.h.isDimension = 2) : "the_end" == y && (n.h.isDimension = 3));
                                             "String" == O.getQualifiedClassName(D.h.variant) &&
                                               "cow" == A &&
                                               ("normal" == D.h.variant ? (n.h.isVariant = "normal") : "mooshroom" == D.h.variant ? (n.h.isVariant = "mooshroom") : "cowctus" == D.h.variant && (n.h.isVariant = "cowctus"));
                                             if (null != D.h.sheared && "sheep" == A)
                                               if ("true" == D.h.sheared || 1 == D.h.sheared) n.h.sheared = !0;
                                               else if ("false" == D.h.sheared || 0 == D.h.sheared) n.h.sheared = !1;
                                             null == D.h.isBaby || ("true" != D.h.isBaby && 1 != D.h.isBaby) || (n.h.isBaby = !0);
                                             "String" != O.getQualifiedClassName(D.h.color) ||
                                               ("wolf" != A && "sheep" != A) ||
                                               null == V.colors.h[D.h.color] ||
                                               "rainbow" == x ||
                                               (g.makeDynamicMap(n.h.properties).h.color = ["==", D.h.color]);
                                             if (null != D.h.onFire)
                                               if ("true" == D.h.onFire || 1 == D.h.onFire) n.h.onFire = !0;
                                               else if ("false" == D.h.onFire || 0 == D.h.onFire) n.h.onFire = !1;
                                             if ("int" == O.getQualifiedClassName(D.h.size) || "Number" == O.getQualifiedClassName(D.h.size))
                                               if ("slime" == A || "magmacube" == A) g.makeDynamicMap(n.h.properties).h.size = g.makeDynamicArray(["==", Math.floor(D.h.size)]);
                                             if (null != D.h.tamed && "wolf" == A)
                                               if ("true" == D.h.tamed || 1 == D.h.tamed) g.makeDynamicMap(n.h.properties).h.tamed = g.makeDynamicArray(["==", !0]);
                                               else if ("false" == D.h.tamed || 0 == D.h.tamed) g.makeDynamicMap(n.h.properties).h.tamed = g.makeDynamicArray(["!=", !0]);
                                             "Object" == O.getQualifiedClassName(D.h.chance) &&
                                               null != g.makeDynamicMap(D.h.chance) &&
                                               ((y = new e()),
                                               (ka = null != g.makeDynamicMap(D.h.chance).h.seed ? parseFloat(g.makeDynamicMap(D.h.chance).h.seed) : 0),
                                               (y.h.randomNum = ka),
                                               (ka = null != g.makeDynamicMap(D.h.chance).h.min ? parseFloat(g.makeDynamicMap(D.h.chance).h.min) : 0),
                                               (y.h.lowerBound = ka),
                                               (ka = null != g.makeDynamicMap(D.h.chance).h.max ? parseFloat(g.makeDynamicMap(D.h.chance).h.max) : 1),
                                               (y.h.upperBound = ka),
                                               (ka = null != g.makeDynamicMap(D.h.chance).h.lootOffset ? parseFloat(g.makeDynamicMap(D.h.chance).h.lootOffset) : 0),
                                               (y.h.lootingBonusChances = ka),
                                               (n.h.rare = g.makeDynamicMap(y)));
                                             c.push(n);
                                           }
                                         } else
                                           "String" == O.getQualifiedClassName(x[n]) &&
                                             null != q.identifierToID.h[O.trim(x[n]).toLowerCase()] &&
                                             ((y = new e()), (y.h.type = q.identifierToID.h[O.trim(x[n]).toLowerCase()]), (y.h.quantity = 1), c.push(g.makeDynamicMap(y)));
                                     z.drops = c;
                                     break;
                                   case "health":
                                     ("int" == O.getQualifiedClassName(x) || "Number" == O.getQualifiedClassName(x)) && 1 <= x && (z.health = Math.floor(x));
                                     break;
                                   case "holding":
                                     if ("zombiepigman" == A || "enderman" == A)
                                       "Object" == O.getQualifiedClassName(x)
                                         ? null != q.identifierToID.h[O.trim(g.makeDynamicMap(x).h.id).toLowerCase()] &&
                                           ((c = q.identifierToID.h[O.trim(g.makeDynamicMap(x).h.id).toLowerCase()]),
                                           (n = 1),
                                           (b = 0),
                                           g.makeDynamicMap(x).h.quantity == parseFloat(g.makeDynamicMap(x).h.quantity) && 0 <= g.makeDynamicMap(x).h.quantity && (n = Math.floor(g.makeDynamicMap(x).h.quantity)),
                                           g.makeDynamicMap(x).h.damage == parseFloat(g.makeDynamicMap(x).h.damage) &&
                                             q.get(c, "tool") &&
                                             (b = 0 > E.parseInt(g.makeDynamicMap(x).h.damage) ? (q.get(c, "life") - Math.floor(Math.abs(g.makeDynamicMap(x).h.damage))) | 0 : Math.floor(g.makeDynamicMap(x).h.damage)),
                                           (z.handItems = [g.item(c, n, b, this.convertObjectToExtras(c, x)), g.emptyItem()]),
                                           (z.handDropChances = [1, 1]))
                                         : "String" == O.getQualifiedClassName(x) &&
                                           null != q.identifierToID.h[O.trim(x).toLowerCase()] &&
                                           ((z.handItems = [g.item(q.identifierToID.h[O.trim(x).toLowerCase()], 1, 0, new e()), g.emptyItem()]), (z.handDropChances = [1, 1]));
                                     break;
                                   case "name":
                                     "String" == O.getQualifiedClassName(x) && (z.name = I.substr(O.restrict(x, "a-zA-Z0-9\\-=+|_!.,()[]<>'@$%\\^&*#?/ "), 0, 20));
                                     break;
                                   case "skin":
                                     "spawnskin" != A ||
                                       ("String" != O.getQualifiedClassName(x) && "int" != O.getQualifiedClassName(x) && "Number" != O.getQualifiedClassName(x)) ||
                                       ((n = E.parseInt(E.string(x))), !isNaN(n) && 1 <= E.parseInt(E.string(x)) && (z.skin = Math.floor(E.parseInt(E.string(x)))));
                                 }
                               }
                             } else {
                               this.console.newLine("[INFO] Invalid data_tags value.");
                               break;
                             }
                         }
                       }
                       c = 0;
                       for (b = Ba; c < b; ) for (++c, d = K.spawnMob(k, a, l), n = Object.keys(z), A = n.length, p = 0; p < A; ) (r = n[p++]), (C = g.makeDynamicMap(this.world.mobs.h[d])), (y = O.clone(z[r])), (C.h[r] = y);
                       f && this.console.newLine("[INFO] Spawned " + K.getMobName(k) + (1 < Ba ? " (" + Ba + " times)" : ""));
                       break;
                     } else this.console.newLine('[INFO] "' + E.string(d[1]) + '" is not a proper mob_type.');
                   this.console.newLine("[INFO] summon mob_type [quantity] [[~]x [~]y] [data_tags]");
                   break;
                 case "time":
                   if ("set" == d[1] && null != d[2])
                     if (((d[2] = d[2].toLowerCase()), d[2] == parseFloat(E.string(d[2])))) {
                       this.world.tim = Math.floor(d[2] % 100);
                       f && this.console.newLine("[INFO] Time set to " + Math.floor(d[2] % 100) + ".");
                       break;
                     } else if ("day" == d[2]) {
                       this.world.tim = 0;
                       f && this.console.newLine("[INFO] Time set to 0.");
                       break;
                     } else if ("night" == d[2]) {
                       this.world.tim = 50;
                       f && this.console.newLine("[INFO] Time set to 50.");
                       break;
                     } else this.console.newLine("[INFO] Unknown time input.");
                   else if ("get" == d[1]) {
                     this.console.newLine("[INFO] The time is " + this.world.tim + ".");
                     break;
                   }
                   this.console.newLine("[INFO] time <get|set <t|day|night>>");
                   break;
                 case "tp":
                   if (2 < d.length)
                     if (((d[1] = this.parseCoordinate(d[1], "x")), (d[2] = this.parseCoordinate(d[2], "y")), !isNaN(d[1]) && !isNaN(d[2]) && -100 <= d[1] && 1e4 >= d[1] && -100 <= d[2] && 1e3 >= d[2])) {
                       this.world.worldX = d[1];
                       this.world.worldY = -d[2];
                       this.world.xSpeed = 0;
                       this.world.ySpeed = 0;
                       this.world.riding = "";
                       this.world.threadedSave();
                       f && this.console.newLine("[INFO] WHOOSH! Teleported to x:" + Math.floor(100 * d[1]) / 100 + ", y:" + Math.floor(100 * d[2]) / 100);
                       break;
                     } else this.console.newLine("[INFO] Invalid location.");
                   this.console.newLine("[INFO] tp [~]x [~]y");
                   break;
                 case "weather":
                   if ("set" == d[1] && null != d[2])
                     if (((d[2] = d[2].toLowerCase()), "clear" == d[2] || "0" == d[2])) {
                       this.world.raining = 0;
                       f && this.console.newLine("[INFO] Weather set to clear.");
                       break;
                     } else if ("rain" == d[2] || "1" == d[2]) {
                       this.world.raining = 1;
                       f && this.console.newLine("[INFO] Weather set to rain.");
                       break;
                     } else if ("thunder" == d[2] || "2" == d[2]) {
                       this.world.raining = 2;
                       f && this.console.newLine("[INFO] Weather set to thunder.");
                       break;
                     } else this.console.newLine("[INFO] Unknown weather input.");
                   else if ("get" == d[1]) {
                     1 == this.world.raining
                       ? this.console.newLine("[INFO] The weather is rain.")
                       : 2 == this.world.raining
                       ? this.console.newLine("[INFO] The weather is thunder.")
                       : 0 == this.world.raining && this.console.newLine("[INFO] The weather is clear.");
                     break;
                   }
                   this.console.newLine("[INFO] weather <get|set <clear|rain|thunder>>");
                   break;
                 case "xp":
                   if (null != d[1] && 0 < d[1].length)
                     if ("add" == d[1].toLowerCase()) {
                       if (
                         null != d[2] &&
                         ("l" == d[2].substr(-1, 1).toLowerCase() && d[2].substr(0, d[2].length - 1) == Math.abs(parseFloat(d[2].substr(0, d[2].length - 1))) && (d[2] = 100 * d[2].substr(0, d[2].length - 1)),
                         d[2] == Math.abs(parseFloat(d[2])))
                       ) {
                         c = Math.floor(Math.max(0, Math.min(1e6, this.world.experience + parseFloat(d[2]))));
                         f && this.console.newLine("[INFO] " + (c - this.world.experience) + " experience was added.");
                         this.world.experience = c;
                         break;
                       }
                     } else if (
                       ("l" == d[1].substr(-1, 1).toLowerCase() && d[1].substr(0, d[1].length - 1) == Math.abs(parseFloat(d[1].substr(0, d[1].length - 1))) && (d[1] = 100 * d[1].substr(0, d[1].length - 1)),
                       d[1] == Math.abs(parseFloat(d[1])))
                     ) {
                       this.world.experience = Math.floor(Math.max(0, Math.min(1e6, d[1])));
                       f && this.console.newLine("[INFO] experience set to " + Math.floor(d[1]) + ".");
                       break;
                     }
                   this.console.newLine("[INFO] xp [add] value[L]");
                   break;
                 default:
                   this.console.newLine("[INFO] Command not recognised. Type help for a list of commands.");
               }
             else
               switch (d[0]) {
                 case "cls":
                   this.console.clearAll();
                   break;
                 case "seed":
                   this.console.newLine("[INFO] Seed: " + this.world.seed);
                   f && this.console.newLine("[INFO] Different game versions may generate different worlds.");
                   break;
                 default:
                   this.console.newLine("- - - - - - - - - - - - - - - [ Help ]- - - - - - - - - - - - -"),
                     this.console.newLine("Cheats are disabled in this world!"),
                     this.console.newLine("The following commands can still be used:"),
                     this.console.newLine("Commands: help, seed, cls"),
                     this.console.newLine("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
               }
           }
         },
         parseSlashes: function (b) {
           for (var a = 0; ; ) {
             a = b.indexOf("\\", a + 1);
             if (-1 == a) break;
             "n" == b.charAt(a + 1) ? ((b = I.substr(b, 0, a) + "\n" + I.substr(b, a + 2, null)), ++a) : (b = I.substr(b, 0, a) + I.substr(b, a + 1, null));
           }
           return b;
         },
         parseCoordinate: function (b, a) {
           null == a && (a = "x");
           var c = new h(this.world.worldX, this.world.worldY);
           if (null == b) return NaN;
           if ("y" == a) {
             if ("~" == I.substr(b, 0, 1)) {
               b = I.substr(b, 1, b.length - 1);
               if (b == E.string(parseFloat(b))) return parseFloat(b) - c.y / 1;
               if (0 == b.length) return -c.y;
             }
           } else if ("~" == I.substr(b, 0, 1)) {
             b = I.substr(b, 1, b.length - 1);
             if (b == E.string(parseFloat(b))) return parseFloat(b) + c.x / 1;
             if (0 == b.length) return c.x / 1;
           }
           return b == E.string(parseFloat(b)) ? parseFloat(b) : NaN;
         },
         setGamemode: function (b) {
           this.world.gamemode = b;
           this.world.gamemode == U.gamemodes.h.SPECTATOR ? (this.world.fly = !0) : this.world.gamemode != U.gamemodes.h.CREATIVE && (this.world.fly = !1);
         },
         itemMessageChangeItem: function (b) {
           b != this.itemMessageText && "" != b ? ((this.itemMessageCountdown = 100), (this.itemMessageText = b)) : "" == b && ((this.itemMessageText = ""), (this.itemMessageCountdown = 10 < this.itemMessageCountdown ? 10 : 0));
         },
         updateSelectedInventoryItemStuff: function (b) {
           null == b && (b = !0);
           this.isEmpty() ? this.itemMessageChangeItem("") : this.itemMessageChangeItem(this.getItemName(this.world.inventoryList[this.world.selectedInventoryItem]));
           if (b) {
             b = 0;
             for (var a = this.hotbarSlots; b < a.length; ) a[b++].checkInteraction();
           }
         },
         generateRecipes: function () {
           if (!(null != this.recipes && 0 < this.recipes.length)) {
             this.recipes = [];
             var b = new e(),
               a = new e();
             a.h.ty = "wp";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wd";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "st";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             var c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "th";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cl";
             a.h.ty2 = "cl2";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "craft";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "wp";
             var d = new e();
             d.h.x = 1;
             d.h.y = 0;
             d.h.ty = "wp";
             var f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenPickaxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             var l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StonePickaxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronPickaxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldPickaxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondPickaxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondAxe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenShovel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneShovel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronShovel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldShovel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondShovel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenSword";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneSword";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronSword";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldSword";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondSword";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "WoodenHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "StoneHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondHoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dr";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 1;
             f.h.y = 0;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "wp";
             var k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bbdr";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 0;
             f.h.ty = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "bb";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "idr";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 0;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "td1";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "oven";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "cs";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "cs";
             var h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "cs";
             var z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "jl";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "pk";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "th";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ladder";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "st";
             a.h.ty2 = "bb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 2;
             l.h.y = 0;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "st";
             k.h.ty2 = "bb";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "st";
             h.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "chest";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "wp";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "wp";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ib";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "ii";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "gi";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "db";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "dm";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lapb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "ll";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "clb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "cl";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lemonb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "lemon";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "slimeb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "slimeball";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ii";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ib";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gi";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dm";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "db";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ll";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "lapb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cl";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "clb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cy1";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cy";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "cy";
             d = new e();
             d.h.x = 1;
             d.h.y = 0;
             d.h.ty = "cy";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "cy";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lemon";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "lemonb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "slimeball";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "slimeb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gss";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gss";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gss";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "gss";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gss";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gss";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gss";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "gss";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bk";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bowl";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "snowblock";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "snowb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "snowb";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "snowb";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "snowb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ice";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "snowblock";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "snowblock";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "snowblock";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "snowblock";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fiber";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sw";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             for (var m = Object.keys(V.colors.h), A = m.length, p = 0; p < A; )
               (k = m[p++]),
                 "rainbow" != k &&
                   ((b = new e()),
                   (a = new e()),
                   (a.h.ty = "bed"),
                   (a.h.count = 1),
                   (a.h.damage = 0),
                   (c = new e()),
                   (c.h.type = k),
                   (a.h.extra = c),
                   (b.h.output = g.makeDynamicMap(a)),
                   (b.h.inputType = "relative"),
                   (d = new e()),
                   (d.h.x = 0),
                   (d.h.y = 0),
                   (d.h.ty = "cloth"),
                   (d.h.type = k),
                   (f = new e()),
                   (f.h.x = 1),
                   (f.h.y = 0),
                   (f.h.ty = "cloth"),
                   (f.h.type = k),
                   (l = new e()),
                   (l.h.x = 2),
                   (l.h.y = 0),
                   (l.h.ty = "cloth"),
                   (l.h.type = k),
                   (k = new e()),
                   (k.h.x = 0),
                   (k.h.y = 1),
                   (k.h.ty = "wp"),
                   (h = new e()),
                   (h.h.x = 1),
                   (h.h.y = 1),
                   (h.h.ty = "wp"),
                   (z = new e()),
                   (z.h.x = 2),
                   (z.h.y = 1),
                   (z.h.ty = "wp"),
                   (b.h.input = g.makeArrayOfDynamicMaps([d, f, l, k, h, z])),
                   this.recipes.push(b));
             b = new e();
             a = new e();
             a.h.ty = "bed";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             a = new e();
             a.h.white = !0;
             b.h.exclude = a;
             a = new e();
             a.h.ty = "bed";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "TNT";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sd";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "sd";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "gp";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "sd";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "gp";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "sd";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "gp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fiber";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "fiber";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "fiber";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fiber";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "rp";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "Shear";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "Shear";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = -1;
             c.h.y = 1;
             c.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bricks";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "brick";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "brick";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "brick";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "brick";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "clock";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "rsd";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "compass";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "rsd";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fas";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "flint";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fas";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "flint";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fas";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = -1;
             c.h.y = 1;
             c.h.ty = "flint";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fas";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "flint";
             c = new e();
             c.h.x = -1;
             c.h.y = 1;
             c.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rstorch";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "rsd";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "button";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lever";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "st";
             a.h.ty2 = "bb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "pp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "wpp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "light";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "rsd";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "rsd";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "glow";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "rsd";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "rsd";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "mobSpawner";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "oddrock";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "oddrock";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "oddrock";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "oddrock";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "dm";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "oddrock";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "oddrock";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "oddrock";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "oddrock";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ortorch";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "oddrock";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "portalstone";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "oddrock";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "oddrock";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "oddrock";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "oddrock";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ob";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "oddrock";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "oddrock";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "oddrock";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "oddrock";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "glow";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "yellowdust";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "yellowdust";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "yellowdust";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "yellowdust";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "note";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "rsd";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "wp";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "wp";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "wp";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "piston";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "cs";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "cs";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "rsd";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nugget";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cchicken";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ss";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sd";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sd";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "sd";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "sd";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bow";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fiber";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "fiber";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "fiber";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "st";
             k.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bow";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "fiber";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 2;
             d.h.y = 1;
             d.h.ty = "fiber";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 2;
             l.h.y = 2;
             l.h.ty = "fiber";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "st";
             k.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "arrow";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "flint";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "feather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "spear";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "flint";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "soup";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bowl", "ms1", "ms2"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bread";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wheat";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wheat";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wheat";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ap";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "gi";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "gi";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "gi";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nbr";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nbr";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "nbr";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "nbr";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rnb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nw";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nbr";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "nbr";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "nw";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rnb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nbr";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nw";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "nw";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "nbr";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "sb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "r";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "r";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "sign";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "wp";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "st";
             h.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gasd";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gap";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "sugar";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sc";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cake";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "mbk";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "mbk";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "mbk";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "sugar";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "egg";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "sugar";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "wheat";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "wheat";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "wheat";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "paper";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sc";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sc";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "sc";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "book";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["paper", "paper", "paper", "leather"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "books";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "book";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "book";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "book";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "wp";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "wp";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fiber";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "fiber";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "fiber";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "fiber";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "moss";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "moss";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "moss";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "moss";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "yellow";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fw1";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fw2";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "orange";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "yellow";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "yellow";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "yellow";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "red";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "orange";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "orange";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "orange";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "yellow";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "orange";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "yellow";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "red";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "blue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ll"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "brown";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ccb"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "green";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgreen";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgreen";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightgreen";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgreen";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightblue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["ll", "bonem"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightblue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightblue";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightblue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "blue";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray(["ll", g.makeDynamicMap(a)]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray(["ll", g.makeDynamicMap(a)]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "blue";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "purple";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ll"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray(["ll", g.makeDynamicMap(a)]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "blue";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "white";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "brown";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray(["ccb", g.makeDynamicMap(a)]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "magenta";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "purple";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "white";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "magenta";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "purple";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "magenta";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             c = new e();
             c.h.ty = "cloth";
             d = new e();
             d.h.type = "pink";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "magenta";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "magenta";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "gray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bonem", "ink"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "dye";
             c = new e();
             c.h.type = "gray";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray(["bonem", g.makeDynamicMap(a)]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dye";
             a.h.count = 2;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bonem", "ink", "ink"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "gray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "gray";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightgray";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "black";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "cloth";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ink"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "red";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "red";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "yellow";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "yellow";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "orange";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "orange";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "blue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ll"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightblue";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightblue";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "green";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "green";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgreen";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightgreen";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "cyan";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "cyan";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "magenta";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "magenta";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "pink";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "pink";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "purple";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "purple";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "brown";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ccb"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "bonem"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "gray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "gray";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "lightgray";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             c = new e();
             c.h.ty = "dye";
             d = new e();
             d.h.type = "lightgray";
             c.h.extra = d;
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "black";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "gs";
             a.h.extra = new e();
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ink"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdwp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdbooks";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "books";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdcs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdr";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdbricks";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bricks";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdsb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdnb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bddt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dt";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdob";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdgs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "keepextra";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gs";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdcloth";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "keepextra";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cloth";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bdbbb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bbb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "wp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdwp";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "books";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdbooks";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdcs";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "r";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdr";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bricks";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdbricks";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "sb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdsb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdnb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bddt";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ob";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdob";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gs";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "keepextra";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdgs";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "keepextra";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdcloth";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bbb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bdbbb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "leather";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "leather";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "leather";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "leather";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "leather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "leather";
             c = new e();
             c.h.x = 1;
             c.h.y = 2;
             c.h.ty = "leather";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "leather";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "leather";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "leather";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "leather";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "leather";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "leather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "leather";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "leather";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "leather";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "leather";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "leather";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "leather";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "leather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "leather";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "leather";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "leather";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "leather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 2;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "ii";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "IronShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 2;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "gi";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "gi";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "gi";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "gi";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "gi";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "GoldShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dm";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "dm";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 2;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dm";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "dm";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "dm";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "dm";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "dm";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dm";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "dm";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "dm";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "dm";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DiamondShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dm";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "dm";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "dm";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DragonCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dscl";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dscl";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dscl";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dscl";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "dscl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DragonShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dscl";
             c = new e();
             c.h.x = 1;
             c.h.y = 2;
             c.h.ty = "dscl";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dscl";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dscl";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "dscl";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "dscl";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "dscl";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "dscl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DragonPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dscl";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dscl";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "dscl";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "dscl";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "dscl";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "dscl";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "dscl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "DragonShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dscl";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "dscl";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "dscl";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "dscl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "SnowCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cloth";
             c = new e();
             c.h.x = -1;
             c.h.y = 1;
             c.h.ty = "cloth";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "cloth";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "cloth";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "AfroCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cloth";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cloth";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cloth";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "cloth";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "cloth";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "cloth";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "cloth";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "cloth";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bonem";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bone";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cookie";
             a.h.count = 16;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wheat";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ccb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wheat";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bp";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "blazer";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "eoe";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bp", "ep"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "raft";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "bb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "bb";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "goldn";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gi";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "goldn";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ironn";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ii";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "ironn";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gcarrot";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "goldn";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "goldn";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "goldn";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "goldn";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "carrot";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "goldn";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "goldn";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "goldn";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "goldn";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "capple";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "crml";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "crml";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ap";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "crml";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "hcl";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "egemd";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "egemd";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "egemd";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "egemd";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "dm";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "egemd";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "egemd";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "egemd";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "egemd";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "boneb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bone";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "bone";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "bone";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "bone";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bone";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "boneb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bshur";
             a.h.count = 8;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bone";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "bone";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "bone";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "bone";
             l = new e();
             l.h.x = 2;
             l.h.y = 2;
             l.h.ty = "bone";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bbb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "bb";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bbb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ccane";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sugar";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sugar";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "sugar";
             f = new e();
             f.h.x = 1;
             f.h.y = 2;
             f.h.ty = "sugar";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ccane";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sugar";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sugar";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "sugar";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "sugar";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ms";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "moss";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "moss";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "moss";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "moss";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "cs";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "moss";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "moss";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "moss";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "moss";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fr";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "st";
             a.h.ty2 = "bb";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "fiber";
             l = new e();
             l.h.x = 2;
             l.h.y = 2;
             l.h.ty = "fiber";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "coas";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "fr";
             a.h.damage = 0;
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "carrot";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfcs";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfr";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "r";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfbrick";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bricks";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "bricks";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "bricks";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfn";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "nb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfwp";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfsb";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "sb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "sb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfib";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ib";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ib";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ib";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfgb";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfdb";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "db";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "db";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "db";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfob";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ob";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ob";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfbr";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "br";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "br";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "br";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "halfbbb";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bbb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "bbb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "bbb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "staircs";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "cs";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "staircs";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "cs";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairr";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "r";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "r";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "r";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "r";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairr";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "r";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "r";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "r";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "r";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "r";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "r";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbrick";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bricks";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "bricks";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "bricks";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "bricks";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "bricks";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "bricks";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbrick";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "bricks";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "bricks";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "bricks";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "bricks";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "bricks";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "bricks";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairn";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "nb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "nb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "nb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "nb";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "nb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairn";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "nb";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "nb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "nb";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "nb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "nb";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "nb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairwp";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairwp";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairsb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "sb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "sb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "sb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "sb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "sb";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "sb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairsb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "sb";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "sb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "sb";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "sb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "sb";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "sb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairib";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ib";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "ib";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ib";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "ib";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "ib";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "ib";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairib";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "ib";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "ib";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ib";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "ib";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "ib";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "ib";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairgb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "gb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "gb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "gb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "gb";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "gb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairgb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "gb";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "gb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "gb";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "gb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "gb";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "gb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairdb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "db";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "db";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "db";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "db";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "db";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "db";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairdb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "db";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "db";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "db";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "db";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "db";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "db";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairob";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ob";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "ob";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ob";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "ob";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "ob";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairob";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "ob";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "ob";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ob";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "ob";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "ob";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbr";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "br";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "br";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "br";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "br";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "br";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "br";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbr";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "br";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "br";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "br";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "br";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "br";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "br";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbbb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "bbb";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "bbb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "bbb";
             f = new e();
             f.h.x = 0;
             f.h.y = 2;
             f.h.ty = "bbb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "bbb";
             k = new e();
             k.h.x = 2;
             k.h.y = 2;
             k.h.ty = "bbb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "stairbbb";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 2;
             a.h.y = 0;
             a.h.ty = "bbb";
             c = new e();
             c.h.x = 2;
             c.h.y = 1;
             c.h.ty = "bbb";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "bbb";
             f = new e();
             f.h.x = 2;
             f.h.y = 2;
             f.h.ty = "bbb";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "bbb";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "bbb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "enchant";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "book";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "dm";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "ob";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "dm";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "ob";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "ob";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dispense";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "bow";
             l.h.damage = 0;
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "cs";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "cs";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "rsd";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dropper";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "cs";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "cs";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "cs";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "cs";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "rsd";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "spiston";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "slimeball";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "piston";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cart";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartTNT";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "TNT";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartTNT";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "TNT";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "cart";
             b.h.input = g.makeArrayOfDynamicMaps([a, c]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartchest";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "chest";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartchest";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["chest", "cart"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartoven";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "oven";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cartoven";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["oven", "cart"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rail";
             a.h.count = 16;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "railp";
             a.h.count = 8;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gi";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "gi";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "gi";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "rsd";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "raila";
             a.h.count = 8;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "rstorch";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "ii";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "st";
             z.h.ty2 = "bb";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "raild";
             a.h.count = 8;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "pp";
             l = new e();
             l.h.x = 2;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 0;
             k.h.y = 2;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "rsd";
             z = new e();
             z.h.x = 2;
             z.h.y = 2;
             z.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lant";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "coral";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "coral";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "th";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "coral";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "coral";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ccake";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["cake", "ct"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cloth";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "rainbow";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "rainbow";
             b.h.input = [];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "magmac";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bp", "slimeball"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "icec";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bowl", "mbk", "sugar", "ice"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "PartyCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "rainbowcap";
             b.h.input = [];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "potion";
             a.h.count = 3;
             a.h.damage = 0;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gs";
             c = new e();
             c.h.x = 1;
             c.h.y = 1;
             c.h.ty = "gs";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "gs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "lade";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "potion";
             c = new e();
             c.h.type = "water";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "lemon", "sugar"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "orade";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "potion";
             c = new e();
             c.h.type = "water";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "or", "sugar"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "apade";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "potion";
             c = new e();
             c.h.type = "water";
             a.h.extra = c;
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "ap", "sugar"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "hay";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "wheat";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "mel";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "mels";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "wheat";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["hay"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "wseed";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["mels"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "pseed";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["pk"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fse";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["se", "sugar", "ms1"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "pkp";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["pk", "sugar", "egg"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gmels";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "goldn";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "goldn";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "goldn";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "goldn";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "mels";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "goldn";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "goldn";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "goldn";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "goldn";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "tob";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "topaz";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "topaz";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["tob"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "echest";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ob";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ob";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ob";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ob";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "eoe";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ob";
             h = new e();
             h.h.x = 0;
             h.h.y = 2;
             h.h.ty = "ob";
             z = new e();
             z.h.x = 1;
             z.h.y = 2;
             z.h.ty = "ob";
             m = new e();
             m.h.x = 2;
             m.h.y = 2;
             m.h.ty = "ob";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h, z, m]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "beetsoup";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "beet";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "beet";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "beet";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "beet";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "beet";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "beet";
             h = new e();
             h.h.x = 1;
             h.h.y = 2;
             h.h.ty = "bowl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cdt";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "gv";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "dt";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "dt";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "gv";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cdt";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dt";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "gv";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "gv";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "dt";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fnc";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "wp";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "st";
             c.h.ty2 = "bb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "wp";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "wp";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "st";
             l.h.ty2 = "bb";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "wp";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nfnc";
             a.h.count = 6;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "nb";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "nb";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "nb";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "nb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "fncg";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "st";
             a.h.ty2 = "bb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "wp";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "wp";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "st";
             k.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nfncg";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "st";
             a.h.ty2 = "bb";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "nb";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "st";
             d.h.ty2 = "bb";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "st";
             f.h.ty2 = "bb";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "nb";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "st";
             k.h.ty2 = "bb";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ibar";
             a.h.count = 16;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 0;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 1;
             l.h.y = 1;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 2;
             k.h.y = 1;
             k.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "carpet";
             a.h.count = 3;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "carpet";
             b.h.input = [];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "ssd";
             a.h.count = 2;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["n", "dt"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "magma";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "magmac";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "magmac";
             d = new e();
             d.h.x = 1;
             d.h.y = 0;
             d.h.ty = "magmac";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "magmac";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rabbitsoup";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bowl", "crabbit", "carrot", "bpotato", "ms1"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "rabbitsoup";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["bowl", "crabbit", "carrot", "bpotato", "ms2"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "leather";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "rleather";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "rleather";
             d = new e();
             d.h.x = 1;
             d.h.y = 0;
             d.h.ty = "rleather";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "rleather";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dsb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "dscl";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "dscl";
             d = new e();
             d.h.x = 1;
             d.h.y = 0;
             d.h.ty = "dscl";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "dscl";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "dscl";
             a.h.count = 4;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             b.h.input = ["dsb"];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "anvil";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ib";
             c = new e();
             c.h.x = 1;
             c.h.y = 0;
             c.h.ty = "ib";
             d = new e();
             d.h.x = 2;
             d.h.y = 0;
             d.h.ty = "ib";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "TOOL";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "fix";
             b.h.input = [];
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bl";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "slimeball";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "fiber";
             d = new e();
             d.h.x = 0;
             d.h.y = 2;
             d.h.ty = "fiber";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bl";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             a = new e();
             a.h.white = !0;
             b.h.exclude = a;
             a = new e();
             a.h.ty = "bl";
             c = new e();
             c.h.type = "white";
             a.h.extra = c;
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "bl";
             a.h.count = 1;
             a.h.damage = 0;
             c = new e();
             c.h.type = "ghast";
             a.h.extra = c;
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "contains";
             a = new e();
             a.h.ty = "bl";
             a.h.extra = new e();
             b.h.input = g.makeDynamicArray([g.makeDynamicMap(a), "gt"]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherShoes";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             b.h.exclude = [];
             a = new e();
             a.h.ty = "LeatherShoes";
             a.h.extra = new e();
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherPants";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             b.h.exclude = [];
             a = new e();
             a.h.ty = "LeatherPants";
             a.h.extra = new e();
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherShirt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             b.h.exclude = [];
             a = new e();
             a.h.ty = "LeatherShirt";
             a.h.extra = new e();
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "LeatherCap";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "dyekeepextra";
             b.h.exclude = [];
             a = new e();
             a.h.ty = "LeatherCap";
             a.h.extra = new e();
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "cauldron";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "ii";
             c = new e();
             c.h.x = 2;
             c.h.y = 0;
             c.h.ty = "ii";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "ii";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "ii";
             l = new e();
             l.h.x = 0;
             l.h.y = 2;
             l.h.ty = "ii";
             k = new e();
             k.h.x = 1;
             k.h.y = 2;
             k.h.ty = "ii";
             h = new e();
             h.h.x = 2;
             h.h.y = 2;
             h.h.ty = "ii";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l, k, h]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nwb";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "large box";
             b.h.input = "nw";
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "nw";
             a.h.count = 9;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "nwb";
             b.h.input = g.makeArrayOfDynamicMaps([a]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "brew";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "relative";
             a = new e();
             a.h.x = 0;
             a.h.y = 0;
             a.h.ty = "blazer";
             c = new e();
             c.h.x = -1;
             c.h.y = 1;
             c.h.ty = "cs";
             d = new e();
             d.h.x = 0;
             d.h.y = 1;
             d.h.ty = "cs";
             f = new e();
             f.h.x = 1;
             f.h.y = 1;
             f.h.ty = "cs";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f]);
             this.recipes.push(b);
             b = new e();
             a = new e();
             a.h.ty = "gdt";
             a.h.count = 1;
             a.h.damage = 0;
             a.h.extra = new e();
             b.h.output = g.makeDynamicMap(a);
             b.h.inputType = "absolute";
             a = new e();
             a.h.x = 1;
             a.h.y = 0;
             a.h.ty = "gi";
             c = new e();
             c.h.x = 0;
             c.h.y = 1;
             c.h.ty = "gi";
             d = new e();
             d.h.x = 1;
             d.h.y = 1;
             d.h.ty = "dt";
             f = new e();
             f.h.x = 2;
             f.h.y = 1;
             f.h.ty = "gi";
             l = new e();
             l.h.x = 1;
             l.h.y = 2;
             l.h.ty = "gi";
             b.h.input = g.makeArrayOfDynamicMaps([a, c, d, f, l]);
             this.recipes.push(b);
           }
         },
         pickCombinedColor: function (b, a) {
           return Object.prototype.hasOwnProperty.call(V.colors.h, b) && V.colors.h[b].h.combines.exists(a) ? H.__cast(V.colors.h[b].h.combines, e).h[a] : 0.5 > Math.random() ? b : a;
         },
         getItemName: function (b) {
           if (null == b) return "Nothing";
           var a = null != q.get(b[0], "name") ? q.get(b[0], "name") : "Nothing";
           null == b[3] && (b[3] = new e());
           var c = b[3];
           if (null != c.h.nameChange && "" != c.h.nameChange) return c.h.nameChange;
           switch (b[0]) {
             case "LeatherCap":
             case "LeatherPants":
             case "LeatherShirt":
             case "LeatherShoes":
             case "bdgs":
             case "gs":
               Object.prototype.hasOwnProperty.call(c.h, "type") && Object.prototype.hasOwnProperty.call(V.colors.h, c.h.type) && "rainbow" != c.h.type && (a = E.string(V.colors.h[c.h.type].h.name) + " " + a);
               break;
             case "bdcloth":
             case "carpet":
             case "cloth":
             case "dye":
               Object.prototype.hasOwnProperty.call(c.h, "type") && Object.prototype.hasOwnProperty.call(V.colors.h, c.h.type) && (a = E.string(V.colors.h[c.h.type].h.name) + " " + a);
               break;
             case "bl":
               Object.prototype.hasOwnProperty.call(c.h, "type") && ("ghast" == c.h.type ? (a = "Ghast " + a) : Object.prototype.hasOwnProperty.call(V.colors.h, c.h.type) && (a = E.string(V.colors.h[c.h.type].h.name) + " " + a));
               break;
             case "megg":
               a = "Unknown Spawn Egg";
               Object.prototype.hasOwnProperty.call(c.h, "type") && null != K.matchMobID(c.h.type) && null != K.getMobName(c.h.type) && (a = K.getMobName(c.h.type) + " Egg");
               break;
             case "mh":
               a = "Mob Head";
               if (Object.prototype.hasOwnProperty.call(c.h, "type"))
                 switch (c.h.type) {
                   case "creeper":
                   case "enderdragon":
                   case "skeleton":
                   case "zombie":
                     a = E.string(this.world.mobData.h[c.h.type].h.name) + " Head";
                 }
               break;
             case "potion":
               Object.prototype.hasOwnProperty.call(c.h, "type") && null != this.potionData.h[c.h.type] && (a = ("splash" == c.h.category ? "Splash " : "") + E.string(this.potionData.h[c.h.type].h.name));
           }
           return a;
         },
         initPotionData: function () {
           var b = new e();
           b.h.name = "Empty Bottle";
           b.h.r = 1;
           b.h.g = 1;
           b.h.b = 1;
           b.h.recipes = new e();
           this.potionData.h.empty = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Bottle of Water";
           b.h.r = 0.5;
           b.h.g = 0.8;
           b.h.b = 1;
           var a = new e();
           a.h.nw = "awkward";
           a.h.se = "mundane";
           a.h.bp = "mundane";
           a.h.gt = "mundane";
           a.h.rfoot = "mundane";
           a.h.gmels = "mundane";
           a.h.sugar = "mundane";
           a.h.magmac = "mundane";
           a.h.rsd = "mundane";
           a.h.yellowdust = "thick";
           a.h.fse = "weakness";
           b.h.recipes = a;
           this.potionData.h.water = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Awkward Potion";
           b.h.r = 0.5;
           b.h.g = 0.8;
           b.h.b = 1;
           a = new e();
           a.h.gcarrot = "nightvision";
           a.h.magmac = "fireresistance";
           a.h.rfoot = "leaping";
           a.h.sugar = "swiftness";
           a.h.puff = "waterbreathing";
           a.h.gmels = "healing";
           a.h.se = "poison";
           a.h.gt = "regeneration";
           a.h.bp = "strength";
           b.h.recipes = a;
           this.potionData.h.awkward = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Night Vision Potion";
           b.h.r = 0.2;
           b.h.g = 0.5;
           b.h.b = 0.7;
           a = new e();
           a.h.type = "nightvision";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "invisibility";
           a.h.rsd = "nightvision+";
           b.h.recipes = a;
           this.potionData.h.nightvision = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Night Vision Potion +";
           b.h.r = 0.2;
           b.h.g = 0.5;
           b.h.b = 0.7;
           a = new e();
           a.h.type = "nightvision";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "invisibility+";
           b.h.recipes = a;
           this.potionData.h["nightvision+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Invisibility Potion";
           b.h.r = 0.5;
           b.h.g = 0.5;
           b.h.b = 0.6;
           a = new e();
           a.h.type = "invisibility";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "invisibility+";
           b.h.recipes = a;
           this.potionData.h.invisibility = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Invisibility Potion +";
           b.h.r = 0.5;
           b.h.g = 0.5;
           b.h.b = 0.6;
           a = new e();
           a.h.type = "invisibility";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["invisibility+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Fire Resistance Potion";
           b.h.r = 1;
           b.h.g = 0.7;
           b.h.b = 0.4;
           a = new e();
           a.h.type = "fireresistance";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "fireresistance+";
           b.h.recipes = a;
           this.potionData.h.fireresistance = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Fire Resistance Potion +";
           b.h.r = 1;
           b.h.g = 0.7;
           b.h.b = 0.4;
           a = new e();
           a.h.type = "fireresistance";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["fireresistance+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Leaping Potion";
           b.h.r = 0.3;
           b.h.g = 1;
           b.h.b = 0.6;
           a = new e();
           a.h.type = "jumpboost";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "slowness";
           a.h.rsd = "leaping+";
           a.h.yellowdust = "leaping2";
           b.h.recipes = a;
           this.potionData.h.leaping = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Leaping Potion +";
           b.h.r = 0.3;
           b.h.g = 1;
           b.h.b = 0.6;
           a = new e();
           a.h.type = "jumpboost";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "slowness+";
           b.h.recipes = a;
           this.potionData.h["leaping+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Leaping Potion II";
           b.h.r = 0.3;
           b.h.g = 1;
           b.h.b = 0.6;
           a = new e();
           a.h.type = "jumpboost";
           a.h.duration = 90;
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h.leaping2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Slowness Potion";
           b.h.r = 0.35;
           b.h.g = 0.4;
           b.h.b = 0.5;
           a = new e();
           a.h.type = "slowness";
           a.h.duration = 90;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "slowness+";
           b.h.recipes = a;
           this.potionData.h.slowness = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Slowness Potion +";
           b.h.r = 0.35;
           b.h.g = 0.4;
           b.h.b = 0.5;
           a = new e();
           a.h.type = "slowness";
           a.h.duration = 240;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["slowness+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Swiftness Potion";
           b.h.r = 0.4;
           b.h.g = 0.55;
           b.h.b = 0.65;
           a = new e();
           a.h.type = "speed";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "slowness";
           a.h.rsd = "swiftness+";
           a.h.yellowdust = "swiftness2";
           b.h.recipes = a;
           this.potionData.h.swiftness = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Swiftness Potion +";
           b.h.r = 0.4;
           b.h.g = 0.55;
           b.h.b = 0.65;
           a = new e();
           a.h.type = "speed";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "slowness+";
           b.h.recipes = a;
           this.potionData.h["swiftness+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Swiftness Potion II";
           b.h.r = 0.4;
           b.h.g = 0.55;
           b.h.b = 0.65;
           a = new e();
           a.h.type = "speed";
           a.h.duration = 90;
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h.swiftness2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Water Breathing Potion";
           b.h.r = 0.55;
           b.h.g = 0.6;
           b.h.b = 0.45;
           a = new e();
           a.h.type = "waterbreathing";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "waterbreathing+";
           b.h.recipes = a;
           this.potionData.h.waterbreathing = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Water Breathing Potion +";
           b.h.r = 0.55;
           b.h.g = 0.6;
           b.h.b = 0.45;
           a = new e();
           a.h.type = "waterbreathing";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["waterbreathing+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Healing Potion";
           b.h.r = 0.8;
           b.h.g = 0.1;
           b.h.b = 0.1;
           a = new e();
           a.h.type = "instanthealth";
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "harming";
           a.h.yellowdust = "healing2";
           b.h.recipes = a;
           this.potionData.h.healing = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Healing Potion II";
           b.h.r = 0.8;
           b.h.g = 0.1;
           b.h.b = 0.1;
           a = new e();
           a.h.type = "instanthealth";
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "harming2";
           b.h.recipes = a;
           this.potionData.h.healing2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Harming Potion";
           b.h.r = 0.1;
           b.h.g = 0.05;
           b.h.b = 0.05;
           a = new e();
           a.h.type = "instantdamage";
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.yellowdust = "harming2";
           b.h.recipes = a;
           this.potionData.h.harming = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Harming Potion II";
           b.h.r = 0.1;
           b.h.g = 0.05;
           b.h.b = 0.05;
           a = new e();
           a.h.type = "instantdamage";
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h.harming2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Poison Potion";
           b.h.r = 0.3;
           b.h.g = 0.55;
           b.h.b = 0.2;
           a = new e();
           a.h.type = "poison";
           a.h.duration = 45;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "harming";
           a.h.rsd = "poison+";
           a.h.yellowdust = "poison2";
           b.h.recipes = a;
           this.potionData.h.poison = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Poison Potion +";
           b.h.r = 0.3;
           b.h.g = 0.55;
           b.h.b = 0.2;
           a = new e();
           a.h.type = "poison";
           a.h.duration = 90;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["poison+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Poison Potion II";
           b.h.r = 0.3;
           b.h.g = 0.55;
           b.h.b = 0.2;
           a = new e();
           a.h.type = "poison";
           a.h.duration = 21;
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.fse = "harming2";
           b.h.recipes = a;
           this.potionData.h.poison2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Regeneration Potion";
           b.h.r = 0.8;
           b.h.g = 0.4;
           b.h.b = 0.1;
           a = new e();
           a.h.type = "regeneration";
           a.h.duration = 45;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "regeneration+";
           a.h.yellowdust = "regeneration2";
           b.h.recipes = a;
           this.potionData.h.regeneration = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Regeneration Potion +";
           b.h.r = 0.8;
           b.h.g = 0.4;
           b.h.b = 0.1;
           a = new e();
           a.h.type = "regeneration";
           a.h.duration = 90;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["regeneration+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Regeneration Potion II";
           b.h.r = 0.8;
           b.h.g = 0.4;
           b.h.b = 0.1;
           a = new e();
           a.h.type = "regeneration";
           a.h.duration = 21;
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h.regeneration2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Strength Potion";
           b.h.r = 0.6;
           b.h.g = 0;
           b.h.b = 0;
           a = new e();
           a.h.type = "strength";
           a.h.duration = 180;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "strength+";
           a.h.yellowdust = "strength2";
           b.h.recipes = a;
           this.potionData.h.strength = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Strength Potion +";
           b.h.r = 0.6;
           b.h.g = 0;
           b.h.b = 0;
           a = new e();
           a.h.type = "strength";
           a.h.duration = 480;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["strength+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Strength Potion II";
           b.h.r = 0.6;
           b.h.g = 0;
           b.h.b = 0;
           a = new e();
           a.h.type = "strength";
           a.h.duration = 90;
           a.h.level = 2;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h.strength2 = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Weakness Potion";
           b.h.r = 0.3;
           b.h.g = 3;
           b.h.b = 4;
           a = new e();
           a.h.type = "weakness";
           a.h.duration = 90;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           a = new e();
           a.h.rsd = "weakness+";
           b.h.recipes = a;
           this.potionData.h.weakness = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Weakness Potion +";
           b.h.r = 0.3;
           b.h.g = 3;
           b.h.b = 4;
           a = new e();
           a.h.type = "weakness";
           a.h.duration = 240;
           a.h.level = 1;
           b.h.effects = [g.makeDynamicMap(a)];
           b.h.recipes = new e();
           this.potionData.h["weakness+"] = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Mundane Potion";
           b.h.r = 0.5;
           b.h.g = 0.8;
           b.h.b = 0.85;
           b.h.recipes = new e();
           this.potionData.h.mundane = g.makeDynamicMap(b);
           b = new e();
           b.h.name = "Thick Potion";
           b.h.r = 0.5;
           b.h.g = 0.8;
           b.h.b = 0.7;
           b.h.recipes = new e();
           this.potionData.h.thick = g.makeDynamicMap(b);
         },
         hasEffect: function (b) {
           return Object.prototype.hasOwnProperty.call(this.world.effects.h, b) ? !0 : !1;
         },
         initEffects: function () {
           var b = new e();
           b.h.name = "Regeneration";
           b.h.r = 0.8;
           b.h.g = 0.4;
           b.h.b = 0.1;
           b.h.strengthType = "hearts";
           b.h.perLevel = 30;
           this.effectData.h.regeneration = b;
           b = new e();
           b.h.name = "Weakness";
           b.h.r = 0.3;
           b.h.g = 3;
           b.h.b = 4;
           b.h.strengthType = "damage";
           b.h.perLevel = -4;
           this.effectData.h.weakness = b;
           b = new e();
           b.h.name = "Strength";
           b.h.r = 0.6;
           b.h.g = 0;
           b.h.b = 0;
           b.h.strengthType = "damage";
           b.h.perLevel = 3;
           this.effectData.h.strength = b;
           b = new e();
           b.h.name = "Speed";
           b.h.r = 0.4;
           b.h.g = 0.55;
           b.h.b = 0.65;
           b.h.strengthType = "percent";
           b.h.perLevel = 20;
           this.effectData.h.speed = b;
           b = new e();
           b.h.name = "Instant Health";
           b.h.r = 0.8;
           b.h.g = 0.1;
           b.h.b = 0.1;
           b.h.strengthType = "heartsexponential";
           b.h.perLevel = 2;
           this.effectData.h.instanthealth = b;
           b = new e();
           b.h.name = "Instant Damage";
           b.h.r = 0.1;
           b.h.g = 0.05;
           b.h.b = 0.05;
           b.h.strengthType = "heartsexponential";
           b.h.perLevel = -3;
           this.effectData.h.instantdamage = b;
           b = new e();
           b.h.name = "Slowness";
           b.h.r = 0.35;
           b.h.g = 0.4;
           b.h.b = 0.5;
           b.h.strengthType = "percent";
           b.h.perLevel = -20;
           this.effectData.h.slowness = b;
           b = new e();
           b.h.name = "Poison";
           b.h.r = 0.3;
           b.h.g = 0.55;
           b.h.b = 0.2;
           b.h.strengthType = "none";
           this.effectData.h.poison = b;
           b = new e();
           b.h.name = "Fire Resistance";
           b.h.r = 1;
           b.h.g = 0.7;
           b.h.b = 0.4;
           b.h.strengthType = "none";
           this.effectData.h.fireresistance = b;
           b = new e();
           b.h.name = "Water Breathing";
           b.h.r = 0.55;
           b.h.g = 0.6;
           b.h.b = 0.45;
           b.h.strengthType = "none";
           this.effectData.h.waterbreathing = b;
           b = new e();
           b.h.name = "Jump Boost";
           b.h.r = 0.3;
           b.h.g = 1;
           b.h.b = 0.6;
           b.h.strengthType = "none";
           this.effectData.h.jumpboost = b;
           b = new e();
           b.h.name = "Invisibility";
           b.h.r = 0.5;
           b.h.g = 0.5;
           b.h.b = 0.6;
           b.h.strengthType = "none";
           this.effectData.h.invisibility = b;
           b = new e();
           b.h.name = "Night Vision";
           b.h.r = 0.2;
           b.h.g = 0.5;
           b.h.b = 0.7;
           b.h.strengthType = "none";
           this.effectData.h.nightvision = b;
           b = new e();
           b.h.name = "Hunger";
           b.h.r = 0.5;
           b.h.g = 0.7;
           b.h.b = 0.2;
           b.h.strengthType = "none";
           this.effectData.h.hunger = b;
         },
         emptyPotion: function (b) {
           return null == b || "undefined" == b || "" == b || "empty" == b ? !0 : !1;
         },
         isEmpty: function (b) {
           null == b && (b = -1);
           -1 == b && (b = this.world.selectedInventoryItem);
           if (null == this.world.inventoryList[b]) return (this.world.inventoryList[b] = g.emptyItem()), !0;
           var a = this.world.inventoryList[b][0];
           return "air" == a ? !0 : null == a || "undefined" == a || "air" == a || "" == a || "na" == a || 0 == H.__cast(this.world.inventoryList[b], Array)[1] ? ((this.world.inventoryList[b] = g.emptyItem()), !0) : !1;
         },
         pickRandomEnchant: function (b) {
           var a = "",
             c = 0;
           b = Object.keys(b.h);
           for (var d = b.length, f = 0; f < d; ) {
             var e = b[f++];
             Math.random() < 1 / ++c && (a = e);
           }
           return a;
         },
         enchant: function (b, a, c, d) {
           null == d && (d = !1);
           null == c && (c = 0);
           var f = c;
           c = Object.create(null);
           for (var e = Object.create(null), k = 0; 16 > k; ) {
             ++k;
             var h = 0,
               z = "";
             if (1 <= f) {
               var m = q.get(b, "enchantType");
               if (null == m) return;
               "Random" == m && (m = this.enchantBookTypesList[Math.floor(Math.random() * this.enchantBookTypesList.length)]);
               for (var A = 0; 6 > A; ) {
                 ++A;
                 var p = this.pickRandomEnchant(g.enchantTypes.h[m]);
                 g.enchantTypes.h[m].h[p] <= f &&
                   g.enchantTypes.h[m].h[p] > h &&
                   null == e[I.substr(p, 0, p.length - 1)] &&
                   !(
                     ("silkTouch" == p && null != e.fortune) ||
                     ("fortune" == I.substr(p, 0, 7) && null != c.silkTouch) ||
                     ("frostWalker" == I.substr(p, 0, 11) && null != e.depthStrider) ||
                     ("depthStrider" == I.substr(p, 0, 12) && null != c.frostWalker)
                   ) &&
                   ((h = g.enchantTypes.h[m].h[p]), (z = p));
               }
               c[z] = h;
               e[I.substr(z, 0, z.length - 1)] = h;
               f -= h;
               10 == this.inventario.currentFrame && (this.inventario.unArrange(0), this.inventario.unArrange(1), this.inventario.unArrange(2));
             }
           }
           b = Object.keys(c);
           f = b.length;
           for (e = 0; e < f; ) (k = b[e++]), d && (this.world.experience = Math.floor(Math.max(0, this.world.experience - 100 * c[k]))), (a.h[k] = "enchant");
         },
         getBlockColor: function (b, a) {
           var c = this.world.getFG(b, a);
           if (null != q.get(c, "color"))
             if ("state" == q.get(c, "color")) {
               c = E.string(this.world.states.h["blockX" + b + "Y" + a]);
               if ("rainbow" == c) return [Math.random(), Math.random(), Math.random()];
               if (Object.prototype.hasOwnProperty.call(V.colors.h, c)) return [V.colors.h[c].h.r, V.colors.h[c].h.g, V.colors.h[c].h.b];
             } else if (((b = V.colors), (a = q.get(c, "color")), null != b.h[a])) {
               b = V.colors;
               a = q.get(c, "color");
               var d = b.h[a].h.r;
               b = V.colors;
               a = q.get(c, "color");
               var f = b.h[a].h.g;
               b = V.colors;
               a = q.get(c, "color");
               return [d, f, b.h[a].h.b];
             }
           return [1, 1, 1];
         },
         mineBlock: function (b, a, c, d) {
           var f = "blockX" + b + "Y" + a,
             l = this.world.getFG(b, a);
           this.currentlyMiningBlock[0] == b && this.currentlyMiningBlock[1] == a && ((this.currentlyMining = ""), (this.currentlyMiningBlock = [-1e4, -1e4]), (this.miningAnimation = !1));
           if ("air" != l && "undefined" != l && ("wd1" == l && this.unlockAchieve(0), "br" != l || this.world.gamemode == U.gamemodes.h.CREATIVE)) {
             var k = !1,
               g = this.world.get_selectedInventoryItemExtra();
             Object.prototype.hasOwnProperty.call(g.h, "silkTouch") && (k = !0);
             var z = 0;
             g = this.world.get_selectedInventoryItemExtra();
             Object.prototype.hasOwnProperty.call(g.h, "fortune3")
               ? (z = 3)
               : ((g = this.world.get_selectedInventoryItemExtra()),
                 Object.prototype.hasOwnProperty.call(g.h, "fortune2") ? (z = 2) : ((g = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(g.h, "fortune1") && (z = 1)));
             null != this.world.getBlock(b, a + 1, !1) && this.world.getBlock(b, a + 1).inter();
             this.miningAnimation = !1;
             "air" != l && this.blockSound(b, a, b + 0.5 - this.world.worldX, -(a + 0.5) - this.world.worldY);
             var m = !1;
             if ("ice" == l || "fice" == l) this.requestSound("glass" + (((3 * Math.random()) | 0) + 1), b + 0.5 - this.world.worldX, -(a + 0.5) - this.world.worldY), (m = !0);
             var A = !1,
               p = !1;
             if (!c) {
               g = new h(b + 0.5, 0);
               c = new h(-(a + 0.5), 0);
               var n = new e(),
                 t = this.getBlockColor(b, a);
               n.h.color = t;
               this.addParticles("mining", 0, 5, g, c, !1, n);
               if ("snow" == l) "Shear" == this.world.get_selectedInventoryItemType() ? this.damageTool() : "Shovel" != I.substr(this.world.get_selectedInventoryItemType(), -6, 6) && (m = !0);
               else if ("lgr" == l) "Shear" == this.world.get_selectedInventoryItemType() && (this.damageTool(), (A = !0));
               else if ("moss" == l) "Shear" != this.world.get_selectedInventoryItemType() ? (m = !0) : this.damageTool();
               else if ("web" == l)
                 if (k) this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("web", b + 0.5, -(a + 0.5), 1, null, null), (m = !0);
                 else {
                   if (0 != z || 0 < ((Math.random() * (z + 1)) | 0)) this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("fiber", b + 0.5, -(a + 0.5), ((Math.random() * z) | 0) + 1, null, null), (m = !0);
                 }
               else if ("dt" == l) 1 == this.world.states.h[f] && k && (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("dtg", b + 0.5, -(a + 0.5), 1, null, null), (m = !0));
               else if ("myc" == l || "mobSpawner" == l || "msb1" == l || "msb2" == l || "msb3" == l || "msb4" == l) k && (A = !0);
               else if ("shrub" == l) "Shear" == this.world.get_selectedInventoryItemType() && ((A = !0), this.damageTool()), k && (A = !0);
               else if ("ds" == l)
                 "Shear" == this.world.get_selectedInventoryItemType() && ((A = !0), this.damageTool()),
                   k && (A = !0),
                   A || this.world.gamemode == U.gamemodes.h.CREATIVE || this.addDrop("st", b + 0.5, -(a + 0.5), ((2 * Math.random()) | 0) + 1 + ((Math.random() * (z + 1)) | 0), null, null);
               else if ("lv" == l) {
                 if ("Shear" == this.world.get_selectedInventoryItemType() || k) (p = !0), this.damageTool();
               } else
                 "lv1" == l || "lv2" == l || "lv3" == l || "lv4" == l
                   ? k && (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, null), (m = !0))
                   : "snowblock" == l
                   ? "Shear" == this.world.get_selectedInventoryItemType() || "Shovel" == I.substr(this.world.get_selectedInventoryItemType(), -6, 6)
                     ? ((A = !0), this.damageTool())
                     : (m = !0)
                   : "boneb" == l
                   ? k
                     ? (A = !0)
                     : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("bone", b + 0.5, -(a + 0.5), ((2 * Math.random()) | 0) + 2 + ((Math.random() * (z + 1)) | 0), null, null), (m = !0))
                   : "books" == l
                   ? k
                     ? (A = !0)
                     : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("book", b + 0.5, -(a + 0.5), 3, null, null), (m = !0))
                   : "gs" == l || "bdgs" == l
                   ? (this.requestSound("glass" + (((3 * Math.random()) | 0) + 1), b + 0.5 - this.world.worldX, -(a + 0.5) - this.world.worldY),
                     k ? (A = !0) : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("gss", b + 0.5, -(a + 0.5), Math.min(4, ((2 * Math.random()) | 0) + 1 + ((Math.random() * z) | 0)) | 0, null, null), (m = !0)))
                   : "glow" == l
                   ? (this.requestSound("glass" + (((3 * Math.random()) | 0) + 1), b + 0.5 - this.world.worldX, -(a + 0.5) - this.world.worldY),
                     k ? (A = !0) : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("yellowdust", b + 0.5, -(a + 0.5), Math.max(4, ((4 * Math.random()) | 0) + 1 + ((Math.random() * (z + 1)) | 0)) | 0, null, null), (m = !0)))
                   : "cy1" == l
                   ? (k ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("cy1", b + 0.5, -(a + 0.5), 1, null, null) : this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("cy", b + 0.5, -(a + 0.5), 4, null, null),
                     (m = !0))
                   : null != q.get(l, "dropsWith") &&
                     ((g = H.__cast(q.get(l, "dropsWith"), e)),
                     (c = this.world.get_selectedInventoryItemType()),
                     null == g.h[c]
                       ? (m = !0)
                       : "clore" == l
                       ? k
                         ? (A = !0)
                         : (0 != z && ((Math.random() * z) | 0) < z - 1 && this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("cl", b + 0.5, -(a + 0.5), 1 + Math.ceil(((Math.random() * (z + 1)) | 0) / 1.5), null, null),
                           this.dropXP(b + 0.5, -(a + 0.5), (2 * Math.random() + 3) | 0))
                       : "r" == l
                       ? k && (A = !0)
                       : "os" == l
                       ? k
                         ? (A = !0)
                         : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("oddrock", b + 0.5, -(a + 0.5), 3 + ((Math.random() * (z + 1)) | 0), null, null),
                           (m = !0),
                           this.dropXP(b + 0.5, -(a + 0.5), (3 * Math.random() + 4) | 0))
                       : "ob" == l
                       ? this.unlockAchieve(27)
                       : "dmore" == l
                       ? (this.unlockAchieve(29),
                         k
                           ? (A = !0)
                           : (0 != z && ((Math.random() * z) | 0) < z - 1 && this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("dm", b + 0.5, -(a + 0.5), 1 + Math.ceil(((Math.random() * (z + 1)) | 0) / 1.5), null, null),
                             this.dropXP(b + 0.5, -(a + 0.5), (3 * Math.random() + 10) | 0)))
                       : "egem" == l
                       ? k
                         ? (A = !0)
                         : (this.dropXP(b + 0.5, -(a + 0.5), (2 * Math.random() + 6) | 0),
                           0 != z &&
                             ((Math.random() * z) | 0) < z - 1 &&
                             (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("egemd", b + 0.5, -(a + 0.5), 1 + Math.ceil(((Math.random() * (z + 1)) | 0) / 2), null, null), (m = !0)))
                       : "gd" == l
                       ? this.unlockAchieve(28)
                       : "to" == l
                       ? k
                         ? (A = !0)
                         : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("topaz", b + 0.5, -(a + 0.5), ((2 * Math.random()) | 0) + 1 + ((Math.random() * (z + 1)) | 0), null, null),
                           (m = !0),
                           this.dropXP(b + 0.5, -(a + 0.5), (2 * Math.random() + 4) | 0))
                       : "lap" == l
                       ? k
                         ? (A = !0)
                         : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("ll", b + 0.5, -(a + 0.5), ((6 * Math.random()) | 0) + 1 + 2 * ((Math.random() * (z + 1)) | 0), null, null),
                           (m = !0),
                           this.dropXP(b + 0.5, -(a + 0.5), (2 * Math.random() + 4) | 0))
                       : "rs" == l &&
                         (k
                           ? (A = !0)
                           : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("rsd", b + 0.5, -(a + 0.5), 4 + ((2 * Math.random()) | 0) + 2 * ((Math.random() * (z + 1)) | 0), null, null),
                             (m = !0),
                             this.dropXP(b + 0.5, -(a + 0.5), (3 * Math.random() + 4) | 0))));
               1 == this.world.get_selectedInventoryTool() &&
                 "Shear" != this.world.get_selectedInventoryItemType() &&
                 (null != q.get(l, "mining") ? ((g = H.__cast(q.get(l, "mining"), e)), (c = this.world.get_selectedInventoryItemType()), (c = null != g.h[c])) : (c = !1),
                 c ? (g = !0) : null != q.get(l, "dropsWith") ? ((g = H.__cast(q.get(l, "dropsWith"), e)), (c = this.world.get_selectedInventoryItemType()), (g = null != g.h[c])) : (g = !1),
                 g && this.damageTool());
             }
             "seed" == l
               ? 7 == this.world.wheat.h[f] &&
                 (this.unlockAchieve(23),
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (this.addDrop("wheat", b + 0.5, -(a + 0.5), 1, null, null),
                   2 <= ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0) && this.addDrop("seed", b + 0.5, -(a + 0.5), 1, null, null),
                   2 <= ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0) && this.addDrop("seed", b + 0.5, -(a + 0.5), 1, null, null)))
               : "mel" == l
               ? k
                 ? (A = !0)
                 : (this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("mels", b + 0.5, -(a + 0.5), Math.min(9, ((5 * Math.random()) | 0) + 3 + ((Math.random() * (z + 1)) | 0)) | 0, null, null), (m = !0))
               : "carrot" == l
               ? ((6 == this.world.wheat.h[f] && 2 <= ((3 * Math.random() + ((Math.random() * z + 1) | 0)) | 0)) || 7 == this.world.wheat.h[f]) &&
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 this.addDrop("carrot", b + 0.5, -(a + 0.5), 1, null, null)
               : "potato" == l
               ? ((6 == this.world.wheat.h[f] && 2 <= ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0)) || 7 == this.world.wheat.h[f]) &&
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 (0.2 > Math.random() && this.addDrop("ppotato", b + 0.5, -(a + 0.5), 1, null, null), this.addDrop("potato", b + 0.5, -(a + 0.5), ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0) + 1, null, null))
               : "nw" == l
               ? ((6 == this.world.wheat.h[f] && 2 <= ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0)) || 7 == this.world.wheat.h[f]) &&
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 this.addDrop("nw", b + 0.5, -(a + 0.5), ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0) + 1, null, null)
               : "bseed" == l &&
                 ((6 == this.world.wheat.h[f] && 2 <= ((3 * Math.random() + ((Math.random() * (z + 1)) | 0)) | 0)) || 7 == this.world.wheat.h[f]) &&
                 this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 this.addDrop("beet", b + 0.5, -(a + 0.5), ((4 * Math.random()) | 0) + 1, null, null);
             0 == m &&
               (null != q.get(l, "dropDifferent") && 1 != A
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   "na" != q.get(l, "dropDifferent") &&
                   ("bed1" == l || "bed2" == l
                     ? ((g = q.get(l, "dropDifferent")), (n = new e()), (n.h.type = this.world.states.h[f]), this.addDrop(g, b + 0.5, -(a + 0.5), 1, null, n))
                     : this.addDrop(q.get(l, "dropDifferent"), b + 0.5, -(a + 0.5), 1, null, null))
                 : "gs" == l || "bdgs" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (this.world.states.h[f] ? ((n = new e()), (n.h.type = this.world.states.h[f]), this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, n)) : this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, null))
                 : "lv" == l
                 ? 1 == p
                   ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, null)
                   : 1 == ((Math.random() * (10 - 2 * ((Math.random() * (z + 1)) | 0))) | 0)
                   ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("sl", b + 0.5, -(a + 0.5), 1, null, null)
                   : this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("na", b + 0.5, -(a + 0.5), 1, null, null)
                 : "lgr" == l
                 ? k || A
                   ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, null)
                   : this.world.gamemode != U.gamemodes.h.CREATIVE &&
                     (4 <= ((Math.random() * (5 + ((Math.random() * (z + 1)) | 0))) | 0) && this.addDrop("seed", b + 0.5, -(a + 0.5), 1, null, null),
                     29 <= ((Math.random() * (30 + 2 * ((Math.random() * (z + 1)) | 0))) | 0) && this.addDrop("bseed", b + 0.5, -(a + 0.5), 1, null, null),
                     69 <= ((Math.random() * (70 + 3 * ((Math.random() * (z + 1)) | 0))) | 0) && this.addDrop("pseed", b + 0.5, -(a + 0.5), 1, null, null),
                     89 <= ((Math.random() * (90 + 3 * ((Math.random() * (z + 1)) | 0))) | 0) && this.addDrop("wseed", b + 0.5, -(a + 0.5), 1, null, null))
                 : "gv" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   (k || A || 1 != ((Math.random() * (10 - 2 * ((Math.random() * (z + 1)) | 0))) | 0) ? this.addDrop("gv", b + 0.5, -(a + 0.5), 1, null, null) : this.addDrop("flint", b + 0.5, -(a + 0.5), 1, null, null))
                 : "carpet" == l || "cloth" == l || "bdcloth" == l || "mh" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE && ((n = new e()), (n.h.type = this.world.states.h[f]), this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, n))
                 : "chest" == l || "oven" == l || "brew" == l || "enchant" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE && ("" == this.world.states.h[f] ? (g = null) : ((n = new e()), (n.h.nameChange = this.world.states.h[f]), (g = n)), this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, g))
                 : "dropper" == l || "dispense" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE &&
                   ("" == this.world.states.h[f + "_3"] ? (g = null) : ((n = new e()), (n.h.nameChange = this.world.states.h[f + "_3"]), (g = n)), this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, g))
                 : "anvil" == l
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE && ((n = new e()), (n.h.damage = this.world.states.h[f]), this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, n))
                 : this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(l, b + 0.5, -(a + 0.5), 1, null, null));
             1 == this.requestRemove(b, a, !0, d) && this.world.setFG(b, a, "air");
             if ("ice" == l || "fice" == l || "sw" == l) this.world.setFG(b, a, "wr"), this.makeBlock(b, a);
           }
         },
         itemFromBlock: function (b, a) {
           var c = this.world.getFG(b, a);
           if ("air" == c) return g.emptyItem();
           b = "blockX" + b + "Y" + a;
           a = new e();
           switch (c) {
             case "anvil":
               a.h.damage = this.world.states.h[b];
               break;
             case "bdcloth":
             case "bdgs":
             case "carpet":
             case "cloth":
             case "gs":
             case "mh":
               a.h.type = this.world.states.h[b];
               break;
             case "dispense":
             case "dropper":
               "" != this.world.states.h[b + "_3"] && (a.h.nameChange = this.world.states.h[b + "_3"]);
               break;
             case "dt":
               1 == this.world.states.h[b] && (c = "dtg");
               break;
             case "brew":
             case "chest":
             case "enchant":
             case "oven":
               "" != this.world.states.h[b] && (a.h.nameChange = this.world.states.h[b]);
               break;
             case "bdr1":
             case "bdr2":
             case "bdr3":
             case "bdr4":
             case "bed1":
             case "bed2":
             case "dr1":
             case "dr2":
             case "dr3":
             case "dr4":
             case "idr1":
             case "idr2":
             case "idr3":
             case "idr4":
             case "piston1":
             case "piston2":
             case "rs":
             case "spiston1":
             case "spiston2":
             case "td2":
               null != q.get(c, "dropDifferent") && "na" != q.get(c, "dropDifferent") && ("bed1" == c || "bed2" == c ? ((c = q.get(c, "dropDifferent")), (a.h.type = this.world.states.h[b])) : (c = q.get(c, "dropDifferent")));
           }
           return [c, 1, 0, a];
         },
         canBeOnFire: function (b, a) {
           b = this.world.getFG(b, a);
           return "n" == b || "magma" == b ? !0 : null == q.get(b, "flamRate") ? !1 : !0;
         },
         canCatchOnFire: function (b, a) {
           var c = this.world.getFG(b, a);
           return null == q.get(c, "flamRate") || 0 == q.get(c, "flamRate") ? !1 : this.canBeOnFire(b, a);
         },
         removeFiresAround: function (b, a) {
           "fire" != this.world.getFG(b - 1, a) || this.canFireExistAt(b - 1, a) || this.requestRemove(b - 1, a, !0, !1, !0);
           "fire" != this.world.getFG(b + 1, a) || this.canFireExistAt(b + 1, a) || this.requestRemove(b + 1, a, !0, !1, !0);
           "fire" != this.world.getFG(b, a - 1) || this.canFireExistAt(b, a - 1) || this.requestRemove(b, a - 1, !0, !1, !0);
           "fire" != this.world.getFG(b, a + 1) || this.canFireExistAt(b, a + 1) || this.requestRemove(b, a + 1, !0, !1, !0);
         },
         canFireExistAt: function (b, a) {
           return ("air" != this.world.getFG(b, a) && "fire" != this.world.getFG(b, a)) || !(this.canBeOnFire(b - 1, a) || this.canBeOnFire(b + 1, a) || this.canBeOnFire(b, a - 1) || this.canBeOnFire(b, a + 1)) ? !1 : !0;
         },
         extinguishBlock: function (b, a) {
           "fire" != this.world.getFG(b - 1, a) || this.canBeOnFire(b - 2, a) || this.canBeOnFire(b - 1, a - 1) || this.canBeOnFire(b - 1, a + 1) || this.requestRemove(b - 1, a, !0, !1, !0);
           "fire" != this.world.getFG(b + 1, a) || this.canBeOnFire(b + 2, a) || this.canBeOnFire(b + 1, a - 1) || this.canBeOnFire(b + 1, a + 1) || this.requestRemove(b + 1, a, !0, !1, !0);
           "fire" != this.world.getFG(b, a - 1) || this.canBeOnFire(b, a - 2) || this.canBeOnFire(b - 1, a - 1) || this.canBeOnFire(b + 1, a - 1) || this.requestRemove(b, a - 1, !0, !1, !0);
           "fire" != this.world.getFG(b, a + 1) || this.canBeOnFire(b, a + 2) || this.canBeOnFire(b - 1, a + 1) || this.canBeOnFire(b + 1, a + 1) || this.requestRemove(b, a + 1, !0, !1, !0);
         },
         requestRemove: function (b, a, c, d, f) {
           null == f && (f = !1);
           null == d && (d = !1);
           null == c && (c = !1);
           null == c && (c = !1);
           null == d && (d = !1);
           var e = "blockX" + b + "Y" + a,
             k = this.world.getFG(b, a);
           f && this.world.setFG(b, a, "air");
           this.currentlyMiningBlock[0] == b && this.currentlyMiningBlock[1] == a && ((this.currentlyMining = ""), (this.currentlyMiningBlock = [-1e4, -1e4]), (this.miningAnimation = !1));
           this.lighting.removeLight(e);
           if (c) {
             c = this.world.water;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             c = this.world.playingTNT;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             c = this.world.wheat;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             this.extinguishBlock(b, a);
             null != this.world.getBlock(b, a + 1, !1) && this.world.getBlock(b, a + 1).inter();
             c = this.world.signs;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             c = this.world.toGrow;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             if ("rail" == I.substr(k, 0, 4))
               "Array" == O.getQualifiedClassName(this.world.states.h[e]) &&
                 "Array" == O.getQualifiedClassName(this.world.states.h[e][1]) &&
                 (-1 != this.world.states.h[e][1][1] &&
                   (1 == this.world.states.h[e][0]
                     ? "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + a]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + a][1]) &&
                       this.world.states.h["blockX" + (b + 1) + "Y" + a][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b + 1) + "Y" + a][1] = [0, 0])
                     : 2 == this.world.states.h[e][0]
                     ? "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + (a - 1)]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + (a - 1)][1]) &&
                       this.world.states.h["blockX" + (b + 1) + "Y" + (a - 1)][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b + 1) + "Y" + (a - 1)][1] = [0, 0])
                     : "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + (a + 1)]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b + 1) + "Y" + (a + 1)][1]) &&
                       this.world.states.h["blockX" + (b + 1) + "Y" + (a + 1)][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b + 1) + "Y" + (a + 1)][1] = [0, 0])),
                 1 != this.world.states.h[e][1][1] &&
                   (1 == this.world.states.h[e][0]
                     ? "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + a]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + a][1]) &&
                       this.world.states.h["blockX" + (b - 1) + "Y" + a][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b - 1) + "Y" + a][1] = [0, 0])
                     : 2 == this.world.states.h[e][0]
                     ? "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + (a + 1)]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + (a + 1)][1]) &&
                       this.world.states.h["blockX" + (b - 1) + "Y" + (a + 1)][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b - 1) + "Y" + (a + 1)][1] = [0, 0])
                     : "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + (a - 1)]) &&
                       "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (b - 1) + "Y" + (a - 1)][1]) &&
                       this.world.states.h["blockX" + (b - 1) + "Y" + (a - 1)][1][0] == this.world.states.h[e][1][0] - 1 &&
                       (this.world.states.h["blockX" + (b - 1) + "Y" + (a - 1)][1] = [0, 0])));
             else if ("rsd" == k)
               Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, e) &&
                 1 < this.world.hasSignal.h[e][0] &&
                 (-1 != this.world.hasSignal.h[e][1] &&
                   (q.get(this.world.getFG(b + 1, a), "walkThroughBlock")
                     ? q.get(this.world.getFG(b + 1, a - 1), "walkThroughBlock")
                       ? "air" != this.world.getFG(b + 1, a - 1) &&
                         (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a - 1)) &&
                           this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a - 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                           ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                         "rsd" == this.world.getFG(b + 1, a - 1) &&
                           Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a - 2)) &&
                           this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a - 2)][0] == this.world.hasSignal.h[e][0] - 1 &&
                           ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a - 2)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                       : (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + a) &&
                           this.world.hasSignal.h["blockX" + (b + 1) + "Y" + a][0] == this.world.hasSignal.h[e][0] - 1 &&
                           ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                         Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a - 1)) &&
                           this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a - 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                           ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                     : (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + a) &&
                         this.world.hasSignal.h["blockX" + (b + 1) + "Y" + a][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                       Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a + 1)) &&
                         this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a + 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))),
                 1 != this.world.hasSignal.h[e][1] &&
                   (1 == !q.get(this.world.getFG(b - 1, a), "walkThroughBlock")
                     ? (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + a) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + a][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                       Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a + 1)) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a + 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                     : q.get(this.world.getFG(b - 1, a - 1), "walkThroughBlock")
                     ? "air" != this.world.getFG(b - 1, a - 1) &&
                       (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a - 1)) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a - 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                       "rsd" == this.world.getFG(b - 1, a - 1) &&
                         Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a - 2)) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a - 2)][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a - 2)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                     : (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + a) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + a][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                       Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a - 1)) &&
                         this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a - 1)][0] == this.world.hasSignal.h[e][0] - 1 &&
                         ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))));
             else if ("rstorch" == k)
               2 == this.world.states.h[e]
                 ? (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a - 1)) &&
                     16 == this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a - 1)][0] &&
                     "rsd" == this.world.getFG(b + 1, a) &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + a) &&
                     16 == this.world.hasSignal.h["blockX" + (b + 1) + "Y" + a][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                 : (3 != this.world.states.h[e] &&
                     (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a - 1)) &&
                       16 == this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a - 1)][0] &&
                       "rsd" == this.world.getFG(b + 1, a) &&
                       ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                     Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + a) &&
                       16 == this.world.hasSignal.h["blockX" + (b + 1) + "Y" + a][0] &&
                       ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k])),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a - 1)) &&
                     16 == this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a - 1)][0] &&
                     "rsd" == this.world.getFG(b + 1, a) &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + a) &&
                     16 == this.world.hasSignal.h["blockX" + (b - 1) + "Y" + a][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + a), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k])),
                 1 != q.get(this.world.getFG(b, a + 1), "walkThroughBlock") &&
                   (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + b + "Y" + (a + 1)) &&
                     16 == this.world.hasSignal.h["blockX" + b + "Y" + (a + 1)][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + b + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + b + "Y" + (a + 2)) &&
                     16 == this.world.hasSignal.h["blockX" + b + "Y" + (a + 2)][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + b + "Y" + (a + 2)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b - 1) + "Y" + (a + 1)) &&
                     16 == this.world.hasSignal.h["blockX" + (b - 1) + "Y" + (a + 1)][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (b + 1) + "Y" + (a + 1)) &&
                     16 == this.world.hasSignal.h["blockX" + (b + 1) + "Y" + (a + 1)][0] &&
                     ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]));
             else if ("pp" == k || "wpp" == k)
               (c = this.world.hasSignal),
                 (k = "blockX" + b + "Y" + a),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 (c = this.world.hasSignal),
                 (k = "blockX" + b + "Y" + (a - 1)),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 (c = this.world.hasSignal),
                 (k = "blockX" + (b - 1) + "Y" + a),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 "rsd" == this.world.getFG(b - 1, a) && ((c = this.world.hasSignal), (k = "blockX" + (b - 2) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                 (c = this.world.hasSignal),
                 (k = "blockX" + (b + 1) + "Y" + a),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 "rsd" == this.world.getFG(b + 1, a) && ((c = this.world.hasSignal), (k = "blockX" + (b + 2) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                 (c = this.world.hasSignal),
                 (k = "blockX" + (b - 1) + "Y" + (a - 1)),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 "rsd" == this.world.getFG(b - 1, a - 1) &&
                   ((c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + (a - 2)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 2) + "Y" + (a - 2)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                 (c = this.world.hasSignal),
                 (k = "blockX" + (b + 1) + "Y" + (a - 1)),
                 Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                 "rsd" == this.world.getFG(b + 1, a - 1) &&
                   ((c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + (a - 2)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 2) + "Y" + (a - 2)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]);
             else if ("button" == k || "lever" == k)
               2 == this.world.states.h[e]
                 ? ((c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 1, a + 1) && ((c = this.world.hasSignal), (k = "blockX" + (b - 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 2) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 2, a) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b - 2) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b - 3) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b + 1) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b + 2) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + b + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b + 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 1, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b - 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b - 2) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                 : 3 == this.world.states.h[e]
                 ? ((c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a + 1) && ((c = this.world.hasSignal), (k = "blockX" + (b + 1) + "Y" + (a + 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 1, a) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b - 1) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b - 2) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 2) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b + 2) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b + 3) + "Y" + (a - 1)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b + 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b + 2) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + b + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b - 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]))
                 : ((c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + b + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 1, a) && ((c = this.world.hasSignal), (k = "blockX" + (b - 2) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + a),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a) && ((c = this.world.hasSignal), (k = "blockX" + (b + 2) + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b - 1) + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b - 1, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b - 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b - 2) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]),
                   (c = this.world.hasSignal),
                   (k = "blockX" + (b + 1) + "Y" + (a - 1)),
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                   "rsd" == this.world.getFG(b + 1, a - 1) &&
                     ((c = this.world.hasSignal),
                     (k = "blockX" + (b + 1) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k],
                     (c = this.world.hasSignal),
                     (k = "blockX" + (b + 2) + "Y" + (a - 2)),
                     Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k]));
             else if ("chest" == k) {
               if (this.world.gamemode != U.gamemodes.h.CREATIVE && Object.prototype.hasOwnProperty.call(this.world.chests.h, e))
                 for (k = 0, f = this.world.chests.h[e]; k < f.length; ) (c = f[k]), ++k, null != c && this.addDrop(c[0], b + 0.5, -(a + 0.5), c[1], c[2], c[3]);
               c = this.world.chests;
               Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             } else if ("dispense" == k || "dropper" == k) {
               if (this.world.gamemode != U.gamemodes.h.CREATIVE && Object.prototype.hasOwnProperty.call(this.world.states.h, e + "_2"))
                 for (f = this.world.states.h[e + "_2"], k = 0; k < f.length; ) (c = f[k]), ++k, null != c[0] && this.addDrop(c[0], b + 0.5, -(a + 0.5), c[1], c[2], c[3]);
             } else if ("oven" == k)
               this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 null != this.world.toSmelt.h[e] &&
                 ((f = this.world.toSmelt.h[e]),
                 (k = f.h.input),
                 (c = f.h.fuel),
                 (f = f.h.output),
                 null != k && this.addDrop(k[0], b + 0.5, -(a + 0.5), k[1], k[2], k[3]),
                 null != c && this.addDrop(c[0], b + 0.5, -(a + 0.5), c[1], c[2], c[3]),
                 null != f && this.addDrop(f[0], b + 0.5, -(a + 0.5), f[1], f[2], f[3])),
                 (c = this.world.toSmelt),
                 Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             else if ("brew" == k)
               this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 null != this.world.toBrew.h[e] &&
                 ((f = this.world.toBrew.h[e]),
                 (k = f.h.input),
                 (c = f.h.fuel),
                 (f = f.h.output),
                 this.addDrop(k[0], b + 0.5, -(a + 0.5), k[1], k[2], k[3]),
                 this.addDrop(c[0], b + 0.5, -(a + 0.5), c[1], c[2], c[3]),
                 this.addDrop(f[0][0], b + 0.5, -(a + 0.5), f[0][1], f[0][2], f[0][3]),
                 this.addDrop(f[1][0], b + 0.5, -(a + 0.5), f[1][1], f[1][2], f[1][3]),
                 this.addDrop(f[2][0], b + 0.5, -(a + 0.5), f[2][1], f[2][2], f[2][3])),
                 (c = this.world.toBrew),
                 Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             else if ("piston1" == k || "spiston1" == k)
               4 == this.world.states.h[e]
                 ? "piston2" == I.substr(this.world.getFG(b - 1, a), -7, 7) && (this.world.setFG(b - 1, a, "air"), this.applyBlockState(b - 1, a, new Y()))
                 : 2 == this.world.states.h[e]
                 ? "piston2" == I.substr(this.world.getFG(b + 1, a), -7, 7) && (this.world.setFG(b + 1, a, "air"), this.applyBlockState(b + 1, a, new Y()))
                 : 3 == this.world.states.h[e]
                 ? "piston2" == I.substr(this.world.getFG(b, a - 1), -7, 7) && (this.world.setFG(b, a - 1, "air"), this.applyBlockState(b, a - 1, new Y()))
                 : "piston2" == I.substr(this.world.getFG(b, a + 1), -7, 7) && (this.world.setFG(b, a + 1, "air"), this.applyBlockState(b, a + 1, new Y()));
             else if ("piston2" == k || "spiston2" == k)
               2 == this.world.states.h[e]
                 ? "piston1" == I.substr(this.world.getFG(b - 1, a), -7, 7) && (this.world.setFG(b - 1, a, "air"), this.applyBlockState(b - 1, a, new Y()))
                 : 3 == this.world.states.h[e]
                 ? "piston1" == I.substr(this.world.getFG(b, a + 1), -7, 7) && (this.world.setFG(b, a + 1, "air"), this.applyBlockState(b, a + 1, new Y()))
                 : 4 == this.world.states.h[e]
                 ? "piston1" == I.substr(this.world.getFG(b + 1, a), -7, 7) && (this.world.setFG(b + 1, a, "air"), this.applyBlockState(b + 1, a, new Y()))
                 : "piston1" == I.substr(this.world.getFG(b, a - 1), -7, 7) && (this.world.setFG(b, a - 1, "air"), this.applyBlockState(b, a - 1, new Y()));
             else if ("bed1" == k) this.world.setFG(b + 1, a, "air");
             else if ("bed2" == k) this.world.setFG(b - 1, a, "air");
             else if ("dr1" == k || "dr3" == k || "idr1" == k || "idr3" == k || "bdr1" == k || "bdr3" == k) this.world.setFG(b, a + 1, "air");
             else if ("dr2" == k || "dr4" == k || "idr2" == k || "idr4" == k || "bdr2" == k || "bdr4" == k)
               (c = this.world.states), (k = "blockX" + b + "Y" + (a - 1)), Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k], this.world.setFG(b, a - 1, "air");
             c = this.world.states;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             c = this.world.states;
             k = e + "_2";
             Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k];
             c = this.world.states;
             k = e + "_3";
             Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k];
             c = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(c.h, e) && delete c.h[e];
             this.updateAround(b, a, !0);
           } else this.updateAround(b, a, !1);
           d && this.reloadBlock(b, a);
           return d ? !1 : !0;
         },
         createBlockStateObject: function (b, a) {
           return Y.fromBlock(b, a, this.world);
         },
         applyBlockState: function (b, a, c) {
           Y.apply(b, a, this.world, c);
         },
         reloadBlock: function (b, a) {
           null != this.world.getBlock(b, a) && this.world.getBlock(b, a).reload();
           return !0;
         },
         updateAround: function (b, a, c) {
           if (Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + b + "Y" + a) && null == q.get(this.world.getFG(b, a), "liquid")) {
             var d = this.world.water,
               f = "blockX" + b + "Y" + a;
             Object.prototype.hasOwnProperty.call(d.h, f) && delete d.h[f];
           }
           1 == c && this.abortRedstoneTorchesAround(b, a);
           this.removeFiresAround(b, a);
           null != this.world.getBlock(b, a + 1, !1) && this.world.getBlock(b, a + 1).inter();
           null != this.world.getBlock(b, a - 1, !1) && this.world.getBlock(b, a - 1).inter();
           null != this.world.getBlock(b + 1, a, !1) && this.world.getBlock(b + 1, a).inter();
           null != this.world.getBlock(b - 1, a, !1) && this.world.getBlock(b - 1, a).inter();
         },
         abortRedstoneTorchesAround: function (b, a) {
           null != this.world.getBlock(b, a + 1, !1) && this.world.getBlock(b, a + 1).abortSignalz();
           null != this.world.getBlock(b, a - 1, !1) && this.world.getBlock(b, a - 1).abortSignalz();
           null != this.world.getBlock(b + 1, a, !1) && this.world.getBlock(b + 1, a).abortSignalz();
           null != this.world.getBlock(b - 1, a, !1) && this.world.getBlock(b - 1, a).abortSignalz();
         },
         pushBlock: function (b, a, c, d, f, l, k, C) {
           null == C && (C = !1);
           null == k && (k = 12);
           var z = 0,
             m = Object.create(null),
             A = Object.create(null);
           A["blockX" + b + "Y" + a] = new h(b, a);
           for (var p = 1, n = new h(); 0 < p; ) {
             for (var t = Object.keys(A), r = t.length; 0 < r; ) {
               t = A[t[0]];
               n.x = t.x;
               n.y = t.y;
               break;
             }
             t = "blockX" + n.x + "Y" + n.y;
             Object.prototype.hasOwnProperty.call(A, t) && delete A[t];
             --p;
             if (n.x != f || n.y != l)
               if (((t = this.world.getFG(n.x, n.y)), "air" != t && 1 != q.get(t, "pistonDrop"))) {
                 if (1 == q.get(t, "pistonDontPush")) return !1;
                 ++z;
                 if (!(z > k)) {
                   m["blockX" + n.x + "Y" + n.y] = new h(n.x, n.y);
                   if (!Object.prototype.hasOwnProperty.call(A, "blockX" + (n.x + c) + "Y" + (n.y + d)) && !Object.prototype.hasOwnProperty.call(m, "blockX" + (n.x + c) + "Y" + (n.y + d))) {
                     if (n.x + c == f && n.y + d == l) return !1;
                     ++p;
                     A["blockX" + (n.x + c) + "Y" + (n.y + d)] = new h(n.x + c, n.y + d);
                   }
                   "slimeb" == t &&
                     (-1 == c ||
                       Object.prototype.hasOwnProperty.call(A, "blockX" + (n.x - 1) + "Y" + n.y) ||
                       Object.prototype.hasOwnProperty.call(m, "blockX" + (n.x - 1) + "Y" + n.y) ||
                       1 == q.get(this.world.getFG(n.x - 1, n.y), "pistonDontPush") ||
                       (n.x - 1 == f && n.y == l) ||
                       (++p, (A["blockX" + (n.x - 1) + "Y" + n.y] = new h(n.x - 1, n.y))),
                     1 == c ||
                       Object.prototype.hasOwnProperty.call(A, "blockX" + (n.x + 1) + "Y" + n.y) ||
                       Object.prototype.hasOwnProperty.call(m, "blockX" + (n.x + 1) + "Y" + n.y) ||
                       1 == q.get(this.world.getFG(n.x + 1, n.y), "pistonDontPush") ||
                       (n.x + 1 == f && n.y == l) ||
                       (++p, (A["blockX" + (n.x + 1) + "Y" + n.y] = new h(n.x + 1, n.y))),
                     -1 == d ||
                       Object.prototype.hasOwnProperty.call(A, "blockX" + n.x + "Y" + (n.y - 1)) ||
                       Object.prototype.hasOwnProperty.call(m, "blockX" + n.x + "Y" + (n.y - 1)) ||
                       1 == q.get(this.world.getFG(n.x, n.y - 1), "pistonDontPush") ||
                       (n.x == f && n.y - 1 == l) ||
                       (++p, (A["blockX" + n.x + "Y" + (n.y - 1)] = new h(n.x, n.y - 1))),
                     1 == d ||
                       Object.prototype.hasOwnProperty.call(A, "blockX" + n.x + "Y" + (n.y + 1)) ||
                       Object.prototype.hasOwnProperty.call(m, "blockX" + n.x + "Y" + (n.y + 1)) ||
                       1 == q.get(this.world.getFG(n.x, n.y + 1), "pistonDontPush") ||
                       (n.x == f && n.y + 1 == l) ||
                       (++p, (A["blockX" + n.x + "Y" + (n.y + 1)] = new h(n.x, n.y + 1))));
                 }
               }
           }
           if (z > k) return !1;
           k = Object.create(null);
           z = Object.keys(m);
           A = z.length;
           for (p = 0; p < A; )
             (l = z[p++]),
               (n = this.createBlockStateObject(m[l].x | 0, m[l].y | 0)),
               (n.hasSignal = null),
               (f = new e()),
               (f.h.x = m[l].x),
               (f.h.y = m[l].y),
               (t = this.world.getFG(m[l].x, m[l].y)),
               (f.h.fg = t),
               (f.h.state = n),
               (k[l] = g.makeDynamicMap(f)),
               this.applyBlockState(k[l].h.x, k[l].h.y, new Y()),
               1 == this.requestRemove(k[l].h.x, k[l].h.y, !0, !1) && this.world.setFG(k[l].h.x, k[l].h.y, "air");
           z = Object.keys(m);
           A = z.length;
           for (p = 0; p < A; )
             (l = z[p++]), this.mineBlock((k[l].h.x + c) | 0, (k[l].h.y + d) | 0, !0, !1), this.applyBlockState((k[l].h.x + c) | 0, (k[l].h.y + d) | 0, k[l].h.state), this.world.setFG((k[l].h.x + c) | 0, (k[l].h.y + d) | 0, k[l].h.fg);
           C && (m["blockX" + (b - c) + "Y" + (a - d)] = new h(b - c, a - d));
           b = Object.keys(this.world.mobs.h);
           a = b.length;
           for (C = 0; C < a; )
             (l = b[C++]),
               null != m["blockX" + Math.floor(this.world.mobs.h[l].h.x / 1 - c) + "Y" + -Math.floor(this.world.mobs.h[l].h.y / 1 + d)]
                 ? ("slimeb" == this.world.getFG(Math.floor(this.world.mobs.h[l].h.x / 1), -Math.floor(this.world.mobs.h[l].h.y / 1)) &&
                     ((f = this.world.mobs.h[l]), (f.h.speedX += g.migrateSpeed(30 * c)), (f = this.world.mobs.h[l]), (f.h.speedY += g.migrateSpeed(30 * d)), (f = this.world.mobs.h[l]), (f.h.y -= (30 * d) / 2 / 30)),
                   (f = this.world.mobs.h[l]),
                   (f.h.x += c),
                   (f = this.world.mobs.h[l]),
                   (f.h.y -= d))
                 : null != this.world.mobData.h[this.world.mobs.h[l].h.type] &&
                   2 == this.world.mobData.h[this.world.mobs.h[l].h.type].h.sizeCategory &&
                   null != m["blockX" + Math.floor(this.world.mobs.h[l].h.x / 1 - c) + "Y" + (-Math.floor(this.world.mobs.h[l].h.y / 1 + d) + 1)] &&
                   ("slimeb" == this.world.getFG(Math.floor(this.world.mobs.h[l].h.x / 1), -Math.floor(this.world.mobs.h[l].h.y / 1) + 1) &&
                     ((f = this.world.mobs.h[l]), (f.h.speedX += g.migrateSpeed(30 * c)), (f = this.world.mobs.h[l]), (f.h.speedY += g.migrateSpeed(30 * d)), (f = this.world.mobs.h[l]), (f.h.y -= (30 * d) / 2 / 30)),
                   (f = this.world.mobs.h[l]),
                   (f.h.x += c),
                   (f = this.world.mobs.h[l]),
                   (f.h.y -= d));
           b = Object.keys(this.world.carts.h);
           a = b.length;
           for (C = 0; C < a; )
             (l = b[C++]),
               null != m["blockX" + Math.floor(this.world.carts.h[l].h.x / 1 - c) + "Y" + Math.floor(-(this.world.carts.h[l].h.y - 0.26666666666666666) - d)] &&
                 ("slimeb" == this.world.getFG(Math.floor(this.world.carts.h[l].h.x / 1), Math.floor(-(this.world.carts.h[l].h.y - 0.26666666666666666))) &&
                   ((f = this.world.carts.h[l]), (f.h.speedX += g.migrateSpeed((2 * c) / 3)), (f = this.world.carts.h[l]), (f.h.speedY -= g.migrateSpeed((2 * d) / 3)), (f = this.world.carts.h[l]), (f.h.y -= (10 * d) / 2 / 30)),
                 (f = this.world.carts.h[l]),
                 (f.h.x += c),
                 (f = this.world.carts.h[l]),
                 (f.h.y -= d),
                 (f = this.world.carts.h[l]),
                 (f.h.speedX += g.migrateSpeed(3 * c)),
                 (f = this.world.carts.h[l]),
                 (f.h.speedY -= g.migrateSpeed(3 * d)));
           b = Object.keys(this.world.drops.h);
           a = b.length;
           for (C = 0; C < a; )
             (f = b[C++]),
               Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(this.world.drops.h[f][0] / 1 - c) + "Y" + Math.floor(-this.world.drops.h[f][1] - d)) &&
                 (Object.prototype.hasOwnProperty.call(this.world.entities.h, f)
                   ? ((f = this.world.entities.h[f]),
                     "slimeb" == this.world.getFG(Math.floor(f.get_x() / 1), Math.floor(-f.get_y())) && ((f.speedX += g.migrateSpeed(c)), (f.speedY -= g.migrateSpeed(d)), f.set_y(f.get_y() - d / 2)),
                     f.set_x(f.get_x() + c),
                     f.set_y(f.get_y() - d),
                     (f.speedX += 5 * c),
                     (f.speedY -= 5 * d))
                   : ((g.makeDynamicArray(this.world.drops.h[f])[0] += c), (g.makeDynamicArray(this.world.drops.h[f])[1] -= d)));
           l = this.world.fallingBlocks.h;
           b = Object.keys(l);
           a = b.length;
           for (C = 0; C < a; )
             (f = l[b[C++]]),
               Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(f[2] / 1 - c) + "Y" + Math.floor(-f[3] - d)) &&
                 ("slimeb" == this.world.getFG(Math.floor(f[2] / 1), Math.floor(-f[3])) && ((f[4] += 20 * c), (f[5] -= 20 * d)), (f[2] += c), (f[3] -= d), (f[4] += 3 * c), (f[5] -= 3 * d));
           a = Object.keys(this.world.arrows.h);
           C = a.length;
           for (f = 0; f < C; )
             (l = this.world.arrows.h[a[f++]]),
               Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - 0.1 * c) + "Y" + Math.floor(-l.h.y + 0.1 * d))
                 ? "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + 0.1 * d + d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + 2 * c), Math.floor(-l.h.y + 0.1 * d + 2 * d)), "walkThroughBlock")
                   ? ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d))
                   : 0 == l.h.speedX && 0 == l.h.speedY && null == l.h.stuckIn && ((l.h.x += c), (l.h.y -= d))
                 : Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - c) + "Y" + Math.floor(-l.h.y - d + 0.1 * d)) &&
                   "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c), Math.floor(-l.h.y + 0.1 * d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + d + 0.1 * d)), "walkThroughBlock") &&
                   ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d));
           a = Object.keys(this.world.spears.h);
           C = a.length;
           for (f = 0; f < C; )
             (l = this.world.spears.h[a[f++]]),
               Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - 0.1 * c) + "Y" + Math.floor(-l.h.y + 0.1 * d))
                 ? "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + 0.1 * d + d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + 2 * c), Math.floor(-l.h.y + 0.1 * d + 2 * d)), "walkThroughBlock")
                   ? ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d))
                   : 0 == l.h.speedX && 0 == l.h.speedY && null == l.h.stuckIn && ((l.h.x += c), (l.h.y -= d))
                 : Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - c) + "Y" + Math.floor(-l.h.y - d + 0.1 * d)) &&
                   "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c), Math.floor(-l.h.y + 0.1 * d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + d + 0.1 * d)), "walkThroughBlock") &&
                   ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d));
           a = Object.keys(this.world.shurikens.h);
           C = a.length;
           for (f = 0; f < C; )
             (l = this.world.shurikens.h[a[f++]]),
               Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - 0.1 * c) + "Y" + Math.floor(-l.h.y + 0.1 * d))
                 ? "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + 0.1 * d + d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + 2 * c), Math.floor(-l.h.y + 0.1 * d + 2 * d)), "walkThroughBlock")
                   ? ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d))
                   : 0 == l.h.speedX && 0 == l.h.speedY && null == l.h.stuckIn && ((l.h.x += c), (l.h.y -= d))
                 : Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(l.h.x / 1 - c) + "Y" + Math.floor(-l.h.y - d + 0.1 * d)) &&
                   "slimeb" == this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c), Math.floor(-l.h.y + 0.1 * d)) &&
                   1 == q.get(this.world.getFG(Math.floor(l.h.x / 1 - 0.1 * c + c), Math.floor(-l.h.y + d + 0.1 * d)), "walkThroughBlock") &&
                   ((b = l.h.speedX + g.migrateSpeed((10 * c + (2 * Math.random() - 1)) / 30)), (l.h.speedX = b), (b = l.h.speedY - g.migrateSpeed((10 * d + (2 * Math.random() - 1)) / 30)), (l.h.speedY = b), (l.h.x += c), (l.h.y -= d));
           this.world.gamemode != U.gamemodes.h.SPECTATOR &&
             (Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(this.world.worldX / 1 - c) + "Y" + -Math.floor(this.world.worldY / 1 + d))
               ? ("slimeb" == this.world.getFG(Math.floor(this.world.worldX / 1), -Math.floor(this.world.worldY / 1)) &&
                   ((this.world.xSpeed -= g.migrateSpeed(30 * c)), (this.world.ySpeed += g.migrateSpeed(30 * d)), (this.world.worldY -= (30 * d) / 2 / 30)),
                 (this.world.worldX += c),
                 (this.world.worldY -= d),
                 this.resetCamera())
               : Object.prototype.hasOwnProperty.call(m, "blockX" + Math.floor(this.world.worldX / 1 - c) + "Y" + (-Math.floor(this.world.worldY / 1 + d) + 1)) &&
                 ("slimeb" == this.world.getFG(Math.floor(this.world.worldX / 1), -Math.floor(this.world.worldY / 1) + 1) &&
                   ((this.world.xSpeed -= g.migrateSpeed(30 * c)), (this.world.ySpeed += g.migrateSpeed(30 * d)), (this.world.worldY -= (30 * d) / 2 / 30)),
                 (this.world.worldX += c),
                 (this.world.worldY -= d),
                 this.resetCamera()));
           return !0;
         },
         onKeyDown: function (b) {
           1 == m.Instance.keyDown(b) &&
             (27 == b && this.openPauseMenu(),
             1 != this.inventario.currentFrame ||
               this.pawsed ||
               (b == J.intToKey.h[J.keyBindings.h.gui.h.id] && ((J.hideGUI = !J.hideGUI), m.Instance.keyPreventDefault()),
               b == J.intToKey.h[J.keyBindings.h.pick.h.id] && (this.mMC(), m.Instance.keyPreventDefault()),
               b == J.intToKey.h[J.keyBindings.h.screenshot.h.id] && ((this.takeScreenshot = !0), m.Instance.keyPreventDefault()),
               49 <= b &&
                 59 >= b &&
                 this.world.selectedInventoryItem != b - 49 &&
                 (this.requestSound("tick", 0, 0), (this.world.selectedInventoryItem = b - 49), this.updateSelectedInventoryItemStuff(), (this.currentlyMining = ""), (this.currentlyMiningBlock = [-1e3, -1e3]))));
         },
         renderHUD: function () {
           J.hideGUI || (this.renderHotbar(), this.renderItemMessage(), J.touchControls && 1 == this.inventario.currentFrame && this.renderTouchControls());
         },
         isMouseOverUI: function () {
           return this.isMouseOverHotbar() ? !0 : !1;
         },
         isMouseOverHotbar: function () {
           return this.hotbarBounds.containsPoint(m.Instance.mouse);
         },
         isMouseOverInventoryButton: function () {
           return this.inventoryButtonBounds.containsPoint(m.Instance.mouse);
         },
         renderTouchControls: function () {
           null == this.touchControlsEntity &&
             ((this.touchControlsEntity = new da(P.getImage("ui"))), this.touchControlsEntity.add9Slice(new t(), new t(), new t()), (this.touchControlsEntity.layer = 11), (this.touchControlsEntity.isTransparent = !0));
           this.touchControlsMatrix.reset().translate(-36, -51).scale2D(this.touchScale).translate(this.touchPadPosition.x, this.touchPadPosition.y);
           this.touchControlsEntity.updateQuad(0, null, new h(128, 68 + (this.touchPad1Pressed ? 51 : 0)), new h(72, 51), null, ba.quadMatrixHelper(new t(0, 0, 72, 51), this.touchControlsMatrix));
           this.touchControlsMatrix
             .reset()
             .translate(-36, -51)
             .rotate2D(-Math.PI / 2)
             .scale2D(this.touchScale)
             .translate(this.touchPadPosition.x, this.touchPadPosition.y);
           this.touchControlsEntity.updateQuad(1, null, new h(128, 68 + (this.touchPad2Pressed ? 51 : 0)), new h(72, 51), null, ba.quadMatrixHelper(new t(0, 0, 72, 51), this.touchControlsMatrix));
           this.touchControlsMatrix.reset().translate(-36, -51).rotate2D(-Math.PI).scale2D(this.touchScale).translate(this.touchPadPosition.x, this.touchPadPosition.y);
           this.touchControlsEntity.updateQuad(2, null, new h(128, 68 + (this.touchPad3Pressed ? 51 : 0)), new h(72, 51), null, ba.quadMatrixHelper(new t(0, 0, 72, 51), this.touchControlsMatrix));
           this.touchControlsMatrix
             .reset()
             .translate(-36, -51)
             .rotate2D((3 * -Math.PI) / 2)
             .scale2D(this.touchScale)
             .translate(this.touchPadPosition.x, this.touchPadPosition.y);
           this.touchControlsEntity.updateQuad(3, null, new h(128, 68 + (this.touchPad4Pressed ? 51 : 0)), new h(72, 51), null, ba.quadMatrixHelper(new t(0, 0, 72, 51), this.touchControlsMatrix));
           var b = this.touchButtonPressed1 ? 34 : 0,
             a = 100 * this.touchScale,
             c = 34 * this.touchScale;
           this.touchControlsEntity.updateQuad(4, new M(this.touchButtonPosition1.x, this.touchButtonPosition1.y, 0), new h(128, b), new h(100, 34), new h(a, c));
           b = R.get("touchControl1", "Commands", new h(this.touchButtonPosition1.x + 50 * this.touchScale, this.touchButtonPosition1.y + 17 * this.touchScale), x.get_volter(), F.white, 1.7, Q.CENTER);
           b.layer = 12;
           this.scene.draw(b);
           b = this.touchButtonPressed2 ? 34 : 0;
           a = 100 * this.touchScale;
           c = 34 * this.touchScale;
           this.touchControlsEntity.updateQuad(5, new M(this.touchButtonPosition2.x, this.touchButtonPosition2.y, 0), new h(128, b), new h(100, 34), new h(a, c));
           b = R.get("touchControl2", "Drop", new h(this.touchButtonPosition2.x + 50 * this.touchScale, this.touchButtonPosition2.y + 17 * this.touchScale), x.get_volter(), F.white, 1.7, Q.CENTER);
           b.layer = 12;
           this.scene.draw(b);
           b = this.touchButtonPressed3 ? 34 : 0;
           a = 100 * this.touchScale;
           c = 34 * this.touchScale;
           this.touchControlsEntity.updateQuad(6, new M(this.touchButtonPosition3.x, this.touchButtonPosition3.y, 0), new h(128, b), new h(100, 34), new h(a, c));
           b = R.get("touchControl3", "Inventory", new h(this.touchButtonPosition3.x + 50 * this.touchScale, this.touchButtonPosition3.y + 17 * this.touchScale), x.get_volter(), F.white, 1.7, Q.CENTER);
           b.layer = 12;
           this.scene.draw(b);
           this.scene.draw(this.touchControlsEntity);
         },
         initHUD: function () {
           this.hudEntity = new da(P.getImage("ui"), null, Xb.getShader());
           this.hudEntity.isTransparent = !0;
           this.hudEntity.layer = 7;
           var b = P.getImage("hotbar"),
             a = Fa.getShader(xa.NORMAL),
             c = new e(),
             d = w.repeatArray([1], 24);
           c.h.color = d;
           d = w.repeatArray([0], 24);
           c.h.colorOffset = d;
           this.hotbarEntity = new da(b, null, a, c);
           this.updateHotbarBounds();
           this.hotbarEntity.isTransparent = !0;
           this.hotbarEntity.layer = 7;
           b = y.blockTextures;
           a = Fa.getShader(xa.NORMAL);
           c = new e();
           d = w.repeatArray([1], 24);
           c.h.color = d;
           d = w.repeatArray([0], 24);
           c.h.colorOffset = d;
           this.hotbarItemEntity = new da(b, null, a, c);
           this.hotbarItemEntity.transform.scale2D(17.5067175);
           this.hotbarItemEntity.isTransparent = !0;
           this.hotbarItemEntity.layer = 9;
           this.hotbarNumberEntity = new da(this.itemNumberTexture);
           this.hotbarNumberEntity.isTransparent = !0;
           this.hotbarNumberEntity.layer = 10;
           b = P.getImage("ui");
           a = Fa.getShader(xa.NORMAL);
           c = new e();
           d = w.repeatArray([1], 24);
           c.h.color = d;
           d = w.repeatArray([0], 24);
           c.h.colorOffset = d;
           this.hotbarSlotEntity = new da(b, null, a, c);
           this.hotbarSlotEntity.isTransparent = !0;
           this.hotbarSlotEntity.layer = 8;
           for (c = 0; 9 > c; )
             (b = c++),
               (this.hotbarSlots[b] = new $a(
                 this.hotbarSlotEntity,
                 this.hotbarItemEntity,
                 this.hotbarNumberEntity,
                 this.scene.get_width() / 2 + 1.649 * (-84 + 20 * b),
                 this.scene.get_height() - 2 - 16.490000000000002,
                 1.6716900000000001,
                 this,
                 this.world,
                 this.world.inventoryItem(b)
               )),
               (this.hotbarSlots[b].number = b),
               (this.hotbarSlots[b].mini = !0),
               this.world.selectedInventoryItem == b && this.hotbarSlots[b].set_hovering(!0);
         },
         updateHotbarBounds: function () {
           this.hotbarEntity.updateQuad(0, new M(), new h(0, 0), new h(180, 22));
           this.hotbarEntity.updateQuad(1, new M(180), new h(180, 0), new h(9, 22));
           this.hotbarEntity.transform
             .reset()
             .translate(-P.getImage("hotbar").width / 2, -P.getImage("hotbar").height)
             .scale2D(1.649)
             .translate(this.scene.get_width() / 2, this.scene.get_height());
           this.hotbarBounds = new t(
             this.scene.get_width() / 2 - (1.649 * G.toFloat(P.getImage("hotbar").width)) / 2,
             this.scene.get_height() - 1.649 * G.toFloat(P.getImage("hotbar").height),
             1.649 * G.toFloat(P.getImage("hotbar").width),
             1.649 * G.toFloat(P.getImage("hotbar").height)
           );
           this.inventoryButtonBounds = new t(
             this.scene.get_width() / 2 - (1.649 * G.toFloat(P.getImage("hotbar").width)) / 2 + 1.649 * G.toFloat(P.getImage("hotbar").width) - 14,
             this.scene.get_height() - 1.649 * G.toFloat(P.getImage("hotbar").height),
             14,
             1.649 * G.toFloat(P.getImage("hotbar").height)
           );
           for (var b = 0; 9 > b; ) {
             var a = b++;
             if (null == this.hotbarSlots[a]) break;
             this.hotbarSlots[a].set_x(this.scene.get_width() / 2 + 1.649 * (-84 + 20 * a));
             this.hotbarSlots[a].set_y(this.scene.get_height() - 2 - 16.490000000000002);
           }
         },
         renderHotbar: function () {
           null == this.hotbarEntity && this.initHUD();
           var b = !1;
           if (1 == this.inventario.currentFrame && this.isMouseOverHotbar()) {
             for (var a = 0; 9 > a && !this.hotbarSlots[a++].checkInteraction(); );
             this.isMouseOverInventoryButton() && ((b = !0), (m.Instance.cursor = Ua.POINTER), 1 == m.Instance.mouseUp() && this.openInventario());
           }
           if (this.wasMouseOverInventoryButton != b) {
             if (b) {
               var c = this.hotbarEntity,
                 d = new M(180),
                 f = new h(180, 0),
                 l = new h(9, 22);
               a = new e();
               var k = w.repeatArray([0.9, 0.9, 0.9, 1], 6);
               a.h.color = k;
               k = w.repeatArray([0.1, 0.1, 0.1, 0], 6);
             } else (c = this.hotbarEntity), (d = new M(180)), (f = new h(180, 0)), (l = new h(9, 22)), (a = new e()), (k = w.repeatArray([1], 24)), (a.h.color = k), (k = w.repeatArray([0], 24));
             a.h.colorOffset = k;
             c.updateQuad(1, d, f, l, null, null, null, a);
             this.wasMouseOverInventoryButton = b;
           }
           this.hudEntity.clearPool(!1);
           this.renderXPBar();
           if (this.world.gamemode == U.gamemodes.h.SURVIVAL || this.world.gamemode == U.gamemodes.h.ADVENTURE) this.renderHealthBar(), this.renderHungerBar(), this.renderArmorBar(), this.renderAirBar();
           this.hudEntity.resetUnusedQuads();
           this.scene.draw(this.hudEntity);
           0 < Math.floor(this.world.experience / 100) &&
             ((b = R.get("xpValueShadow", E.string(Math.floor(this.world.experience / 100)), new h(this.hotbarBounds.get_centerX(), this.scene.get_height() - 49 + 7.2), x.get_volter(), F.black, 1.4, Q.CENTER, 1.5)),
             (b.layer = 8),
             this.scene.draw(b),
             (b = R.get("xpValue", E.string(Math.floor(this.world.experience / 100)), new h(this.hotbarBounds.get_centerX(), this.scene.get_height() - 49 + 6.2), x.get_volter(), F.white, 1.4, Q.CENTER, 1)),
             (b.layer = 8),
             this.scene.draw(b));
           this.scene.draw(this.hotbarEntity);
           this.scene.draw(this.hotbarSlotEntity);
           this.scene.draw(this.hotbarItemEntity);
           this.scene.draw(this.hotbarNumberEntity);
         },
         renderXPBar: function () {
           for (var b = 0; 10 > b; ) {
             var a = b++;
             this.hudEntity.addQuad(new M(this.hotbarBounds.get_left() + 30 * a * 1.04, this.scene.get_height() - 49, 0), new h(0 == a ? 0 : 9 == a ? 60 : 30, 96), new h(30, 10), !0, new h(31.200000000000003, 10.4));
             if (a / 10 < w.modulus(this.world.experience / 100, 1)) {
               var c = this.hudEntity,
                 d = this.hotbarBounds.get_left() + 30 * a * 1.04,
                 f = this.scene.get_height() - 49,
                 e = 30 * w.clamp(0, 1, 10 * w.modulus(this.world.experience / 100, 1) - a),
                 k = 30 * w.clamp(0, 1, 10 * w.modulus(this.world.experience / 100, 1) - a) * 1.04;
               c.addQuad(new M(d, f, 0), new h(0 == a ? 0 : 9 == a ? 60 : 30, 80), new h(e, 10), !0, new h(k, 10.4));
             }
           }
         },
         renderHealthBar: function () {
           for (var b = 0; 10 > b; ) {
             var a = b++,
               c = this.hudEntity,
               d = this.hotbarBounds.get_left() + (108 * a) / 9 + 4,
               f = this.scene.get_height() - 64,
               e = this.world.health / 2 > a ? ((this.world.health - 1) / 2 > a ? 98 : 89) : 80,
               k = this.world.hardcore ? 9 : 0;
             c.addQuad(new M(d, f + (6 < this.world.health ? 0 : (2.8 * Math.sin(3.7 * a + 2.3 * Math.floor(this.world.tick / 4))) / (this.world.health + 1)), 0), new h(e, 57 + k), new h(9, 9), !0, new h(11.34, 11.34));
           }
         },
         renderHungerBar: function () {
           for (var b = 0; 10 > b; ) {
             var a = b++;
             this.hudEntity.addQuad(
               new M(this.hotbarBounds.get_right() - (108 * a) / 9 - 11, this.scene.get_height() - 64 + (300 < this.world.food ? 0 : (2.8 * Math.sin(3.7 * a + 2.3 * Math.floor(this.world.tick / 8))) / (this.world.food / 50 + 1)), 0),
               new h(this.world.food / 100 > a ? (this.hasEffect("poison") ? 116 : 107) : 98, 48),
               new h(9, 9),
               !0,
               new h(11.34, 11.34)
             );
           }
         },
         renderAirBar: function () {
           0 < this.popLastAirBarBubble && this.popLastAirBarBubble--;
           for (var b = 0; 10 > b; ) {
             var a = b++;
             if (11 <= this.world.air) break;
             if (a >= this.world.air && (0 >= this.popLastAirBarBubble || a - 1 >= this.world.air)) break;
             var c = this.hudEntity,
               d = this.hotbarBounds.get_left() + (108 * a) / 9 + 4,
               f = this.scene.get_height() - 77;
             a = a < this.world.air ? 80 : 89;
             c.addQuad(new M(d, f, 0), new h(a, 48), new h(9, 9), !0, new h(11.34, 11.34));
           }
           this.world.air < this.lastAirBarBubble && ((this.popLastAirBarBubble = 3), 10 > this.world.air && this.requestSound("pop", 0, 0));
           this.lastAirBarBubble = this.world.air;
         },
         renderArmorBar: function () {
           var b = 0;
           if ("Array" == O.getQualifiedClassName(this.world.armors))
             for (var a = 0; 4 > a; ) {
               var c = a++;
               "Leather" == this.world.armors[c][0].substr(0, 7)
                 ? (b += 0.09 * ((q.get(this.world.armors[c][0], "life") - this.world.armors[c][1]) / q.get(this.world.armors[c][0], "life")))
                 : "Gold" == this.world.armors[c][0].substr(0, 4)
                 ? (b += 0.14 * ((q.get(this.world.armors[c][0], "life") - this.world.armors[c][1]) / q.get(this.world.armors[c][0], "life")))
                 : "Iron" == this.world.armors[c][0].substr(0, 4)
                 ? (b += 0.17 * ((q.get(this.world.armors[c][0], "life") - this.world.armors[c][1]) / q.get(this.world.armors[c][0], "life")))
                 : "Diamond" == this.world.armors[c][0].substr(0, 7)
                 ? (b += 0.22 * ((q.get(this.world.armors[c][0], "life") - this.world.armors[c][1]) / q.get(this.world.armors[c][0], "life")))
                 : "Dragon" == this.world.armors[c][0].substr(0, 6) && (b += 0.24 * ((q.get(this.world.armors[c][0], "life") - this.world.armors[c][1]) / q.get(this.world.armors[c][0], "life")));
             }
           if (!(0 >= Math.ceil(10 * b)))
             for (a = 0; 10 > a; ) {
               c = a++;
               var d = this.hudEntity,
                 f = this.hotbarBounds.get_right() - (108 * c) / 9 - 11,
                 e = this.scene.get_height() - 77;
               c = Math.ceil(10 * b) > c ? 116 : 107;
               d.addQuad(new M(f, e, 0), new h(c, 57), new h(9, 9), !0, new h(11.34, 11.34));
             }
         },
         renderItemMessage: function () {
           if (0 < this.itemMessageCountdown) {
             this.itemMessageCountdown--;
             var b = R.get(
               "itemMessage",
               this.itemMessageText,
               new h(this.scene.get_width() / 2, this.scene.get_height() - 89),
               x.get_volter(),
               new F(16777216 * Math.floor(255 * w.clamp(0, 1, this.itemMessageCountdown / 10)) + 16777215),
               1.625,
               Q.CENTER,
               1
             );
             b.layer = 7;
             this.scene.draw(b);
           }
         },
         generateItemNumberTexture: function () {
           var b = new fb(256, 256);
           b.setup2D(256, 256, new F());
           this.itemNumberTexture = new sa().fromScene(b);
           var a = new fb(256, 256);
           a.setup2D(256, 256, new F());
           var c = new sa().fromScene(a),
             d = new fb(256, 256);
           d.setup2D(256, 256, new F());
           for (var f = new sa().fromScene(d), e = 0; 64 > e; ) {
             var k = e++;
             a.draw(R.get("itemCount1", E.string(k + 1), new h((k % 8) * 32 + 32, 32 * Math.floor(k / 8)), x.get_volter(), F.white, 1.625, Q.RIGHT, 2), !0);
             a.draw(R.get("itemCount2", E.string(k + 1), new h((k % 8) * 32 + 32, 32 * Math.floor(k / 8) + 1), x.get_volter(), F.white, 1.625, Q.RIGHT, 2), !0);
           }
           for (e = 0; 64 > e; ) (k = e++), d.draw(R.get("itemCount1", E.string(k + 1), new h((k % 8) * 32 + 32, 32 * Math.floor(k / 8)), x.get_volter(), F.black, 1.625, Q.RIGHT, 2), !0);
           b.draw2DFlipped(f.blurFilter(2, 2), new h(0, -1));
           b.draw2D(c, new h(-1, 0));
         },
         forceCloseInventory: function () {
           1 != this.inventario.currentFrame && (this.inventario.requestClose(!0), this.inventario.gotoAndStop(1));
         },
         usePortalNether: function () {
           var b = this;
           this.portalling ||
             ((this.portalling = !0),
             this.endOfFrameTasks.push(function () {
               b.portalling = !1;
               b.usePortal(1);
             }));
         },
         usePortalEnd: function () {
           var b = this;
           this.portalling ||
             ((this.portalling = !0),
             this.endOfFrameTasks.push(function () {
               b.portalling = !1;
               b.usePortal(2);
             }));
         },
         usePortal: function (b) {
           null == b && (b = 1);
           this.forceCloseInventory();
           2 == b
             ? ((this.pawsed = !1),
               3 == this.world.sceneNum
                 ? (this.world.savee(), this.world.loadScene(1), (this.world.worldX = this.world.spawnPoint.x), (this.world.worldY = this.world.spawnPoint.y), this.world.savee(), m.Instance.set_frame("credits"))
                 : null == this.world.getSaveData("scene3")
                 ? (this.world.savee(),
                   this.world.loadScene(3),
                   (this.world.sceneNum = 3),
                   (this.world.worldX = this.world.worldWidth / 6),
                   (this.world.worldY = -52),
                   (this.world.spawnPoint = new h(this.world.worldX, this.world.worldY)),
                   (this.seed = this.stringToSeed(this.world.seedNum)),
                   (this.loadWorld = !0),
                   (this.pawsed = !1),
                   (this.generateEnder = !0),
                   this.initializeWorldGen(this.world.seedNum, this.world.cheats, this.world.gamemode, this.world.hardcore, this.bonusChest))
                 : (this.world.savee(), this.world.loadScene(3), (this.world.worldX = this.world.worldWidth / 6), (this.world.worldY = -53), (this.world.spawnPoint = new h(this.world.worldX, this.world.worldY))))
             : ((this.pawsed = !1),
               2 == this.world.sceneNum
                 ? (this.world.savee(),
                   this.world.loadScene(1),
                   null != this.world.portalCoords
                     ? ((this.world.worldX = this.world.portalCoords.x), (this.world.worldY = this.world.portalCoords.y))
                     : ((this.world.worldX = this.world.spawnPoint.x), (this.world.worldY = this.world.spawnPoint.y)))
                 : null == this.world.getSaveData("scene2")
                 ? (1 == this.world.sceneNum && (this.world.portalCoords = new h(this.world.worldX, this.world.worldY)),
                   this.world.savee(),
                   this.world.loadScene(2),
                   (this.world.worldX = this.world.worldWidth / 2),
                   (this.world.worldY = -30),
                   (this.world.spawnPoint = new h(this.world.worldX, this.world.worldY)),
                   (this.seed = this.stringToSeed(this.world.seedNum)),
                   (this.loadWorld = !0),
                   (this.pawsed = !1),
                   (this.generateNether = !0),
                   this.initializeWorldGen(this.world.seedNum, this.world.cheats, this.world.gamemode, this.world.hardcore, this.bonusChest))
                 : (1 == this.world.sceneNum && (this.world.portalCoords = new h(this.world.worldX, this.world.worldY)),
                   this.world.savee(),
                   this.world.loadScene(2),
                   (this.world.worldX = this.world.worldWidth / 2),
                   (this.world.worldY = -30),
                   (this.world.spawnPoint = new h(this.world.worldX, this.world.worldY))));
           this.initSky();
         },
         buildRoom: function (b, a, c, d, f) {
           for (var e = b, k = b + c + 1; e < k; )
             for (var h = e++, g = a, m = a + d + 1; g < m; ) {
               var A = g++;
               h == b || h == b + c || A == a || A == a + d
                 ? "mob spawner" == f
                   ? A == a
                     ? this.world.setFG(h, A, "ms")
                     : this.world.setFG(h, A, "cs")
                   : "empty2" == f
                   ? 0 != this.randomNumber(0, 2)
                     ? this.world.setFG(h, A, "ms")
                     : this.world.setFG(h, A, "cs")
                   : this.world.setFG(h, A, "sb")
                 : 1 == this.randomNumber(0, 50 - (A - a)) || ("library" == f && 1 == this.randomNumber(0, 5))
                 ? this.world.setFG(h, A, "web")
                 : this.world.setFG(h, A, "air");
             }
           "library" == f
             ? (this.world.setFG(b + 2, a + 5, "books"),
               this.world.setFG(b + 2, a + 4, "books"),
               this.world.setFG(b + 2, a + 3, "books"),
               this.world.setFG(b + 4, a + 5, "books"),
               this.world.setFG(b + 4, a + 4, "books"),
               this.world.setFG(b + 4, a + 3, "books"),
               this.world.setFG(b + 6, a + 5, "books"),
               this.world.setFG(b + 6, a + 4, "books"),
               this.world.setFG(b + 6, a + 3, "books"),
               this.world.setFG(b + 8, a + 5, "books"),
               this.world.setFG(b + 8, a + 4, "books"),
               this.world.setFG(b + 8, a + 3, "books"),
               this.world.setFG(b + 10, a + 5, "books"),
               this.world.setFG(b + 10, a + 4, "books"),
               this.world.setFG(b + 10, a + 3, "books"),
               this.world.setFG(b + 2, a + 2, "bdbooks"),
               this.world.setFG(b + 2, a + 1, "bdbooks"),
               this.world.setFG(b + 4, a + 2, "bdbooks"),
               this.world.setFG(b + 4, a + 1, "bdbooks"),
               this.world.setFG(b + 6, a + 2, "bdbooks"),
               this.world.setFG(b + 6, a + 1, "bdbooks"),
               this.world.setFG(b + 8, a + 2, "bdbooks"),
               this.world.setFG(b + 8, a + 1, "bdbooks"),
               this.world.setFG(b + 10, a + 2, "bdbooks"),
               this.world.setFG(b + 10, a + 1, "bdbooks"),
               this.world.setFG(b + 3, a + 4, "th"),
               (this.world.states.h["blockX" + (b + 3) + "Y" + (a + 4)] = 2),
               this.world.setFG(b + 9, a + 4, "th"),
               (this.world.states.h["blockX" + (b + 9) + "Y" + (a + 4)] = 3))
             : "chest1" == f
             ? (this.world.setFG(b + 4, a + 5, "sb"),
               this.world.setFG(b + 5, a + 5, "sb"),
               this.world.setFG(b + 6, a + 5, "sb"),
               this.world.setFG(b + 7, a + 5, "sb"),
               this.world.setFG(b + 8, a + 5, "sb"),
               this.world.setFG(b + 4, a + 1, "sb"),
               this.world.setFG(b + 5, a + 1, "sb"),
               this.world.setFG(b + 6, a + 1, "sb"),
               this.world.setFG(b + 7, a + 1, "sb"),
               this.world.setFG(b + 8, a + 1, "sb"),
               this.world.setFG(b + 5, a + 1, "sb"),
               this.world.setFG(b + 7, a + 1, "sb"),
               this.world.setFG(b + 6, a + 2, "chest"),
               this.prizeChest(b + 6, a + 2),
               this.world.setFG(b + 5, a + 2, "sb"),
               this.world.setFG(b + 7, a + 2, "sb"),
               this.world.setFG(b + 5, a + 3, "th"),
               (this.world.states.h["blockX" + (b + 5) + "Y" + (a + 3)] = 1),
               this.world.setFG(b + 7, a + 3, "th"),
               (this.world.states.h["blockX" + (b + 7) + "Y" + (a + 3)] = 1))
             : "fountain" == f
             ? (this.world.setFG(b + 6, a + 4, "wr"), this.world.setFG(b + 4, a + 1, "sb"), this.world.setFG(b + 8, a + 1, "sb"))
             : "mob spawner" == f
             ? (this.world.setFG(b + 5, a + 1, "ms"), this.world.setFG(b + 6, a + 1, "ms"), this.world.setFG(b + 7, a + 1, "ms"), this.world.setFG(b + 6, a + 2, "mobSpawner"))
             : "fountain" == f
             ? (this.world.setFG(b + 6, a + 4, "wr"), this.world.setFG(b + 4, a + 1, "sb"), this.world.setFG(b + 8, a + 1, "sb"))
             : "lava" == f
             ? (this.world.setFG(b + 3, a, "la"),
               this.world.setFG(b + 4, a, "la"),
               this.world.setFG(b + 5, a, "la"),
               this.world.setFG(b + 6, a, "la"),
               this.world.setFG(b + 7, a, "la"),
               this.world.setFG(b + 8, a, "la"),
               this.world.setFG(b + 9, a, "la"),
               this.world.setFG(b + 2, a + -1, "sb"),
               this.world.setFG(b + 3, a + -1, "sb"),
               this.world.setFG(b + 4, a + -1, "sb"),
               this.world.setFG(b + 5, a + -1, "sb"),
               this.world.setFG(b + 6, a + -1, "sb"),
               this.world.setFG(b + 7, a + -1, "sb"),
               this.world.setFG(b + 8, a + -1, "sb"),
               this.world.setFG(b + 9, a + -1, "sb"),
               this.world.setFG(b + 10, a + -1, "sb"))
             : "acid" == f
             ? (this.world.setFG(b + 3, a, "ad"),
               this.world.setFG(b + 4, a, "ad"),
               this.world.setFG(b + 5, a, "ad"),
               this.world.setFG(b + 6, a, "ad"),
               this.world.setFG(b + 7, a, "ad"),
               this.world.setFG(b + 8, a, "ad"),
               this.world.setFG(b + 9, a, "ad"),
               this.world.setFG(b + 2, a + -1, "sb"),
               this.world.setFG(b + 3, a + -1, "sb"),
               this.world.setFG(b + 4, a + -1, "sb"),
               this.world.setFG(b + 5, a + -1, "sb"),
               this.world.setFG(b + 6, a + -1, "sb"),
               this.world.setFG(b + 7, a + -1, "sb"),
               this.world.setFG(b + 8, a + -1, "sb"),
               this.world.setFG(b + 9, a + -1, "sb"),
               this.world.setFG(b + 10, a + -1, "sb"))
             : "portal" == f &&
               (this.world.setFG(b + 2, a + 1, "sb"),
               this.world.setFG(b + 3, a + 1, "sb"),
               this.world.setFG(b + 4, a + 1, "sb"),
               this.world.setFG(b + 5, a + 1, "sb"),
               this.world.setFG(b + 6, a + 1, "sb"),
               this.world.setFG(b + 7, a + 1, "sb"),
               this.world.setFG(b + 8, a + 1, "sb"),
               this.world.setFG(b + 9, a + 1, "sb"),
               this.world.setFG(b + 10, a + 1, "sb"),
               this.world.setFG(b + 3, a + 2, "pf"),
               this.world.setFG(b + 4, a + 2, "pf"),
               this.world.setFG(b + 5, a + 2, "pf"),
               this.world.setFG(b + 6, a + 2, "pf"),
               this.world.setFG(b + 7, a + 2, "pf"),
               this.world.setFG(b + 8, a + 2, "pf"),
               this.world.setFG(b + 9, a + 2, "pf"));
         },
         buildStaircase: function (b, a, c) {
           a = Math.round(a);
           c = Math.round(c);
           if ("up" == b) {
             b = 0;
             for (
               var d = [
                 [1, 0],
                 [2, 0],
                 [2, 1],
                 [2, 2],
                 [3, 2],
                 [3, 3],
                 [3, 4],
                 [4, 4],
                 [4, 5],
                 [4, 6],
                 [5, 6],
                 [5, 7],
                 [5, 8],
                 [6, 8],
                 [6, 9],
                 [6, 10],
                 [1, 5],
                 [1, 6],
                 [1, 7],
                 [2, 7],
                 [2, 8],
                 [2, 9],
                 [3, 9],
                 [3, 10],
                 [3, 11],
                 [4, 11],
                 [4, 12],
                 [4, 13],
                 [5, 13],
               ];
               b < d.length;
 
             ) {
               var f = d[b];
               ++b;
               this.world.setFG(a + f[0], c + f[1], "sb");
             }
             b = 0;
             for (
               d = [
                 [0, 1],
                 [0, 2],
                 [1, 1],
                 [1, 2],
                 [1, 3],
                 [1, 4],
                 [2, 3],
                 [2, 4],
                 [2, 5],
                 [2, 6],
                 [3, 5],
                 [3, 6],
                 [3, 7],
                 [3, 8],
                 [4, 7],
                 [4, 8],
                 [4, 9],
                 [4, 10],
                 [5, 9],
                 [5, 10],
                 [5, 11],
                 [5, 12],
                 [6, 1],
                 [6, 12],
               ];
               b < d.length;
 
             )
               (f = d[b]), ++b, this.world.setFG(a + f[0], c + f[1], "air");
             this.world.setFG(a, c + 1, "air");
             this.world.setFG(a, c + 2, "air");
             this.world.setFG(a + 6, c + 11, "air");
             this.world.setFG(a + 6, c + 12, "air");
           } else if ("down" == b) {
             b = 0;
             for (
               d = [
                 [0, -1],
                 [0, -2],
                 [1, -2],
                 [1, -3],
                 [1, -4],
                 [2, -4],
                 [2, -5],
                 [2, -6],
                 [3, -6],
                 [3, -7],
                 [3, -8],
                 [4, -8],
                 [4, -9],
                 [4, -10],
                 [5, -10],
                 [1, 3],
                 [2, 3],
                 [2, 2],
                 [2, 1],
                 [3, 1],
                 [3, 0],
                 [3, -1],
                 [4, -1],
                 [4, -2],
                 [4, -3],
                 [5, -3],
                 [5, -4],
                 [5, -5],
               ];
               b < d.length;
 
             )
               (f = d[b]), ++b, this.world.setFG(a + f[0], c + f[1], "sb");
             b = 0;
             for (
               d = [
                 [0, 1],
                 [0, 2],
                 [1, -1],
                 [1, 0],
                 [1, 1],
                 [1, 2],
                 [2, -3],
                 [2, -2],
                 [2, -1],
                 [2, 0],
                 [3, -5],
                 [3, -4],
                 [3, -3],
                 [3, -2],
                 [4, -7],
                 [4, -6],
                 [4, -5],
                 [4, -4],
                 [5, -9],
                 [5, -8],
                 [5, -7],
                 [5, -6],
                 [6, -9],
                 [6, -8],
               ];
               b < d.length;
 
             )
               (f = d[b]), ++b, this.world.setFG(a + f[0], c + f[1], "air");
           }
         },
         buildHall: function (b, a) {
           b = Math.round(b);
           a = Math.round(a);
           if (1 == this.randomNumber(0, 2)) {
             this.world.setFG(b + 1, a, "sb");
             this.world.setFG(b + 2, a, "sb");
             this.world.setFG(b + 3, a, "sb");
             this.world.setFG(b + 4, a, "sb");
             this.world.setFG(b + 5, a, "sb");
             this.world.setFG(b + 1, a + 3, "sb");
             this.world.setFG(b + 2, a + 3, "sb");
             this.world.setFG(b + 3, a + 3, "sb");
             this.world.setFG(b + 4, a + 3, "sb");
             this.world.setFG(b + 5, a + 3, "sb");
             for (var c = 0; 7 > c; ) {
               var d = c++;
               this.world.setFG(b + d, a + 1, "air");
               this.world.setFG(b + d, a + 2, "air");
             }
             1 != this.randomNumber(0, 3) &&
               (1 != this.randomNumber(0, 2)
                 ? (this.world.setFG(b + 6, a + 1, "dr3"), this.world.setFG(b + 6, a + 2, "dr4"))
                 : (this.world.setFG(b + 5, a + 1, "idr3"), this.world.setFG(b + 5, a + 2, "idr4"), this.world.setFG(b + 4, a + 1, "pp"), this.world.setFG(b + 6, a + 1, "pp")));
             1 != this.randomNumber(0, 3) &&
               (1 != this.randomNumber(0, 2)
                 ? (this.world.setFG(b, a + 1, "dr3"), this.world.setFG(b, a + 2, "dr4"))
                 : (this.world.setFG(b + 1, a + 1, "idr3"), this.world.setFG(b + 1, a + 2, "idr4"), this.world.setFG(b, a + 1, "pp"), this.world.setFG(b + 2, a + 1, "pp")));
           } else
             for (
               this.world.setFG(b + 1, a, "sb"),
                 this.world.setFG(b + 2, a, "sb"),
                 this.world.setFG(b + 3, a, "sb"),
                 this.world.setFG(b + 4, a, "sb"),
                 this.world.setFG(b + 5, a, "sb"),
                 this.world.setFG(b + 1, a + 6, "sb"),
                 this.world.setFG(b + 2, a + 6, "sb"),
                 this.world.setFG(b + 3, a + 6, "sb"),
                 this.world.setFG(b + 4, a + 6, "sb"),
                 this.world.setFG(b + 5, a + 6, "sb"),
                 c = 0;
               7 > c;
 
             )
               (d = c++), this.world.setFG(b + d, a + 1, "air"), this.world.setFG(b + d, a + 2, "air"), this.world.setFG(b + d, a + 3, "air"), this.world.setFG(b + d, a + 4, "air"), this.world.setFG(b + d, a + 5, "air");
         },
         buildLadder: function (b, a) {
           b = Math.round(b);
           a = Math.round(a);
           for (var c = 0; 11 > c; ) this.world.setFG(b, a + c++, "ladder");
           this.world.setFG(b - 1, a + 6, "sb");
           this.world.setFG(b + 1, a + 6, "sb");
           this.world.setFG(b - 1, a + 7, "sb");
           this.world.setFG(b + 1, a + 7, "sb");
           this.world.setFG(b - 1, a + 8, "sb");
           this.world.setFG(b + 1, a + 8, "sb");
         },
         prizeChest: function (b, a, c) {
           null == c && (c = "normal");
           this.world.chests.h["blockX" + b + "Y" + a] = [];
           for (var d = 0; 27 > d; ) ++d, this.world.chests.h["blockX" + b + "Y" + a].push(g.emptyItem());
           for (d = 0; 8 > d; ) {
             ++d;
             var f =
               "bonus" == c
                 ? [
                     ["sl", this.randomNumber(1, 2), ""],
                     ["wp", this.randomNumber(6, 12), ""],
                     ["ap", this.randomNumber(1, 2), ""],
                     ["bread", this.randomNumber(1, 3), ""],
                     ["WoodenPickaxe", 1, 0],
                     ["WoodenAxe", 1, 0],
                     ["StonePickaxe", 1, this.randomNumber(20, 50)],
                     ["StoneAxe", 1, this.randomNumber(20, 50)],
                     ["th", this.randomNumber(2, 3), ""],
                     ["bb", this.randomNumber(5, 20), ""],
                   ]
                 : [
                     ["ep", 1, ""],
                     ["tag", 1, ""],
                     ["wseed", this.randomNumber(2, 4), ""],
                     ["pseed", this.randomNumber(2, 4), ""],
                     ["bseed", this.randomNumber(1, 3), ""],
                     ["ccb", this.randomNumber(1, 6), ""],
                     ["wd", this.randomNumber(1, 5), ""],
                     ["gp", 1, ""],
                     ["oddrock", this.randomNumber(1, 5), ""],
                     ["or", this.randomNumber(1, 5), ""],
                     ["gap", this.randomNumber(1, 2), ""],
                     ["topaz", this.randomNumber(1, 5), ""],
                     ["StonePickaxe", 1, this.randomNumber(50, 100)],
                     ["StoneShovel", 1, this.randomNumber(50, 100)],
                     ["StoneSword", 1, this.randomNumber(50, 100)],
                     ["StoneAxe", 1, this.randomNumber(50, 100)],
                     ["cs", this.randomNumber(1, 15), ""],
                     ["gi", this.randomNumber(1, 3), ""],
                     ["dm", this.randomNumber(1, 3), ""],
                     ["cl", this.randomNumber(1, 6), ""],
                     ["ii", this.randomNumber(1, 6), ""],
                     ["rsd", this.randomNumber(1, 10), ""],
                     ["bb", this.randomNumber(1, 20), ""],
                     ["sw", this.randomNumber(1, 9), ""],
                     ["bk", 1, ""],
                     ["wp", this.randomNumber(1, 8), ""],
                     ["fw1", this.randomNumber(1, 3), ""],
                     ["fw2", this.randomNumber(1, 3), ""],
                     ["flint", this.randomNumber(1, 4), ""],
                   ];
             var e = Math.floor(this.randomNumber(0, f.length - 1)),
               k = Math.floor(this.randomNumber(0, 27));
             27 != k && (this.world.chests.h["blockX" + b + "Y" + a][k] = [f[e][0], f[e][1], f[e][2]]);
           }
         },
         useBonemeal: function (b, a) {
           if ("sl" == this.world.getFG(b, a)) {
             if (
               "dt" == this.world.getFG(b, a - 1) &&
               "air" == this.world.getFG(b, a + 1) &&
               "air" == this.world.getFG(b, a + 2) &&
               "air" == this.world.getFG(b, a + 3) &&
               "air" == this.world.getFG(b, a + 4) &&
               "air" == this.world.getFG(b, a + 5) &&
               "air" == this.world.getFG(b, a + 6) &&
               "air" == this.world.getFG(b, a + 7)
             ) {
               this.world.setFG(b, a, "wd1");
               this.makeTree(b + 1, a, !1, !1);
               var c = this.world.toGrow;
               b = "blockX" + b + "Y" + a;
               Object.prototype.hasOwnProperty.call(c.h, b) && delete c.h[b];
               return !0;
             }
           } else if ("ms1" == this.world.getFG(b, a)) {
             if (
               ("dt" == this.world.getFG(b, a - 1) || "myc" == this.world.getFG(b, a - 1)) &&
               "air" == this.world.getFG(b, a + 1) &&
               "air" == this.world.getFG(b, a + 2) &&
               "air" == this.world.getFG(b, a + 3) &&
               "air" == this.world.getFG(b, a + 4) &&
               "air" == this.world.getFG(b, a + 5)
             )
               return this.world.setFG(b, a, "msb4"), this.makeGiantMushroom(b + 1, a, 1), this.requestRemove(b, a, !0, !0), !0;
           } else if ("ms2" == this.world.getFG(b, a)) {
             if (
               ("dt" == this.world.getFG(b, a - 1) || "myc" == this.world.getFG(b, a - 1)) &&
               "air" == this.world.getFG(b, a + 1) &&
               "air" == this.world.getFG(b, a + 2) &&
               "air" == this.world.getFG(b, a + 3) &&
               "air" == this.world.getFG(b, a + 4) &&
               "air" == this.world.getFG(b, a + 5)
             )
               return this.world.setFG(b, a, "msb2"), this.makeGiantMushroom(b + 1, a, 2), this.requestRemove(b, a, !0, !0), !0;
           } else {
             if ("bseed" == this.world.getFG(b, a) || "pseed" == this.world.getFG(b, a) || "wseed" == this.world.getFG(b, a) || "seed" == this.world.getFG(b, a) || "potato" == this.world.getFG(b, a) || "carrot" == this.world.getFG(b, a))
               return 7 != this.world.wheat.h["blockX" + b + "Y" + a] && (this.world.wheat.h["blockX" + b + "Y" + a] = 7), !0;
             if (("dt" == this.world.getFG(b, a) && 1 == this.world.states.h["blockX" + b + "Y" + a]) || "sd" == this.world.getFG(b, a)) {
               for (c = -5; 6 > c; )
                 for (var d = c++, f = -5; 6 > f; ) {
                   var e = f++;
                   "dt" == this.world.getFG(b + d, a + e) && 1 == this.world.states.h["blockX" + (b + d) + "Y" + (a + e)] && "air" == this.world.getFG(b + d, a + e + 1)
                     ? 0 != Math.floor(3 * Math.random()) &&
                       (0 == Math.floor(30 * Math.random())
                         ? this.world.setFG(b + d, a + e + 1, "sl")
                         : 0 == Math.floor(30 * Math.random())
                         ? this.world.setFG(b + d, a + e + 1, "sc")
                         : 0 == Math.floor(5 * Math.random())
                         ? this.world.setFG(b + d, a + e + 1, "fw1")
                         : 0 == Math.floor(5 * Math.random())
                         ? this.world.setFG(b + d, this.closestMinableBlock[1] + e + 1, "fw2")
                         : 0 == Math.floor(5 * Math.random())
                         ? this.world.setFG(b + d, this.closestMinableBlock[1] + e + 1, "shrub")
                         : 0 == Math.floor(15 * Math.random())
                         ? this.world.setFG(b + d, this.closestMinableBlock[1] + e + 1, "ms1")
                         : 0 == Math.floor(15 * Math.random())
                         ? this.world.setFG(b + d, this.closestMinableBlock[1] + e + 1, "ms2")
                         : this.world.setFG(b + d, this.closestMinableBlock[1] + e + 1, "lgr"),
                       this.makeBlock(b + d, a + e + 1))
                     : "sd" == this.world.getFG(b + d, a + e) &&
                       "air" == this.world.getFG(b + d, a + e + 1) &&
                       0 != Math.floor(3 * Math.random()) &&
                       (0 == Math.floor(5 * Math.random())
                         ? "air" == this.world.getFG(b + d - 1, a + e + 1) && "air" == this.world.getFG(b + d + 1, a + e + 1) && this.world.setFG(b + d, a + e + 1, "ct")
                         : 0 == Math.floor(3 * Math.random())
                         ? "ct" != this.world.getFG(b + d - 1, a + e + 1) && "ct" != this.world.getFG(b + d + 1, a + e + 1) && this.world.setFG(b + d, a + e + 1, "shrub")
                         : "ct" != this.world.getFG(b + d - 1, a + e + 1) && "ct" != this.world.getFG(b + d + 1, a + e + 1) && this.world.setFG(b + d, a + e + 1, "ds"),
                       this.makeBlock(b + d, a + e + 1));
                 }
               return !0;
             }
           }
           return !1;
         },
         initVignette: function () {
           this.vignetteEntity = new ma([], ba.createQuad(1, 1), ob.getShader());
           ob.setupEntity(this.vignetteEntity, [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], new F(0), new F(-872415232), new t(0.5, 0.5, 0.1, Math.sqrt(2) / 2));
           this.vignetteEntity.isTransparent = !0;
           this.vignetteEntity.layer = 4;
           this.vignetteEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.DST_ALPHA, p.gl.ONE];
           this.vignetteEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
         },
         renderVignette: function () {
           null == this.vignetteEntity && this.initVignette();
           this.scene.draw(this.vignetteEntity);
         },
         getMobHead: function (b, a, c, d) {
           Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, "mob_head[" + b + "]")
             ? a()
             : this.getSkinObject(
                 b,
                 function (c) {
                   for (var f = 0, e; 21 > f; ) {
                     e = !1;
                     for (var h = 0; 16 > h; )
                       if (G.gt((c.skin.getPixel32(h++, f) >>> 24) & 255, 16)) {
                         e = !0;
                         break;
                       }
                     if (e) break;
                     ++f;
                   }
                   f = 4 > f ? 0 : Math.floor(0.6818181818181818 * f);
                   y.addTexture("mob_head[" + b + "]", c.skin, new t(0, f, 16, 9), d);
                   a();
                 },
                 function () {
                   null != c && c();
                 }
               );
         },
         addEffect: function (b, a, c, d, f, l, k) {
           null == k && (k = 1);
           null == l && (l = !1);
           null == f && (f = !1);
           null == d && (d = 1);
           null == c && (c = 10);
           null == a && (a = "poison");
           b == this.world.player.id
             ? ((b = new e()),
               (b.h.duration = c),
               (b.h.level = d),
               (b.h.showIcon = f && -1 < this.effectIconLabels.indexOf(a)),
               (b.h.showParticles = l),
               (b.h.potency = k),
               (this.world.effects.h[a] = g.makeDynamicMap(b)),
               this.resetEffectIcons())
             : Object.prototype.hasOwnProperty.call(this.world.mobs.h, b) &&
               ((f = g.makeDynamicMap(this.world.mobs.h[b].h.effects)), (b = new e()), (b.h.duration = c), (b.h.level = d), (b.h.showParticles = l), (b.h.potency = k), (f.h[a] = g.makeDynamicMap(b)));
         },
         manageEffects: function (b) {
           var a = !1,
             c = this.world.effects;
           if (b == this.world.player.id) a = !0;
           else if (null != this.world.mobs.h[b]) c = this.world.mobs.h[b].h.effects;
           else return;
           for (var d = Object.keys(c.h), f = d.length, l = 0; l < f; ) {
             var k = d[l++];
             if (null == this.effectData.h[k]) Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k], a && this.resetEffectIcons();
             else {
               var C = c.h[k];
               null == C.h.potency && (C.h.potency = 1);
               var z = C.h.potency;
               if ("instanthealth" == k || "instantdamage" == k) {
                 if (a)
                   (z = Math.floor(Math.min(20, this.world.health + z * Math.pow(2, Math.min(15, Math.max(0, C.h.level - 1))) * g.makeDynamicMap(this.effectData.h[k]).h.perLevel * 2))),
                     z < Math.min(20, this.world.health) ? this.ouch(1, z - this.world.health, "potion") : (this.world.health = z);
                 else {
                   var n =
                     "zombie" == this.world.mobs.h[b].h.type || "skeleton" == this.world.mobs.h[b].h.type || "zombiepigman" == this.world.mobs.h[b].h.type
                       ? Math.floor(this.world.mobs.h[b].h.health - z * Math.pow(2, Math.min(15, Math.max(0, C.h.level - 1))) * g.makeDynamicMap(this.effectData.h[k]).h.perLevel * 2)
                       : Math.floor(this.world.mobs.h[b].h.health + z * Math.pow(2, Math.min(15, Math.max(0, C.h.level - 1))) * g.makeDynamicMap(this.effectData.h[k]).h.perLevel * 2);
                   n < this.world.mobs.h[b].h.health ? this.getMob(b).hurtMob(b, this.world.mobs.h[b].h.health - n, "potion") : ((z = this.world.mobs.h[b]), (n = Math.min(this.getMob(b).mobMaxHealth(b), n)), (z.h.health = n));
                 }
                 --C.h.duration;
                 if (0 >= C.h.duration) {
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k];
                   a && this.resetEffectIcons();
                   continue;
                 }
               } else if (0 == this.world.tick % m.Instance.get_fps()) {
                 if (0 >= C.h.duration) {
                   Object.prototype.hasOwnProperty.call(c.h, k) && delete c.h[k];
                   a && this.resetEffectIcons();
                   continue;
                 }
                 --C.h.duration;
               }
               null == C.h.level && (C.h.level = 1);
               switch (k) {
                 case "hunger":
                   a && 20 < this.world.food && 0 == this.world.tick % m.Instance.get_fps() && (this.world.food -= Math.floor(6.25 * C.h.level));
                   break;
                 case "poison":
                   0 == this.world.tick % Math.max(1, Math.floor((2 * m.Instance.get_fps()) / Math.pow(2, C.h.level))) &&
                     (a ? 1 < this.world.health && this.ouch(1, -1, "poison") : 1 < this.world.mobs.h[b].h.health && this.getMob(b).hurtMob(b, 1, "poison"));
                   break;
                 case "regeneration":
                   0 == this.world.tick % Math.max(1, Math.floor((2.5 * m.Instance.get_fps()) / Math.pow(2, C.h.level))) &&
                     (a
                       ? (20 > this.world.health && (this.world.health += 1), 1e3 > this.world.food && (this.world.food += 50))
                       : "zombie" == this.world.mobs.h[b].h.type || "skeleton" == this.world.mobs.h[b].h.type || "zombiepigman" == this.world.mobs.h[b].h.type
                       ? ((z = this.world.mobs.h[b]), --z.h.health)
                       : this.world.mobs.h[b].h.health < this.world.mobData.h[this.world.mobs.h[b].h.type].h.health && ((z = this.world.mobs.h[b]), (z.h.health += 1)));
               }
               1 == C.h.showParticles &&
                 0.2 > Math.random() &&
                 (a
                   ? ((C = new h(this.world.worldX, 0)),
                     (z = new h(this.world.worldY - 1, 0)),
                     (n = new e()),
                     (n.h.r = this.effectData.h[k].h.r),
                     (n.h.g = this.effectData.h[k].h.g),
                     (n.h.b = this.effectData.h[k].h.b),
                     this.addParticles("effect", 1, 0, C, z, !1, n))
                   : ((C = new h(this.world.mobs.h[b].h.x, 0)),
                     (z = new h(this.world.mobs.h[b].h.y, 0)),
                     (n = new e()),
                     (n.h.r = this.effectData.h[k].h.r),
                     (n.h.g = this.effectData.h[k].h.g),
                     (n.h.b = this.effectData.h[k].h.b),
                     this.addParticles("effect", 1, 0, C, z, !1, n)));
             }
           }
         },
         getSkinObject: function (b, a, c) {
           null == b && (b = "1");
           var d = !0;
           if (!Object.prototype.hasOwnProperty.call(this.loadedSkinFrames.h, b))
             (this.loadedSkinFrames.h[b] = new qb()),
               this.loadedSkinFrames.h[b].resetFrames(),
               Object.prototype.hasOwnProperty.call(this.world.loadedSkins.h, b) && this.world.loadedSkins.h[b].loaded
                 ? ((this.loadedSkinFrames.h[b] = this.world.loadedSkins.h[b]), null != a && a(this.loadedSkinFrames.h[b]))
                 : ka.getSkinFrom("https://mineblocks.com/1/skins/" + b + ".png", this.loadedSkinFrames.h[b], 0, a, c),
               (d = !1);
           else if (0 == this.loadedSkinFrames.h[b].loading)
             if (1 != this.loadedSkinFrames.h[b].failed) {
               if (
                 (Object.prototype.hasOwnProperty.call(this.world.loadedSkins.h, b) || (this.world.loadedSkins.h[b] = this.loadedSkinFrames.h[b]),
                 (d = !1),
                 null != a && a(this.loadedSkinFrames.h[b]),
                 Object.prototype.hasOwnProperty.call(this.skinLoadingCallbacks.h, b))
               ) {
                 for (var f = 0, e = this.skinLoadingCallbacks.h[b].success.length; f < e; ) this.skinLoadingCallbacks.h[b].success[f++](this.loadedSkinFrames.h[b]);
                 f = this.skinLoadingCallbacks;
                 Object.prototype.hasOwnProperty.call(f.h, b) && delete f.h[b];
               }
             } else if (((d = !1), null != c && c(), Object.prototype.hasOwnProperty.call(this.skinLoadingCallbacks.h, b))) {
               f = 0;
               for (e = this.skinLoadingCallbacks.h[b].fail.length; f < e; ) this.skinLoadingCallbacks.h[b].fail[f++]();
               f = this.skinLoadingCallbacks;
               Object.prototype.hasOwnProperty.call(f.h, b) && delete f.h[b];
             }
           !d ||
             (null == a && null == c) ||
             (Object.prototype.hasOwnProperty.call(this.skinLoadingCallbacks.h, b)
               ? (null != a && this.skinLoadingCallbacks.h[b].success.push(a), null != c && this.skinLoadingCallbacks.h[b].fail.push(c))
               : (this.skinLoadingCallbacks.h[b] = { success: null != a ? [a] : [], fail: null != c ? [c] : [] }));
           return this.loadedSkinFrames.h[b];
         },
         renderSelector: function () {
           this.blockSelector.transform
             .reset()
             .translate(0.5, -0.5)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(this.selectedBlockPoint.x, -this.selectedBlockPoint.y)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.scene.draw(this.blockSelector);
         },
         renderCracks: function (b, a, c) {
           this.miningCracks.transform
             .reset()
             .translate(0.5, -0.5)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(this.selectedBlockPoint.x, -this.selectedBlockPoint.y)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.miningCracks.setUniform("texClip", y.getTexture("break", Math.max(1, Math.min(5, Math.floor(5 * c) + 1))).toArray());
           this.scene.draw(this.miningCracks);
         },
         renderReticle: function () {
           this.reticleLine.transform
             .reset()
             .translate(-25, 0)
             .translate(116, 0)
             .rotate(this.rotAngle, new M(0, 0, -1))
             .scale(0.03333333333333333, 0.03333333333333333, 0.03333333333333333)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(Math.floor(this.world.worldX * this.zoom) / this.zoom, Math.floor((this.world.worldY - 1) * this.zoom) / this.zoom)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.reticlePlus.transform
             .reset()
             .rotate(-this.rotAngle, new M(0, 0, -1))
             .translate(116, 0)
             .rotate(this.rotAngle, new M(0, 0, -1))
             .scale(0.03333333333333333, 0.03333333333333333, 0.03333333333333333)
             .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
             .translate(Math.floor(this.world.worldX * this.zoom) / this.zoom, Math.floor((this.world.worldY - 1) * this.zoom) / this.zoom)
             .scale(this.zoom, this.zoom, this.zoom)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.scene.draw(this.reticleLine);
           this.scene.draw(this.reticlePlus);
         },
         initSky: function () {
           this.backgroundImage = this.world.sceneNum == U.sceneNums.h.NETHER ? P.getImage("nether_bg") : P.getImage("ender_bg");
           this.background = new ma([], ba.createQuad(1, 1, !1, !0), Na.getShader());
           this.background.setTextureBuffer("texture", this.backgroundImage);
           this.background.setUniform("texSize", [this.backgroundImage.width, this.backgroundImage.height]);
           this.background.setUniform("texClip", [0, 0, this.backgroundImage.width, this.backgroundImage.height]);
           this.background.setUniform("color", [1, 1, 1, 1]);
           this.background.setUniform("colorOffset", [0, 0, 0, 0]);
           this.background.setUniform("wrap", [1, 0]);
           this.background.transform.translate(0.5, 0.5, 0).scale(this.scene.get_width(), this.scene.get_height(), 0);
           this.background.layer = -11;
           this.farGradient = new ma([], ba.createQuad(1, 1, !1, !0), Yb.getShader());
           this.farGradient.transform.translate(0.5, 0.5, 0).scale(this.scene.get_width(), this.scene.get_height(), 0);
           this.farGradient.layer = -10;
           this.updateFarGradient();
           this.closeGradient = new ma([], ba.createQuad(1, 1, !1, !0), Yb.getShader());
           this.closeGradient.transform.translate(0.5, 0.5, 0).scale(this.scene.get_width(), this.scene.get_height(), 0);
           this.closeGradient.layer = -9;
           this.closeGradient.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA];
           this.updateCloseGradient();
           this.starsImage = P.getImage("stars");
           this.stars = new ma([], ba.createQuad(G.toFloat(this.starsImage.width), G.toFloat(this.starsImage.height), !1, !0), Na.getShader());
           this.stars.setTextureBuffer("texture", this.starsImage);
           this.stars.setUniform("texSize", [this.starsImage.width, this.starsImage.height]);
           this.stars.setUniform("texClip", [0, 0, this.starsImage.width, this.starsImage.height]);
           this.stars.setUniform("color", [1, 1, 1, 1]);
           this.stars.setUniform("colorOffset", [0, 0, 0, 0]);
           this.stars.setUniform("wrap", [1, 0]);
           this.stars.transform.translate(-1e3, -1e3, 0);
           this.stars.isTransparent = !0;
           this.stars.layer = -8;
           this.sunAndMoonImage = P.getImage("sun_and_moon");
           this.sun = new ma([], ba.createQuad(G.toFloat(this.sunAndMoonImage.height), G.toFloat(this.sunAndMoonImage.height), !1, !0), Na.getShader());
           this.sun.setTextureBuffer("texture", this.sunAndMoonImage);
           this.sun.setUniform("texSize", [this.sunAndMoonImage.width, this.sunAndMoonImage.height]);
           this.sun.setUniform("texClip", [0, 0, this.sunAndMoonImage.height, this.sunAndMoonImage.height]);
           this.sun.setUniform("color", [1, 1, 1, 1]);
           this.sun.setUniform("colorOffset", [0, 0, 0, 0]);
           this.sun.setUniform("wrap", [1, 0]);
           this.sun.customBlendFunc = [p.gl.ONE, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
           this.sun.transform.scale(3.375, 3.375, 1).translate(-100, -100, 0);
           this.sun.isTransparent = !0;
           this.sun.layer = -7;
           this.moon = new ma([], ba.createQuad(G.toFloat(this.sunAndMoonImage.height), G.toFloat(this.sunAndMoonImage.height), !1, !0), Na.getShader());
           this.moon.setTextureBuffer("texture", this.sunAndMoonImage);
           this.moon.setUniform("texSize", [this.sunAndMoonImage.width, this.sunAndMoonImage.height]);
           this.moon.setUniform("texClip", [this.sunAndMoonImage.height, 0, this.sunAndMoonImage.height, this.sunAndMoonImage.height]);
           this.moon.setUniform("color", [1, 1, 1, 1]);
           this.moon.setUniform("colorOffset", [0, 0, 0, 0]);
           this.moon.setUniform("wrap", [1, 0]);
           this.sun.customBlendFunc = [p.gl.ONE, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
           this.moon.transform.scale(3.375, 3.375, 1).translate(-100, -100, 0);
           this.moon.isTransparent = !0;
           this.moon.layer = -7;
           this.updateCelestialBodies();
           this.bgTreesImage = P.getImage("background_trees");
           this.backgroundLoop = new ma([], ba.createQuad(1, 1, !1, !0), Na.getShader());
           this.backgroundLoop.setTextureBuffer("texture", this.bgTreesImage);
           this.backgroundLoop.setUniform("texSize", [this.bgTreesImage.width, this.bgTreesImage.height]);
           this.backgroundLoop.setUniform("color", [1, 1, 1, 1]);
           this.backgroundLoop.setUniform("colorOffset", [0, 0, 0, 0]);
           this.backgroundLoop.setUniform("wrap", [1, 0]);
           this.backgroundLoop.transform.reset().translate(0.5, 0.5, 0).scale(this.scene.get_width(), this.scene.get_height(), 0);
           this.backgroundLoop.isTransparent = !0;
           this.backgroundLoop.layer = -6;
         },
         resize: function () {
           this.background.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.farGradient.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.closeGradient.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.backgroundLoop.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           null != this.vignetteEntity && this.vignetteEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.updateCelestialBodies();
           this.vectorRenderer.setDimensions(this.scene.get_width(), this.scene.get_height());
           this.vectorEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           null != this.hotbarEntity && this.updateHotbarBounds();
           this.lighting.resize();
           this.blackScreen.resize();
           this.touchScale = this.scene.get_width() / 552;
           this.touchPadPosition.set(10 + 50 * this.touchScale, this.scene.get_height() - 10 - 50 * this.touchScale);
           this.touchButtonPosition1.set(this.scene.get_width() - 10 - 100 * this.touchScale, this.scene.get_height() - 3 * (11 + 34 * this.touchScale));
           this.touchButtonPosition2.set(this.scene.get_width() - 10 - 100 * this.touchScale, this.scene.get_height() - 2 * (11 + 34 * this.touchScale));
           this.touchButtonPosition3.set(this.scene.get_width() - 10 - 100 * this.touchScale, this.scene.get_height() - (11 + 34 * this.touchScale));
           null != this.inventario && this.inventario.resize();
         },
         updateCelestialBodies: function () {
           var b = this.world.tim / 100;
           0 != this.getGameRule("doDaylightCycle") && (b += (this.world.tick % 600) / 600 / 100);
           var a = (1.5 + ((b + 0.2544) % 1) * -2.193) * Math.PI;
           this.sun.transform.setPosition(241 * Math.cos(a) + this.scene.get_width() / 2, 241 * -Math.sin(a) + 310, 0);
           a = (1.5 + ((b + 0.7514) % 1) * -2.193) * Math.PI;
           this.moon.transform.setPosition(241 * Math.cos(a) + this.scene.get_width() / 2, 241 * -Math.sin(a) + 310, 0);
           this.stars.setUniform("color", [1, 1, 1, w.clamp(0, 1, 5 - Math.abs((b - 0.7) / 0.04))]);
           this.stars.transform
             .reset()
             .scale(2.1978, 2.1978)
             .rotate(Math.PI / 2 - (Math.PI / 2) * ((b - 0.5) / 0.4), new M(0, 0, 1))
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 30);
         },
         renderSky: function () {
           this.world.sceneNum == U.sceneNums.h.OVERWORLD
             ? (0 == this.world.tick % 10 && this.updateFarGradient(),
               0 == this.world.tick % 60 && (this.updateCelestialBodies(), this.updateCloseGradient()),
               this.updateTrees(),
               this.scene.draw(this.farGradient),
               this.scene.draw(this.closeGradient),
               this.scene.draw(this.stars),
               this.scene.draw(this.sun),
               this.scene.draw(this.moon),
               this.scene.draw(this.backgroundLoop))
             : this.world.sceneNum == U.sceneNums.h.NETHER
             ? this.scene.draw(this.background)
             : this.world.sceneNum == U.sceneNums.h.END &&
               (this.bgPlaying &&
                 (4 >= this.bgFrame && this.background.setUniform("colorOffset", [(1 - this.bgFrame / 4) / 4, (1 - this.bgFrame / 4) / 4, (1 - this.bgFrame / 4) / 4, 0]),
                 4 == this.bgFrame ? ((this.bgPlaying = !1), (this.bgFrame = 0)) : this.bgFrame++),
               this.scene.draw(this.background));
         },
         updateFarGradient: function () {
           this.farGradient.setAttrib("color", [
             0.3254901960784314 * (1 - this.darkness) + 0.0392156862745098 * this.darkness,
             0.6431372549019608 * (1 - this.darkness) + 0.050980392156862744 * this.darkness,
             0.8705882352941177 * (1 - this.darkness) + 0.12941176470588237 * this.darkness,
             1,
             0.6862745098039216 * (1 - this.darkness) + 0.09019607843137255 * this.darkness,
             0.5372549019607843 * (1 - this.darkness) + 0.10588235294117647 * this.darkness,
             0.7607843137254902 * (1 - this.darkness) + 0.20784313725490197 * this.darkness,
             1,
             0.3254901960784314 * (1 - this.darkness) + 0.0392156862745098 * this.darkness,
             0.6431372549019608 * (1 - this.darkness) + 0.050980392156862744 * this.darkness,
             0.8705882352941177 * (1 - this.darkness) + 0.12941176470588237 * this.darkness,
             1,
             0.6862745098039216 * (1 - this.darkness) + 0.09019607843137255 * this.darkness,
             0.5372549019607843 * (1 - this.darkness) + 0.10588235294117647 * this.darkness,
             0.7607843137254902 * (1 - this.darkness) + 0.20784313725490197 * this.darkness,
             1,
           ]);
         },
         updateCloseGradient: function () {
           var b = this.world.tim / 100 + (this.world.tick % 600) / 600 / 100;
           0.057 >= b
             ? ((b /= 0.057), this.closeGradient.setAttrib("color", [1, 1, 1, 0, 1, 0.6, 0, 1 - b, 1, 1, 1, 0, 1, 0.6, 0, 1 - b]))
             : 0.028 >= b - 0.373
             ? ((b = Math.max(0, (b - 0.373) / 0.028)), this.closeGradient.setAttrib("color", [1, 1, 1, 0, 1, 0.6, 0, b, 1, 1, 1, 0, 1, 0.6, 0, b]))
             : 0.026 >= b - 0.401
             ? ((b = (b - 0.401) / 0.026), this.closeGradient.setAttrib("color", [1, 1, 1, 0, 1, 0.6, 0, 1 - b, 1, 1, 1, 0, 1, 0.6, 0, 1 - b]))
             : 0.534 >= b - 0.427
             ? ((b = Math.min(1, (b - 0.427) / 0.137)),
               this.closeGradient.setAttrib("color", [1 - b, 1 - b, 1 - b, b, 1 - b, 0.6 * (1 - b), 0 * (1 - b), 0.4980392156862745 * b, 1 - b, 1 - b, 1 - b, b, 1 - b, 0.6 * (1 - b), 0 * (1 - b), 0.4980392156862745 * b]))
             : ((b = Math.min(1, (b - 0.961) / 0.039)), this.closeGradient.setAttrib("color", [b, b, b, 1 - b, b, 0.6 * b, 0 * b, 0.4980392156862745 * (1 - b) + b, b, b, b, 1 - b, b, 0.6 * b, 0 * b, 0.4980392156862745 * (1 - b) + b]));
         },
         updateTrees: function () {
           var b = Math.floor(
             705 -
               G.toFloat(this.bgTreesImage.width) -
               (((30 * -this.camera.x + this.scene.get_width() / 2) / 15 - 100 * Math.floor((30 * -this.camera.x + this.scene.get_width() / 2) / 1500)) / 100) * (0 - G.toFloat(this.bgTreesImage.width)) -
               989 +
               282
           );
           var a = 70 == this.world.worldHeight ? Math.floor((30 * -this.camera.y - this.scene.get_height() / 2) / 3 - 430) - 341 + 209 : Math.floor(Math.max(-170, (30 * -this.camera.y + this.scene.get_height() / 2) / 3 - 1e3)) - 341 + 209;
           this.backgroundLoop.setUniform("texClip", [-b, -a, this.scene.get_width(), this.scene.get_height()]);
         },
         runBlockEventsFrame: function () {
           for (var b = Math.floor(this.camera.x), a = -Math.floor(this.camera.y), c = -5; 5 > c; )
             for (var d = c++, f = -4; 4 > f; ) {
               var e = f++;
               null != this.world.getChunk(b + 8 * d, a + 8 * e) && this.world.getChunk(b + 8 * d, a + 8 * e).runBlockEventsFrame();
             }
         },
         renderWorld: function () {
           var b = Math.floor(this.camera.x / 16),
             a = -Math.floor(this.camera.y / 16),
             c = Math.ceil(this.scene.get_width() / 16 / this.zoom),
             d = Math.ceil(this.scene.get_height() / 16 / this.zoom),
             f = -c - 1;
           for (c += 1; f < c; ) for (var e = f++, k = -d - 1, h = d + 1; k < h; ) this.renderChunk(b + e, a + k++);
         },
         getRenderChunk: function (b, a, c) {
           null == c && (c = !1);
           b = Math.floor(b / 16);
           var d = Math.floor(a / 16);
           a = this.world.sceneNum + ":" + b + "," + d;
           if (!Object.prototype.hasOwnProperty.call(this.renderChunks.h, a))
             if (c) (c = new ea(b, d, this.world)), c.render(), (this.renderChunks.h[a] = c), (this.renderChunks.h[a].entity.layer = -3);
             else return null;
           return this.renderChunks.h[a];
         },
         renderChunk: function (b, a) {
           var c = this.getRenderChunk(16 * b, 16 * a, !0);
           c.renderChanges();
           0 != c.blocksRendering &&
             (c.entity.transform
               .reset()
               .translate(Math.floor(-this.camera.x * this.zoom) / this.zoom, Math.floor(-this.camera.y * this.zoom) / this.zoom)
               .translate(16 * b, 16 * -(a + 1))
               .scale(this.zoom, this.zoom, this.zoom)
               .translate(this.scene.get_width() / 2, this.scene.get_height() / 2),
             this.scene.draw(c.entity));
         },
         renderBlock: function (b, a) {
           var c = this.getRenderChunk(b, a, !1);
           null != c && c.addChange(b, a);
         },
         exit: function () {
           this.world.savee();
           this.playingRainSound && ((this.playingRainSound = !1), P.getSound("rainsound_0").stop());
           P.getSound("underwater_0").stop();
           ya.stopAll(md.MUSIC);
           m.Instance.set_frame("menu");
         },
         mMC: function () {
           if (!this.cantMove) {
             var b = this.selectedBlock();
             if (null != b && "air" != this.world.getFG(b.x, b.y)) {
               for (var a = 0; 45 > a; ) {
                 var c = a++;
                 if (this.blockMatchesItem(b.x | 0, b.y | 0, this.world.inventoryList[c])) {
                   if (9 > c) this.world.selectedInventoryItem = c;
                   else {
                     for (b = 0; 9 > b; )
                       if (((a = b++), this.isEmpty(a))) {
                         this.world.inventoryList[a] = this.world.inventoryList[c];
                         this.world.inventoryList[c] = g.emptyItem();
                         this.world.selectedInventoryItem = a;
                         this.updateSelectedInventoryItemStuff();
                         this.currentlyMining = "";
                         this.currentlyMiningBlock = [-1e4, -1e4];
                         return;
                       }
                     b = this.world.inventoryList[c];
                     this.world.inventoryList[c] = this.world.inventoryList[this.world.selectedInventoryItem];
                     this.world.inventoryList[this.world.selectedInventoryItem] = b;
                   }
                   this.updateSelectedInventoryItemStuff();
                   this.currentlyMining = "";
                   this.currentlyMiningBlock = [-1e4, -1e4];
                   return;
                 }
               }
               if (this.world.gamemode == U.gamemodes.h.CREATIVE) {
                 for (a = 0; 9 > a; )
                   if (((c = a++), this.isEmpty(c))) {
                     this.world.inventoryList[c] = this.itemFromBlock(b.x | 0, b.y | 0);
                     this.world.selectedInventoryItem = c;
                     this.updateSelectedInventoryItemStuff();
                     this.currentlyMining = "";
                     this.currentlyMiningBlock = [-1e4, -1e4];
                     return;
                   }
                 this.world.inventoryList[this.world.selectedInventoryItem] = this.itemFromBlock(b.x | 0, b.y | 0);
                 this.updateSelectedInventoryItemStuff();
                 this.currentlyMining = "";
                 this.currentlyMiningBlock = [-1e4, -1e4];
               }
             }
           }
         },
         blockMatchesItem: function (b, a, c) {
           if ("air" == this.world.getFG(b, a) && this.isEmptyItem(c)) return !0;
           b = this.itemFromBlock(b, a);
           return b[0] == c[0] && this.hasExtras(c[3], b[3]) ? !0 : !1;
         },
         mD2: function () {
           G.gt(m.Instance.keyDown(1073742050), 0) || G.gt(m.Instance.keyDown(1073742054), 0)
             ? this.mMC()
             : J.touchControls ||
               (this.shifting
                 ? ((this.treatingClickAsRightClick = !0), this.rightClickDown())
                 : ((this.mouseD = 1),
                   (this.gCMTimer = 20),
                   this.world.tick - this.lastMouseDown > 0.3 * m.Instance.get_fps() ? (this.isDoubleClick = this.isDoubleClick ? !1 : !0) : (this.isDoubleClick = !1),
                   (this.lastMouseDown = this.world.tick)));
         },
         mU2: function () {
           J.touchControls || (this.treatingClickAsRightClick ? this.rightClickUp() : ((this.mouseD = 0), (this.waitTillMouseIsUp = !1)));
         },
         rMD: function () {
           J.touchControls || this.rightClickDown();
         },
         rMU: function () {
           J.touchControls || this.rightClickUp();
         },
         rightClickDown: function () {
           0 != this.rMouseD
             ? (this.rMouseD = 0)
             : ((this.rMouseD = 1),
               this.world.tick - this.lastRightMouseDown > 0.3 * m.Instance.get_fps() ? (this.isDoubleRightClick = this.isDoubleRightClick ? !1 : !0) : (this.isDoubleRightClick = !1),
               (this.lastRightMouseDown = this.world.tick));
         },
         rightClickUp: function () {
           this.rMouseD = 0;
           this.treatingClickAsRightClick = this.waitTillRightMouseIsUp = !1;
         },
         mouseWheelHandler: function () {
           this.mouseWheelThing &&
             !this.pawsed &&
             (this.requestSound("tick", 0, 0),
             (this.world.selectedInventoryItem =
               8 == this.world.selectedInventoryItem && 0 > m.Instance.mouseWheelDelta
                 ? 0
                 : 0 == this.world.selectedInventoryItem && 0 < m.Instance.mouseWheelDelta
                 ? 8
                 : this.world.selectedInventoryItem + (0 > m.Instance.mouseWheelDelta ? 1 : -1)),
             this.updateSelectedInventoryItemStuff(),
             (this.currentlyMining = ""),
             (this.currentlyMiningBlock = [-1e3, -1e3]));
           this.mouseWheelThing = !1;
         },
         __class__: g,
       };
       var J = function () {};
       r.GlobalSave = J;
       J.__name__ = "GlobalSave";
       J.initialize = function (b) {
         J.resetKeyBindings();
         ka.loadDefault(!0, ka.frames, !0);
         ya.set_musicVolume(J.songVol / 100);
         J.localStorage = new Qc("Mine_Blocks", "", function (a) {
           J.localStorage = a;
           J.load(a);
           null != b && b();
         });
       };
       J.load = function (b) {
         null == b && (b = J.localStorage);
         null == b.data.h.worldList
           ? J.save(b)
           : ((J.touchControls = b.data.h.touchControls),
             (J.hideGUI = b.data.h.hideGUI),
             (J.focusPause = b.data.h.focusPause),
             (J.showArmor = b.data.h.showArmor),
             (J.soundVol = b.data.h.soundVol),
             (J.songVol = b.data.h.songVol),
             (J.qual = b.data.h.qual),
             (J.particles = b.data.h.particles),
             (J.spaceJump = b.data.h.spaceJump),
             (J.useRightClickKey = b.data.h.useRightClickKey),
             (J.skins = b.data.h.skins),
             (J.keyBindings = b.data.h.keyBindings),
             (J.worldList = b.data.h.worldList),
             (J.version = b.data.h.version),
             null != J.skins && null != J.skins[0] && ka.loadFromData(J.skins[0], ka.frames),
             ya.set_musicVolume(J.songVol / 100));
       };
       J.save = function (b) {
         null == b && (b = J.localStorage);
         b.data.h.touchControls = J.touchControls;
         b.data.h.hideGUI = J.hideGUI;
         b.data.h.focusPause = J.focusPause;
         b.data.h.showArmor = J.showArmor;
         b.data.h.soundVol = J.soundVol;
         b.data.h.songVol = J.songVol;
         b.data.h.qual = J.qual;
         b.data.h.particles = J.particles;
         b.data.h.spaceJump = J.spaceJump;
         b.data.h.useRightClickKey = J.useRightClickKey;
         b.data.h.skins = J.skins;
         b.data.h.keyBindings = J.keyBindings;
         b.data.h.worldList = J.worldList;
         b.data.h.version = J.version;
         b.save();
       };
       J.getKeyBinding = function (b) {
         return Object.prototype.hasOwnProperty.call(J.keyBindings.h, b) && J.intToKey.h.hasOwnProperty(J.keyBindings.h[b].h.id) ? J.intToKey.h[J.keyBindings.h[b].h.id] : null;
       };
       J.resetKeyBindings = function () {
         J.keyBindings = new e();
         for (var b = Object.keys(J.defaultKeyBindings.h), a = b.length, c = 0; c < a; ) {
           var d = b[c++],
             f = J.keyBindings,
             l = O.clone(J.defaultKeyBindings.h[d]);
           f.h[d] = l;
         }
         J.spaceJump = !0;
         J.useRightClickKey = !1;
       };
       var I = function () {};
       r.HxOverrides = I;
       I.__name__ = "HxOverrides";
       I.strDate = function (b) {
         switch (b.length) {
           case 8:
             b = b.split(":");
             var a = new Date();
             a.setTime(0);
             a.setUTCHours(b[0]);
             a.setUTCMinutes(b[1]);
             a.setUTCSeconds(b[2]);
             return a;
           case 10:
             return (b = b.split("-")), new Date(b[0], b[1] - 1, b[2], 0, 0, 0);
           case 19:
             return (b = b.split(" ")), (a = b[0].split("-")), (b = b[1].split(":")), new Date(a[0], a[1] - 1, a[2], b[0], b[1], b[2]);
           default:
             throw na.thrown("Invalid date format : " + b);
         }
       };
       I.cca = function (b, a) {
         b = b.charCodeAt(a);
         if (b == b) return b;
       };
       I.substr = function (b, a, c) {
         if (null == c) c = b.length;
         else if (0 > c)
           if (0 == a) c = b.length + c;
           else return "";
         return b.substr(a, c);
       };
       I.remove = function (b, a) {
         a = b.indexOf(a);
         if (-1 == a) return !1;
         b.splice(a, 1);
         return !0;
       };
       I.now = function () {
         return Date.now();
       };
       var Aa = function () {};
       r.InterstitialManager = Aa;
       Aa.__name__ = "InterstitialManager";
       Aa.connect = function (b, a) {
         Aa.onSuccess = b;
         Aa.onFail = a;
         if (null != window.CrazyGames)
           try {
             if (null != window.CrazyGames.CrazySDK.getInstance()) return;
           } catch (c) {}
         -1 != window.location.href.indexOf(".ungrounded.net") ? (Aa.waitingForNG = !0) : Aa.initializeIFrame();
       };
       Aa.initializeIFrame = function () {
         var b = window.location.href;
         Aa.iF = window.document.createElement("iframe");
         b = encodeURIComponent(b);
         Aa.iF.src = "https://mineblocks.com/1/scripts/if?ref=" + b;
         Aa.iF.style.visibility = "hidden";
         Aa.iF.style.pointerEvents = "none";
         Aa.iF.style.position = "absolute";
         Aa.iF.style.width = "100%";
         Aa.iF.style.height = "100%";
         Aa.iF.style.top = "0";
         Aa.iF.style.left = "0";
         Aa.iF.style.border = "0";
         window.addEventListener(
           "message",
           function (a) {
             "https://mineblocks.com" == a.origin &&
               ("adStartCallback" == a.data
                 ? ((Aa.iF.style.visibility = "visible"), (Aa.iF.style.pointerEvents = "auto"), p.adStartCallback())
                 : "adEndCallback" == a.data && ((Aa.iF.style.visibility = "hidden"), (Aa.iF.style.pointerEvents = "none"), p.adEndCallback()));
           },
           !1
         );
         Aa.iF.onload = function (a) {
           try {
             if (((Aa.loaded = !0), null != Aa.onSuccess)) Aa.onSuccess();
           } catch (c) {
             Ia.trace("iF failed during success", { fileName: "src/InterstitialManager.hx", lineNumber: 68, className: "InterstitialManager", methodName: "initializeIFrame" }), Aa.onFail();
           }
         };
         Aa.iF.onerror = function (a) {
           Aa.loaded = !1;
           Ia.trace("iF failed", { fileName: "src/InterstitialManager.hx", lineNumber: 75, className: "InterstitialManager", methodName: "initializeIFrame" });
           if (null != Aa.onFail) Aa.onFail();
         };
       };
       Aa.run = function () {
         Aa.loaded && null != Aa.iF && Aa.iF.contentWindow.postMessage("runInterstitial", "https://mineblocks.com");
       };
       var Wa = function (b, a) {
         this.enchantmentButtons = [
           { text: "", lvl: 0, canAfford: !1 },
           { text: "", lvl: 0, canAfford: !1 },
           { text: "", lvl: 0, canAfford: !1 },
         ];
         this.totalBooks = 0;
         this.chest = this.sign = this.dispenseName = this.dispenserType = "";
         this.brewingBubblesFrame = 0;
         this.brewingBubblesPlaying = !1;
         this.brewingBubbleHeights = [0, 5, 14, 20, 31, 38];
         this.newName = this.smelter = this.brewer = "";
         this.craftCoords = null;
         this.tableSize = 2;
         this.r = [2, null, 4, null];
         this.l = [null, 1, null, 3];
         this.d = [3, 4, null, null];
         this.blocks2 = [
           [1, 2],
           [3, 4],
         ];
         this.blocks = [1, 2, 3, 4];
         this.levelsText = "";
         this.anvilWillCombine = this.anvilWillRename = !1;
         this.anvilCantCombine = !0;
         this.anvilCanAnvil = this.anvilGettingItem = !1;
         this.anvilCombineWorth = this.anvilChangeNameWorth = this.anvilLevelsRequired = this.anvilItemsToTake = 0;
         this.anvilEcksVisible = this.anvilRenameTextVisible = !1;
         this.page = 1;
         this.gotoAtStartOfFrame = -1;
         this.tab = 0;
         this.currentItems = [];
         var c = new e();
         c.h.name = "Building Blocks";
         c.h.icon = ["wp", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = [
           "r",
           "cs",
           "sb",
           "ms",
           "ob",
           "br",
           "dt",
           "dtg",
           "cdt",
           "farm",
           "myc",
           "gdt",
           "wd",
           "wd1",
           "wp",
           "b",
           "clore",
           "in",
           "gd",
           "dmore",
           "rs",
           "os",
           "lap",
           "to",
           "egem",
           "tob",
           "ib",
           "gb",
           "db",
           "lapb",
           "clb",
           "sd",
           "ss",
           "cy1",
           "brick",
           "bricks",
           "snowblock",
           "ice",
           "fice",
           "gv",
           "books",
           "staircs",
           "stairr",
           "stairn",
           "stairbrick",
           "stairwp",
           "stairsb",
           "stairib",
           "stairgb",
           "stairdb",
           "stairob",
           "stairbr",
           "stairbbb",
           "halfcs",
           "halfr",
           "halfn",
           "halfbrick",
           "halfwp",
           "halfsb",
           "halfib",
           "halfgb",
           "halfdb",
           "halfob",
           "halfbr",
           "halfbbb",
           ["cloth", "white"],
           ["cloth", "lightgray"],
           ["cloth", "gray"],
           ["cloth", "black"],
           ["cloth", "brown"],
           ["cloth", "purple"],
           ["cloth", "magenta"],
           ["cloth", "red"],
           ["cloth", "orange"],
           ["cloth", "pink"],
           ["cloth", "yellow"],
           ["cloth", "lightgreen"],
           ["cloth", "green"],
           ["cloth", "cyan"],
           ["cloth", "lightblue"],
           ["cloth", "blue"],
           ["cloth", "rainbow"],
           "gs",
           ["gs", "white"],
           ["gs", "lightgray"],
           ["gs", "gray"],
           ["gs", "black"],
           ["gs", "brown"],
           ["gs", "purple"],
           ["gs", "magenta"],
           ["gs", "red"],
           ["gs", "orange"],
           ["gs", "pink"],
           ["gs", "yellow"],
           ["gs", "lightgreen"],
           ["gs", "green"],
           ["gs", "cyan"],
           ["gs", "lightblue"],
           ["gs", "blue"],
           "portalstone",
           "n",
           "nb",
           "rnb",
           "glow",
           "magma",
           "nwb",
           "ssd",
           "boneb",
           "es",
           "pf",
           "dsb",
           "hcl",
           "bbb",
         ];
         var d = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Decorations";
         c.h.icon = ["shrub", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = [
           "craft",
           "oven",
           "chest",
           "echest",
           "enchant",
           "anvil",
           "tag",
           ["bed", "red"],
           "dr",
           "idr",
           "bbdr",
           "td1",
           "sign",
           "sl",
           "lv",
           "lv1",
           "lv2",
           "lv3",
           "lv4",
           "st",
           "ladder",
           "fnc",
           "fncg",
           "nfnc",
           "nfncg",
           "ibar",
           "th",
           "degg",
           "lgr",
           "shrub",
           "ds",
           "fw1",
           "fw2",
           "ms1",
           "ms2",
           "msb1",
           "msb2",
           "msb3",
           "msb4",
           "bb",
           "ct",
           "sw",
           "lp",
           "coral",
           "lant",
           "bk",
           "wbk",
           "lbk",
           "abk",
           "web",
           "rp",
           "mobSpawner",
           "moss",
           "ortorch",
           ["carpet", "white"],
           ["carpet", "lightgray"],
           ["carpet", "gray"],
           ["carpet", "black"],
           ["carpet", "brown"],
           ["carpet", "purple"],
           ["carpet", "magenta"],
           ["carpet", "red"],
           ["carpet", "orange"],
           ["carpet", "pink"],
           ["carpet", "yellow"],
           ["carpet", "lightgreen"],
           ["carpet", "green"],
           ["carpet", "cyan"],
           ["carpet", "lightblue"],
           ["carpet", "blue"],
           ["carpet", "rainbow"],
           "bdob",
           "bddt",
           "bdwp",
           "bdr",
           "bdcs",
           "bdbricks",
           "bdnb",
           "bdsb",
           "bdbooks",
           "bdbbb",
         ];
         var f = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Tools and Armor";
         c.h.icon = ["DiamondPickaxe", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = "WoodenPickaxe StonePickaxe IronPickaxe GoldPickaxe DiamondPickaxe WoodenShovel StoneShovel IronShovel GoldShovel DiamondShovel WoodenAxe StoneAxe IronAxe GoldAxe DiamondAxe WoodenHoe StoneHoe IronHoe GoldHoe DiamondHoe WoodenSword StoneSword IronSword GoldSword DiamondSword bow arrow spear bshur Shear fas fr coas clock compass LeatherCap LeatherShirt LeatherPants LeatherShoes IronCap IronShirt IronPants IronShoes GoldCap GoldShirt GoldPants GoldShoes DiamondCap DiamondShirt DiamondPants DiamondShoes DragonCap DragonShirt DragonPants DragonShoes SnowCap AfroCap PartyCap ShadesCap MustacheCap".split(
           " "
         );
         var l = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Food and Crops";
         c.h.icon = ["bread", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = "egg fireegg or lemon lemonb ap gap gasd capple crml sc sugar cake ccake icec cegg ppotato bseed beet wseed mel mels gmels jl pseed lade apade orade mbk pk pkp carrot gcarrot wheat hay bread ccb cookie ccane potato bpotato seed pork cpork bacon cbacon beef cbeef chicken cchicken nugget mutton cmutton rabbit crabbit fi cfi salmon csalmon clown puff se fse rf bowl soup rabbitsoup beetsoup".split(
           " "
         );
         var k = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Redstone";
         c.h.icon = ["rsd", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = "rsd rstorch button wpp pp lever piston spiston dispense dropper light note TNT".split(" ");
         var h = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Transportation";
         c.h.icon = ["railp", 1, 0, g.makeDynamicMap(new e())];
         c.h.items = "raft cart cartTNT cartoven cartchest rail raila raild railp saddle".split(" ");
         var z = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Brewing";
         var m = new e();
         m.h.type = "healing";
         c.h.icon = ["potion", 1, 0, g.makeDynamicMap(m)];
         m = new e();
         m.h.type = "healing";
         m.h.category = "splash";
         var A = new e();
         A.h.type = "harming";
         A.h.category = "splash";
         var n = new e();
         n.h.type = "swiftness";
         n.h.category = "splash";
         var p = new e();
         p.h.type = "slowness";
         p.h.category = "splash";
         var q = new e();
         q.h.type = "poison";
         q.h.category = "splash";
         var t = new e();
         t.h.type = "regeneration";
         t.h.category = "splash";
         var r = new e();
         r.h.type = "strength";
         r.h.category = "splash";
         var w = new e();
         w.h.type = "weakness";
         w.h.category = "splash";
         var y = new e();
         y.h.type = "fireresistance";
         y.h.category = "splash";
         var x = new e();
         x.h.type = "waterbreathing";
         x.h.category = "splash";
         var E = new e();
         E.h.type = "leaping";
         E.h.category = "splash";
         var D = new e();
         D.h.type = "invisibility";
         D.h.category = "splash";
         var ka = new e();
         ka.h.type = "nightvision";
         ka.h.category = "splash";
         c.h.items = [
           "brew",
           "cauldron",
           "bp",
           ["potion", "empty"],
           "boe",
           ["potion", "water"],
           ["potion", "healing"],
           ["potion", "harming"],
           ["potion", "swiftness"],
           ["potion", "slowness"],
           ["potion", "poison"],
           ["potion", "regeneration"],
           ["potion", "strength"],
           ["potion", "weakness"],
           ["potion", "fireresistance"],
           ["potion", "waterbreathing"],
           ["potion", "leaping"],
           ["potion", "invisibility"],
           ["potion", "nightvision"],
           ["potion", m],
           ["potion", A],
           ["potion", n],
           ["potion", p],
           ["potion", q],
           ["potion", t],
           ["potion", r],
           ["potion", w],
           ["potion", y],
           ["potion", x],
           ["potion", E],
           ["potion", D],
           ["potion", ka],
         ];
         A = g.makeDynamicMap(c);
         c = new e();
         c.h.name = "Miscellaneous Items";
         m = new e();
         m.h.type = "chicken";
         c.h.icon = ["megg", 1, 0, g.makeDynamicMap(m)];
         c.h.items = [
           "dm",
           "ii",
           "ironn",
           "gi",
           "goldn",
           "cl",
           "cl2",
           "oddrock",
           "topaz",
           "egemd",
           "cy",
           "snowb",
           "gss",
           "nbr",
           "yellowdust",
           "nw",
           "bone",
           "bonem",
           "paper",
           "book",
           "ep",
           "eoe",
           "blazer",
           "dscl",
           "slimeball",
           "slimeb",
           "magmac",
           "gt",
           "fiber",
           "gp",
           "flint",
           "feather",
           "leather",
           "rleather",
           "rfoot",
           ["megg", "pig"],
           ["megg", "sheep"],
           ["megg", "wolf"],
           ["megg", "chicken"],
           ["megg", "cow"],
           ["megg", "mooshroom"],
           ["megg", "cowctus"],
           ["megg", "zombie"],
           ["megg", "skeleton"],
           ["megg", "creeper"],
           ["megg", "spider"],
           ["megg", "enderman"],
           ["megg", "nethereye"],
           ["megg", "blaze"],
           ["megg", "slime"],
           ["megg", "magmacube"],
           ["megg", "rabbit"],
           ["megg", "squid"],
           ["megg", "zombiepigman"],
           ["megg", "ghast"],
           ["megg", "bat"],
           ["dye", "lightgray"],
           ["dye", "gray"],
           ["dye", "purple"],
           ["dye", "magenta"],
           ["dye", "red"],
           ["dye", "orange"],
           ["dye", "pink"],
           ["dye", "yellow"],
           ["dye", "lightgreen"],
           ["dye", "green"],
           ["dye", "cyan"],
           ["dye", "lightblue"],
           "ll",
           "ink",
           ["bl", "white"],
           ["bl", "lightgray"],
           ["bl", "gray"],
           ["bl", "black"],
           ["bl", "brown"],
           ["bl", "purple"],
           ["bl", "magenta"],
           ["bl", "red"],
           ["bl", "orange"],
           ["bl", "pink"],
           ["bl", "yellow"],
           ["bl", "lightgreen"],
           ["bl", "green"],
           ["bl", "cyan"],
           ["bl", "lightblue"],
           ["bl", "blue"],
           ["bl", "ghast"],
           ["mh", "zombie"],
           ["mh", "skeleton"],
           ["mh", "creeper"],
           ["mh", "enderdragon"],
           ["mh", "1"],
         ];
         this.creativeItems = [d, f, l, k, h, z, A, g.makeDynamicMap(c)];
         this.bookOpen = !1;
         this.bookFrame = 0;
         this.inventorySlots = new e();
         this.currentFrame = 1;
         this.tooltipText = [];
         this.showTooltip = !1;
         this.lastSavedText = "";
         this.currentCommandNumber = -1;
         this.lastCommand = [];
         this.lastSearchText = this.lastAnvilText = "";
         this.searchOpen = !1;
         this.jAnimation = 0;
         this.game = b;
         this.world = a;
         this.set_currentFrame(1);
       };
       r.Inventory = Wa;
       Wa.__name__ = "Inventory";
       Wa.prototype = {
         resize: function () {
           null != this.backgroundEntity && this.backgroundEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryEntity &&
             this.inventoryEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory").width) / G.toFloat(2), G.toFloat(P.getImage("inventory").height) / G.toFloat(2))
               .scale2D(1.7005)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-154, -29);
           null != this.inventoryArmorEntity &&
             this.inventoryArmorEntity.transform
               .reset()
               .scale2D(1.633)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-140, -118);
           null != this.inventoryCraftingEntity &&
             this.inventoryCraftingEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory_crafting").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_crafting").height) / G.toFloat(2))
               .scale2D(1.718)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(9, -130);
           null != this.inventoryCraftingTableEntity &&
             this.inventoryCraftingTableEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory_craftingtable").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2))
               .scale2D(1.711)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-53, -152);
           null != this.inventoryFurnaceEntity &&
             this.inventoryFurnaceEntity.transform
               .reset()
               .translate(31, 31)
               .scale2D(1.718)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-52, -149);
           null != this.inventoryFurnaceBarsEntity &&
             this.inventoryFurnaceBarsEntity.transform
               .reset()
               .scale2D(1.711)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-52, -149);
           null != this.inventoryChestEntity &&
             this.inventoryChestEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory_chest").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_chest").height) / G.toFloat(2))
               .scale2D(1.711)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-154, -155);
           null != this.inventoryJBackgroundEntity &&
             this.inventoryJBackgroundEntity.transform
               .reset()
               .scale(this.game.scene.get_width(), this.game.scene.get_height())
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
           null != this.inventorySignEntity && this.inventorySignEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7 - 32);
           null != this.inventorySignTextBackground &&
             this.inventorySignTextBackground.transform
               .reset()
               .scale2D(2)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(0, -63);
           null != this.inventorySignInput &&
             this.inventorySignInput.transform
               .reset()
               .scale2D(2)
               .translate(this.game.scene.get_width() / 2 - 63, this.game.scene.get_height() / 2 - 7)
               .translate(0, -64);
           null != this.inventoryCreativeEntity && this.inventoryCreativeEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryCreativeItemsEntity &&
             this.inventoryCreativeItemsEntity.transform
               .reset()
               .scale2D(17.5067175)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryCreativeSearchEntity && this.inventoryCreativeSearchEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryCreativeSearchInput &&
             this.inventoryCreativeSearchInput.transform
               .reset()
               .scale2D(2)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-44, -130);
           null != this.inventoryEnchantmentButtonEntity && this.inventoryEnchantmentButtonEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryDispenserEntity &&
             this.inventoryDispenserEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2), G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2))
               .scale2D(1.711)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-53, -152);
           null != this.inventoryCommandsInput && this.inventoryCommandsInput.transform.reset().translate(30, this.game.scene.get_height() - 101 + 3);
           null != this.inventoryAnvilEntity && this.inventoryAnvilEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryAnvilInput &&
             this.inventoryAnvilInput.transform
               .reset()
               .scale2D(2)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(-86, -145);
           null != this.inventoryBrewingEntity && this.inventoryBrewingEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryBrewingItemsEntity && this.inventoryBrewingItemsEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryBrewingIconsEntity && this.inventoryBrewingIconsEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
           null != this.inventoryTrashEntity &&
             this.inventoryTrashEntity.transform
               .reset()
               .translate(G.toFloat(P.getImage("inventory_single").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_single").height) / G.toFloat(2))
               .scale2D(1.65)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(170, 114);
           null != this.inventoryTrashIcon &&
             this.inventoryTrashIcon.transform
               .reset()
               .translate(G.toFloat(P.getImage("trash_bin").width) / G.toFloat(2), G.toFloat(P.getImage("trash_bin").height) / G.toFloat(2))
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
               .translate(180, 120);
           if (null != this.inventorySlots && null != this.slotPositions)
             for (var b = Object.keys(this.slotPositions.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               this.inventorySlots.h[d].set_x(this.game.scene.get_width() / 2 + this.slotPositions.h[d].x - 2);
               this.inventorySlots.h[d].set_y(this.game.scene.get_height() / 2 - 7 + this.slotPositions.h[d].y);
             }
           if (null != this.inventoryCommandsEntity) {
             b = this.inventoryCommandsEntity;
             a = new M(0, 0.7 * this.game.scene.get_height());
             c = new h(0, 0);
             d = new h(1, 1);
             var f = new h(this.game.scene.get_width(), 0.3 * this.game.scene.get_height()),
               l = new e();
             l.h.color = [
               0,
               0.30980392156862746,
               0.4470588235294118,
               0,
               0,
               0.2235294117647059,
               0.30980392156862746,
               0.5,
               0,
               0.30980392156862746,
               0.4470588235294118,
               0,
               0,
               0.30980392156862746,
               0.4470588235294118,
               0,
               0,
               0.2235294117647059,
               0.30980392156862746,
               0.5,
               0,
               0.2235294117647059,
               0.30980392156862746,
               0.5,
             ];
             b.updateQuad(0, a, c, d, f, null, null, l);
             b = this.inventoryCommandsEntity;
             a = new M(26, this.game.scene.get_height() - 101);
             c = new h(0, 0);
             d = new h(1, 1);
             f = new h(this.game.scene.get_width() - 52, 21);
             l = new e();
             var k = w.repeatArray([0, 0, 0, 1], 6);
             l.h.color = k;
             b.updateQuad(1, a, c, d, f, null, null, l);
             b = this.inventoryCommandsEntity;
             a = new M(27, this.game.scene.get_height() - 101 + 1);
             c = new h(0, 0);
             d = new h(1, 1);
             f = new h(this.game.scene.get_width() - 52 - 2, 19);
             l = new e();
             k = w.repeatArray([1, 1, 1, 1], 6);
             l.h.color = k;
             b.updateQuad(2, a, c, d, f, null, null, l);
             this.inventoryCommandsInput.size.set(this.game.scene.get_width() - 52 - 2 - 4, x.get_basis33().height);
           }
           this.updateBackground();
         },
         prepareRenderer: function (b) {
           var a = this;
           if (1 != b) {
             if (null == this.tooltipEntity) {
               var c = P.getImage("ui"),
                 d = Fa.getShader(),
                 f = new e(),
                 l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.tooltipEntity = new da(c, null, d, f);
               this.tooltipEntity.isTransparent = !0;
               this.tooltipEntity.layer = 30;
               this.tooltipEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
             }
             null == this.backgroundEntity &&
               ((c = P.getImage("ui")),
               (d = Fa.getShader()),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.backgroundEntity = new da(c, null, d, f)),
               (this.backgroundEntity.isTransparent = !0),
               (this.backgroundEntity.layer = 11),
               this.backgroundEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               (this.backgroundEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE]));
             null == this.inventoryEntity &&
               ((this.inventoryEntity = P.getImage("inventory").toEntity()),
               (this.inventoryEntity.isTransparent = !0),
               (this.inventoryEntity.layer = 12),
               this.inventoryEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory").width) / G.toFloat(2), G.toFloat(P.getImage("inventory").height) / G.toFloat(2))
                 .scale2D(1.7005)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-154, -29));
             2 == b &&
               (null == this.inventoryArmorEntity &&
                 ((c = P.getImage("inventory_armor")),
                 (d = Fa.getShader(xa.NORMAL)),
                 (f = new e()),
                 (l = w.repeatArray([1], 24)),
                 (f.h.color = l),
                 (l = w.repeatArray([0], 24)),
                 (f.h.colorOffset = l),
                 (this.inventoryArmorEntity = new da(c, null, d, f)),
                 (this.inventoryArmorEntity.isTransparent = !0),
                 (this.inventoryArmorEntity.layer = 12),
                 this.inventoryArmorEntity.updateQuad(0, new M(), new h(), new h(81, 22), new h(81, 22), null, null),
                 this.inventoryArmorEntity.updateQuad(1, new M(5, 6), new h(16, 22), new h(8, 6), new h(8, 6).multiply(1.3), null, null),
                 this.inventoryArmorEntity.updateQuad(2, new M(25, 6), new h(0, 22), new h(8, 8), new h(8, 8).multiply(1.3), null, null),
                 this.inventoryArmorEntity.updateQuad(3, new M(45, 6), new h(8, 22), new h(8, 8), new h(8, 8).multiply(1.3), null, null),
                 this.inventoryArmorEntity.updateQuad(4, new M(65, 9), new h(24, 22), new h(12, 4), new h(12, 4), null, null),
                 this.inventoryArmorEntity.transform
                   .reset()
                   .scale2D(1.633)
                   .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                   .translate(-140, -118)),
               null == this.inventoryCraftingEntity &&
                 ((this.inventoryCraftingEntity = P.getImage("inventory_crafting").toEntity()),
                 (this.inventoryCraftingEntity.isTransparent = !0),
                 (this.inventoryCraftingEntity.layer = 12),
                 this.inventoryCraftingEntity.transform
                   .reset()
                   .translate(G.toFloat(P.getImage("inventory_crafting").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_crafting").height) / G.toFloat(2))
                   .scale2D(1.718)
                   .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                   .translate(9, -130)));
             3 == b &&
               null == this.inventoryCraftingTableEntity &&
               ((this.inventoryCraftingTableEntity = P.getImage("inventory_craftingtable").toEntity()),
               (this.inventoryCraftingTableEntity.isTransparent = !0),
               (this.inventoryCraftingTableEntity.layer = 12),
               this.inventoryCraftingTableEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_craftingtable").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2))
                 .scale2D(1.711)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-53, -152));
             if (4 == b && null == this.inventoryFurnaceEntity) {
               this.inventoryFurnaceEntity = P.getImage("inventory_furnace").toEntity(new t(0, 0, 62, 62));
               this.inventoryFurnaceEntity.isTransparent = !0;
               this.inventoryFurnaceEntity.layer = 13;
               this.inventoryFurnaceEntity.transform
                 .reset()
                 .translate(31, 31)
                 .scale2D(1.718)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-52, -149);
               c = P.getImage("inventory_furnace");
               d = Fa.getShader(xa.NORMAL);
               f = new e();
               l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.inventoryFurnaceBarsEntity = new da(c, null, d, f);
               this.inventoryFurnaceBarsEntity.isTransparent = !0;
               this.inventoryFurnaceBarsEntity.layer = 12;
               c = this.inventoryFurnaceBarsEntity;
               d = new M(8, 24, 0);
               var k = new h(63, 0),
                 C = new h(5, 62),
                 z = new h(7, 14);
               f = new e();
               l = w.repeatArray([0], 24);
               f.h.color = l;
               l = w.repeatArray([0, 0, 0, 1], 6);
               f.h.colorOffset = l;
               c.updateQuad(0, d, k, C, z, null, null, f);
               this.inventoryFurnaceBarsEntity.updateQuad(1, new M(8, 38, 0), new h(63, 0), new h(5, 62), new h(7, 0));
               c = this.inventoryFurnaceBarsEntity;
               d = new M(24, 24, 0);
               k = new h(63, 0);
               C = new h(5, 62);
               z = new h(15, 13);
               f = new e();
               l = w.repeatArray([0], 24);
               f.h.color = l;
               l = w.repeatArray([0, 0, 0, 1], 6);
               f.h.colorOffset = l;
               c.updateQuad(2, d, k, C, z, null, null, f);
               c = this.inventoryFurnaceBarsEntity;
               d = new M(24, 24, 0);
               k = new h(63, 0);
               C = new h(5, 62);
               z = new h(0, 13);
               f = new e();
               l = w.repeatArray([0], 24);
               f.h.color = l;
               l = w.repeatArray([1, 0, 0, 1], 6);
               f.h.colorOffset = l;
               c.updateQuad(3, d, k, C, z, null, null, f);
               this.inventoryFurnaceBarsEntity.transform
                 .reset()
                 .scale2D(1.711)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-52, -149);
             }
             5 == b &&
               null == this.inventoryChestEntity &&
               ((this.inventoryChestEntity = P.getImage("inventory_chest").toEntity()),
               (this.inventoryChestEntity.isTransparent = !0),
               (this.inventoryChestEntity.layer = 12),
               this.inventoryChestEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_chest").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_chest").height) / G.toFloat(2))
                 .scale2D(1.711)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-154, -155));
             7 == b &&
               ((this.jAnimation = 0),
               null == this.inventoryJBackgroundEntity &&
                 ((this.inventoryJBackgroundEntity = new ma([], ba.createQuad(1, 1), ob.getShader())),
                 ob.setupEntity(this.inventoryJBackgroundEntity, ba.quadUVs, new F(-1023410176), new F(-65536), new t(0.5, 0.5, 0, 0.7)),
                 (this.inventoryJBackgroundEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE]),
                 (this.inventoryJBackgroundEntity.isTransparent = !0),
                 this.inventoryJBackgroundEntity.transform
                   .reset()
                   .scale(this.game.scene.get_width(), this.game.scene.get_height())
                   .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2),
                 (this.inventoryJBackgroundEntity.layer = 11)));
             8 == b &&
               (null == this.inventorySignEntity &&
                 ((this.inventorySignEntity = P.getImage("sign").toEntity()),
                 (this.inventorySignEntity.isTransparent = !0),
                 (this.inventorySignEntity.layer = 12),
                 this.inventorySignEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7 - 32),
                 (this.inventorySignTextBackground = new nc(x.get_volter(), "", new F(-3111370), Q.CENTER)),
                 (this.inventorySignTextBackground.layer = 13),
                 this.inventorySignTextBackground.setWordWrap(127),
                 this.inventorySignTextBackground.transform
                   .reset()
                   .scale2D(2)
                   .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                   .translate(0, -63),
                 this.inventorySignTextBackground.set_mask(new t(-63, 0, 127, 3 * x.get_volter().height)),
                 (this.inventorySignText = R.get("inventorySignText", "", new h(), x.get_volter(), F.black, 2, Q.CENTER)),
                 (this.inventorySignText.layer = 14),
                 (this.inventorySignInput = new Ha(this.inventorySignText, new h(127, 3 * x.get_volter().height), 2)),
                 this.inventorySignInput.set_maxLength(45),
                 this.inventorySignInput.set_multiline(!0),
                 this.inventorySignInput.set_wordWrap(!0),
                 this.inventorySignInput.transform
                   .reset()
                   .scale2D(2)
                   .translate(this.game.scene.get_width() / 2 - 63, this.game.scene.get_height() / 2 - 7)
                   .translate(0, -64),
                 (c = P.getImage("ui")),
                 (d = Fa.getShader(xa.NORMAL)),
                 (f = new e()),
                 (l = w.repeatArray([1], 24)),
                 (f.h.color = l),
                 (l = w.repeatArray([0], 24)),
                 (f.h.colorOffset = l),
                 (this.inventorySignButtonEntity = new da(c, null, d, f)),
                 (this.inventorySignButtonEntity.isTransparent = !0),
                 (this.inventorySignButtonEntity.layer = 12)),
               Object.prototype.hasOwnProperty.call(this.world.signs.h, this.sign) ? this.inventorySignInput.set_text(this.world.signs.h[this.sign]) : this.inventorySignInput.set_text(""),
               this.inventorySignInput.set_focused(!0));
             if (9 == b && null == this.inventoryCreativeEntity) {
               c = P.getImage("inventory_creative");
               d = Fa.getShader(xa.NORMAL);
               f = new e();
               l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.inventoryCreativeEntity = new da(c, null, d, f);
               this.inventoryCreativeEntity.isTransparent = !0;
               this.inventoryCreativeEntity.layer = 12;
               this.inventoryCreativeEntity.updateQuad(0, new M(-154, -105, 0), new h(0), new h(181, 102), new h(181, 102).multiply(1.700592));
               this.inventoryCreativeEntity.updateQuad(1, new M(-154, 114, 0), new h(0, 103), new h(181, 22), new h(181, 22).multiply(1.700592));
               f = 0;
               for (l = this.creativeItems.length; f < l; )
                 (c = f++),
                   0 == c
                     ? this.inventoryCreativeEntity.updateQuad(c + 2, new M(-154 + 34.01184 * c, -135, 0), new h(0, 126), new h(21, 19), new h(21, 19).multiply(1.700592))
                     : this.inventoryCreativeEntity.updateQuad(c + 2, new M(-154 + 34.01184 * c, -135, 0), new h(22, 126), new h(21, 19), new h(21, 19).multiply(1.700592));
               this.inventoryCreativeEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
               c = P.getImage("ui");
               d = Fa.getShader(xa.NORMAL);
               f = new e();
               l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.inventoryCreativeButtonsEntity = new da(c, null, d, f);
               this.inventoryCreativeButtonsEntity.isTransparent = !0;
               this.inventoryCreativeButtonsEntity.layer = 12;
               c = y.blockTextures;
               d = Fa.getShader(xa.NORMAL);
               f = new e();
               l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.inventoryCreativeItemsEntity = new da(c, null, d, f);
               this.inventoryCreativeItemsEntity.transform.scale2D(17.5067175).translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
               this.inventoryCreativeItemsEntity.isTransparent = !0;
               this.inventoryCreativeItemsEntity.layer = 16;
               f = 0;
               for (l = this.creativeItems.length; f < l; ) (c = f++), new bb(this.inventoryCreativeItemsEntity, (-146 + 34.01184 * c) / 16 / 1.09416984375, -7.197237289057757, this.game, this.world, this.creativeItems[c].h.icon);
               this.currentItems = this.creativeItems[this.tab].h.items;
               c = P.getImage("inventory_creative");
               d = Fa.getShader(xa.NORMAL);
               f = new e();
               l = w.repeatArray([1], 24);
               f.h.color = l;
               l = w.repeatArray([0], 24);
               f.h.colorOffset = l;
               this.inventoryCreativeSearchEntity = new da(c, null, d, f);
               this.inventoryCreativeSearchEntity.isTransparent = !0;
               this.inventoryCreativeSearchEntity.layer = 17;
               this.inventoryCreativeSearchEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7);
               this.inventoryCreativeSearchEntity.updateQuad(0, new M(122, -135), new h(135, 126), new h(16, 15), new h(16, 15).multiply(2));
               this.inventoryCreativeSearchText = new nc(x.get_volter(), "", F.black, Q.LEFT);
               this.inventoryCreativeSearchText.layer = 18;
               this.inventoryCreativeSearchInput = new Ha(this.inventoryCreativeSearchText, new h(82, x.get_volter().height));
               this.inventoryCreativeSearchInput.set_maxLength(16);
               this.inventoryCreativeSearchInput.transform
                 .reset()
                 .scale2D(2)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-44, -130);
             }
             10 == b &&
               null == this.inventoryEnchantmentEntity &&
               ((this.inventoryEnchantmentEntity = P.getImage("inventory_enchanting").toEntity(new t(0, 0, G.toFloat(P.getImage("inventory_enchanting").width), G.toFloat(P.getImage("inventory_enchanting").height)))),
               (this.inventoryEnchantmentEntity.isTransparent = !0),
               (this.inventoryEnchantmentEntity.layer = 12),
               this.inventoryEnchantmentEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_enchanting").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_enchanting").height) / G.toFloat(2))
                 .scale2D(1.537094)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-153, -152),
               (this.inventoryEnchantmentItemEntity = P.getImage("inventory_single").toEntity()),
               (this.inventoryEnchantmentItemEntity.isTransparent = !0),
               (this.inventoryEnchantmentItemEntity.layer = 13),
               this.inventoryEnchantmentItemEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_single").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_single").height) / G.toFloat(2))
                 .scale2D(1.65)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-126, -100),
               (c = P.getImage("inventory_enchantment_button")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryEnchantmentButtonEntity = new da(c, null, d, f)),
               (this.inventoryEnchantmentButtonEntity.isTransparent = !0),
               (this.inventoryEnchantmentButtonEntity.layer = 13),
               this.inventoryEnchantmentButtonEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               (this.buyEnchants = [
                 function () {
                   a.buyEnchant(0);
                 },
                 function () {
                   a.buyEnchant(1);
                 },
                 function () {
                   a.buyEnchant(2);
                 },
               ]));
             11 == b &&
               null == this.inventoryDispenserEntity &&
               ((this.inventoryDispenserEntity = P.getImage("inventory_craftingtable").toEntity(new t(0, 0, G.toFloat(P.getImage("inventory_craftingtable").height), G.toFloat(P.getImage("inventory_craftingtable").height)))),
               (this.inventoryDispenserEntity.isTransparent = !0),
               (this.inventoryDispenserEntity.layer = 12),
               this.inventoryDispenserEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2), G.toFloat(P.getImage("inventory_craftingtable").height) / G.toFloat(2))
                 .scale2D(1.711)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-53, -152));
             12 == b &&
               (null == this.inventoryCommandsEntity &&
                 ((c = Yb.getShader()),
                 (f = new e()),
                 (l = w.repeatArray([0], 24)),
                 (f.h.color = l),
                 (this.inventoryCommandsEntity = new da(null, null, c, f)),
                 (this.inventoryCommandsEntity.isTransparent = !0),
                 (this.inventoryCommandsEntity.layer = 12),
                 (this.inventoryCommandsEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE]),
                 (c = this.inventoryCommandsEntity),
                 (d = new M(0, 0.7 * this.game.scene.get_height())),
                 (k = new h(0, 0)),
                 (C = new h(1, 1)),
                 (z = new h(this.game.scene.get_width(), 0.3 * this.game.scene.get_height())),
                 (f = new e()),
                 (f.h.color = [
                   0,
                   0.30980392156862746,
                   0.4470588235294118,
                   0,
                   0,
                   0.2235294117647059,
                   0.30980392156862746,
                   0.5,
                   0,
                   0.30980392156862746,
                   0.4470588235294118,
                   0,
                   0,
                   0.30980392156862746,
                   0.4470588235294118,
                   0,
                   0,
                   0.2235294117647059,
                   0.30980392156862746,
                   0.5,
                   0,
                   0.2235294117647059,
                   0.30980392156862746,
                   0.5,
                 ]),
                 c.updateQuad(0, d, k, C, z, null, null, f),
                 (c = this.inventoryCommandsEntity),
                 (d = new M(26, this.game.scene.get_height() - 101)),
                 (k = new h(0, 0)),
                 (C = new h(1, 1)),
                 (z = new h(this.game.scene.get_width() - 52, 21)),
                 (f = new e()),
                 (l = w.repeatArray([0, 0, 0, 1], 6)),
                 (f.h.color = l),
                 c.updateQuad(1, d, k, C, z, null, null, f),
                 (c = this.inventoryCommandsEntity),
                 (d = new M(27, this.game.scene.get_height() - 101 + 1)),
                 (k = new h(0, 0)),
                 (C = new h(1, 1)),
                 (z = new h(this.game.scene.get_width() - 52 - 2, 19)),
                 (f = new e()),
                 (l = w.repeatArray([1, 1, 1, 1], 6)),
                 (f.h.color = l),
                 c.updateQuad(2, d, k, C, z, null, null, f),
                 (this.inventoryCommandsText = new nc(x.get_basis33(), "", F.black, Q.LEFT)),
                 (this.inventoryCommandsText.layer = 17),
                 (this.inventoryCommandsInput = new Ha(this.inventoryCommandsText, new h(this.game.scene.get_width() - 52 - 2 - 4, x.get_basis33().height))),
                 this.inventoryCommandsInput.set_maxLength(1024),
                 this.inventoryCommandsInput.transform.reset().translate(30, this.game.scene.get_height() - 101 + 3)),
               this.inventoryCommandsInput.set_focused(!0),
               (this.currentCommandNumber = -1),
               (this.lastSavedText = ""),
               this.inventoryCommandsInput.set_text(""));
             13 == b &&
               null == this.inventoryAnvilEntity &&
               ((c = P.getImage("inventory_anvil")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryAnvilEntity = new da(c, null, d, f)),
               (this.inventoryAnvilEntity.isTransparent = !0),
               (this.inventoryAnvilEntity.layer = 12),
               this.inventoryAnvilEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               this.inventoryAnvilEntity.updateQuad(0, new M(-147, -173, 0), new h(0, 16), new h(16, 16), new h(16, 16).multiply(3)),
               this.inventoryAnvilEntity.updateQuad(1, new M(-40, -102, 0), new h(16, 16), new h(16, 16), new h(16, 16).multiply(1.5)),
               this.inventoryAnvilEntity.updateQuad(2, new M(55, -102, 0), new h(0, 32), new h(23, 15), new h(23, 15).multiply(1.5)),
               this.inventoryAnvilEntity.updateQuad(3, new M(60, -103, 0), new h(16, 0), new h(16, 16), new h(16, 16).multiply(1.5)),
               this.inventoryAnvilEntity.add9Slice(new t(-90, -148, 235, 24), new t(0, 0, 16, 16), new t(3, 3, 10, 10)),
               (c = P.getImage("inventory_single")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryAnvilItemsEntity = new da(c, null, d, f)),
               (this.inventoryAnvilItemsEntity.isTransparent = !0),
               (this.inventoryAnvilItemsEntity.layer = 12),
               this.inventoryAnvilItemsEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               this.inventoryAnvilItemsEntity.addQuad(new M(-90, -108, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryAnvilItemsEntity.addQuad(new M(-1, -108, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryAnvilItemsEntity.addQuad(new M(110, -108, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               (this.inventoryAnvilText = new nc(x.get_volter(), "", F.black, Q.LEFT)),
               (this.inventoryAnvilText.layer = 17),
               (this.inventoryAnvilInput = new Ha(this.inventoryAnvilText, new h(113, x.get_volter().height))),
               this.inventoryAnvilInput.set_maxLength(20),
               this.inventoryAnvilInput.set_allowedCharacters("a-zA-Z0-9\\-=+|_!.,()[\\]<>'@\\$%\\^&\\*#\\?\\/ "),
               this.inventoryAnvilInput.transform
                 .reset()
                 .scale2D(2)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(-86, -145));
             14 == b &&
               null == this.inventoryBrewingEntity &&
               ((c = P.getImage("inventory_brewing")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryBrewingEntity = new da(c, null, d, f)),
               (this.inventoryBrewingEntity.isTransparent = !0),
               (this.inventoryBrewingEntity.layer = 12),
               this.inventoryBrewingEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               this.inventoryBrewingEntity.addQuad(new M(-76, -128, 0), new h(0, 40), new h(32, 26)),
               this.inventoryBrewingEntity.addQuad(new M(-45, -105, 0), new h(0, 66), new h(22, 6)),
               this.inventoryBrewingEntity.addQuad(new M(-45, -105, 0), new h(0, 72), new h(0, 6)),
               this.inventoryBrewingEntity.addQuad(new M(-43, -143, 0), new h(32, 40), new h(19, 38)),
               this.inventoryBrewingEntity.addQuad(new M(-43, -143, 0), new h(51, 40), new h(19, 0)),
               this.inventoryBrewingEntity.addQuad(new M(-24, -118, 0), new h(), new h(55, 40)),
               this.inventoryBrewingEntity.addQuad(new M(31, -141, 0), new h(55, 0), new h(17, 36)),
               this.inventoryBrewingEntity.addQuad(new M(31, -141, 0), new h(72, 0), new h(17, 0)),
               (c = P.getImage("inventory_single")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryBrewingItemsEntity = new da(c, null, d, f)),
               (this.inventoryBrewingItemsEntity.isTransparent = !0),
               (this.inventoryBrewingItemsEntity.layer = 12),
               this.inventoryBrewingItemsEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               this.inventoryBrewingItemsEntity.addQuad(new M(-13, -152, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryBrewingItemsEntity.addQuad(new M(-108, -152, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryBrewingItemsEntity.addQuad(new M(-56, -92, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryBrewingItemsEntity.addQuad(new M(-14, -81, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               this.inventoryBrewingItemsEntity.addQuad(new M(28, -92, 0), new h(), new h(G.toFloat(P.getImage("inventory_single").width), G.toFloat(P.getImage("inventory_single").height)), null, new h(35, 35)),
               (c = P.getImage("inventory_brewing")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.inventoryBrewingIconsEntity = new da(c, null, d, f)),
               (this.inventoryBrewingIconsEntity.isTransparent = !0),
               (this.inventoryBrewingIconsEntity.layer = 12),
               this.inventoryBrewingIconsEntity.transform.reset().translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7),
               this.inventoryBrewingIconsEntity.addQuad(new M(-100, -144, 0), new h(70, 36), new h(16, 16), null, new h(18, 18)),
               this.inventoryBrewingIconsEntity.addQuad(new M(-48, -84, 0), new h(70, 52), new h(16, 16), null, new h(18, 18)),
               this.inventoryBrewingIconsEntity.addQuad(new M(-6, -73, 0), new h(70, 52), new h(16, 16), null, new h(18, 18)),
               this.inventoryBrewingIconsEntity.addQuad(new M(36, -84, 0), new h(70, 52), new h(16, 16), null, new h(18, 18)));
             (2 != b && 3 != b && 4 != b && 5 != b && 9 != b && 10 != b && 11 != b && 13 != b && 14 != b) ||
               null != this.inventoryTrashEntity ||
               ((this.inventoryTrashEntity = P.getImage("inventory_single").toEntity()),
               (this.inventoryTrashEntity.isTransparent = !0),
               (this.inventoryTrashEntity.layer = 12),
               this.inventoryTrashEntity.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("inventory_single").width) / G.toFloat(2), G.toFloat(P.getImage("inventory_single").height) / G.toFloat(2))
                 .scale2D(1.65)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(170, 114),
               (this.inventoryTrashIcon = P.getImage("trash_bin").toEntity()),
               (this.inventoryTrashIcon.isTransparent = !0),
               (this.inventoryTrashIcon.layer = 15),
               this.inventoryTrashIcon.transform
                 .reset()
                 .translate(G.toFloat(P.getImage("trash_bin").width) / G.toFloat(2), G.toFloat(P.getImage("trash_bin").height) / G.toFloat(2))
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7)
                 .translate(180, 120));
             null == this.itemsEntity &&
               ((c = y.blockTextures),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.itemsEntity = new da(c, null, d, f)),
               this.itemsEntity.transform.scale2D(17.5067175),
               (this.itemsEntity.isTransparent = !0),
               (this.itemsEntity.layer = 16),
               (this.itemNumbersEntity = new da(this.game.itemNumberTexture)),
               (this.itemNumbersEntity.isTransparent = !0),
               (this.itemNumbersEntity.layer = 17),
               (c = P.getImage("ui")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.slotsEntity = new da(c, null, d, f)),
               (this.slotsEntity.isTransparent = !0),
               (this.slotsEntity.layer = 15));
             this.slotPositions = new e();
             if (2 == b || 3 == b || 4 == b || 5 == b || 10 == b || 11 == b || 13 == b || 14 == b)
               (f = new e()),
                 (f.h.i1 = {
                   x: -134,
                   y: 132,
                   number: 0,
                   data: function () {
                     return a.world.inventoryItem(0);
                   },
                 }),
                 (f.h.i2 = {
                   x: -100,
                   y: 132,
                   number: 1,
                   data: function () {
                     return a.world.inventoryItem(1);
                   },
                 }),
                 (f.h.i3 = {
                   x: -66,
                   y: 132,
                   number: 2,
                   data: function () {
                     return a.world.inventoryItem(2);
                   },
                 }),
                 (f.h.i4 = {
                   x: -32,
                   y: 132,
                   number: 3,
                   data: function () {
                     return a.world.inventoryItem(3);
                   },
                 }),
                 (f.h.i5 = {
                   x: 2,
                   y: 132,
                   number: 4,
                   data: function () {
                     return a.world.inventoryItem(4);
                   },
                 }),
                 (f.h.i6 = {
                   x: 36,
                   y: 132,
                   number: 5,
                   data: function () {
                     return a.world.inventoryItem(5);
                   },
                 }),
                 (f.h.i7 = {
                   x: 70,
                   y: 132,
                   number: 6,
                   data: function () {
                     return a.world.inventoryItem(6);
                   },
                 }),
                 (f.h.i8 = {
                   x: 104,
                   y: 132,
                   number: 7,
                   data: function () {
                     return a.world.inventoryItem(7);
                   },
                 }),
                 (f.h.i9 = {
                   x: 138,
                   y: 132,
                   number: 8,
                   data: function () {
                     return a.world.inventoryItem(8);
                   },
                 }),
                 (f.h.i10 = {
                   x: -134,
                   y: -11,
                   number: 9,
                   data: function () {
                     return a.world.inventoryItem(9);
                   },
                 }),
                 (f.h.i11 = {
                   x: -100,
                   y: -11,
                   number: 10,
                   data: function () {
                     return a.world.inventoryItem(10);
                   },
                 }),
                 (f.h.i12 = {
                   x: -66,
                   y: -11,
                   number: 11,
                   data: function () {
                     return a.world.inventoryItem(11);
                   },
                 }),
                 (f.h.i13 = {
                   x: -32,
                   y: -11,
                   number: 12,
                   data: function () {
                     return a.world.inventoryItem(12);
                   },
                 }),
                 (f.h.i14 = {
                   x: 2,
                   y: -11,
                   number: 13,
                   data: function () {
                     return a.world.inventoryItem(13);
                   },
                 }),
                 (f.h.i15 = {
                   x: 36,
                   y: -11,
                   number: 14,
                   data: function () {
                     return a.world.inventoryItem(14);
                   },
                 }),
                 (f.h.i16 = {
                   x: 70,
                   y: -11,
                   number: 15,
                   data: function () {
                     return a.world.inventoryItem(15);
                   },
                 }),
                 (f.h.i17 = {
                   x: 104,
                   y: -11,
                   number: 16,
                   data: function () {
                     return a.world.inventoryItem(16);
                   },
                 }),
                 (f.h.i18 = {
                   x: 138,
                   y: -11,
                   number: 17,
                   data: function () {
                     return a.world.inventoryItem(17);
                   },
                 }),
                 (f.h.i19 = {
                   x: -134,
                   y: 23,
                   number: 18,
                   data: function () {
                     return a.world.inventoryItem(18);
                   },
                 }),
                 (f.h.i20 = {
                   x: -100,
                   y: 23,
                   number: 19,
                   data: function () {
                     return a.world.inventoryItem(19);
                   },
                 }),
                 (f.h.i21 = {
                   x: -66,
                   y: 23,
                   number: 20,
                   data: function () {
                     return a.world.inventoryItem(20);
                   },
                 }),
                 (f.h.i22 = {
                   x: -32,
                   y: 23,
                   number: 21,
                   data: function () {
                     return a.world.inventoryItem(21);
                   },
                 }),
                 (f.h.i23 = {
                   x: 2,
                   y: 23,
                   number: 22,
                   data: function () {
                     return a.world.inventoryItem(22);
                   },
                 }),
                 (f.h.i24 = {
                   x: 36,
                   y: 23,
                   number: 23,
                   data: function () {
                     return a.world.inventoryItem(23);
                   },
                 }),
                 (f.h.i25 = {
                   x: 70,
                   y: 23,
                   number: 24,
                   data: function () {
                     return a.world.inventoryItem(24);
                   },
                 }),
                 (f.h.i26 = {
                   x: 104,
                   y: 23,
                   number: 25,
                   data: function () {
                     return a.world.inventoryItem(25);
                   },
                 }),
                 (f.h.i27 = {
                   x: 138,
                   y: 23,
                   number: 26,
                   data: function () {
                     return a.world.inventoryItem(26);
                   },
                 }),
                 (f.h.i28 = {
                   x: -134,
                   y: 57,
                   number: 27,
                   data: function () {
                     return a.world.inventoryItem(27);
                   },
                 }),
                 (f.h.i29 = {
                   x: -100,
                   y: 57,
                   number: 28,
                   data: function () {
                     return a.world.inventoryItem(28);
                   },
                 }),
                 (f.h.i30 = {
                   x: -66,
                   y: 57,
                   number: 29,
                   data: function () {
                     return a.world.inventoryItem(29);
                   },
                 }),
                 (f.h.i31 = {
                   x: -32,
                   y: 57,
                   number: 30,
                   data: function () {
                     return a.world.inventoryItem(30);
                   },
                 }),
                 (f.h.i32 = {
                   x: 2,
                   y: 57,
                   number: 31,
                   data: function () {
                     return a.world.inventoryItem(31);
                   },
                 }),
                 (f.h.i33 = {
                   x: 36,
                   y: 57,
                   number: 32,
                   data: function () {
                     return a.world.inventoryItem(32);
                   },
                 }),
                 (f.h.i34 = {
                   x: 70,
                   y: 57,
                   number: 33,
                   data: function () {
                     return a.world.inventoryItem(33);
                   },
                 }),
                 (f.h.i35 = {
                   x: 104,
                   y: 57,
                   number: 34,
                   data: function () {
                     return a.world.inventoryItem(34);
                   },
                 }),
                 (f.h.i36 = {
                   x: 138,
                   y: 57,
                   number: 35,
                   data: function () {
                     return a.world.inventoryItem(35);
                   },
                 }),
                 (f.h.i37 = {
                   x: -134,
                   y: 91,
                   number: 36,
                   data: function () {
                     return a.world.inventoryItem(36);
                   },
                 }),
                 (f.h.i38 = {
                   x: -100,
                   y: 91,
                   number: 37,
                   data: function () {
                     return a.world.inventoryItem(37);
                   },
                 }),
                 (f.h.i39 = {
                   x: -66,
                   y: 91,
                   number: 38,
                   data: function () {
                     return a.world.inventoryItem(38);
                   },
                 }),
                 (f.h.i40 = {
                   x: -32,
                   y: 91,
                   number: 39,
                   data: function () {
                     return a.world.inventoryItem(39);
                   },
                 }),
                 (f.h.i41 = {
                   x: 2,
                   y: 91,
                   number: 40,
                   data: function () {
                     return a.world.inventoryItem(40);
                   },
                 }),
                 (f.h.i42 = {
                   x: 36,
                   y: 91,
                   number: 41,
                   data: function () {
                     return a.world.inventoryItem(41);
                   },
                 }),
                 (f.h.i43 = {
                   x: 70,
                   y: 91,
                   number: 42,
                   data: function () {
                     return a.world.inventoryItem(42);
                   },
                 }),
                 (f.h.i44 = {
                   x: 104,
                   y: 91,
                   number: 43,
                   data: function () {
                     return a.world.inventoryItem(43);
                   },
                 }),
                 (f.h.i45 = {
                   x: 138,
                   y: 91,
                   number: 44,
                   data: function () {
                     return a.world.inventoryItem(44);
                   },
                 }),
                 O.mapConcat(this.slotPositions, f);
             this.world.gamemode != U.gamemodes.h.CREATIVE ||
               (2 != b && 3 != b && 4 != b && 5 != b && 9 != b && 10 != b && 11 != b && 13 != b && 14 != b) ||
               ((f = new e()), (f.h.trashItem = { x: 190, y: 133, number: 0, data: null }), O.mapConcat(this.slotPositions, f));
             2 == b &&
               ((f = new e()),
               (f.h.a1 = {
                 x: -121,
                 y: -100,
                 number: 0,
                 data: function () {
                   return a.world.armorsAsItem(0);
                 },
               }),
               (f.h.a2 = {
                 x: -89,
                 y: -100,
                 number: 1,
                 data: function () {
                   return a.world.armorsAsItem(1);
                 },
               }),
               (f.h.a3 = {
                 x: -56,
                 y: -100,
                 number: 2,
                 data: function () {
                   return a.world.armorsAsItem(2);
                 },
               }),
               (f.h.a4 = {
                 x: -24,
                 y: -100,
                 number: 3,
                 data: function () {
                   return a.world.armorsAsItem(3);
                 },
               }),
               (f.h.c1 = { x: 30, y: -112, number: 0, data: null }),
               (f.h.c2 = { x: 64, y: -112, number: 1, data: null }),
               (f.h.c3 = { x: 30, y: -78, number: 2, data: null }),
               (f.h.c4 = { x: 64, y: -78, number: 3, data: null }),
               (f.h.output = { x: 107, y: -95, number: 0, data: null }),
               O.mapConcat(this.slotPositions, f),
               (this.blocks = [1, 2, 3, 4]),
               (this.blocks2 = [
                 [1, 2],
                 [3, 4],
               ]),
               (this.d = [3, 4, null, null]),
               (this.l = [null, 1, null, 3]),
               (this.r = [2, null, 4, null]),
               (this.tableSize = 2));
             3 == b &&
               ((f = new e()),
               (f.h.c1 = { x: -31, y: -134, number: 0, data: null }),
               (f.h.c2 = { x: 2, y: -134, number: 1, data: null }),
               (f.h.c3 = { x: 35, y: -134, number: 2, data: null }),
               (f.h.c4 = { x: -31, y: -99, number: 3, data: null }),
               (f.h.c5 = { x: 2, y: -99, number: 4, data: null }),
               (f.h.c6 = { x: 35, y: -99, number: 5, data: null }),
               (f.h.c7 = { x: -31, y: -65, number: 6, data: null }),
               (f.h.c8 = { x: 2, y: -65, number: 7, data: null }),
               (f.h.c9 = { x: 35, y: -65, number: 8, data: null }),
               (f.h.output = { x: 79, y: -100, number: 0, data: null }),
               O.mapConcat(this.slotPositions, f),
               (this.blocks = [1, 2, 3, 4, 5, 6, 7, 8, 9]),
               (this.blocks2 = [
                 [1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9],
               ]),
               (this.d = [4, 5, 6, 7, 8, 9, null, null, null]),
               (this.l = [null, 1, 2, null, 4, 5, null, 7, 8]),
               (this.r = [2, 3, null, 5, 6, null, 8, 9, null]),
               (this.tableSize = 3));
             4 == b &&
               ((f = new e()),
               (f.h.cook = {
                 x: -31,
                 y: -131,
                 number: 0,
                 data: function () {
                   var b = a.world.toSmelt.h[a.game.inventario.smelter];
                   return null == b ? null : b.h.input;
                 },
               }),
               (f.h.fuel = {
                 x: -31,
                 y: -63,
                 number: 0,
                 data: function () {
                   var b = a.world.toSmelt.h[a.game.inventario.smelter];
                   return null == b ? null : b.h.fuel;
                 },
               }),
               (f.h.output2 = {
                 x: 38,
                 y: -96,
                 number: 0,
                 data: function () {
                   var b = a.world.toSmelt.h[a.game.inventario.smelter];
                   return null == b ? null : b.h.output;
                 },
               }),
               O.mapConcat(this.slotPositions, f));
             5 == b &&
               ((f = new e()),
               (f.h.h1 = {
                 x: -133,
                 y: -137,
                 number: 0,
                 data: function () {
                   return a.chestSlotFetchData(0);
                 },
               }),
               (f.h.h2 = {
                 x: -98,
                 y: -137,
                 number: 1,
                 data: function () {
                   return a.chestSlotFetchData(1);
                 },
               }),
               (f.h.h3 = {
                 x: -64,
                 y: -137,
                 number: 2,
                 data: function () {
                   return a.chestSlotFetchData(2);
                 },
               }),
               (f.h.h4 = {
                 x: -30,
                 y: -137,
                 number: 3,
                 data: function () {
                   return a.chestSlotFetchData(3);
                 },
               }),
               (f.h.h5 = {
                 x: 4,
                 y: -137,
                 number: 4,
                 data: function () {
                   return a.chestSlotFetchData(4);
                 },
               }),
               (f.h.h6 = {
                 x: 38,
                 y: -137,
                 number: 5,
                 data: function () {
                   return a.chestSlotFetchData(5);
                 },
               }),
               (f.h.h7 = {
                 x: 72,
                 y: -137,
                 number: 6,
                 data: function () {
                   return a.chestSlotFetchData(6);
                 },
               }),
               (f.h.h8 = {
                 x: 106,
                 y: -137,
                 number: 7,
                 data: function () {
                   return a.chestSlotFetchData(7);
                 },
               }),
               (f.h.h9 = {
                 x: 141,
                 y: -137,
                 number: 8,
                 data: function () {
                   return a.chestSlotFetchData(8);
                 },
               }),
               (f.h.h10 = {
                 x: -133,
                 y: -103,
                 number: 9,
                 data: function () {
                   return a.chestSlotFetchData(9);
                 },
               }),
               (f.h.h11 = {
                 x: -99,
                 y: -103,
                 number: 10,
                 data: function () {
                   return a.chestSlotFetchData(10);
                 },
               }),
               (f.h.h12 = {
                 x: -64,
                 y: -103,
                 number: 11,
                 data: function () {
                   return a.chestSlotFetchData(11);
                 },
               }),
               (f.h.h13 = {
                 x: -30,
                 y: -103,
                 number: 12,
                 data: function () {
                   return a.chestSlotFetchData(12);
                 },
               }),
               (f.h.h14 = {
                 x: 4,
                 y: -103,
                 number: 13,
                 data: function () {
                   return a.chestSlotFetchData(13);
                 },
               }),
               (f.h.h15 = {
                 x: 38,
                 y: -103,
                 number: 14,
                 data: function () {
                   return a.chestSlotFetchData(14);
                 },
               }),
               (f.h.h16 = {
                 x: 72,
                 y: -103,
                 number: 15,
                 data: function () {
                   return a.chestSlotFetchData(15);
                 },
               }),
               (f.h.h17 = {
                 x: 106,
                 y: -103,
                 number: 16,
                 data: function () {
                   return a.chestSlotFetchData(16);
                 },
               }),
               (f.h.h18 = {
                 x: 141,
                 y: -103,
                 number: 17,
                 data: function () {
                   return a.chestSlotFetchData(17);
                 },
               }),
               (f.h.h19 = {
                 x: -133,
                 y: -68,
                 number: 18,
                 data: function () {
                   return a.chestSlotFetchData(18);
                 },
               }),
               (f.h.h20 = {
                 x: -99,
                 y: -68,
                 number: 19,
                 data: function () {
                   return a.chestSlotFetchData(19);
                 },
               }),
               (f.h.h21 = {
                 x: -64,
                 y: -68,
                 number: 20,
                 data: function () {
                   return a.chestSlotFetchData(20);
                 },
               }),
               (f.h.h22 = {
                 x: -30,
                 y: -68,
                 number: 21,
                 data: function () {
                   return a.chestSlotFetchData(21);
                 },
               }),
               (f.h.h23 = {
                 x: 4,
                 y: -68,
                 number: 22,
                 data: function () {
                   return a.chestSlotFetchData(22);
                 },
               }),
               (f.h.h24 = {
                 x: 38,
                 y: -68,
                 number: 23,
                 data: function () {
                   return a.chestSlotFetchData(23);
                 },
               }),
               (f.h.h25 = {
                 x: 72,
                 y: -68,
                 number: 24,
                 data: function () {
                   return a.chestSlotFetchData(24);
                 },
               }),
               (f.h.h26 = {
                 x: 106,
                 y: -68,
                 number: 25,
                 data: function () {
                   return a.chestSlotFetchData(25);
                 },
               }),
               (f.h.h27 = {
                 x: 141,
                 y: -68,
                 number: 26,
                 data: function () {
                   return a.chestSlotFetchData(26);
                 },
               }),
               O.mapConcat(this.slotPositions, f));
             9 == b &&
               ((f = new e()),
               (f.h.i1 = {
                 x: -134,
                 y: 132,
                 number: 0,
                 data: function () {
                   return a.world.inventoryItem(0);
                 },
               }),
               (f.h.i2 = {
                 x: -100,
                 y: 132,
                 number: 1,
                 data: function () {
                   return a.world.inventoryItem(1);
                 },
               }),
               (f.h.i3 = {
                 x: -66,
                 y: 132,
                 number: 2,
                 data: function () {
                   return a.world.inventoryItem(2);
                 },
               }),
               (f.h.i4 = {
                 x: -32,
                 y: 132,
                 number: 3,
                 data: function () {
                   return a.world.inventoryItem(3);
                 },
               }),
               (f.h.i5 = {
                 x: 2,
                 y: 132,
                 number: 4,
                 data: function () {
                   return a.world.inventoryItem(4);
                 },
               }),
               (f.h.i6 = {
                 x: 36,
                 y: 132,
                 number: 5,
                 data: function () {
                   return a.world.inventoryItem(5);
                 },
               }),
               (f.h.i7 = {
                 x: 70,
                 y: 132,
                 number: 6,
                 data: function () {
                   return a.world.inventoryItem(6);
                 },
               }),
               (f.h.i8 = {
                 x: 104,
                 y: 132,
                 number: 7,
                 data: function () {
                   return a.world.inventoryItem(7);
                 },
               }),
               (f.h.i9 = {
                 x: 138,
                 y: 132,
                 number: 8,
                 data: function () {
                   return a.world.inventoryItem(8);
                 },
               }),
               (f.h.p1 = {
                 x: -134,
                 y: -87,
                 number: 0,
                 data: function () {
                   return a.game.inventario.getCreativeItem(0);
                 },
               }),
               (f.h.p2 = {
                 x: -100,
                 y: -87,
                 number: 1,
                 data: function () {
                   return a.game.inventario.getCreativeItem(1);
                 },
               }),
               (f.h.p3 = {
                 x: -66,
                 y: -87,
                 number: 2,
                 data: function () {
                   return a.game.inventario.getCreativeItem(2);
                 },
               }),
               (f.h.p4 = {
                 x: -32,
                 y: -87,
                 number: 3,
                 data: function () {
                   return a.game.inventario.getCreativeItem(3);
                 },
               }),
               (f.h.p5 = {
                 x: 2,
                 y: -87,
                 number: 4,
                 data: function () {
                   return a.game.inventario.getCreativeItem(4);
                 },
               }),
               (f.h.p6 = {
                 x: 36,
                 y: -87,
                 number: 5,
                 data: function () {
                   return a.game.inventario.getCreativeItem(5);
                 },
               }),
               (f.h.p7 = {
                 x: 70,
                 y: -87,
                 number: 6,
                 data: function () {
                   return a.game.inventario.getCreativeItem(6);
                 },
               }),
               (f.h.p8 = {
                 x: 104,
                 y: -87,
                 number: 7,
                 data: function () {
                   return a.game.inventario.getCreativeItem(7);
                 },
               }),
               (f.h.p9 = {
                 x: 138,
                 y: -87,
                 number: 8,
                 data: function () {
                   return a.game.inventario.getCreativeItem(8);
                 },
               }),
               (f.h.p10 = {
                 x: -134,
                 y: -53,
                 number: 9,
                 data: function () {
                   return a.game.inventario.getCreativeItem(9);
                 },
               }),
               (f.h.p11 = {
                 x: -100,
                 y: -53,
                 number: 10,
                 data: function () {
                   return a.game.inventario.getCreativeItem(10);
                 },
               }),
               (f.h.p12 = {
                 x: -66,
                 y: -53,
                 number: 11,
                 data: function () {
                   return a.game.inventario.getCreativeItem(11);
                 },
               }),
               (f.h.p13 = {
                 x: -32,
                 y: -53,
                 number: 12,
                 data: function () {
                   return a.game.inventario.getCreativeItem(12);
                 },
               }),
               (f.h.p14 = {
                 x: 2,
                 y: -53,
                 number: 13,
                 data: function () {
                   return a.game.inventario.getCreativeItem(13);
                 },
               }),
               (f.h.p15 = {
                 x: 36,
                 y: -53,
                 number: 14,
                 data: function () {
                   return a.game.inventario.getCreativeItem(14);
                 },
               }),
               (f.h.p16 = {
                 x: 70,
                 y: -53,
                 number: 15,
                 data: function () {
                   return a.game.inventario.getCreativeItem(15);
                 },
               }),
               (f.h.p17 = {
                 x: 104,
                 y: -53,
                 number: 16,
                 data: function () {
                   return a.game.inventario.getCreativeItem(16);
                 },
               }),
               (f.h.p18 = {
                 x: 138,
                 y: -53,
                 number: 17,
                 data: function () {
                   return a.game.inventario.getCreativeItem(17);
                 },
               }),
               (f.h.p19 = {
                 x: -134,
                 y: -18,
                 number: 18,
                 data: function () {
                   return a.game.inventario.getCreativeItem(18);
                 },
               }),
               (f.h.p20 = {
                 x: -100,
                 y: -18,
                 number: 19,
                 data: function () {
                   return a.game.inventario.getCreativeItem(19);
                 },
               }),
               (f.h.p21 = {
                 x: -66,
                 y: -18,
                 number: 20,
                 data: function () {
                   return a.game.inventario.getCreativeItem(20);
                 },
               }),
               (f.h.p22 = {
                 x: -32,
                 y: -18,
                 number: 21,
                 data: function () {
                   return a.game.inventario.getCreativeItem(21);
                 },
               }),
               (f.h.p23 = {
                 x: 2,
                 y: -18,
                 number: 22,
                 data: function () {
                   return a.game.inventario.getCreativeItem(22);
                 },
               }),
               (f.h.p24 = {
                 x: 36,
                 y: -18,
                 number: 23,
                 data: function () {
                   return a.game.inventario.getCreativeItem(23);
                 },
               }),
               (f.h.p25 = {
                 x: 70,
                 y: -18,
                 number: 24,
                 data: function () {
                   return a.game.inventario.getCreativeItem(24);
                 },
               }),
               (f.h.p26 = {
                 x: 104,
                 y: -18,
                 number: 25,
                 data: function () {
                   return a.game.inventario.getCreativeItem(25);
                 },
               }),
               (f.h.p27 = {
                 x: 138,
                 y: -18,
                 number: 26,
                 data: function () {
                   return a.game.inventario.getCreativeItem(26);
                 },
               }),
               (f.h.p28 = {
                 x: -134,
                 y: 15,
                 number: 27,
                 data: function () {
                   return a.game.inventario.getCreativeItem(27);
                 },
               }),
               (f.h.p29 = {
                 x: -100,
                 y: 15,
                 number: 28,
                 data: function () {
                   return a.game.inventario.getCreativeItem(28);
                 },
               }),
               (f.h.p30 = {
                 x: -66,
                 y: 15,
                 number: 29,
                 data: function () {
                   return a.game.inventario.getCreativeItem(29);
                 },
               }),
               (f.h.p31 = {
                 x: -32,
                 y: 15,
                 number: 30,
                 data: function () {
                   return a.game.inventario.getCreativeItem(30);
                 },
               }),
               (f.h.p32 = {
                 x: 2,
                 y: 15,
                 number: 31,
                 data: function () {
                   return a.game.inventario.getCreativeItem(31);
                 },
               }),
               (f.h.p33 = {
                 x: 36,
                 y: 15,
                 number: 32,
                 data: function () {
                   return a.game.inventario.getCreativeItem(32);
                 },
               }),
               (f.h.p34 = {
                 x: 70,
                 y: 15,
                 number: 33,
                 data: function () {
                   return a.game.inventario.getCreativeItem(33);
                 },
               }),
               (f.h.p35 = {
                 x: 104,
                 y: 15,
                 number: 34,
                 data: function () {
                   return a.game.inventario.getCreativeItem(34);
                 },
               }),
               (f.h.p36 = {
                 x: 138,
                 y: 15,
                 number: 35,
                 data: function () {
                   return a.game.inventario.getCreativeItem(35);
                 },
               }),
               (f.h.p37 = {
                 x: -134,
                 y: 49,
                 number: 36,
                 data: function () {
                   return a.game.inventario.getCreativeItem(36);
                 },
               }),
               (f.h.p38 = {
                 x: -100,
                 y: 49,
                 number: 37,
                 data: function () {
                   return a.game.inventario.getCreativeItem(37);
                 },
               }),
               (f.h.p39 = {
                 x: -66,
                 y: 49,
                 number: 38,
                 data: function () {
                   return a.game.inventario.getCreativeItem(38);
                 },
               }),
               (f.h.p40 = {
                 x: -32,
                 y: 49,
                 number: 39,
                 data: function () {
                   return a.game.inventario.getCreativeItem(39);
                 },
               }),
               (f.h.p41 = {
                 x: 2,
                 y: 49,
                 number: 40,
                 data: function () {
                   return a.game.inventario.getCreativeItem(40);
                 },
               }),
               (f.h.p42 = {
                 x: 36,
                 y: 49,
                 number: 41,
                 data: function () {
                   return a.game.inventario.getCreativeItem(41);
                 },
               }),
               (f.h.p43 = {
                 x: 70,
                 y: 49,
                 number: 42,
                 data: function () {
                   return a.game.inventario.getCreativeItem(42);
                 },
               }),
               (f.h.p44 = {
                 x: 104,
                 y: 49,
                 number: 43,
                 data: function () {
                   return a.game.inventario.getCreativeItem(43);
                 },
               }),
               (f.h.p45 = {
                 x: 138,
                 y: 49,
                 number: 44,
                 data: function () {
                   return a.game.inventario.getCreativeItem(44);
                 },
               }),
               O.mapConcat(this.slotPositions, f));
             10 == b && ((f = new e()), (f.h.enchant = { x: -107, y: -83, number: 0, data: null }), O.mapConcat(this.slotPositions, f), (this.bookFrame = 0), this.unArrange(0), this.unArrange(1), this.unArrange(2));
             11 == b &&
               ((f = new e()),
               (f.h.dis1 = {
                 x: -31,
                 y: -134,
                 number: 0,
                 data: function () {
                   return a.dispenserSlotFetchData(0);
                 },
               }),
               (f.h.dis2 = {
                 x: 2,
                 y: -134,
                 number: 1,
                 data: function () {
                   return a.dispenserSlotFetchData(1);
                 },
               }),
               (f.h.dis3 = {
                 x: 35,
                 y: -134,
                 number: 2,
                 data: function () {
                   return a.dispenserSlotFetchData(2);
                 },
               }),
               (f.h.dis4 = {
                 x: -31,
                 y: -99,
                 number: 3,
                 data: function () {
                   return a.dispenserSlotFetchData(3);
                 },
               }),
               (f.h.dis5 = {
                 x: 2,
                 y: -99,
                 number: 4,
                 data: function () {
                   return a.dispenserSlotFetchData(4);
                 },
               }),
               (f.h.dis6 = {
                 x: 35,
                 y: -99,
                 number: 5,
                 data: function () {
                   return a.dispenserSlotFetchData(5);
                 },
               }),
               (f.h.dis7 = {
                 x: -31,
                 y: -65,
                 number: 6,
                 data: function () {
                   return a.dispenserSlotFetchData(6);
                 },
               }),
               (f.h.dis8 = {
                 x: 2,
                 y: -65,
                 number: 7,
                 data: function () {
                   return a.dispenserSlotFetchData(7);
                 },
               }),
               (f.h.dis9 = {
                 x: 35,
                 y: -65,
                 number: 8,
                 data: function () {
                   return a.dispenserSlotFetchData(8);
                 },
               }),
               O.mapConcat(this.slotPositions, f));
             13 == b &&
               ((f = new e()), (f.h.ai1 = { x: -71, y: -91, number: 0, data: null }), (f.h.ai2 = { x: 18, y: -91, number: 0, data: null }), (f.h.aoutput = { x: 129, y: -91, number: 0, data: null }), O.mapConcat(this.slotPositions, f));
             14 == b &&
               ((f = new e()),
               (f.h.brewFuel = {
                 x: -89,
                 y: -134,
                 number: 0,
                 data: function () {
                   var b = a.world.toBrew.h[a.game.inventario.brewer];
                   return null == b ? null : b.h.fuel;
                 },
               }),
               (f.h.brewInput = {
                 x: 6,
                 y: -134,
                 number: 0,
                 data: function () {
                   var b = a.world.toBrew.h[a.game.inventario.brewer];
                   return null == b ? null : b.h.input;
                 },
               }),
               (f.h.brewOutput1 = {
                 x: -37,
                 y: -75,
                 number: 0,
                 data: function () {
                   var b = a.world.toBrew.h[a.game.inventario.brewer];
                   return null == b ? null : b.h.output[0];
                 },
               }),
               (f.h.brewOutput2 = {
                 x: 5,
                 y: -64,
                 number: 1,
                 data: function () {
                   var b = a.world.toBrew.h[a.game.inventario.brewer];
                   return null == b ? null : b.h.output[1];
                 },
               }),
               (f.h.brewOutput3 = {
                 x: 47,
                 y: -75,
                 number: 2,
                 data: function () {
                   var b = a.world.toBrew.h[a.game.inventario.brewer];
                   return null == b ? null : b.h.output[2];
                 },
               }),
               O.mapConcat(this.slotPositions, f));
             b = Object.keys(this.inventorySlots.h);
             f = b.length;
             for (l = 0; l < f; ) (c = b[l++]), "dragger" != this.inventorySlots.h[c].name && (this.inventorySlots.h[c].remove(), (d = this.inventorySlots), Object.prototype.hasOwnProperty.call(d.h, c) && delete d.h[c]);
             b = Object.keys(this.slotPositions.h);
             f = b.length;
             for (l = 0; l < f; )
               (c = b[l++]),
                 (d = this.inventorySlots),
                 (k = new $a(
                   this.slotsEntity,
                   this.itemsEntity,
                   this.itemNumbersEntity,
                   this.game.scene.get_width() / 2 + this.slotPositions.h[c].x - 2,
                   this.game.scene.get_height() / 2 - 7 + this.slotPositions.h[c].y,
                   1.6716900000000001,
                   this.game,
                   this.world,
                   null,
                   this.slotPositions.h[c].data
                 )),
                 (d.h[c] = k),
                 (this.inventorySlots.h[c].number = this.slotPositions.h[c].number),
                 (this.inventorySlots.h[c].name = c);
             null == this.draggerItemEntity &&
               ((c = y.blockTextures),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.draggerItemEntity = new da(c, null, d, f)),
               this.draggerItemEntity.transform.scale2D(17.5067175),
               (this.draggerItemEntity.isTransparent = !0),
               (this.draggerItemEntity.layer = 19),
               (this.draggerItemNumberEntity = new da(this.game.itemNumberTexture)),
               (this.draggerItemNumberEntity.isTransparent = !0),
               (this.draggerItemNumberEntity.layer = 20),
               (c = P.getImage("ui")),
               (d = Fa.getShader(xa.NORMAL)),
               (f = new e()),
               (l = w.repeatArray([1], 24)),
               (f.h.color = l),
               (l = w.repeatArray([0], 24)),
               (f.h.colorOffset = l),
               (this.draggerSlotEntity = new da(c, null, d, f)),
               (this.draggerSlotEntity.isTransparent = !0),
               (this.draggerSlotEntity.layer = 18),
               (d = this.inventorySlots),
               (l = new $a(this.draggerSlotEntity, this.draggerItemEntity, this.draggerItemNumberEntity, -100, -100, 1.6716900000000001, this.game, this.world, g.emptyItem())),
               (d.h.dragger = l),
               (this.inventorySlots.h.dragger.name = "dragger"));
           }
         },
         chestSlotFetchData: function (b) {
           var a = "ender" == this.chest ? this.world.enderChests.h[this.world.player.id] : this.world.chests.h[this.game.inventario.chest];
           return null == a ? null : a[b];
         },
         dispenserSlotFetchData: function (b) {
           var a = this.world.states.h[this.dispenseName + "_2"];
           return null == a ? null : a[b];
         },
         getCreativeItem: function (b) {
           var a = b + 45 * (this.page - 1);
           b = ["air", 0, 0, g.makeDynamicMap(new e())];
           if (this.currentItems.length > a) {
             if ("Array" == O.getQualifiedClassName(this.currentItems[a])) {
               a = this.currentItems[a];
               b[0] = a[0];
               if ("Object" == O.getQualifiedClassName(a[1]))
                 for (var c = a[1], d = Object.keys(c.h), f = d.length, l = 0; l < f; ) {
                   var k = d[l++];
                   g.makeDynamicMap(b[3]).h[k] = c.h[k];
                 }
               else (c = new e()), (c.h.type = a[1]), (b[3] = g.makeDynamicMap(c));
               "potion" == a[0] &&
                 Object.prototype.hasOwnProperty.call(this.game.potionData.h, g.makeDynamicMap(b[3]).h.type) &&
                 ((a = g.makeDynamicMap(b[3])), (c = O.clone(this.game.potionData.h[g.makeDynamicMap(b[3]).h.type].h.effects)), (a.h.effects = c));
             } else b[0] = this.currentItems[a];
             b[1] = 1;
           }
           return b;
         },
         update: function () {
           var b = this;
           0 < this.gotoAtStartOfFrame && (this.gotoAndStop(this.gotoAtStartOfFrame), (this.gotoAtStartOfFrame = -1));
           if (2 == this.currentFrame) {
             var a = this.inventorySlots.h,
               c = a;
             a = Object.keys(a);
             for (var d = a.length, f = 0; f < d; ) {
               var l = c[a[f++]];
               l.refetchItem();
               l.checkInteraction();
             }
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleArmor", "Armor", new h(this.game.scene.get_width() / 2 - 137, this.game.scene.get_height() / 2 - 7 - 135), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleCrafting", "Crafting", new h(this.game.scene.get_width() / 2 + 13, this.game.scene.get_height() / 2 - 7 - 150 + 2), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             this.world.gamemode == U.gamemodes.h.CREATIVE &&
               null != this.inventoryCreativeButtonsEntity &&
               (this.inventoryCreativeButtonsEntity.clearPool(),
               (f = m.addSimpleButton("switch", this.inventoryCreativeButtonsEntity, (this.game.scene.get_width() / 2 + 10) | 0, (this.game.scene.get_height() / 2 - 7 - 169) | 0, 147, 20, 1, function () {
                 b.gotoAtStartOfFrame = 9;
               })
                 ? R.get("inventorySwitchButtonText", "Show creative inventory", new h(this.game.scene.get_width() / 2 + 86, this.game.scene.get_height() / 2 - 7 - 169 + 12), x.get_volter(), F.white, 1.125, Q.CENTER, 1.5)
                 : R.get("inventorySwitchButtonText", "Show creative inventory", new h(this.game.scene.get_width() / 2 + 85, this.game.scene.get_height() / 2 - 7 - 169 + 11), x.get_volter(), F.white, 1.125, Q.CENTER, 1.5)),
               (f.layer = 12),
               this.game.scene.draw(f),
               this.inventoryCreativeButtonsEntity.resetUnusedQuads());
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryArmorEntity);
             this.game.scene.draw(this.inventoryCraftingEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && null != this.inventoryCreativeButtonsEntity && this.game.scene.draw(this.inventoryCreativeButtonsEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (3 == this.currentFrame) {
             if ("craft" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleCrafting", "Crafting", new h(this.game.scene.get_width() / 2 - 54 + 4, this.game.scene.get_height() / 2 - 7 - 172 + 4), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryCraftingTableEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (4 == this.currentFrame) {
             if ("oven" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleFurnace", "" == this.newName ? "Furnace" : this.newName, new h(this.game.scene.get_width() / 2 - 49, this.game.scene.get_height() / 2 - 7 - 168), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             c = Math.ceil((H.__cast(this.world.toSmelt.h[this.smelter], e).h.fuelTimer / H.__cast(this.world.toSmelt.h[this.smelter], e).h.fuelTimerTotal) * 8) / 8;
             a = Math.floor(H.__cast(this.world.toSmelt.h[this.smelter], e).h.smeltTimer);
             this.inventoryFurnaceBarsEntity.updateQuad(1, new M(8, 24 + 14 * (1 - c), 0), new h(63, 0), new h(5, 62), new h(7, 14 * c));
             this.inventoryFurnaceBarsEntity.updateQuad(3, new M(24, 24, 0), new h(63, 0), new h(5, 62), new h((15 * a) / 9, 13));
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryFurnaceBarsEntity);
             this.game.scene.draw(this.inventoryFurnaceEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (5 == this.currentFrame) {
             if ("cart" == I.substr(this.chest, 0, 4)) {
               if (null == this.world.carts.h[this.chest]) {
                 this.requestClose();
                 return;
               }
               this.craftCoords = [this.world.carts.h[this.chest].h.x, -this.world.carts.h[this.chest].h.y];
             } else if ("ender" == this.chest) {
               if ("echest" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
                 this.requestClose();
                 return;
               }
             } else if ("chest" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get(
               "inventoryTitleChest",
               "ender" == this.chest ? "Ender Chest" : "" == this.newName ? "Chest" : this.newName,
               new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 172),
               x.get_volter(),
               F.black,
               1.7,
               Q.LEFT,
               0.7
             );
             f.layer = 12;
             this.game.scene.draw(f);
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryChestEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (7 == this.currentFrame)
             this.jAnimation++,
               (f =
                 80 > this.jAnimation
                   ? R.get("inventoryJText", "Hello.", new h(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7), x.get_volter(), F.white, 2.8, Q.CENTER, 0)
                   : 208 > this.jAnimation
                   ? R.get("inventoryJText", "Hello.\nI am J.", new h(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7), x.get_volter(), F.white, 2.8, Q.CENTER, 0)
                   : 382 > this.jAnimation
                   ? R.get("inventoryJText", "Hello.\nI am J.\nI am quite useless.", new h(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7), x.get_volter(), F.white, 2.8, Q.CENTER, 0)
                   : 482 > this.jAnimation
                   ? R.get("inventoryJText", "Hello.\nI am J.\nI am quite useless.\nFor now.", new h(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7), x.get_volter(), F.white, 2.8, Q.CENTER, 0)
                   : R.get("inventoryJText", "Hello.\nI am J.\nI am quite useless.\nFor now.\nStill!", new h(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2 - 7), x.get_volter(), F.white, 2.8, Q.CENTER, 0)),
               586 <= this.jAnimation && this.requestClose(),
               f.transform.translate(0, (-f.calculatedHeight / 2) * 3.5 + 5),
               (f.layer = 12),
               this.game.scene.draw(f),
               this.game.scene.draw(this.inventoryJBackgroundEntity);
           else if (8 == this.currentFrame)
             (f = R.get("inventoryTitleSign", "Sign", new h(this.game.scene.get_width() / 2 - 129, this.game.scene.get_height() / 2 - 7 - 90), x.get_volter(), F.white, 1.7, Q.LEFT, 0.7)),
               (f.layer = 12),
               this.game.scene.draw(f),
               this.inventorySignButtonEntity.clearPool(),
               (f = m.addSimpleButton("close", this.inventorySignButtonEntity, (this.game.scene.get_width() / 2 + 76) | 0, (this.game.scene.get_height() / 2 - 7 + 12) | 0, 54, 22, 1, function () {
                 var a = b.world.signs,
                   c = b.sign,
                   d = b.inventorySignInput.get_text();
                 a.h[c] = d;
                 b.gotoAndStop(1);
               })
                 ? R.get("inventorySignCloseText", "Close", new h(this.game.scene.get_width() / 2 + 105, this.game.scene.get_height() / 2 - 7 + 25), x.get_volter(), F.white, 1.5, Q.CENTER, 1.5)
                 : R.get("inventorySignCloseText", "Close", new h(this.game.scene.get_width() / 2 + 104, this.game.scene.get_height() / 2 - 7 + 24), x.get_volter(), F.white, 1.5, Q.CENTER, 1.5)),
               (f.layer = 12),
               this.game.scene.draw(f),
               this.inventorySignInput.containsPoint(m.Instance.mouse)
                 ? this.inventorySignInput.focused ||
                   ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (this.inventorySignInput.set_focused(!0), this.inventorySignInput.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
                 : this.inventorySignInput.focused && 1 == m.Instance.mouseDown() && this.inventorySignInput.set_focused(!1),
               this.inventorySignTextBackground.setText(this.inventorySignInput.get_text()),
               this.game.scene.draw(this.backgroundEntity),
               this.game.scene.draw(this.inventorySignEntity),
               this.game.scene.draw(this.inventorySignButtonEntity),
               this.game.scene.draw(this.inventorySignTextBackground),
               this.inventorySignInput.update(this.game.scene);
           else if (9 == this.currentFrame) {
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleCreative", "Item Library", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 156), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             this.inventoryCreativeButtonsEntity.clearPool();
             f = m.addSimpleButton(
               "back",
               this.inventoryCreativeButtonsEntity,
               (this.game.scene.get_width() / 2 - 152) | 0,
               (this.game.scene.get_height() / 2 - 7 + 72) | 0,
               123,
               25,
               1,
               function () {
                 b.creativeBack();
               },
               1 >= this.page
             )
               ? R.get("inventoryPreviousButtonText", "Previous page", new h(this.game.scene.get_width() / 2 - 152 + 62, this.game.scene.get_height() / 2 - 7 + 87), x.get_volter(), F.white, 1.5, Q.CENTER, 1.5)
               : R.get(
                   "inventoryPreviousButtonText",
                   "Previous page",
                   new h(this.game.scene.get_width() / 2 - 152 + 61, this.game.scene.get_height() / 2 - 7 + 86),
                   x.get_volter(),
                   1 >= this.page ? new F(-10132123) : F.white,
                   1.5,
                   Q.CENTER,
                   1.5
                 );
             f.layer = 12;
             this.game.scene.draw(f);
             f = m.addSimpleButton(
               "next",
               this.inventoryCreativeButtonsEntity,
               (this.game.scene.get_width() / 2 + 31) | 0,
               (this.game.scene.get_height() / 2 - 7 + 72) | 0,
               123,
               25,
               1,
               function () {
                 b.creativeForward();
               },
               this.page >= this.getPages()
             )
               ? R.get("inventoryNextButtonText", "Next page", new h(this.game.scene.get_width() / 2 + 93, this.game.scene.get_height() / 2 - 7 + 87), x.get_volter(), F.white, 1.5, Q.CENTER, 1.5)
               : R.get(
                   "inventoryNextButtonText",
                   "Next page",
                   new h(this.game.scene.get_width() / 2 + 92, this.game.scene.get_height() / 2 - 7 + 86),
                   x.get_volter(),
                   this.page >= this.getPages() ? new F(-10132123) : F.white,
                   1.5,
                   Q.CENTER,
                   1.5
                 );
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryPageNumber", this.page + "/" + this.getPages(), new h(this.game.scene.get_width() / 2 + 2, this.game.scene.get_height() / 2 - 7 + 87), x.get_volter(), new F(-6710887), 1.625, Q.CENTER, 1.5);
             f.layer = 12;
             this.game.scene.draw(f);
             f = m.addSimpleButton("switch", this.inventoryCreativeButtonsEntity, (this.game.scene.get_width() / 2 + 10) | 0, (this.game.scene.get_height() / 2 - 7 - 169) | 0, 147, 20, 1, function () {
               b.gotoAtStartOfFrame = 2;
             })
               ? R.get("inventorySwitchButtonText", "Show survival inventory", new h(this.game.scene.get_width() / 2 + 86, this.game.scene.get_height() / 2 - 7 - 169 + 12), x.get_volter(), F.white, 1.125, Q.CENTER, 1.5)
               : R.get("inventorySwitchButtonText", "Show survival inventory", new h(this.game.scene.get_width() / 2 + 85, this.game.scene.get_height() / 2 - 7 - 169 + 11), x.get_volter(), F.white, 1.125, Q.CENTER, 1.5);
             f.layer = 12;
             this.game.scene.draw(f);
             this.inventoryCreativeButtonsEntity.resetUnusedQuads();
             !this.searchOpen && new t(this.game.scene.get_width() / 2 - 154, this.game.scene.get_height() / 2 - 7 - 135, 34.01184 * this.creativeItems.length, 32.311248).containsPoint(m.Instance.mouse)
               ? (m.Instance.setUIHover("buttonTabs", !1),
                 "buttonTabs" == m.Instance.getUIHover() &&
                   ((m.Instance.cursor = Ua.POINTER),
                   (c = Math.floor((m.Instance.mouse.x - (this.game.scene.get_width() / 2 - 154)) / 34.01184)),
                   (this.showTooltip = !0),
                   (this.tooltipText = [this.creativeItems[c].h.name]),
                   1 == m.Instance.mouseDown()
                     ? (m.Instance.setUIDown(!0, !1),
                       this.inventoryCreativeEntity.updateQuad(this.tab + 2, new M(-154 + 34.01184 * this.tab, -135, 0), new h(22, 126), new h(21, 19), new h(21, 19).multiply(1.700592)),
                       (this.tab = c),
                       (this.page = 1),
                       this.inventoryCreativeEntity.updateQuad(this.tab + 2, new M(-154 + 34.01184 * this.tab, -135, 0), new h(0, 126), new h(21, 19), new h(21, 19).multiply(1.700592)),
                       (this.currentItems = this.creativeItems[this.tab].h.items))
                     : m.Instance.setUIDown(!1, !1)))
               : "buttonTabs" == m.Instance.getUIHover() && m.Instance.setUIHover("");
             new t(this.game.scene.get_width() / 2 + 122, this.game.scene.get_height() / 2 - 7 - 135, 32, 30).containsPoint(m.Instance.mouse)
               ? ((c = "searchTab" == m.Instance.getUIHover()),
                 m.Instance.setUIHover("searchTab", !1),
                 "searchTab" == m.Instance.getUIHover() &&
                   ((m.Instance.cursor = Ua.POINTER),
                   (this.showTooltip = !0),
                   (this.tooltipText = ["Search All Items"]),
                   G.gt(m.Instance.mouseDown(), 0) ? m.Instance.setUIDown(!0, !1) : m.Instance.setUIDown(!1, !1),
                   c && 1 == m.Instance.mouseUp() && this.setSearchOpen(!this.searchOpen)))
               : "searchTab" == m.Instance.getUIHover() && m.Instance.setUIHover("");
             this.searchOpen &&
               (this.inventoryCreativeSearchInput.containsPoint(m.Instance.mouse)
                 ? this.inventoryCreativeSearchInput.focused ||
                   ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (this.inventoryCreativeSearchInput.set_focused(!0), this.inventoryCreativeSearchInput.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
                 : this.inventoryCreativeSearchInput.focused && 1 == m.Instance.mouseDown() && this.inventoryCreativeSearchInput.set_focused(!1));
             this.inventoryCreativeSearchInput.focused && 1 == m.Instance.keyDown(27) && this.setSearchOpen(!1);
             if (!this.searchOpen) {
               for (f = m.Instance.isDown.keys(); f.hasNext(); )
                 (c = f.next()), 97 <= c && 122 >= c && 1 == m.Instance.keyDown(c) && c != J.getKeyBinding("inventory") && (this.setSearchOpen(!0), this.inventoryCreativeSearchInput.insertText(String.fromCodePoint(97 + (c - 97))));
               1 == m.Instance.keyDown(32) && this.setSearchOpen(!0);
             }
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryCreativeEntity);
             this.game.scene.draw(this.inventoryCreativeButtonsEntity);
             this.game.scene.draw(this.inventoryCreativeItemsEntity);
             this.game.scene.draw(this.inventoryCreativeSearchEntity);
             this.inventoryCreativeSearchInput.update(this.game.scene);
             this.lastSearchText != this.inventoryCreativeSearchText.text && (this.searchTextChange(), (this.lastSearchText = this.inventoryCreativeSearchText.text));
             this.game.scene.draw(this.inventoryTrashEntity);
             this.game.scene.draw(this.inventoryTrashIcon);
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (10 == this.currentFrame) {
             if ("enchant" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleEnchant", "" == this.newName ? "Enchantment Table" : this.newName, new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 172), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             this.bookOpen ? 16 > this.bookFrame && this.bookFrame++ : 0 < this.bookFrame && this.bookFrame--;
             this.inventoryEnchantmentButtonEntity.clearPool();
             16 == this.bookFrame
               ? ((f = ((Math.floor(this.bookFrame / 2) + 2) % 8) * 16),
                 (l = 135 + 16 * Math.floor((Math.floor(this.bookFrame / 2) + 2) / 8)),
                 this.inventoryEnchantmentButtonEntity.addQuad(new M(-131, -144), new h(f, l), new h(19, 16), !0, new h(47.5, 40)))
               : ((f = ((Math.floor(this.bookFrame / 2) + 2) % 8) * 16),
                 (l = 135 + 16 * Math.floor((Math.floor(this.bookFrame / 2) + 2) / 8)),
                 this.inventoryEnchantmentButtonEntity.addQuad(new M(-128, -144), new h(f, l), new h(16, 16), !0, new h(40, 40)));
             for (c = 0; 3 > c; ) {
               a = c++;
               var k = this.enchantmentButtons[a];
               d = m.buttonBehavior("enchantButton" + a, !k.canAfford, (-59 + this.game.scene.get_width() / 2) | 0, (-148 + 29 * a + this.game.scene.get_height() / 2 - 7) | 0, 210, 29, this.buyEnchants[a], !1);
               f = k.canAfford ? (1 == d ? 2 : 1) : 0;
               this.inventoryEnchantmentButtonEntity.addQuad(new M(-59.4, -147.9 + 29 * a), new h(0, 29 * f), new h(140, 29), !0, new h(210.54684, 29));
               for (var C = 0, z = k.text.length; C < z; ) {
                 f = C++;
                 var n = I.cca(k.text, f);
                 32 != n &&
                   ((l = 87 + 16 * Math.floor((n - 97) / 8)),
                   this.inventoryEnchantmentButtonEntity.addQuad(new M(-50.8 + (f % 16) * 11.32 - 5.76, -139.7 + 29 * a + 11.9 * Math.floor(f / 16) - 5.76), new h(((n - 97) % 8) * 16, l), new h(16, 16), !0, new h(11.52, 11.52)));
               }
               0 < k.lvl &&
                 ((f = R.get(
                   "enchantText" + a + "Shadow",
                   E.string(this.enchantmentButtons[a].lvl),
                   new h((this.game.scene.get_width() / 2 + 151.54684 - 5 + 1) | 0, (-148 + 29 * a + this.game.scene.get_height() / 2 - 7 + 6) | 0),
                   x.get_volter(),
                   F.black,
                   2,
                   Q.RIGHT
                 )),
                 (f.layer = 14),
                 this.game.scene.draw(f),
                 (f = R.get(
                   "enchantText" + a,
                   E.string(this.enchantmentButtons[a].lvl),
                   new h((this.game.scene.get_width() / 2 + 151.54684 - 5) | 0, (-148 + 29 * a + this.game.scene.get_height() / 2 - 7 + 5) | 0),
                   x.get_volter(),
                   1 == d ? F.white : new F(-256),
                   2,
                   Q.RIGHT
                 )),
                 (f.layer = 14),
                 this.game.scene.draw(f));
             }
             this.inventoryEnchantmentButtonEntity.resetUnusedQuads();
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryEnchantmentEntity);
             this.game.scene.draw(this.inventoryEnchantmentItemEntity);
             this.game.scene.draw(this.inventoryEnchantmentButtonEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (11 == this.currentFrame) {
             if ("dispense" != this.world.getFG(this.craftCoords[0], this.craftCoords[1]) && "dropper" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get(
               "inventoryTitleDispenser",
               "" == this.newName ? this.dispenserType : this.newName,
               new h(this.game.scene.get_width() / 2 - 54 + 4, this.game.scene.get_height() / 2 - 7 - 172 + 4),
               x.get_volter(),
               F.black,
               1.7,
               Q.LEFT,
               0.7
             );
             f.layer = 12;
             this.game.scene.draw(f);
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryDispenserEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (12 == this.currentFrame) {
             if (1 == m.Instance.keyDown(13) || 1 == m.Instance.keyUp(13)) {
               this.inventoryCommandsInput.set_focused(!1);
               if ("" != this.inventoryCommandsInput.get_text()) {
                 this.game.interpretCommand(this.inventoryCommandsInput.get_text());
                 for (this.lastCommand.unshift(this.inventoryCommandsInput.get_text()); 100 < this.lastCommand.length; ) this.lastCommand.pop();
                 this.inventoryCommandsInput.set_text("");
               }
               this.gotoAndStop(1);
               return;
             }
             1 == m.Instance.keyDown(1073741906) &&
               (-1 == this.currentCommandNumber && (this.lastSavedText = this.inventoryCommandsInput.get_text()),
               null != this.lastCommand[Math.min(99, this.currentCommandNumber + 1) | 0] &&
                 ((this.currentCommandNumber = Math.min(99, this.currentCommandNumber + 1) | 0),
                 this.inventoryCommandsInput.set_text(this.lastCommand[this.currentCommandNumber]),
                 this.inventoryCommandsInput.setSelection(this.inventoryCommandsInput.get_length(), this.inventoryCommandsInput.get_length())));
             1 == m.Instance.keyDown(1073741905) &&
               ((this.currentCommandNumber = Math.max(-1, this.currentCommandNumber - 1) | 0),
               -1 < this.currentCommandNumber ? this.inventoryCommandsInput.set_text(this.lastCommand[this.currentCommandNumber]) : this.inventoryCommandsInput.set_text(this.lastSavedText),
               this.inventoryCommandsInput.setSelection(this.inventoryCommandsInput.get_length(), this.inventoryCommandsInput.get_length()));
             this.inventoryCommandsInput.containsPoint(m.Instance.mouse)
               ? this.inventoryCommandsInput.focused ||
                 ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (this.inventoryCommandsInput.set_focused(!0), this.inventoryCommandsInput.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
               : this.inventoryCommandsInput.focused && 1 == m.Instance.mouseDown() && this.inventoryCommandsInput.set_focused(!1);
             f = R.get("commandHelpTextShadow", "Commands. Type help for help.", new h(29, this.game.scene.get_height() - 78 + 1), x.get_volter(), new F(-16777216), 1.625, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("commandHelpText", "Commands. Type help for help.", new h(28, this.game.scene.get_height() - 78), x.get_volter(), new F(-1), 1.625, Q.LEFT, 0.5);
             f.layer = 12;
             this.game.scene.draw(f);
             this.game.scene.draw(this.inventoryCommandsEntity);
             this.inventoryCommandsInput.update(this.game.scene);
           } else if (13 == this.currentFrame) {
             if ("anvil" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleAnvil", "Anvil - Repair & Rename", new h(this.game.scene.get_width() / 2 - 90, this.game.scene.get_height() / 2 - 7 - 175), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryAnvilResultShadow", this.levelsText, new h(this.game.scene.get_width() / 2 + 146, this.game.scene.get_height() / 2 - 7 - 67 + 1), x.get_volter(), new F(1426063615), 1.7, Q.RIGHT, 0.35);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryAnvilResult", this.levelsText, new h(this.game.scene.get_width() / 2 + 145, this.game.scene.get_height() / 2 - 7 - 67), x.get_volter(), new F(-13434880), 1.7, Q.RIGHT, 0.35);
             f.layer = 12;
             this.game.scene.draw(f);
             this.anvilEcksVisible ? this.inventoryAnvilEntity.updateQuad(3, new M(60, -103, 0), new h(16, 0), new h(16, 16), new h(16, 16).multiply(1.5)) : this.inventoryAnvilEntity.updateQuad(3, null, null, null, new h());
             this.anvilRenameTextVisible
               ? this.inventoryAnvilInput.containsPoint(m.Instance.mouse)
                 ? this.inventoryAnvilInput.focused ||
                   ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (this.inventoryAnvilInput.set_focused(!0), this.inventoryAnvilInput.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
                 : this.inventoryAnvilInput.focused && 1 == m.Instance.mouseDown() && this.inventoryAnvilInput.set_focused(!1)
               : this.inventoryAnvilInput.set_focused(!1);
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryAnvilEntity);
             this.game.scene.draw(this.inventoryAnvilItemsEntity);
             this.anvilRenameTextVisible && (this.inventoryAnvilInput.update(this.game.scene), this.lastAnvilText != this.inventoryAnvilText.text && (this.doAnvilyThings(!1), (this.lastAnvilText = this.inventoryAnvilText.text)));
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           } else if (14 == this.currentFrame) {
             if ("brew" != this.world.getFG(this.craftCoords[0], this.craftCoords[1])) {
               this.requestClose();
               return;
             }
             if (Math.pow(this.craftCoords[0] - this.world.worldX, 2) + Math.pow(-this.craftCoords[1] - this.world.worldY, 2) > Math.pow(5, 2)) {
               this.requestClose();
               return;
             }
             c = a = this.inventorySlots.h;
             a = Object.keys(a);
             d = a.length;
             for (f = 0; f < d; ) (l = c[a[f++]]), l.refetchItem(), l.checkInteraction();
             f = R.get("inventoryTitleInventory", "Inventory", new h(this.game.scene.get_width() / 2 - 152, this.game.scene.get_height() / 2 - 7 - 46), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             f = R.get("inventoryTitleBrewer", "" == this.newName ? "Brewing" : this.newName, new h(this.game.scene.get_width() / 2 - 111, this.game.scene.get_height() / 2 - 7 - 175), x.get_volter(), F.black, 1.7, Q.LEFT, 0.7);
             f.layer = 12;
             this.game.scene.draw(f);
             a = this.world.toBrew.h[this.brewer];
             if (0 != a.h.fuelUsed && null != a.h.input[0] && 0 < a.h.input[1] && (null != a.h.output[0][0] || null != a.h.output[1][0] || null != a.h.output[2][0])) {
               d = !1;
               for (c = 0; 3 > c; )
                 if (
                   ((f = a.h.output[c++]),
                   (null != this.game.potionData.h[g.makeDynamicMap(f[3]).h.type] && null != g.makeDynamicMap(this.game.potionData.h[g.makeDynamicMap(f[3]).h.type].h.recipes).h[a.h.input[0]]) ||
                     ("gp" == a.h.input[0] && "splash" != g.makeDynamicMap(f[3]).h.category && !this.game.emptyPotion(g.makeDynamicMap(f[3]).h.type)))
                 ) {
                   d = !0;
                   break;
                 }
               this.brewingBubblesPlaying = d ? !0 : !1;
             } else this.brewingBubblesPlaying = !1;
             this.brewingBubblesPlaying ? (this.brewingBubblesFrame++, this.brewingBubblesFrame > (27 * m.Instance.get_fps()) / 25 && (this.brewingBubblesFrame = 0)) : (this.brewingBubblesFrame = 0);
             f = (a.h.fuelUsed / 20) * 22;
             this.inventoryBrewingEntity.updateQuad(2, new M(-45, -105, 0), new h(0, 72), new h(f, 6));
             this.inventoryBrewingEntity.updateQuad(
               4,
               new M(-43, -105 - this.brewingBubbleHeights[Math.floor((this.brewingBubblesFrame / ((27 * m.Instance.get_fps()) / 25)) * 6)], 0),
               new h(51, 78 - this.brewingBubbleHeights[Math.floor((this.brewingBubblesFrame / ((27 * m.Instance.get_fps()) / 25)) * 6)]),
               new h(19, this.brewingBubbleHeights[Math.floor((this.brewingBubblesFrame / ((27 * m.Instance.get_fps()) / 25)) * 6)])
             );
             f = 36 * Math.min(1, a.h.brewTimer / 19);
             this.inventoryBrewingEntity.updateQuad(7, new M(31, -141, 0), new h(72, 0), new h(17, f));
             this.game.scene.draw(this.backgroundEntity);
             this.game.scene.draw(this.inventoryEntity);
             this.game.scene.draw(this.inventoryBrewingIconsEntity);
             this.game.scene.draw(this.inventoryBrewingItemsEntity);
             this.game.scene.draw(this.inventoryBrewingEntity);
             this.world.gamemode == U.gamemodes.h.CREATIVE && (this.game.scene.draw(this.inventoryTrashEntity), this.game.scene.draw(this.inventoryTrashIcon));
             this.game.scene.draw(this.slotsEntity);
             this.game.scene.draw(this.itemsEntity);
             this.game.scene.draw(this.itemNumbersEntity);
             this.game.scene.draw(this.draggerSlotEntity);
             this.game.scene.draw(this.draggerItemEntity);
             this.game.scene.draw(this.draggerItemNumberEntity);
           }
           this.showTooltip &&
             ((this.showTooltip = !1),
             (c = R.get("tooltip1", this.tooltipText[0], new h(), x.get_volter(), F.white, 1.625, Q.LEFT, 1)),
             (c.layer = 31),
             (a = R.get("tooltip2", this.tooltipText.join("\n").substring(this.tooltipText[0].length + 1), new h(), x.get_volter(), F.white, 1.01, Q.LEFT, 1)),
             (a.layer = 31),
             (d = new h(Math.max(19, Math.max((13 * c.calculatedWidth) / 8, a.calculatedWidth) / 2 + 8), ((13 * c.calculatedHeight) / 8 + (0 < a.text.length ? a.calculatedHeight + 4 : 0)) / 2 + 8)),
             (f = new h(m.Instance.mouse.x - 2 * d.x + 28, m.Instance.mouse.y - 2 * d.y)),
             this.tooltipEntity.update9Slice(0, new t(0, 0, d.x, d.y), new t(0, 112, 19, 8), new t(2, 2, 1, 1)),
             this.tooltipEntity.transform.reset().scale2D(2).translate(f.x, f.y),
             this.game.scene.draw(this.tooltipEntity),
             c.transform
               .reset()
               .scale2D(1.625)
               .translate(f.x + 8, f.y + 6),
             this.game.scene.draw(c),
             0 < a.text.length &&
               (a.transform
                 .reset()
                 .scale2D(1.01)
                 .translate(f.x + 8, f.y + 6 + (13 * c.calculatedHeight) / 8 + 2),
               this.game.scene.draw(a)));
         },
         creativeBack: function () {
           1 != this.page && this.page--;
         },
         creativeForward: function () {
           this.page != this.getPages() && this.page++;
         },
         getPages: function () {
           return Math.floor(this.currentItems.length / 45) + 1;
         },
         setSearchOpen: function (b) {
           null == b && (b = !0);
           this.searchOpen = b;
           this.inventoryCreativeSearchInput.set_text("");
           this.searchOpen
             ? (this.inventoryCreativeSearchEntity.updateQuad(1, new M(-50, -135), new h(44, 126), new h(90, 16), new h(90, 16).multiply(2)), this.inventoryCreativeSearchInput.set_focused(!0), this.searchTextChange())
             : (this.inventoryCreativeSearchEntity.updateQuad(1, null, null, null, new h()), this.inventoryCreativeSearchInput.set_focused(!1), (this.currentItems = this.creativeItems[this.tab].h.items), (this.page = 1));
         },
         searchTextChange: function () {
           if (this.searchOpen) {
             this.currentItems = [];
             for (var b = 0, a = this.creativeItems.length; b < a; )
               for (var c = b++, d = 0, f = this.creativeItems[c].h.items.length; d < f; ) {
                 var l = d++;
                 if ("Array" == O.getQualifiedClassName(this.creativeItems[c].h.items[l]))
                   if ("Object" == O.getQualifiedClassName(this.creativeItems[c].h.items[l][1])) var k = this.game.getItemName(g.makeDynamicArray([this.creativeItems[c].h.items[l][0], 1, 0, this.creativeItems[c].h.items[l][1]]));
                   else {
                     k = this.creativeItems[c].h.items[l][0];
                     var h = new e();
                     h.h.type = this.creativeItems[c].h.items[l][1];
                     k = this.game.getItemName(g.makeDynamicArray([k, 1, 0, g.makeDynamicMap(h)]));
                   }
                 else k = this.game.getItemName(g.makeDynamicArray([this.creativeItems[c].h.items[l], 1, 0, g.makeDynamicMap(new e())]));
                 -1 != k.toLowerCase().indexOf(this.inventoryCreativeSearchText.text.toLowerCase()) && this.currentItems.push(this.creativeItems[c].h.items[l]);
               }
             this.page = 1;
           }
         },
         renameChange: function () {
           this.anvilChangeNameWorth = 0;
           if (this.inventorySlots.h.ai1.empty) this.anvilWillRename = !1;
           else {
             if ("" != this.inventoryAnvilInput.get_text() && this.inventoryAnvilInput.get_text() != this.game.getItemName(this.inventorySlots.h.ai1.item.item)) {
               this.inventorySlots.h.aoutput.empty && this.inventorySlots.h.aoutput.item.set_item(g.item(this.inventorySlots.h.ai1.get_type(), 1, this.inventorySlots.h.ai1.get_damage(), O.clone(this.inventorySlots.h.ai1.get_extras())));
               var b = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]),
                 a = this.inventoryAnvilInput.get_text();
               b.h.nameChange = a;
               b = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]);
               a = null != this.inventorySlots.h.ai1.get_extras().h.anvilUses ? this.inventorySlots.h.ai1.get_extras().h.anvilUses : 1;
               var c = null != this.inventorySlots.h.ai2.get_extras().h.anvilUses ? this.inventorySlots.h.ai2.get_extras().h.anvilUses : 1;
               b.h.anvilUses = Math.max(a, c) + 1;
               this.anvilWillRename = !0;
               this.anvilChangeNameWorth = 1;
             } else
               this.inventorySlots.h.aoutput.empty ||
                 (null == this.inventorySlots.h.ai1.get_extras().h.nameChange
                   ? ((b = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3])), Object.prototype.hasOwnProperty.call(b.h, "nameChange") && delete b.h.nameChange)
                   : ((b = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3])), (a = this.inventorySlots.h.ai1.get_extras().h.nameChange), (b.h.nameChange = a)),
                 0 == this.anvilCombineWorth && this.inventorySlots.h.aoutput.setItem(g.emptyItem())),
                 (this.anvilWillRename = !1);
             this.inventorySlots.h.aoutput.setItem(this.inventorySlots.h.aoutput.item.item);
           }
           this.recalculateCost();
         },
         doAnvilyThings: function (b) {
           null == b && (b = !1);
           if (!this.anvilGettingItem) {
             this.resetAnvil(b);
             this.inventorySlots.h.aoutput.setItem(g.item(this.inventorySlots.h.ai1.get_type(), 1, this.inventorySlots.h.ai1.get_damage(), O.clone(this.inventorySlots.h.ai1.get_extras())));
             this.anvilWillCombine = this.anvilCantCombine = !1;
             if (this.inventorySlots.h.ai1.empty) (this.anvilCantCombine = !0), (this.anvilWillCombine = !1);
             else {
               if (1 == this.inventorySlots.h.ai1.get_isTool() || "ebook" == this.inventorySlots.h.ai1.get_type()) {
                 if (!this.inventorySlots.h.ai2.empty) {
                   if (this.inventorySlots.h.ai2.get_type() == this.inventorySlots.h.ai1.get_type() || "ebook" == this.inventorySlots.h.ai2.get_type()) {
                     "ebook" != this.inventorySlots.h.ai1.get_type() &&
                       "ebook" != this.inventorySlots.h.ai2.get_type() &&
                       ((this.inventorySlots.h.aoutput.item.item[2] = Math.max(0, -1.6 * q.get(this.inventorySlots.h.ai1.get_type(), "life") + 1.3 * this.inventorySlots.h.ai1.get_damage() + 1.3 * this.inventorySlots.h.ai2.get_damage())),
                       (this.anvilCombineWorth += Math.max(1, (3 * (this.inventorySlots.h.ai1.get_damage() - this.inventorySlots.h.aoutput.get_damage())) / q.get(this.inventorySlots.h.ai1.get_type(), "life")) | 0));
                     this.anvilItemsToTake = 1;
                     for (var a = Object.keys(this.inventorySlots.h.ai2.get_extras().h), c = a.length, d = 0; d < c; ) {
                       var f = a[d++];
                       if (null != g.enchantmentNames.h[f]) {
                         for (var e = !0, k = Object.keys(this.inventorySlots.h.ai1.get_extras().h), h = k.length, z = 0; z < h; ) {
                           var m = k[z++];
                           if (I.substr(f, 0, f.length - 1) == I.substr(m, 0, m.length - 1)) {
                             k = E.parseInt(I.substr(f, -1, 1));
                             if (!isNaN(k)) {
                               k = E.parseInt(I.substr(f, -1, 1)) + E.parseInt(I.substr(m, -1, 1));
                               for (h = !1; null == g.enchantmentNames.h[I.substr(f, 0, f.length - 1) + (null == k ? "null" : "" + k)]; )
                                 if ((--k, 0 >= k)) {
                                   e = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]);
                                   Object.prototype.hasOwnProperty.call(e.h, m) && delete e.h[m];
                                   e = !1;
                                   h = !0;
                                   break;
                                 }
                               if (h) break;
                               k >= E.parseInt(I.substr(m, -1, 1)) &&
                                 (this.anvilCombineWorth++,
                                 (e = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3])),
                                 Object.prototype.hasOwnProperty.call(e.h, m) && delete e.h[m],
                                 (g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]).h[I.substr(f, 0, f.length - 1) + (null == k ? "null" : "" + k)] = "enchant"));
                             }
                             e = !1;
                             break;
                           } else if (("silkTouch" == m && "fortune" == I.substr(f, 0, 7)) || ("silkTouch" == f && "fortune" == I.substr(m, 0, 7))) {
                             e = !1;
                             break;
                           }
                         }
                         e &&
                           (null != q.get(this.inventorySlots.h.ai1.get_type(), "enchantType") && "Random" != q.get(this.inventorySlots.h.ai1.get_type(), "enchantType")
                             ? ((m = g.enchantTypes), (e = q.get(this.inventorySlots.h.ai1.get_type(), "enchantType")), (m = null != m.h[e].h[f]))
                             : (m = !0),
                           m && ((g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]).h[f] = ["enchant"]), this.anvilCombineWorth++));
                       }
                     }
                     this.anvilCantCombine = !1;
                     this.anvilWillCombine = !0;
                     m = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]);
                     a = null != this.inventorySlots.h.ai1.get_extras().h.anvilUses ? this.inventorySlots.h.ai1.get_extras().h.anvilUses : 1;
                     c = null != this.inventorySlots.h.ai2.get_extras().h.anvilUses ? this.inventorySlots.h.ai2.get_extras().h.anvilUses : 1;
                     m.h.anvilUses = Math.max(a, c) + 1;
                   } else if (
                     0 != this.inventorySlots.h.ai1.get_damage() &&
                     (("wp" == this.inventorySlots.h.ai2.get_type() && "Wood" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 4)) ||
                       ("cs" == this.inventorySlots.h.ai2.get_type() && "Stone" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 5)) ||
                       ("ii" == this.inventorySlots.h.ai2.get_type() && "Iron" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 4)) ||
                       ("gi" == this.inventorySlots.h.ai2.get_type() && "Gold" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 4)) ||
                       ("dm" == this.inventorySlots.h.ai2.get_type() && "Diamond" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 7)) ||
                       ("leather" == this.inventorySlots.h.ai2.get_type() && "Leather" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 7)) ||
                       ("dscl" == this.inventorySlots.h.ai2.get_type() && "Dragon" == I.substr(this.inventorySlots.h.ai1.get_type(), 0, 6)))
                   ) {
                     this.inventorySlots.h.aoutput.empty &&
                       this.inventorySlots.h.aoutput.item.set_item(g.item(this.inventorySlots.h.ai1.get_type(), 1, this.inventorySlots.h.ai1.get_damage(), O.clone(this.inventorySlots.h.ai1.get_extras())));
                     a = Object.keys(this.inventorySlots.h.ai2.get_extras().h);
                     c = a.length;
                     for (d = 0; d < c; )
                       if (((f = a[d++]), null != g.enchantmentNames.h[f])) {
                         e = !0;
                         k = Object.keys(this.inventorySlots.h.ai1.get_extras().h);
                         h = k.length;
                         for (z = 0; z < h; )
                           if (((m = k[z++]), I.substr(f, 0, f.length - 1) == I.substr(m, 0, m.length - 1))) {
                             k = E.parseInt(I.substr(f, -1, 1));
                             if (!isNaN(k)) {
                               k = E.parseInt(I.substr(f, -1, 1)) + E.parseInt(I.substr(m, -1, 1));
                               for (h = !1; null == g.enchantmentNames.h[I.substr(f, 0, f.length - 1) + (null == k ? "null" : "" + k)]; )
                                 if ((--k, 0 >= k)) {
                                   e = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]);
                                   Object.prototype.hasOwnProperty.call(e.h, m) && delete e.h[m];
                                   e = !1;
                                   h = !0;
                                   break;
                                 }
                               if (h) break;
                               k >= E.parseInt(I.substr(m, -1, 1)) &&
                                 (this.anvilCombineWorth++,
                                 (e = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3])),
                                 Object.prototype.hasOwnProperty.call(e.h, m) && delete e.h[m],
                                 (g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]).h[I.substr(f, 0, f.length - 1) + (null == k ? "null" : "" + k)] = "enchant"));
                             }
                             e = !1;
                             break;
                           } else if (("silkTouch" == m && "fortune" == I.substr(f, 0, 7)) || ("silkTouch" == f && "fortune" == I.substr(m, 0, 7))) {
                             e = !1;
                             break;
                           }
                         e &&
                           (null != q.get(this.inventorySlots.h.ai1.get_type(), "enchantType") && "Random" != q.get(this.inventorySlots.h.ai1.get_type(), "enchantType")
                             ? ((m = g.enchantTypes), (e = q.get(this.inventorySlots.h.ai1.get_type(), "enchantType")), (m = null != m.h[e].h[f]))
                             : (m = !0),
                           m && ((g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]).h[f] = ["enchant"]), this.anvilCombineWorth++));
                       }
                     this.anvilWillCombine = !0;
                     this.anvilCantCombine = !1;
                     this.inventorySlots.h.aoutput.item.item[2] = Math.max(0, this.inventorySlots.h.ai1.get_damage() - (q.get(this.inventorySlots.h.ai1.get_type(), "life") / 3) * this.inventorySlots.h.ai2.get_count());
                     this.inventorySlots.h.aoutput.render();
                     this.inventorySlots.h.aoutput.refetchItem();
                     this.anvilItemsToTake = Math.min(this.inventorySlots.h.ai2.get_count(), Math.ceil((3 * this.inventorySlots.h.ai1.get_damage()) / q.get(this.inventorySlots.h.ai1.get_type(), "life"))) | 0;
                     this.anvilCombineWorth += this.anvilItemsToTake;
                     m = g.makeDynamicMap(this.inventorySlots.h.aoutput.item.item[3]);
                     a = null != this.inventorySlots.h.ai1.get_extras().h.anvilUses ? this.inventorySlots.h.ai1.get_extras().h.anvilUses : 1;
                     c = null != this.inventorySlots.h.ai2.get_extras().h.anvilUses ? this.inventorySlots.h.ai2.get_extras().h.anvilUses : 1;
                     m.h.anvilUses = Math.max(a, c) + 1;
                   } else (this.anvilCantCombine = !0), (this.anvilWillCombine = !1);
                   this.inventorySlots.h.aoutput.renderDamage();
                 }
               } else this.inventorySlots.h.ai2.empty || ((this.anvilCantCombine = !0), (this.anvilWillCombine = !1));
               this.anvilCantCombine || ((this.anvilRenameTextVisible = !0), b && this.inventoryAnvilInput.set_text(this.game.getItemName(this.inventorySlots.h.ai1.item.item)));
               this.inventorySlots.h.ai2.empty && (this.anvilWillCombine = !1);
             }
             this.renameChange();
           }
         },
         resetAnvil: function (b) {
           this.anvilRenameTextVisible = !1;
           this.anvilChangeNameWorth = 0;
           this.anvilEcksVisible = !1;
           this.anvilItemsToTake = this.anvilCombineWorth = this.anvilLevelsRequired = 0;
           this.levelsText = "";
         },
         recalculateCost: function () {
           this.anvilLevelsRequired =
             ((this.anvilCombineWorth + this.anvilChangeNameWorth) *
               Math.max(
                 null != this.inventorySlots.h.ai1.get_extras().h.anvilUses ? this.inventorySlots.h.ai1.get_extras().h.anvilUses : 1,
                 null != this.inventorySlots.h.ai2.get_extras().h.anvilUses ? this.inventorySlots.h.ai2.get_extras().h.anvilUses : 1
               )) |
             0;
           var b = !1;
           this.anvilCanAnvil = !1;
           0 != this.anvilLevelsRequired
             ? ((this.levelsText = "Levels cost: " + this.anvilLevelsRequired),
               this.anvilLevelsRequired <= this.world.experience / 100
                 ? (this.anvilCanAnvil = !0)
                 : this.world.gamemode == U.gamemodes.h.CREATIVE
                 ? (this.anvilCanAnvil = !0)
                 : ((this.levelsText = "Not enough levels! Cost: " + this.anvilLevelsRequired), (b = !0)))
             : (this.levelsText = "");
           if (this.anvilCantCombine || !this.anvilCanAnvil || (!this.anvilWillCombine && !this.anvilWillRename)) {
             this.anvilCanAnvil = !1;
             this.anvilEcksVisible = !0;
             if (this.anvilCantCombine || !b) this.levelsText = "";
             this.inventorySlots.h.aoutput.empty || this.inventorySlots.h.aoutput.setItem(g.emptyItem());
           } else (this.anvilEcksVisible = !1), this.inventorySlots.h.aoutput.setItem(this.inventorySlots.h.aoutput.item.item);
           this.inventorySlots.h.ai1.empty && (this.anvilRenameTextVisible = !1);
         },
         damageAnvilMaybe: function () {
           if (0.12 > Math.random() && null != this.world.states.h[this.dispenseName]) {
             var b = this.dispenseName;
             this.world.states.h[b] += 1;
           }
         },
         requestClose: function (b) {
           null == b && (b = !1);
           switch (this.currentFrame) {
             case 1:
               break;
             case 2:
               this.dropDragger();
               for (b = 1; 5 > b; ) {
                 var a = b++;
                 0 == this.inventorySlots.h["c" + a].empty &&
                   (this.game.addDrop(
                     this.inventorySlots.h["c" + a].get_type(),
                     this.world.worldX,
                     this.world.worldY,
                     this.inventorySlots.h["c" + a].get_count(),
                     this.inventorySlots.h["c" + a].get_damage(),
                     this.inventorySlots.h["c" + a].get_extras()
                   ),
                   this.inventorySlots.h["c" + a].setItem(g.emptyItem()));
               }
               this.gotoAndStop(1);
               break;
             case 3:
               this.dropDragger(this.craftCoords[0] + 0.5, -this.craftCoords[1] - 0.5);
               for (b = 1; 10 > b; )
                 (a = b++),
                   0 == this.inventorySlots.h["c" + a].empty &&
                     (this.game.addDrop(
                       this.inventorySlots.h["c" + a].get_type(),
                       this.craftCoords[0] + 0.5,
                       -this.craftCoords[1] - 0.5,
                       this.inventorySlots.h["c" + a].get_count(),
                       this.inventorySlots.h["c" + a].get_damage(),
                       this.inventorySlots.h["c" + a].get_extras()
                     ),
                     this.inventorySlots.h["c" + a].setItem(g.emptyItem()));
               this.gotoAndStop(1);
               break;
             case 7:
               this.gotoAndStop(1);
               break;
             case 8:
               b && this.gotoAndStop(1);
               break;
             case 9:
               b && this.inventoryCreativeSearchInput.set_focused(!1);
               if (this.inventoryCreativeSearchInput.focused) break;
               this.setSearchOpen(!1);
               this.dropDragger();
               this.gotoAndStop(1);
               break;
             case 10:
               this.dropDragger(this.craftCoords[0] + 0.5, -this.craftCoords[1] - 0.5);
               0 == this.inventorySlots.h.enchant.empty &&
                 (this.game.addDrop(
                   this.inventorySlots.h.enchant.get_type(),
                   this.world.worldX,
                   this.world.worldY,
                   this.inventorySlots.h.enchant.get_count(),
                   this.inventorySlots.h.enchant.get_damage(),
                   this.inventorySlots.h.enchant.get_extras()
                 ),
                 this.inventorySlots.h.enchant.setItem(g.emptyItem()));
               this.gotoAndStop(1);
               break;
             case 12:
               (G.gt(m.Instance.keyDown(27), 0) || b) && this.inventoryCommandsInput.set_focused(!1);
               if (this.inventoryCommandsInput.focused) break;
               this.gotoAndStop(1);
               break;
             case 13:
               (G.gt(m.Instance.keyDown(27), 0) || b) && this.inventoryAnvilInput.set_focused(!1);
               if (this.inventoryAnvilInput.focused) break;
               this.dropDragger(this.craftCoords[0] + 0.5, -this.craftCoords[1] - 0.5);
               0 == this.inventorySlots.h.ai1.empty &&
                 (this.game.addDrop(this.inventorySlots.h.ai1.get_type(), this.world.worldX, this.world.worldY, this.inventorySlots.h.ai1.get_count(), this.inventorySlots.h.ai1.get_damage(), this.inventorySlots.h.ai1.get_extras()),
                 this.inventorySlots.h.ai1.setItem(g.emptyItem()));
               0 == this.inventorySlots.h.ai2.empty &&
                 (this.game.addDrop(this.inventorySlots.h.ai2.get_type(), this.world.worldX, this.world.worldY, this.inventorySlots.h.ai2.get_count(), this.inventorySlots.h.ai2.get_damage(), this.inventorySlots.h.ai2.get_extras()),
                 this.inventorySlots.h.ai2.setItem(g.emptyItem()));
               0 == this.inventorySlots.h.aoutput.empty &&
                 (this.game.addDrop(
                   this.inventorySlots.h.aoutput.get_type(),
                   this.world.worldX,
                   this.world.worldY,
                   this.inventorySlots.h.aoutput.get_count(),
                   this.inventorySlots.h.aoutput.get_damage(),
                   this.inventorySlots.h.aoutput.get_extras()
                 ),
                 this.inventorySlots.h.aoutput.setItem(g.emptyItem()));
               this.gotoAndStop(1);
               break;
             case 4:
             case 5:
             case 11:
             case 14:
               this.dropDragger(this.craftCoords[0] + 0.5, -this.craftCoords[1] - 0.5);
               this.gotoAndStop(1);
               break;
             default:
               Ia.trace("No requestClose was created for frame " + this.currentFrame + ".", { fileName: "src/Inventory.hx", lineNumber: 2180, className: "Inventory", methodName: "requestClose" }), this.gotoAndStop(1);
           }
         },
         dropDragger: function (b, a) {
           if (null == b || null == a) (b = this.world.worldX), (a = this.world.worldY);
           0 == this.inventorySlots.h.dragger.empty &&
             (this.game.addDrop(this.inventorySlots.h.dragger.get_type(), b, a, this.inventorySlots.h.dragger.get_count(), this.inventorySlots.h.dragger.get_damage(), this.inventorySlots.h.dragger.get_extras()),
             this.inventorySlots.h.dragger.setItem(g.emptyItem()));
         },
         only: function (b) {
           for (var a = 0, c = this.blocks.length; a < c; ) {
             for (var d = a++, f = !0, e = 0, k = b.length; e < k; ) {
               var h = e++;
               if (this.blocks[d] == b[h]) {
                 f = !1;
                 if (this.inventorySlots.h["c" + b[h]].empty) return !1;
                 break;
               }
             }
             if (f && !this.inventorySlots.h["c" + this.blocks[d]].empty) return !1;
           }
           return !0;
         },
         containItems: function (b) {
           for (var a = [], c = 0, d = b.length; c < d; ) a[c++] = !1;
           c = 0;
           for (d = this.blocks.length; c < d; ) {
             var f = c++,
               e = !1;
             if (!this.inventorySlots.h["c" + this.blocks[f]].empty) {
               for (var k = 0, h = b.length; k < h; ) {
                 var g = k++;
                 if ("String" == O.getQualifiedClassName(b[g])) {
                   if (this.inventorySlots.h["c" + this.blocks[f]].get_type() == b[g] && 0 == a[g]) {
                     e = a[g] = !0;
                     break;
                   }
                 } else {
                   var m = b[g];
                   if (1 == m.h.exactExtras) {
                     if (this.inventorySlots.h["c" + this.blocks[f]].get_type() == m.h.ty && this.game.sameExtras(this.inventorySlots.h["c" + this.blocks[f]].get_extras(), m.h.extra) && 0 == a[g]) {
                       e = a[g] = !0;
                       break;
                     }
                   } else if (this.inventorySlots.h["c" + this.blocks[f]].get_type() == m.h.ty && this.game.hasExtras(this.inventorySlots.h["c" + this.blocks[f]].get_extras(), m.h.extra) && 0 == a[g]) {
                     e = a[g] = !0;
                     break;
                   }
                 }
               }
               if (!e) return !1;
             }
           }
           c = 0;
           for (d = b.length; c < d; ) if (0 == a[c++]) return !1;
           return !0;
         },
         rainbow: function () {
           for (var b = [], a = 0, c = this.blocks.length; a < c; ) {
             var d = a++;
             if (0 == this.inventorySlots.h["c" + this.blocks[d]].empty)
               if ("cloth" == this.inventorySlots.h["c" + this.blocks[d]].get_type()) {
                 if (null != this.inventorySlots.h["c" + this.blocks[d]].get_extras().h.type && "rainbow" != this.inventorySlots.h["c" + this.blocks[d]].get_extras().h.type) {
                   for (var f = 0, e = b.length; f < e; ) if (this.inventorySlots.h["c" + this.blocks[d]].get_extras().h.type == b[f++] || 7 < b.length) return !1;
                   b.push(this.inventorySlots.h["c" + this.blocks[d]].get_extras().h.type);
                 }
               } else return !1;
           }
           return 7 == b.length ? !0 : !1;
         },
         rainbowCap: function () {
           for (var b = [], a = !1, c = 0, d = this.blocks.length; c < d; ) {
             var f = c++;
             if (0 == this.inventorySlots.h["c" + this.blocks[f]].empty)
               if ("dye" == this.inventorySlots.h["c" + this.blocks[f]].get_type()) {
                 if (null != this.inventorySlots.h["c" + this.blocks[f]].get_extras().h.type) {
                   for (var e = 0, k = b.length; e < k; ) if (this.inventorySlots.h["c" + this.blocks[f]].get_extras().h.type == b[e++] || 3 < b.length) return !1;
                   b.push(this.inventorySlots.h["c" + this.blocks[f]].get_extras().h.type);
                 }
               } else if ("ll" == this.inventorySlots.h["c" + this.blocks[f]].get_type() || "bonem" == this.inventorySlots.h["c" + this.blocks[f]].get_type() || "ink" == this.inventorySlots.h["c" + this.blocks[f]].get_type()) {
                 e = 0;
                 for (k = b.length; e < k; ) if (this.inventorySlots.h["c" + this.blocks[f]].get_type() == b[e++] || 3 < b.length) return !1;
                 b.push(this.inventorySlots.h["c" + this.blocks[f]].get_type());
               } else {
                 if ("paper" != this.inventorySlots.h["c" + this.blocks[f]].get_type() || a) return !1;
                 a = !0;
               }
           }
           return 3 == b.length && a ? !0 : !1;
         },
         carpet: function () {
           for (var b = 0, a = this.blocks.length - 1; b < a; ) {
             var c = b++;
             if (
               0 == this.inventorySlots.h["c" + this.blocks[c]].empty &&
               "cloth" == this.inventorySlots.h["c" + this.blocks[c]].get_type() &&
               null != this.r[c] &&
               0 == this.inventorySlots.h["c" + this.r[c]].empty &&
               this.inventorySlots.h["c" + this.r[c]].get_type() == this.inventorySlots.h["c" + this.blocks[c]].get_type() &&
               this.inventorySlots.h["c" + this.r[c]].get_extras().h.type == this.inventorySlots.h["c" + this.blocks[c]].get_extras().h.type &&
               this.only([(c + 1) | 0, this.r[c] | 0])
             )
               return this.inventorySlots.h["c" + this.blocks[c]].get_extras().h.type;
           }
           return "undefined";
         },
         doWhatYouDoWithWheatThins: function () {
           for (var b = null, a = 0, c = this.blocks.length; a < c; ) {
             var d = a++;
             if (0 == this.inventorySlots.h["c" + (d + 1)].empty) {
               b = d + 1;
               break;
             }
           }
           var f = [0, 0];
           a = 0;
           for (c = this.blocks2.length; a < c; ) {
             d = a++;
             for (var l = !1, k = 0, h = this.blocks2[d].length; k < h; ) {
               var z = k++;
               if (0 == this.inventorySlots.h["c" + this.blocks2[d][z]].empty) {
                 f = [z, d];
                 l = !0;
                 break;
               }
             }
             if (l) break;
           }
           this.inventorySlots.h.output.setItem(g.emptyItem());
           if (!this.only([]))
             for (a = 0, c = this.game.recipes.length; a < c; )
               if (((l = this.game.recipes[a++]), "absolute" == l.h.inputType || "relative" == l.h.inputType)) {
                 d = !0;
                 z = [];
                 k = 0;
                 for (h = l.h.input.length; k < h; ) {
                   var m = l.h.input[k++],
                     A = null;
                   "relative" == l.h.inputType
                     ? ((A = null), null != this.blocks2[f[1] + m.h.y] && (A = this.blocks2[(f[1] + m.h.y) | 0][(f[0] + m.h.x) | 0]))
                     : "absolute" == l.h.inputType && ((A = null), null != this.blocks2[m.h.y] && (A = this.blocks2[m.h.y | 0][m.h.x | 0]));
                   var n = !1;
                   null != A &&
                     0 != A &&
                     (this.inventorySlots.h["c" + A].get_type() == m.h.ty
                       ? (null != m.h.damage && this.inventorySlots.h["c" + A].get_damage() != m.h.damage) || (null != m.h.type && this.inventorySlots.h["c" + A].get_extras().h.type != m.h.type) || (z.push(A), (n = !0))
                       : null == m.h.ty2 ||
                         this.inventorySlots.h["c" + A].get_type() != m.h.ty2 ||
                         (null != m.h.damage2 && this.inventorySlots.h["c" + A].get_damage() != m.h.damage2) ||
                         (null != m.h.type2 && this.inventorySlots.h["c" + A].get_extras().h.type != m.h.type2) ||
                         (z.push(A), (n = !0)));
                   if (!n) {
                     d = !1;
                     break;
                   }
                 }
                 if (d && this.only(z)) {
                   b = l.h.output;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, H.__cast(b.h.extra, e)]);
                   break;
                 }
               } else if ("large box" == l.h.inputType) {
                 k = !0;
                 if (3 == this.tableSize)
                   for (h = 0; 9 > h; ) {
                     if (((d = h++), this.inventorySlots.h["c" + this.blocks[d]].get_type() != l.h.input || 1 == this.inventorySlots.h["c" + this.blocks[d]].empty)) {
                       k = !1;
                       break;
                     }
                   }
                 else k = !1;
                 if (k) {
                   b = l.h.output;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, H.__cast(b.h.extra, e)]);
                   break;
                 }
               } else if ("contains" == l.h.inputType) {
                 if (this.containItems(l.h.input)) {
                   b = l.h.output;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, H.__cast(b.h.extra, e)]);
                   break;
                 }
               } else if ("rainbow" == l.h.inputType) {
                 if (this.rainbow()) {
                   b = l.h.output;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, H.__cast(b.h.extra, e)]);
                   break;
                 }
               } else if ("rainbowcap" == l.h.inputType) {
                 if (this.rainbowCap()) {
                   b = l.h.output;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, H.__cast(b.h.extra, e)]);
                   break;
                 }
               } else if ("carpet" == l.h.inputType) {
                 if (((k = this.carpet()), "undefined" != k)) {
                   b = l.h.output;
                   l = O.clone(b.h.extra);
                   null == l && (l = new e());
                   l.h.type = k;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, b.h.damage, l]);
                   break;
                 }
               } else if ("keepextra" == l.h.inputType) {
                 if (this.containItems(l.h.input) && this.only([b])) {
                   l = l.h.output;
                   a = O.clone(l.h.extra);
                   null == a && (a = new e());
                   c = Object.keys(this.inventorySlots.h["c" + b].get_extras().h);
                   f = c.length;
                   for (k = 0; k < f; ) (h = c[k++]), (d = this.inventorySlots.h["c" + b].get_extras().h[h]), (a.h[h] = d);
                   this.inventorySlots.h.output.setItem([l.h.ty, l.h.count, l.h.damage, a]);
                   break;
                 }
               } else if ("dye" == l.h.inputType || "dyekeepextra" == l.h.inputType) {
                 h = k = "";
                 d = V.colors.h;
                 z = Object.keys(d);
                 m = z.length;
                 for (A = 0; A < m; )
                   if (((n = d[z[A++]]), "NONE" != n.h.dye && !l.h.exclude[n.h.id]))
                     if ("DYE" == n.h.dye) {
                       var p = H.__cast(l.h.input, Array),
                         t = new e();
                       t.h.ty = "dye";
                       var r = new e();
                       r.h.type = n.h.id;
                       t.h.extra = g.makeDynamicMap(r);
                       if (this.containItems(p.concat([g.makeDynamicMap(t)]))) {
                         k = n.h.id;
                         h = "dye";
                         break;
                       }
                     } else if (((p = H.__cast(l.h.input, Array)), (t = new e()), (t.h.ty = n.h.dye), (t.h.extra = new e()), this.containItems(p.concat([g.makeDynamicMap(t)])))) {
                       k = n.h.id;
                       h = n.h.dye;
                       break;
                     }
                 if ("" != k) {
                   b = l.h.output;
                   a = O.clone(b.h.extra);
                   null == a && (a = new e());
                   c = b.h.damage;
                   if ("dyekeepextra" == l.h.inputType)
                     for (f = 0, d = this.tableSize * this.tableSize; f < d; )
                       if (((l = f++), this.inventorySlots.h["c" + this.blocks[l]].get_type() != h && 0 == this.inventorySlots.h["c" + this.blocks[l]].empty)) {
                         c = this.inventorySlots.h["c" + this.blocks[l]].get_extras().h;
                         f = Object.keys(c);
                         h = f.length;
                         for (d = 0; d < h; ) (z = c[f[d++]]), (m = this.inventorySlots.h["c" + this.blocks[l]].get_extras().h[z]), (a.h[z] = m);
                         c = this.inventorySlots.h["c" + this.blocks[l]].get_damage();
                         break;
                       }
                   a.h.type = k;
                   this.inventorySlots.h.output.setItem([b.h.ty, b.h.count, c, a]);
                   break;
                 }
               } else if ("fix" == l.h.inputType) {
                 k = -1;
                 if (1 == q.get(this.inventorySlots.h["c" + b].get_type(), "tool"))
                   for (h = b, z = this.blocks.length; h < z; )
                     if (((d = h++), 0 == this.inventorySlots.h["c" + (d + 1)].empty && this.inventorySlots.h["c" + b].get_type() == this.inventorySlots.h["c" + (d + 1)].get_type())) {
                       k = d + 1;
                       break;
                     }
                 if (-1 != k && this.only([b, k])) {
                   l = l.h.output;
                   this.inventorySlots.h.output.setItem([
                     this.inventorySlots.h["c" + b].get_type(),
                     l.h.count,
                     Math.max(0, -1.2999999999999998 * q.get(this.inventorySlots.h["c" + b].get_type(), "life") + 1.15 * this.inventorySlots.h["c" + b].get_damage() + 1.15 * this.inventorySlots.h["c" + k].get_damage()),
                     H.__cast(l.h.extra, e),
                   ]);
                   break;
                 }
               }
         },
         arrange: function (b) {
           var a = this.enchantmentButtons[b],
             c = Math.floor(8 * Math.random()) + 1 + Math.floor(this.totalBooks / 2) + Math.floor(Math.random() * (this.totalBooks + 1)),
             d = Math.floor(Math.max(c / 3, 1)),
             f = Math.floor((2 * c) / 3 + 1);
           c = Math.floor(Math.max(c, 2 * this.totalBooks));
           a.text = "";
           for (var e = 0, k = Math.floor(2 * Math.random()) + 3; e < k; ) ++e, (a.text += Wa.wordArray[Math.floor(Math.random() * Wa.wordArray.length)] + " ");
           0 == b ? (a.lvl = d) : 1 == b ? (a.lvl = f) : 2 == b && (a.lvl = c);
           a.canAfford = Math.floor(this.world.experience / 100) < a.lvl && this.world.gamemode != U.gamemodes.h.CREATIVE ? !1 : !0;
         },
         unArrange: function (b) {
           this.enchantmentButtons[b] = { text: "", lvl: 0, canAfford: !1 };
         },
         buyEnchant: function (b) {
           "potion" == this.inventorySlots.h.enchant.get_type()
             ? ((this.world.experience = Math.floor(Math.max(0, this.world.experience - 1e3))),
               (this.inventorySlots.h.enchant.item.item[0] = "boe"),
               this.inventorySlots.h.enchant.setItem(this.inventorySlots.h.enchant.item.item),
               this.unArrange(0))
             : ("book" == this.inventorySlots.h.enchant.get_type() && (this.inventorySlots.h.enchant.item.item[0] = "ebook"),
               (this.world.experience = Math.floor(Math.max(0, this.world.experience - 100 * this.enchantmentButtons[b].lvl))),
               this.game.enchant(this.inventorySlots.h.enchant.get_type(), this.inventorySlots.h.enchant.item.get_extras(), this.enchantmentButtons[b].lvl, !1),
               this.inventorySlots.h.enchant.setItem(this.inventorySlots.h.enchant.item.item),
               this.game.unlockAchieve(45),
               this.unArrange(0),
               this.unArrange(1),
               this.unArrange(2));
         },
         updateBackground: function () {
           switch (this.currentFrame) {
             case 2:
             case 3:
             case 4:
             case 5:
             case 8:
             case 9:
             case 10:
             case 11:
             case 13:
             case 14:
               var b = this.backgroundEntity,
                 a = new M(-this.game.scene.get_width() / 2, -this.game.scene.get_height() / 2 + 7),
                 c = new h(0, 0),
                 d = new h(0, 0),
                 f = new h(this.game.scene.get_width(), this.game.scene.get_height()),
                 l = new e(),
                 k = w.repeatArray([0], 24);
               l.h.color = k;
               l.h.colorOffset = [
                 0,
                 0.30980392156862746,
                 0.4470588235294118,
                 0.3,
                 0,
                 0.2235294117647059,
                 0.30980392156862746,
                 0.5,
                 0,
                 0.30980392156862746,
                 0.4470588235294118,
                 0.3,
                 0,
                 0.30980392156862746,
                 0.4470588235294118,
                 0.3,
                 0,
                 0.2235294117647059,
                 0.30980392156862746,
                 0.5,
                 0,
                 0.2235294117647059,
                 0.30980392156862746,
                 0.5,
               ];
               b.updateQuad(0, a, c, d, f, null, null, l);
           }
           switch (this.currentFrame) {
             case 2:
             case 3:
             case 4:
             case 5:
             case 9:
             case 10:
             case 11:
               this.backgroundEntity.update9Slice(1, new t(-163, -175, 326, 338), new t(96, 80, 32, 32), new t(11, 11, 10, 10), 0, null, 1.3);
               break;
             case 13:
             case 14:
               this.backgroundEntity.update9Slice(1, new t(-163, -191, 326, 354), new t(96, 80, 32, 32), new t(11, 11, 10, 10), 0, null, 1.3);
               break;
             default:
               null != this.backgroundEntity && this.backgroundEntity.remove9Slice(1);
           }
         },
         set_currentFrame: function (b) {
           this.currentFrame = b;
           $a.globallyWaitingForMouseUp = !0;
           this.prepareRenderer(this.currentFrame);
           this.updateBackground();
           return b;
         },
         gotoAndStop: function (b) {
           var a = O.getQualifiedClassName(b);
           "String" == a ? this.set_currentFrame(Wa.frames.h[b]) : "int" == a ? this.set_currentFrame(b) : "Number" == a && this.set_currentFrame(Math.floor(b));
           2 == this.currentFrame && this.game.unlockAchieve(2);
         },
         __class__: Wa,
       };
       var bb = function (b, a, c, d, f, e) {
         this.enchantmentGlintQuad = -1;
         this.entity = b;
         this.game = d;
         this.world = f;
         this.set_x(a);
         this.set_y(c);
         this.set_item(e);
         this.setIsEnchanted();
       };
       r.Item = bb;
       bb.__name__ = "Item";
       bb.prototype = {
         renderInit: function (b, a, c) {
           this.renderer = Za.createInstance(q.getItemRenderer(this.get_type()), [b, a, c]).fromItem(this.item);
         },
         destroy: function () {
           null != this.renderer && this.renderer.destroy();
           -1 != this.enchantmentGlintQuad && (this.entity.removeQuad(this.enchantmentGlintQuad), (this.enchantmentGlintQuad = -1));
         },
         render: function () {
           if (null != this.entity)
             if ((null == this.renderer ? this.renderInit(this.entity, this.x, this.y) : this.renderer.fromItem(this.item), this.renderer.update(), this.isEnchanted)) {
               -1 == this.enchantmentGlintQuad &&
                 ((this.enchantmentGlintQuad = this.entity.nearestConsecutiveEmpty(1, this.renderer.quadPositions[this.renderer.quadPositions.length - 1] + 1)), (this.enchantmentGlintTexture = y.getTexture("enchantment_glint")));
               var b = this.world.tick / ((520 * m.Instance.get_fps()) / 25);
               this.entity.updateQuad(
                 this.enchantmentGlintQuad,
                 new M(this.x, this.y),
                 new h(this.enchantmentGlintTexture.x, this.enchantmentGlintTexture.y),
                 new h(this.enchantmentGlintTexture.width, this.enchantmentGlintTexture.height),
                 new h(1, 1),
                 null,
                 [b, 0, b, 1, b + 0.14285714285714285, 0, b + 0.14285714285714285, 0, b, 1, b + 0.14285714285714285, 1]
               );
             } else -1 != this.enchantmentGlintQuad && (this.entity.removeQuad(this.enchantmentGlintQuad), (this.enchantmentGlintQuad = -1));
         },
         getBlockData: function (b) {
           return q.get(this.get_type(), b);
         },
         setIsEnchanted: function () {
           this.isEnchanted = !1;
           if (null != this.get_extras())
             for (var b = Object.keys(this.get_extras().h), a = b.length, c = 0; c < a; )
               if (null != g.enchantmentNames.h[b[c++]]) {
                 this.isEnchanted = !0;
                 break;
               }
         },
         get_type: function () {
           return this.item[0];
         },
         get_count: function () {
           return this.item[1];
         },
         get_isTool: function () {
           return 1 == this.getBlockData("tool");
         },
         get_damage: function () {
           return this.item[2];
         },
         get_extras: function () {
           "Object" != O.getQualifiedClassName(this.item[3]) && (this.item[3] = new e());
           return this.item[3];
         },
         set_item: function (b) {
           if (null == b || null == b[0]) b = ["air", 0, 0, new e()];
           null != this.item && b[0] != this.item[0] && (this.destroy(), (this.renderer = null));
           this.item = O.clone(b);
           this.setIsEnchanted();
           this.render();
           return this.item;
         },
         set_x: function (b) {
           this.x != b && ((this.x = b), null != this.renderer && (this.renderer.set_x(this.x), this.render()));
           return b;
         },
         set_y: function (b) {
           this.y != b && ((this.y = b), null != this.renderer && (this.renderer.set_y(this.y), this.render()));
           return b;
         },
         __class__: bb,
       };
       var $a = function (b, a, c, d, f, e, k, h, z, m) {
         this.waitingForLeftMouseUp = this.waitingForRightMouseUp = !1;
         this.name = "";
         this.number = -1;
         this.mini = !1;
         this.empty = !0;
         this.hovering = !1;
         this.slotQuads = this.countQuad = -1;
         this.item = new bb(a, ((d - 1) / 16 - 0.5) / 1.09416984375, ((f - 1) / 16 - 0.5) / 1.09416984375, k, h, z);
         this.item.renderer.update();
         this.collisionBounds = new t(d - (20 * e) / 2, f - (20 * e) / 2, 20 * e, 20 * e);
         null == z && (z = g.emptyItem());
         this.empty = !0;
         0 < z[1] && "air" != z[0] && (this.empty = !1);
         this.slotEntity = b;
         this.countEntity = c;
         this.size = e;
         this.set_x(d);
         this.set_y(f);
         this.game = k;
         this.world = h;
         this.itemFetch = m;
         this.render();
       };
       r.ItemSlot = $a;
       $a.__name__ = "ItemSlot";
       $a.prototype = {
         refetchItem: function () {
           null == this.itemFetch ? (this.item.isEnchanted && this.item.render(), this.item.renderer.hasFrameEvent && this.item.render()) : this.setItem(this.itemFetch());
         },
         setItem: function (b) {
           var a = !1,
             c = !1;
           if (null == b || 0 >= b[1]) b = g.emptyItem();
           "i" == I.substr(this.name, 0, 1)
             ? (this.world.inventoryList[this.number] = b)
             : "a1" == this.name || "a2" == this.name || "a3" == this.name || "a4" == this.name
             ? ((this.world.armors[this.number] = [b[0], b[2], b[3]]), this.game.updateArmorRenderers())
             : "fuel" == this.name
             ? (H.__cast(this.world.toSmelt.h[this.game.inventario.smelter], e).h.fuel = b)
             : "cook" == this.name
             ? (H.__cast(this.world.toSmelt.h[this.game.inventario.smelter], e).h.input = b)
             : "output2" == this.name
             ? (H.__cast(this.world.toSmelt.h[this.game.inventario.smelter], e).h.output = b)
             : "brewFuel" == this.name
             ? (H.__cast(this.world.toBrew.h[this.game.inventario.brewer], e).h.fuel = b)
             : "brewInput" == this.name
             ? (H.__cast(this.world.toBrew.h[this.game.inventario.brewer], e).h.input = b)
             : "brewOutput" == I.substr(this.name, 0, 10)
             ? ((H.__cast(H.__cast(this.world.toBrew.h[this.game.inventario.brewer], e).h.output, Array)[this.number] = b),
               null != this.world.getBlock(this.game.inventario.craftCoords[0], this.game.inventario.craftCoords[1]) && this.world.getBlock(this.game.inventario.craftCoords[0], this.game.inventario.craftCoords[1]).updateEvent())
             : "h" == I.substr(this.name, 0, 1)
             ? "ender" == this.game.inventario.chest
               ? (H.__cast(this.world.enderChests.h[this.world.player.id], Array)[this.number] = b)
               : (H.__cast(this.world.chests.h[this.game.inventario.chest], Array)[this.number] = b)
             : "dis" == I.substr(this.name, 0, 3)
             ? (H.__cast(this.world.states.h[this.game.inventario.dispenseName + "_2"], Array)[this.number] = b)
             : "enchant" == this.name &&
               (0 < b[1] && "air" != b[0]
                 ? (this.game.inventario.arrange(0),
                   "potion" != b[0] ? (this.game.inventario.arrange(1), this.game.inventario.arrange(2)) : (this.game.inventario.unArrange(1), this.game.inventario.unArrange(2)),
                   (this.game.inventario.bookOpen = !0))
                 : (this.game.inventario.unArrange(0), this.game.inventario.unArrange(1), this.game.inventario.unArrange(2), (this.game.inventario.bookOpen = !1)));
           this.item.get_count() != b[1] && (a = !0);
           this.item.get_damage() != b[2] && (c = !0);
           this.item.set_item(b);
           var d = this.empty;
           this.empty = !0;
           0 < b[1] && "air" != b[0] && (this.empty = !1);
           this.empty != d && this.renderSlot();
           c && this.renderDamage();
           a && this.renderCount();
           2 == this.name.length && "c" == I.substr(this.name, 0, 1) && this.game.inventario.doWhatYouDoWithWheatThins();
           "ai1" == this.name && this.game.inventario.doAnvilyThings(!0);
           "ai2" == this.name && this.game.inventario.doAnvilyThings(!1);
         },
         showTooltip: function () {
           this.game.inventario.showTooltip = !0;
           var b = this.game.getItemName(this.item.item);
           this.game.inventario.tooltipText = [b];
           if ("potion" == this.get_type()) {
             if (null != this.get_extras().h.effects) {
               var a = this.game.getEffectsTooltips(this.get_extras().h.effects);
               b = 0;
               for (var c = a.length; b < c; ) this.game.inventario.tooltipText.push(a[b++]);
             }
           } else
             "cbook" == this.get_type() &&
               (null != this.get_extras().h.command && 0 < this.get_extras().h.command.length
                 ? (43 < this.get_extras().h.command.length
                     ? this.game.inventario.tooltipText.push('"' + E.string(this.get_extras().h.command.substr(0, 40)) + '..."')
                     : this.game.inventario.tooltipText.push('"' + E.string(this.get_extras().h.command) + '"'),
                   null != this.get_extras().h.uses && 0 < this.get_extras().h.uses && this.game.inventario.tooltipText.push("Uses: " + E.string(this.get_extras().h.uses)))
                 : this.game.inventario.tooltipText.push("No effect"));
           b = Object.keys(this.get_extras().h);
           c = b.length;
           for (a = 0; a < c; ) {
             var d = b[a++];
             null != g.enchantmentNames.h[d] && this.game.inventario.tooltipText.push(g.enchantmentNames.h[d]);
           }
           if (null != this.get_extras().h.canPlaceOn) {
             var f = this.get_extras().h.canPlaceOn;
             a = "Can place on ";
             -1 != f.indexOf("all") && (a = "Can't place on ");
             b = 0;
             for (c = f.length; b < c; ) (d = b++), "all" != f[d] && this.game.inventario.tooltipText.push(a + E.string(q.get(q.identifierToID.h[f[d]], "name")));
           }
           if (null != this.get_extras().h.canDestroy)
             for (f = this.get_extras().h.canDestroy, a = "Can destroy ", -1 != f.indexOf("all") && (a = "Can't destroy "), b = 0, c = f.length; b < c; )
               (d = b++), "all" != f[d] && this.game.inventario.tooltipText.push(a + E.string(q.get(q.identifierToID.h[f[d]], "name")));
         },
         checkInteraction: function () {
           if (1 == this.mini) {
             if (this.game.cantMove || this.game.pawsed || (!G.gt(m.Instance.mouseDown(), 0) && !G.gt(m.Instance.rightMouseDown(), 0)) || !this.collisionBounds.containsPoint(m.Instance.mouse))
               return this.set_hovering(this.world.selectedInventoryItem == this.number), !1;
             0 < this.game.rMouseD && (this.game.waitTillRightMouseIsUp = !0);
             this.world.selectedInventoryItem != this.number &&
               (null != this.game.hotbarSlots[this.world.selectedInventoryItem] && this.game.hotbarSlots[this.world.selectedInventoryItem].hovering && this.game.hotbarSlots[this.world.selectedInventoryItem].set_hovering(!1),
               (this.world.selectedInventoryItem = this.number),
               this.set_hovering(this.world.selectedInventoryItem == this.number),
               this.game.requestSound("tick", 0, 0),
               this.game.updateSelectedInventoryItemStuff(!1),
               (this.game.currentlyMining = ""),
               (this.game.currentlyMiningBlock = [-1e4, -1e4]));
             return !0;
           }
           if ("dragger" == this.name) return this.empty ? this.set_x(this.set_y(-100)) : (this.set_x(m.Instance.mouse.x), this.set_y(m.Instance.mouse.y), (m.Instance.cursor = null)), !0;
           this.set_hovering(this.collisionBounds.containsPoint(m.Instance.mouse));
           var b = m.Instance.mouseDown(),
             a = m.Instance.rightMouseDown(),
             c = G.gt(m.Instance.keyDown(J.intToKey.h[J.keyBindings.h.altClick.h.id]), 0);
           J.touchControls && ((b = this.game.rMouseD), (a = this.game.mouseD));
           var d = this.sibling("dragger");
           0 == b && (this.waitingForLeftMouseUp = !1);
           0 == a && (this.waitingForRightMouseUp = !1);
           $a.globallyWaitingForMouseUp && 0 == b && 0 == a && ($a.globallyWaitingForMouseUp = !1);
           if (this.hovering && !$a.globallyWaitingForMouseUp) {
             this.empty || this.showTooltip();
             if (this.world.gamemode == U.gamemodes.h.SPECTATOR) return !1;
             if ((1 == b && this.waitingForLeftMouseUp) || (0 < b && !this.waitingForLeftMouseUp))
               if (((this.waitingForLeftMouseUp = !0), "trashItem" == this.name)) d.setItem(g.emptyItem());
               else if ("p" == I.substr(this.name, 0, 1))
                 d.empty ? (d.setItem(this.item.item), ($a.globallyWaitingForMouseUp = !0)) : this.isSiblingSame("dragger") && d.get_count() <= this.getMaxStack() - this.get_count() ? d.addCount(this.get_count()) : d.setItem(g.emptyItem());
               else if ("output" == this.name)
                 if (c) for (b = !0; b; ) this.game.addToInventoryOrDrop(this.get_type(), this.get_count(), this.get_damage(), this.get_extras()), (b = this.takeCraftingItem());
                 else
                   d.empty
                     ? (($a.globallyWaitingForMouseUp = !0), d.setItem(this.item.item), this.takeCraftingItem())
                     : this.isSiblingSame("dragger") && d.get_count() <= this.getMaxStack() - this.get_count() && (d.addCount(this.get_count()), this.takeCraftingItem());
               else if (c)
                 if ("i" == I.substr(this.name, 0, 1)) {
                   c = !1;
                   if (this.game.inventario.currentFrame == Wa.frames.h.inventory) {
                     b = -1;
                     if ("Cap" == I.substr(this.get_type(), -3, 3) || "jl" == this.get_type() || "pk" == this.get_type() || "mh" == this.get_type()) b = 0;
                     "Shirt" == I.substr(this.get_type(), -5, 5) && (b = 1);
                     "Pants" == I.substr(this.get_type(), -5, 5) && (b = 2);
                     "Shoes" == I.substr(this.get_type(), -5, 5) && (b = 3);
                     -1 != b &&
                       (this.sibling("a" + (b + 1)).empty
                         ? ((a = O.clone(this.item.item)), (a[1] = 1), this.sibling("a" + (b + 1)).setItem(a), this.addCount(-1))
                         : 1 == this.get_count()
                         ? this.swapWithSibling("a" + (b + 1))
                         : ((c = O.clone(this.sibling("a" + (b + 1)).item.item)), (a = O.clone(this.item.item)), (a[1] = 1), this.sibling("a" + (b + 1)).setItem(a), this.addCount(-1), this.game.addToInventoryOrDrop(c[0], c[1], c[2], c[3])),
                       (c = !0));
                   } else if (this.game.inventario.currentFrame == Wa.frames.h.chest)
                     (this.item.item[1] =
                       "ender" == this.game.inventario.chest
                         ? this.game.storeItemToData(O.clone(this.item.item), this.world.enderChests.h[this.world.player.id], 27)
                         : this.game.storeItemToData(O.clone(this.item.item), this.world.chests.h[this.game.inventario.chest], 27)),
                       this.setItem(this.item.item),
                       this.renderCount();
                   else if (this.game.inventario.currentFrame == Wa.frames.h.smelt)
                     null != this.getBlockData("smeltsInto") &&
                       (this.sibling("cook").empty
                         ? (this.swapWithSibling("cook"), (c = !0))
                         : this.isSiblingSame("cook") && ((b = this.sibling("cook").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount())),
                       c ||
                         null == this.getBlockData("fuel") ||
                         (this.sibling("fuel").empty
                           ? (this.swapWithSibling("fuel"), (c = !0))
                           : this.isSiblingSame("fuel") && ((b = this.sibling("fuel").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount()));
                   else if (this.game.inventario.currentFrame == Wa.frames.h.brew) {
                     if (
                       ("bp" == this.get_type() &&
                         (this.sibling("brewFuel").empty
                           ? (this.swapWithSibling("brewFuel"), (c = !0))
                           : this.isSiblingSame("brewFuel") && ((b = this.sibling("brewFuel").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount())),
                       !c)
                     )
                       if (null != this.getBlockData("brewIngredient"))
                         this.sibling("brewInput").empty
                           ? (this.swapWithSibling("brewInput"), (c = !0))
                           : this.isSiblingSame("brewInput") && ((b = this.sibling("brewInput").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount());
                       else
                         for (a = 0; 3 > a; )
                           if (((b = a++), this.sibling("brewOutput" + (b + 1)).acceptsType(this.item.item) && this.sibling("brewOutput" + (b + 1)).empty)) {
                             a = O.clone(this.item.item);
                             a[1] = 1;
                             this.sibling("brewOutput" + (b + 1)).setItem(a);
                             this.addCount(-1);
                             c = !0;
                             break;
                           }
                   } else
                     this.game.inventario.currentFrame == Wa.frames.h.enchant
                       ? this.sibling("enchant").empty && this.sibling("enchant").acceptsType(this.item.item) && ((a = O.clone(this.item.item)), (a[1] = 1), this.sibling("enchant").setItem(a), this.addCount(-1), (c = !0))
                       : this.game.inventario.currentFrame == Wa.frames.h.anvil
                       ? (this.sibling("ai1").empty
                           ? (this.swapWithSibling("ai1"), (c = !0))
                           : this.isSiblingSame("ai1") && ((b = this.sibling("ai1").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount()),
                         c ||
                           (this.sibling("ai2").empty
                             ? (this.swapWithSibling("ai2"), (c = !0))
                             : this.isSiblingSame("ai2") && ((b = this.sibling("ai2").addCount(this.get_count())), b < this.item.item[1] && (c = !0), (this.item.item[1] = b), this.setItem(this.item.item), this.renderCount())))
                       : this.game.inventario.currentFrame == Wa.frames.h.dispense &&
                         ((this.item.item[1] = this.game.storeItemToData(O.clone(this.item.item), this.world.states.h[this.game.inventario.dispenseName + "_2"], 9)), this.setItem(this.item.item), this.renderCount());
                   if (!c) {
                     c = 0;
                     var f = 8;
                     9 > this.number && ((c = 9), (f = 44));
                     a = c;
                     for (
                       var e = f + 1;
                       a < e && !((b = a++), null != this.sibling("i" + (b + 1)) && this.isSiblingSame("i" + (b + 1)) && ((b = this.sibling("i" + (b + 1)).addCount(this.get_count())), (this.item.item[1] = b)), 0 >= this.get_count());
 
                     );
                     if (0 < this.get_count())
                       for (a = c, e = f + 1; a < e; )
                         if (((b = a++), null != this.sibling("i" + (b + 1)) && this.sibling("i" + (b + 1)).empty)) {
                           this.sibling("i" + (b + 1)).setItem(this.item.item);
                           this.setItem(g.emptyItem());
                           break;
                         }
                     this.setItem(this.item.item);
                     this.renderCount();
                   }
                 } else
                   this.empty ||
                     ((b = this.game.addToInventory(this.get_type(), this.get_count(), this.get_damage(), this.get_extras())),
                     0 < b && ("output2" == this.name && this.takeFurnaceItem(), this.addCount(-b), "aoutput" == this.name && this.takeAnvilItem()));
               else
                 d.empty
                   ? (($a.globallyWaitingForMouseUp = !0), "output2" == this.name && this.takeFurnaceItem(), this.swapWithSibling("dragger"), "aoutput" == this.name && this.takeAnvilItem())
                   : this.isSiblingSame("dragger")
                   ? this.acceptsOnlyOne() ||
                     (this.acceptsType(d.item.item)
                       ? ((b = this.addCount(d.get_count())), (d.item.item[1] = b), 0 >= d.item.get_count() ? d.setItem(g.emptyItem()) : d.setItem(d.item.item))
                       : ("output2" == this.name && this.takeFurnaceItem(),
                         (b = d.addCount(this.get_count())),
                         (this.item.item[1] = b),
                         0 >= this.item.get_count() ? this.setItem(g.emptyItem()) : this.setItem(this.item.item),
                         "aoutput" == this.name && this.takeAnvilItem()))
                   : this.acceptsType(d.item.item) && (this.acceptsOnlyOne() && 1 < d.get_count() ? this.empty && ((b = O.clone(d.item.item)), (b[1] = 1), this.setItem(b), d.addCount(-1)) : this.swapWithSibling("dragger"));
             else if ((1 == a && this.waitingForRightMouseUp) || (0 < a && !this.waitingForRightMouseUp))
               if (((this.waitingForRightMouseUp = !0), "trashItem" == this.name))
                 if (d.empty) for ($a.globallyWaitingForMouseUp = !0, a = 0; 45 > a; ) this.world.inventoryList[a++] = g.emptyItem();
                 else d.addCount(-1);
               else
                 "p" == I.substr(this.name, 0, 1)
                   ? d.empty
                     ? (($a.globallyWaitingForMouseUp = !0), d.item.set_item(this.item.item), d.addCount(d.getMaxStack()), d.setItem(d.item.item))
                     : d.addCount(-1)
                   : this.acceptsType(d.item.item) &&
                     (d.empty
                       ? this.empty || (($a.globallyWaitingForMouseUp = !0), 1 == this.get_count() && this.world.gamemode == U.gamemodes.h.CREATIVE ? d.setItem(this.item.item) : d.setItem(this.splitStack()))
                       : this.empty
                       ? ((b = O.clone(d.item.item)), (b[1] = 1), this.setItem(b), d.addCount(-1))
                       : this.acceptsOnlyOne() || this.isFullStack() || !this.isSiblingSame("dragger") || (d.addCount(-1), this.addCount(1)));
             d.empty && (m.Instance.cursor = Ua.DEFAULT);
           }
           return !0;
         },
         sibling: function (b) {
           return this.game.inventario.inventorySlots.h[b];
         },
         isSiblingSame: function (b) {
           return this.sibling(b).get_type() == this.get_type() && this.get_damage() == this.sibling(b).get_damage() ? this.game.sameExtras(this.sibling(b).get_extras(), this.get_extras()) : !1;
         },
         swapWithSibling: function (b) {
           var a = O.clone(this.sibling(b).item.item);
           this.sibling(b).setItem(this.item.item);
           this.setItem(a);
         },
         splitStack: function () {
           var b = O.clone(this.item.item),
             a = O.clone(this.item.item);
           b[1] = Math.ceil(this.get_count() / 2);
           a[1] = Math.floor(this.get_count() / 2);
           this.setItem(a);
           0 >= a[1] && this.setItem(g.emptyItem());
           return b;
         },
         addCount: function (b) {
           var a = O.clone(this.item.item);
           if (this.get_count() + b > this.getMaxStack()) return (b = this.get_count() + b - this.getMaxStack()), (a[1] = this.getMaxStack()), this.setItem(a), b;
           if (0 >= (a[1] += b)) return this.setItem(g.emptyItem()), -(a[1] | 0);
           this.setItem(a);
           return 0;
         },
         isFullStack: function () {
           return 64 <= this.get_count() || (1 <= this.get_count() && 1 == this.getBlockData("unstackable")) ? !0 : !1;
         },
         getMaxStack: function () {
           return 1 == this.getBlockData("unstackable") ? 1 : 64;
         },
         acceptsType: function (b) {
           var a = b[0];
           if ("output" != this.name && "output2" != this.name && "aoutput" != this.name)
             if ("a1" == this.name) {
               if ("Cap" == I.substr(a, -3, 3) || "jl" == a || "pk" == a || "mh" == a) return !0;
             } else if ("a2" == this.name) {
               if ("Shirt" == I.substr(a, -5, 5)) return !0;
             } else if ("a3" == this.name) {
               if ("Pants" == I.substr(a, -5, 5)) return !0;
             } else if ("a4" == this.name) {
               if ("Shoes" == I.substr(a, -5, 5)) return !0;
             } else if ("cook" == this.name) {
               if (null != q.get(a, "smeltsInto")) return !0;
             } else if ("fuel" == this.name) {
               if (null != q.get(a, "fuel")) return !0;
             } else if ("brewFuel" == this.name) {
               if ("bp" == a) return !0;
             } else if ("brewInput" == this.name) {
               if (1 == q.get(a, "brewIngredient")) return !0;
             } else if ("brewOutput" == I.substr(this.name, 0, 10)) {
               if ("potion" == a && !this.game.emptyPotion(null != b[3] ? g.makeDynamicMap(b[3]).h.type : "")) return !0;
             } else if ("enchant" == this.name)
               if (((b = null != b[3] ? b[3] : new e()), "book" == a || ("potion" == a && this.game.emptyPotion(b.h.type)))) {
                 if (null == b.h.type || "empty" == b.h.type) return !0;
               } else {
                 if (1 == q.get(a, "enchantable")) {
                   a = b.h;
                   b = Object.keys(a);
                   for (var c = b.length, d = 0; d < c; ) if ("enchant" == a[b[d++]]) return !1;
                   return !0;
                 }
               }
             else return !0;
           return !1;
         },
         acceptsOnlyOne: function () {
           return "a1" == this.name || "a2" == this.name || "a3" == this.name || "a4" == this.name || "enchant" == this.name || "brewOutput" == I.substr(this.name, 0, 10) ? !0 : !1;
         },
         showsHoverState: function () {
           return "output" == this.name || "output2" == this.name || "trashItem" == this.name || "aoutput" == this.name ? !1 : !0;
         },
         takeCraftingItem: function () {
           if (this.empty) return !1;
           "craft" == this.get_type()
             ? this.game.unlockAchieve(3)
             : "WoodenPickaxe" == this.get_type()
             ? this.game.unlockAchieve(4)
             : "StonePickaxe" == this.get_type()
             ? this.game.unlockAchieve(5)
             : "IronPickaxe" == this.get_type()
             ? this.game.unlockAchieve(6)
             : "oven" == this.get_type()
             ? this.game.unlockAchieve(7)
             : "th" == this.get_type()
             ? this.game.unlockAchieve(9)
             : "cake" == this.get_type()
             ? this.game.unlockAchieve(24)
             : "portalstone" == this.get_type() && this.game.unlockAchieve(30);
           for (var b = !0, a = 1, c = this.game.inventario.blocks.length + 1; a < c; ) {
             var d = a++;
             "bk" == I.substr(this.sibling("c" + d).get_type(), -2, 2)
               ? ((this.sibling("c" + d).item.item[0] = "bk"), this.sibling("c" + d).setItem(this.sibling("c" + d).item.item), (b = !1))
               : 1 == this.sibling("c" + d).get_count()
               ? (this.sibling("c" + d).setItem(g.emptyItem()), (b = !1))
               : this.sibling("c" + d).addCount(-1);
           }
           b || this.game.inventario.doWhatYouDoWithWheatThins();
           return b;
         },
         takeFurnaceItem: function () {
           this.empty || ("ii" == this.get_type() && this.game.unlockAchieve(8));
         },
         takeAnvilItem: function () {
           "aoutput" == this.name &&
             this.game.inventario.anvilCanAnvil &&
             ((this.world.experience = Math.max(0, this.world.experience - 100 * this.game.inventario.anvilLevelsRequired) | 0),
             this.game.inventario.damageAnvilMaybe(),
             (this.game.inventario.anvilGettingItem = !0),
             this.game.inventario.inventorySlots.h.ai1.addCount(-1),
             this.game.inventario.inventorySlots.h.ai2.empty || this.game.inventario.inventorySlots.h.ai2.addCount(-this.game.inventario.anvilItemsToTake),
             this.game.unlockAchieve(40),
             (this.game.inventario.anvilGettingItem = !1),
             this.game.inventario.doAnvilyThings());
         },
         render: function () {
           this.renderSlot();
           this.renderDamage();
           this.renderCount();
         },
         renderSlot: function () {
           -1 == this.slotQuads && (this.slotQuads = this.slotEntity.nearestConsecutiveEmpty(3));
           if (this.hovering && this.showsHoverState()) {
             var b = 23 * this.size,
               a = 23 * this.size;
             this.slotEntity.updateQuad(this.slotQuads, new M(this.x - (23 * this.size) / 2, this.y - (23 * this.size) / 2 + 1, 0), new h(48, 16), new h(22, 22), new h(b, a));
           } else
             this.empty
               ? ((b = 22 * this.size), (a = 22 * this.size), this.slotEntity.updateQuad(this.slotQuads, new M(this.x - (22 * this.size) / 2, this.y - (22 * this.size) / 2, 0), new h(80, 16), new h(22, 22), new h(b, a)))
               : ((b = 22 * this.size), (a = 22 * this.size), this.slotEntity.updateQuad(this.slotQuads, new M(this.x - (22 * this.size) / 2, this.y - (22 * this.size) / 2, 0), new h(48, 48), new h(22, 22), new h(b, a)));
         },
         renderDamage: function () {
           -1 == this.slotQuads && (this.slotQuads = this.slotEntity.nearestConsecutiveEmpty(3));
           if (this.get_isTool() && null != this.getBlockData("life") && 0 < this.get_damage()) {
             var b = this.slotEntity,
               a = this.slotQuads + 1,
               c = new M(this.x - 13 + 1, this.y - 13 + 1, 0),
               d = new h(96, 0),
               f = new h(1, 1),
               l = new h(26, 2),
               k = new e(),
               g = w.repeatArray([0.14, 0.14, 0.14, 1], 6);
             k.h.color = g;
             b.updateQuad(a, c, d, f, l, null, null, k);
             g = 1 - this.get_damage() / this.getBlockData("life");
             b = this.slotEntity;
             a = this.slotQuads + 2;
             c = new M(this.x - 13 + 1, this.y - 13 + 1, 0);
             d = new h(96, 0);
             f = new h(1, 1);
             l = new h(Math.ceil(26 * g), 2);
             k = new e();
             g = w.repeatArray([0.8 * (1 - g), g, 0, 1], 6);
             k.h.color = g;
             b.updateQuad(a, c, d, f, l, null, null, k);
           } else this.slotEntity.updateQuad(this.slotQuads + 1, null, null, new h(), new h()), this.slotEntity.updateQuad(this.slotQuads + 2, null, null, new h(), new h());
         },
         renderCount: function () {
           1 < this.get_count()
             ? (-1 == this.countQuad && (this.countQuad = this.countEntity.nearestConsecutiveEmpty(1)),
               this.countEntity.updateQuad(this.countQuad, new M(this.x + 15 - 32 + 2, this.y + 1, 0), new h(((this.get_count() - 1) % 8) * 32, 32 * Math.floor((this.get_count() - 1) / 8)), new h(32, 32)))
             : -1 != this.countQuad && (this.countEntity.removeQuad(this.countQuad, !0), (this.countQuad = -1));
         },
         remove: function () {
           -1 != this.slotQuads && (this.slotEntity.removeQuad(this.slotQuads, !0), this.slotEntity.removeQuad(this.slotQuads + 1, !0), this.slotEntity.removeQuad(this.slotQuads + 2, !0), (this.slotQuads = -1));
           -1 != this.countQuad && (this.countEntity.removeQuad(this.countQuad, !0), (this.countQuad = -1));
           null != this.item && this.item.destroy();
         },
         getBlockData: function (b) {
           return q.get(this.get_type(), b);
         },
         set_hovering: function (b) {
           this.hovering != b && ((this.hovering = b), this.render());
           return this.hovering;
         },
         get_type: function () {
           return this.item.get_type();
         },
         get_isTool: function () {
           return this.item.get_isTool();
         },
         get_count: function () {
           return this.item.get_count();
         },
         get_damage: function () {
           return this.item.get_damage();
         },
         get_extras: function () {
           return this.item.get_extras();
         },
         set_x: function (b) {
           this.x = b;
           this.item.set_x(((b - 1) / 16 - 0.5) / 1.09416984375);
           this.collisionBounds.x = b - (20 * this.size) / 2;
           this.render();
           return b;
         },
         set_y: function (b) {
           this.y = b;
           this.item.set_y(((b - 1) / 16 - 0.5) / 1.09416984375);
           this.collisionBounds.y = b - (20 * this.size) / 2;
           this.render();
           return b;
         },
         __class__: $a,
       };
       var Bb = function () {};
       r.Lambda = Bb;
       Bb.__name__ = "Lambda";
       Bb.exists = function (b, a) {
         for (b = aa(b); b.hasNext(); ) if (a(b.next())) return !0;
         return !1;
       };
       var Va = (D.LightType = {
         __ename__: "LightType",
         __constructs__: null,
         TORCH: { _hx_name: "TORCH", _hx_index: 0, __enum__: "LightType", toString: n },
         BLOCK: { _hx_name: "BLOCK", _hx_index: 1, __enum__: "LightType", toString: n },
         REDSTONE: { _hx_name: "REDSTONE", _hx_index: 2, __enum__: "LightType", toString: n },
         DARK: { _hx_name: "DARK", _hx_index: 3, __enum__: "LightType", toString: n },
       });
       Va.__constructs__ = [Va.TORCH, Va.BLOCK, Va.REDSTONE, Va.DARK];
       var Ob = function (b) {
         this.bgLightAlpha = 1;
         this.playerQuadMatrix = new T();
         this.bedAlpha = 0;
         this.bedFrame = 1;
         this.playerAlpha = 0;
         this.pumpkinFrame = this.playerFrame = 1;
         this.lQuads = new e();
         this.lightningFrame = 1;
         this.baseQuad = 0;
         this.visible = !0;
         this.game = b;
         this.lightingScene = new fb(1, 1).setup2D(b.scene.get_width(), b.scene.get_height(), new F());
         this.lightingScene.render();
         this.lightingImage = new sa().fromScene(this.lightingScene);
         this.entity = new ma([], ba.createQuadBackface(1, 1), Cc.getShader());
         this.entity.transform.reset().translate(0.5, -0.5).scale(b.scene.get_width(), -b.scene.get_height());
         this.entity.setTextureBuffer("texture", this.lightingImage);
         this.entity.isTransparent = !0;
         this.entity.layer = 4;
         var a = Ab.getShader(),
           c = new e(),
           d = w.repeatArray([0, 0, 0, 1], 6);
         c.h.colori = d;
         d = w.repeatArray([0, 0, 0, 1], 6);
         c.h.coloro = d;
         d = w.repeatArray([0, 0, 0, 0], 6);
         c.h.position = d;
         this.bottomEntity = new da(null, null, a, c);
         this.bottomEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.bottomEntity.isTransparent = !0;
         this.bottomEntity.layer = 0;
         a = Ab.getShader();
         c = new e();
         d = w.repeatArray([1], 24);
         c.h.colori = d;
         d = w.repeatArray([1, 1, 1, 0], 6);
         c.h.coloro = d;
         d = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
         c.h.position = d;
         this.lEntity = new da(null, null, a, c);
         this.lEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.lEntity.isTransparent = !0;
         this.lEntity.layer = 1;
         this.pumpkinLightEntity = new ma([], ba.createQuad(1, 1), ob.getShader());
         ob.setupEntity(this.pumpkinLightEntity, ba.quadUVs, new F(1728053247), new F(16777215), new t(0.5, 0.5, 0, 0.5));
         this.pumpkinLightEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.pumpkinLightEntity.isTransparent = !0;
         this.pumpkinLightEntity.layer = 2;
         this.pumpkinEntity = new ma([], ba.createQuad(1, 1), Na.getShader());
         this.pumpkinEntity.transform.reset().translate(0.5, 0.5).scale(b.scene.get_width(), b.scene.get_height());
         this.pumpkinImage = P.getImage("pumpkin_overlay");
         Na.setupEntity(this.pumpkinEntity, this.pumpkinImage);
         this.pumpkinEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.pumpkinEntity.isTransparent = !0;
         this.pumpkinEntity.layer = 3;
         a = Ab.getShader();
         c = new e();
         d = w.repeatArray([1, 1, 1, 0], 24);
         c.h.colori = d;
         d = w.repeatArray([1, 1, 1, 0], 6);
         c.h.coloro = d;
         d = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
         c.h.position = d;
         this.topEntity = new da(null, null, a, c);
         this.topEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.topEntity.isTransparent = !0;
         this.topEntity.layer = 4;
       };
       r.Lighting = Ob;
       Ob.__name__ = "Lighting";
       Ob.prototype = {
         resize: function () {
           this.lightingScene.setup2D(this.game.scene.get_width(), this.game.scene.get_height(), this.lightingScene.backgroundColor);
           oa.activate(this.lightingScene);
           this.lightingImage.fromScene(this.lightingScene);
           this.entity.setTextureBuffer("texture", this.lightingImage);
           this.entity.transform.reset().translate(0.5, -0.5).scale(this.game.scene.get_width(), -this.game.scene.get_height());
           this.pumpkinEntity.transform
             .reset()
             .scale(G.toFloat(this.pumpkinImage.width), G.toFloat(this.pumpkinImage.height))
             .scale2D(Math.max(G.toFloat(this.game.scene.get_width()) / G.toFloat(this.pumpkinImage.width), G.toFloat(this.game.scene.get_height()) / G.toFloat(this.pumpkinImage.height)))
             .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
         },
         update: function () {
           1 < this.lightningFrame && 0 == this.game.world.tick % 2 && (this.lightningFrame++, 5 < this.lightningFrame && (this.lightningFrame = 0.3333333333333333 > Math.random() ? 2 : 1));
           this.lightingScene.clear();
           this.updateBaseQuad();
           this.lightingScene.draw(this.bottomEntity);
           this.lEntity.transform
             .reset()
             .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
             .scale(this.game.zoom, this.game.zoom, this.game.zoom)
             .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
           this.lightingScene.draw(this.lEntity);
           this.pumpkinFrame = "jl" == this.game.world.armors[0][0] ? 2 : "pk" == this.game.world.armors[0][0] ? 3 : 1;
           1 < this.pumpkinFrame &&
             (2 == this.pumpkinFrame &&
               (this.pumpkinLightEntity.transform
                 .reset()
                 .scale2D(8.333333333333334)
                 .translate(this.game.world.worldX, this.game.world.worldY - 1)
                 .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
                 .scale(this.game.zoom, this.game.zoom, this.game.zoom)
                 .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2),
               this.lightingScene.draw(this.pumpkinLightEntity)),
             this.lightingScene.draw(this.pumpkinEntity));
           this.lightingScene.draw(this.topEntity, !0);
           this.visible && this.game.scene.draw(this.entity);
         },
         addLight: function (b, a, c, d) {
           if (!Object.prototype.hasOwnProperty.call(this.lQuads.h, b)) {
             var f = this.lQuads,
               l = this.lEntity.nearestConsecutiveEmpty(2);
             f.h[b] = l;
             switch (a._hx_index) {
               case 0:
                 a = this.lEntity;
                 f = this.lQuads.h[b];
                 l = new M(c - 9.2, -d - 9.2);
                 var k = new h(1, 1),
                   g = new h(18.4, 18.4),
                   z = new e(),
                   m = w.repeatArray([1, 1, 1, 0.6], 6);
                 z.h.colori = m;
                 m = w.repeatArray([1, 1, 1, 0], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 a = this.lEntity;
                 f = this.lQuads.h[b] + 1;
                 l = new M(c - 2, -d - 2);
                 k = new h(1, 1);
                 g = new h(4, 4);
                 z = new e();
                 m = w.repeatArray([1, 1, 1, 1], 6);
                 z.h.colori = m;
                 m = w.repeatArray([1, 1, 1, 0], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 break;
               case 1:
                 a = this.lEntity;
                 f = this.lQuads.h[b];
                 l = new M(c - 3.1666666666666665, -d - 3.1666666666666665);
                 k = new h(1, 1);
                 g = new h(6.333333333333333, 6.333333333333333);
                 z = new e();
                 m = w.repeatArray([1, 1, 1, 0.5], 6);
                 z.h.colori = m;
                 m = w.repeatArray([1, 1, 1, 0], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0.5, 0.5, 0.1, 0.5], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 a = this.lEntity;
                 f = this.lQuads.h[b] + 1;
                 l = new M(c - 0.016666666666666666, -d - 0.016666666666666666);
                 k = new h(1, 1);
                 g = new h(0.03333333333333333, 0.03333333333333333);
                 z = new e();
                 m = w.repeatArray([1, 1, 1, 0.16666666666666666], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0, 0, 0, 0], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 break;
               case 2:
                 a = this.lEntity;
                 f = this.lQuads.h[b];
                 l = new M(c - 2.25, -d - 2.25 + 0.06666666666666667);
                 k = new h(1, 1);
                 g = new h(4.5, 4.5);
                 z = new e();
                 m = w.repeatArray([1, 1, 1, 0.6], 6);
                 z.h.colori = m;
                 m = w.repeatArray([1, 1, 1, 0], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 a = this.lEntity;
                 f = this.lQuads.h[b] + 1;
                 l = new M(c - 0.48333333333333334, -d - 0.48333333333333334 + 0.06666666666666667);
                 k = new h(1, 1);
                 g = new h(0.9666666666666667, 0.9666666666666667);
                 z = new e();
                 m = w.repeatArray([1, 1, 1, 1], 6);
                 z.h.colori = m;
                 m = w.repeatArray([1, 1, 1, 0], 6);
                 z.h.coloro = m;
                 m = w.repeatArray([0.5, 0.5, 0, 0.5], 6);
                 z.h.position = m;
                 a.updateQuad(f, l, null, k, g, null, null, z);
                 break;
               case 3:
                 (a = this.lEntity),
                   (f = this.lQuads.h[b]),
                   (l = new M(c - 6.266666666666667, -d - 6.266666666666667)),
                   (k = new h(1, 1)),
                   (g = new h(12.533333333333333, 12.533333333333333)),
                   (z = new e()),
                   (m = w.repeatArray([0, 0, 0, 0.93], 6)),
                   (z.h.colori = m),
                   (m = w.repeatArray([0, 0, 0, 0], 6)),
                   (z.h.coloro = m),
                   (m = w.repeatArray([0.5, 0.5, 0.1, 0.5], 6)),
                   (z.h.position = m),
                   a.updateQuad(f, l, null, k, g, null, null, z),
                   this.lEntity.updateQuad(this.lQuads.h[b] + 1, new M(c, -d), null, new h(1, 1), new h(0, 0));
             }
           }
         },
         removeLight: function (b) {
           if (Object.prototype.hasOwnProperty.call(this.lQuads.h, b)) {
             this.lEntity.removeQuad(this.lQuads.h[b], !0);
             this.lEntity.removeQuad(this.lQuads.h[b] + 1, !0);
             var a = this.lQuads;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
           }
         },
         clearLights: function () {
           this.lEntity.clearPool(!0);
           this.lQuads.h = Object.create(null);
         },
         updateBaseQuad: function () {
           var b = 1 - this.bgLightAlpha * (1 - Ob.lightningAmounts[this.lightningFrame - 1]),
             a = 1 - this.bgLightAlpha,
             c = this.bottomEntity,
             d = this.baseQuad,
             f = new M(),
             l = new h(1, 1),
             k = new h(this.game.scene.get_width(), this.game.scene.get_height()),
             g = new e();
           g.h.coloro = [b, b, b, 1, a, a, a, 1, b, b, b, 1, b, b, b, 1, a, a, a, 1, a, a, a, 1];
           c.updateQuad(d, f, null, l, k, null, null, g);
           this.playerQuadMatrix
             .reset()
             .translate(-0.5, -0.5)
             .scale2D((1 == this.playerFrame ? 119.6 : 269.1) / 30)
             .translate(this.game.world.worldX, this.game.world.worldY - 1)
             .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
             .scale(this.game.zoom, this.game.zoom, this.game.zoom)
             .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
           c = this.topEntity;
           d = new M();
           f = new h(1, 1);
           l = new h(1, 1);
           k = ba.quadMatrixHelper(new t(0, 0, 1, 1), this.playerQuadMatrix);
           g = new e();
           b = w.repeatArray([1, 1, 1, (1 == this.playerFrame ? 0.3 : 1) * this.playerAlpha], 6);
           g.h.colori = b;
           b = w.repeatArray([1, 1, 1, 0], 6);
           g.h.coloro = b;
           b = w.repeatArray([0.5, 0.5, 1 == this.playerFrame ? 0.05 : 0, 0.5], 6);
           g.h.position = b;
           c.updateQuad(0, d, null, f, l, k, null, g);
           c = this.topEntity;
           d = new M();
           f = new h(1, 1);
           l = new h(this.game.scene.get_width(), this.game.scene.get_height());
           g = new e();
           b = w.repeatArray([0, 0, 0, 1 == this.bedFrame ? 0 : this.bedAlpha], 6);
           g.h.colori = b;
           b = w.repeatArray([0, 0, 0, 1 == this.bedFrame ? 0 : this.bedAlpha], 6);
           g.h.coloro = b;
           c.updateQuad(1, d, null, f, l, null, null, g);
         },
         bgLightPlay: function () {
           2 > this.lightningFrame && (this.lightningFrame = 2);
         },
         __class__: Ob,
       };
       var p = function () {
         this.firstInteraction = !1;
         this.eventRegistry = new Dc();
         this.mouseButtonsUp = [-1, -1, -1];
         this.mouseButtonsDown = [-1, -1, -1];
         this.mouseLast = new h(0, 0);
         this.mouse = new h(0, 0);
         this.mouseWheelDelta = 0;
         this.touches = new Ma();
         this.isUp = new Ma();
         this.isDownRepeat = new Ma();
         this.isDown = new Ma();
         this.wasDown = new Ma();
         this.isDownDouble = new Ma();
         this.doubleKeyPressMaxDuration = 0.3;
         this.keyRemap = new Ma();
         this.focus = !0;
         this.hadPreRun = this.enginePaused = !1;
         this.cursor = Ua.DEFAULT;
         this.viewportScale = this.__internal_scale = 1;
         this.sceneImage = new sa();
         this.tick = 0;
         this.preloadComplete = !1;
         this.lemongineFrame = "firstFrame";
         fa.call(this);
         this.__internal_scene = new fb(1, 1);
         this.scene = new fb(1, 1);
       };
       r["lemongine.Lemongine"] = p;
       p.__name__ = "lemongine.Lemongine";
       p.adStartCallback = u.zanzlanz.adStartCallback = function () {
         m.Instance.set_enginePaused(!0);
       };
       p.adEndCallback = u.zanzlanz.adEndCallback = function () {
         m.Instance.set_enginePaused(!1);
       };
       p.requestInterstitial = function () {
         window.runInterstitial && window.runInterstitial();
       };
       p.__super__ = fa;
       p.prototype = v(fa.prototype, {
         initialize: function () {},
         loop: function () {},
         loadAssets: function () {},
         onPreloadComplete: function () {
           this.preloadComplete = !0;
         },
         render: function (b) {
           this.renderContext = b;
           switch (this.lemongineFrame) {
             case "firstFrame":
               this.checkHardwareAcceleration();
               if (null != b.webgl2) (p.gl = Qb.fromWebGL2RenderContext(b.webgl2)), p.gl.getExtension("EXT_color_buffer_float");
               else if (null != b.webgl) p.gl = b.webgl;
               else if (null != b.gl) p.gl = b.gl;
               else {
                 this.fatalError("You don't have WebGL enabled. This game needs it!\nSee here for advice: zanz.net/webgl");
                 Ia.trace("You don't have WebGL enabled! Try updating your browser or following the advice on https://zanz.net/webgl.", {
                   fileName: "lemongine/Lemongine.hx",
                   lineNumber: 121,
                   className: "lemongine.Lemongine",
                   methodName: "render",
                 });
                 break;
               }
               this.set_fps(60);
               this.calculatedFPS = this.currentFPS = 60;
               this.lastFrameTime = new Date().getTime() / 1e3;
               this.scene.setDimensions(this.__window.__width, this.__window.__height, !0);
               oa.activate(this.scene);
               this.lemongineFrame = this.preloadComplete ? "loadAssets" : "preload";
               this.addFirstInteractionCallbacks();
               break;
             case "initialize":
               oa.globalInitialize();
               this.initialize();
               null != this.splash ? (this.preSplash(), (this.currentScreen = this.splash), (this.lemongineFrame = "screenLoadAssets")) : (this.hadPreRun || ((this.hadPreRun = !0), this.preRun()), (this.lemongineFrame = "run"));
               break;
             case "loadAssets":
               0 == P.numImages && this.loadAssets();
               P.numImagesLoaded == P.numImages && (this.lemongineFrame = "initialize");
               break;
             case "preload":
               this.preloadComplete && (this.lemongineFrame = "loadAssets");
               break;
             case "run":
               this.doFrame();
               break;
             case "screenInitialize":
               P.numImagesLoaded == P.numImages && (this.currentScreen.initialize(), (this.lemongineFrame = "screenRun"));
               break;
             case "screenLoadAssets":
               this.currentScreen.loadAssets();
               this.lemongineFrame = "screenInitialize";
               break;
             case "screenRun":
               this.__internal_scene.clear();
               this.currentScreen.scene.clear();
               this.currentScreen.run() && (this.hadPreRun || ((this.hadPreRun = !0), this.preRun()), (this.lemongineFrame = "run"));
               this.currentScreen.scene.render();
               this.sceneImage.fromGLTexture(this.currentScreen.scene.get_width(), this.currentScreen.scene.get_height(), this.currentScreen.scene.get_glTexture());
               this.__internal_scene.draw2DFlipped(this.sceneImage);
               this.__internal_scene.render();
               break;
             case "stall":
               break;
             default:
               Ia.trace("Frame '" + this.lemongineFrame + "' doesn't exist!", { fileName: "lemongine/Lemongine.hx", lineNumber: 186, className: "lemongine.Lemongine", methodName: "render" });
           }
         },
         preSplash: function () {},
         preRun: function () {},
         doFrame: function () {
           oa.resetCallCount();
           this.enginePaused ||
             (this.__internal_scene.clear(),
             this.scene.clear(),
             this.loop(),
             this.scene.render(),
             this.sceneImage.fromGLTexture(this.scene.get_width(), this.scene.get_height(), this.scene.get_glTexture()),
             this.__internal_scene.draw2DFlipped(this.sceneImage),
             this.__internal_scene.render(),
             this.tick++);
           this.mouseWheelDelta = 0;
           this.__window.set_cursor(this.cursor);
           this.cursor = Ua.DEFAULT;
           this.calculatedFPS += (1 / (new Date().getTime() / 1e3 - this.lastFrameTime) - this.calculatedFPS) / 10;
           this.lastFrameTime = new Date().getTime() / 1e3;
           0 == (G.toFloat(this.tick) % G.toFloat(5) | 0) && (this.currentFPS = Math.floor(10 * this.calculatedFPS) / 10);
           this.mouseLast.set(this.mouse.x, this.mouse.y);
         },
         getActualScale: function () {
           return this.__internal_scale;
         },
         set_fps: function (b) {
           this.__window.__backend.setFrameRate(b);
           return b;
         },
         get_fps: function () {
           return this.__window.__backend.getFrameRate() | 0;
         },
         set_enginePaused: function (b) {
           this.enginePaused = b;
           ya.updateVolumes();
           return b;
         },
         onWindowResize: function (b, a) {
           null != p.gl && oa.activate(this.__internal_scene, !0);
         },
         addEventListener: function (b, a) {
           this.eventRegistry.exists(b) || this.eventRegistry.set(b, []);
           -1 == this.eventRegistry.get(b).indexOf(a) && this.eventRegistry.get(b).push(a);
         },
         removeEventListener: function (b, a) {
           this.eventRegistry.exists(b) && I.remove(this.eventRegistry.get(b), a);
         },
         runEvents: function (b, a) {
           if (this.eventRegistry.exists(b)) {
             var c = 0;
             for (b = this.eventRegistry.get(b); c < b.length; ) b[c++].apply(null, a);
           }
         },
         keyDownDouble: function (b) {
           this.keyRemap.h.hasOwnProperty(b) && (b = this.keyRemap.h[b]);
           return this.isDownDouble.h.hasOwnProperty(b) ? this.tick - this.isDownDouble.h[b] + 1 : 0;
         },
         keyDown: function (b) {
           this.keyRemap.h.hasOwnProperty(b) && (b = this.keyRemap.h[b]);
           return this.isDown.h.hasOwnProperty(b) ? this.tick - this.isDown.h[b] + 1 : 0;
         },
         keyUp: function (b) {
           this.keyRemap.h.hasOwnProperty(b) && (b = this.keyRemap.h[b]);
           return this.isUp.h.hasOwnProperty(b) ? this.tick - this.isUp.h[b] + 1 : 0;
         },
         mouseDown: function () {
           return -1 < this.mouseButtonsDown[0] ? this.tick - this.mouseButtonsDown[0] + 1 : 0;
         },
         mouseUp: function () {
           return -1 < this.mouseButtonsUp[0] ? this.tick - this.mouseButtonsUp[0] + 1 : 0;
         },
         rightMouseDown: function () {
           return -1 < this.mouseButtonsDown[2] ? this.tick - this.mouseButtonsDown[2] + 1 : 0;
         },
         onKeyDown: function (b, a) {
           this.keyRemap.h.hasOwnProperty(b) && (b = this.keyRemap.h[b]);
           if (!this.isDown.h.hasOwnProperty(b)) {
             if (this.wasDown.h.hasOwnProperty(b)) {
               var c = this.tick - this.wasDown.h[b];
               var d = this.get_fps();
               c = G.toFloat(c) / G.toFloat(d) <= this.doubleKeyPressMaxDuration;
             } else c = !1;
             c && (this.isDownDouble.h[b] = this.tick);
             this.isDown.h[b] = this.tick;
             this.isUp.remove(b);
             this.runEvents(Qa.KEY_DOWN, [b, a]);
           }
           this.isDownRepeat.h[b] = this.tick;
           this.runEvents(Qa.KEY_DOWN_REPEAT, [b, a]);
         },
         onKeyUp: function (b, a) {
           this.keyRemap.h.hasOwnProperty(b) && (b = this.keyRemap.h[b]);
           this.isDown.h.hasOwnProperty(b) && (this.wasDown.h[b] = this.isDown.h[b]);
           this.isDownDouble.remove(b);
           this.isDown.remove(b);
           this.isDownRepeat.remove(b);
           this.isUp.h.hasOwnProperty(b) || ((this.isUp.h[b] = this.tick), this.runEvents(Qa.KEY_UP, [b, a]));
         },
         setMousePosition: function (b, a) {
           b = this.screenToSceneX(b);
           this.mouse.x = Math.floor(b);
           b = this.screenToSceneY(a);
           this.mouse.y = Math.floor(b);
         },
         screenToSceneX: function (b) {
           return (b - (fa.current.__window.__width - this.scene.get_width() * this.getActualScale()) / 2) / this.getActualScale();
         },
         screenToSceneY: function (b) {
           return (b - (fa.current.__window.__height - this.scene.get_height() * this.getActualScale()) / 2) / this.getActualScale();
         },
         onMouseMove: function (b, a) {
           this.setMousePosition(b, a);
           this.runEvents(Qa.MOUSE_MOVE, [this.mouse.x, this.mouse.y]);
         },
         onMouseDown: function (b, a, c) {
           this.setMousePosition(b, a);
           0 <= c && 2 >= c && ((this.mouseButtonsDown[c] = this.tick), (this.mouseButtonsUp[c] = -1));
           this.runEvents(Qa.MOUSE_DOWN, [this.mouse.x, this.mouse.y, c]);
         },
         onMouseUp: function (b, a, c) {
           this.setMousePosition(b, a);
           0 <= c && 2 >= c && ((this.mouseButtonsUp[c] = this.tick), (this.mouseButtonsDown[c] = -1));
           this.__window.onMouseUp.cancel();
           this.runEvents(Qa.MOUSE_UP, [this.mouse.x, this.mouse.y, c]);
         },
         onMouseWheel: function (b, a, c) {
           0 != a && ((this.mouseWheelDelta += 0 < a ? 1 : -1), this.runEvents(Qa.MOUSE_WHEEL, [this.mouseWheelDelta]));
         },
         onTextInput: function (b) {
           this.runEvents(Qa.TEXT_INPUT, [b]);
         },
         onWindowFocusIn: function () {
           this.focus = !0;
           this.runEvents(Qa.FOCUS_IN, []);
         },
         onWindowFocusOut: function () {
           this.focus = !1;
           this.runEvents(Qa.FOCUS_OUT, []);
         },
         onWindowActivate: function () {
           this.focus = !1;
           this.runEvents(Qa.ACTIVATE, []);
         },
         onTouchStart: function (b) {
           fa.prototype.onTouchStart.call(this, b);
           var a = this.touches,
             c = b.id,
             d = {
               id: b.id,
               x: this.screenToSceneX(b.x * fa.current.__window.__width),
               y: this.screenToSceneY(b.y * fa.current.__window.__height),
               tick: this.tick,
               dx: (b.dx * fa.current.__window.__width) / this.getActualScale(),
               dy: (b.dy * fa.current.__window.__height) / this.getActualScale(),
             };
           a.h[c] = d;
           this.runEvents(Qa.TOUCH_START, [b.id, this.screenToSceneX(b.x * fa.current.__window.__width), this.screenToSceneY(b.y * fa.current.__window.__height)]);
         },
         onTouchMove: function (b) {
           fa.prototype.onTouchMove.call(this, b);
           null != this.touches.h[b.id] &&
             ((this.touches.h[b.id].x = this.screenToSceneX(b.x * fa.current.__window.__width)),
             (this.touches.h[b.id].y = this.screenToSceneY(b.y * fa.current.__window.__height)),
             (this.touches.h[b.id].dx = b.dx / this.getActualScale()),
             (this.touches.h[b.id].dy = b.dy / this.getActualScale()),
             this.runEvents(Qa.TOUCH_MOVE, [b.id, this.screenToSceneX(b.x * fa.current.__window.__width), this.screenToSceneY(b.y * fa.current.__window.__height)]));
         },
         onTouchEnd: function (b) {
           fa.prototype.onTouchEnd.call(this, b);
           this.runEvents(Qa.TOUCH_END, [b.id, this.screenToSceneX(b.x * fa.current.__window.__width), this.screenToSceneY(b.y * fa.current.__window.__height)]);
           this.touches.remove(b.id);
         },
         onTouchCancel: function (b) {
           fa.prototype.onTouchCancel.call(this, b);
           this.runEvents(Qa.TOUCH_END, [b.id, this.screenToSceneX(b.x * fa.current.__window.__width), this.screenToSceneY(b.y * fa.current.__window.__height)]);
           this.touches.remove(b.id);
         },
         addFirstInteractionCallbacks: function () {
           var b = this,
             a = null;
           a = function (c, d, f) {
             b.firstInteraction = !0;
             b.removeEventListener(Qa.MOUSE_DOWN, a);
           };
           this.addEventListener(Qa.MOUSE_DOWN, a);
         },
         fatalError: function (b) {
           this.lemongineFrame = "stall";
           var a = H.__cast(window.document.querySelector("canvas"), HTMLCanvasElement),
             c = H.__cast(a.cloneNode(!1), HTMLCanvasElement);
           a.parentNode.replaceChild(c, a);
           a = c.getContext("2d");
           a.fillStyle = "#EE2200";
           a.fillRect(0, 0, c.width, c.height);
           a.fillStyle = "#012f4f";
           a.fillRect(2, 2, c.width - 4, c.height - 4);
           a.font = "20px Verdana";
           a.fillStyle = "#FFFFFF";
           b = b.split("\n");
           for (var d = 0, f = b.length; d < f; ) {
             var e = d++;
             a.fillText(b[e], 30, c.height / 2 + 20 + 30 * e, c.width - 60);
           }
           a.font = "16px Verdana";
           a.fillStyle = "#237bbb";
           a.fillText("You can reach me with email or on Twitter. Visit Zanzlanz.com.", 30, c.height / 2 + 80, c.width - 60);
           a.font = "64px Verdana";
           a.fillStyle = "#237bbb";
           a.fillText("Oof", 25, c.height / 2 + 20 - 40, c.width - 60);
         },
         checkHardwareAcceleration: function () {
           var b = H.__cast(window.document.createElement("canvas"), HTMLCanvasElement);
           null == b.getContext("webgl", { failIfMajorPerformanceCaveat: !0 }) &&
             null == b.getContext("experimental-webgl", { failIfMajorPerformanceCaveat: !0 }) &&
             (null != b.getContext("webgl") || null != b.getContext("experimental-webgl")
               ? (Ia.trace("Hardware Acceleration is turned off on your browser. The game will run slowly, especially when the window is large. Enable Hardware Acceleration, or see https://zanz.net/webgl for details!", {
                   fileName: "lemongine/Lemongine.hx",
                   lineNumber: 497,
                   className: "lemongine.Lemongine",
                   methodName: "checkHardwareAcceleration",
                 }),
                 window.hardwareAccelerationWarning && window.hardwareAccelerationWarning())
               : Ia.trace("WebGL appears to be disabled. See https://zanz.net/webgl for details.", { fileName: "lemongine/Lemongine.hx", lineNumber: 500, className: "lemongine.Lemongine", methodName: "checkHardwareAcceleration" }));
         },
         __class__: p,
       });
       var m = function () {
         var b = new e();
         b.h["ambience/fire1.ogg"] = "fire1";
         b.h["ambience/fire2.ogg"] = "fire2";
         b.h["ambience/fire3.ogg"] = "fire3";
         b.h["ambience/fire4.ogg"] = "fire4";
         b.h["ambience/fire5.ogg"] = "fire5";
         b.h["ambience/nether.ogg"] = "Nether";
         b.h["ambience/portal1.ogg"] = "Portal1";
         b.h["ambience/portal2.ogg"] = "Portal2";
         b.h["ambience/portal3.ogg"] = "Portal3";
         b.h["ambience/portal4.ogg"] = "Portal4";
         b.h["ambience/portal5.ogg"] = "Portal5";
         b.h["ambience/rainsound.ogg"] = "rainsound";
         b.h["blocks/anvilsound.ogg"] = "anvilsound";
         b.h["blocks/crunch1.ogg"] = "crunch1";
         b.h["blocks/crunch2.ogg"] = "crunch2";
         b.h["blocks/crunch3.ogg"] = "crunch3";
         b.h["blocks/doorclose.ogg"] = "doorclose";
         b.h["blocks/dooropen.ogg"] = "dooropen";
         b.h["blocks/glass1.ogg"] = "glass1";
         b.h["blocks/glass2.ogg"] = "glass2";
         b.h["blocks/glass3.ogg"] = "glass3";
         b.h["blocks/off.ogg"] = "off";
         b.h["blocks/on.ogg"] = "on";
         b.h["blocks/pistonin.ogg"] = "Piston in";
         b.h["blocks/pistonout.ogg"] = "Piston out";
         b.h["blocks/sizzle.ogg"] = "sizzle";
         b.h["blocks/slimeblockjump.ogg"] = "slimeblockjump";
         b.h["blocks/slimeblockland.ogg"] = "slimeblockland";
         b.h["blocks/smush.ogg"] = "smush";
         b.h["blocks/splash.ogg"] = "splash";
         b.h["blocks/stone.ogg"] = "stone";
         b.h["blocks/water.ogg"] = "water";
         b.h["blocks/wood.ogg"] = "wood";
         b.h["blocks/noteblocks/bass1.ogg"] = "bass1";
         b.h["blocks/noteblocks/bass2.ogg"] = "bass2";
         b.h["blocks/noteblocks/bass3.ogg"] = "bass3";
         b.h["blocks/noteblocks/bass4.ogg"] = "bass4";
         b.h["blocks/noteblocks/bass5.ogg"] = "bass5";
         b.h["blocks/noteblocks/bass6.ogg"] = "bass6";
         b.h["blocks/noteblocks/bass7.ogg"] = "bass7";
         b.h["blocks/noteblocks/bass8.ogg"] = "bass8";
         b.h["blocks/noteblocks/bass9.ogg"] = "bass9";
         b.h["blocks/noteblocks/bass10.ogg"] = "bass10";
         b.h["blocks/noteblocks/bass11.ogg"] = "bass11";
         b.h["blocks/noteblocks/bass12.ogg"] = "bass12";
         b.h["blocks/noteblocks/bass13.ogg"] = "bass13";
         b.h["blocks/noteblocks/bass14.ogg"] = "bass14";
         b.h["blocks/noteblocks/bass15.ogg"] = "bass15";
         b.h["blocks/noteblocks/bass16.ogg"] = "bass16";
         b.h["blocks/noteblocks/bass17.ogg"] = "bass17";
         b.h["blocks/noteblocks/bass18.ogg"] = "bass18";
         b.h["blocks/noteblocks/bass19.ogg"] = "bass19";
         b.h["blocks/noteblocks/bass20.ogg"] = "bass20";
         b.h["blocks/noteblocks/bass21.ogg"] = "bass21";
         b.h["blocks/noteblocks/bass22.ogg"] = "bass22";
         b.h["blocks/noteblocks/bass23.ogg"] = "bass23";
         b.h["blocks/noteblocks/bass24.ogg"] = "bass24";
         b.h["blocks/noteblocks/bass25.ogg"] = "bass25";
         b.h["blocks/noteblocks/kick.ogg"] = "kick";
         b.h["blocks/noteblocks/piano1.ogg"] = "piano1";
         b.h["blocks/noteblocks/piano2.ogg"] = "piano2";
         b.h["blocks/noteblocks/piano3.ogg"] = "piano3";
         b.h["blocks/noteblocks/piano4.ogg"] = "piano4";
         b.h["blocks/noteblocks/piano5.ogg"] = "piano5";
         b.h["blocks/noteblocks/piano6.ogg"] = "piano6";
         b.h["blocks/noteblocks/piano7.ogg"] = "piano7";
         b.h["blocks/noteblocks/piano8.ogg"] = "piano8";
         b.h["blocks/noteblocks/piano9.ogg"] = "piano9";
         b.h["blocks/noteblocks/piano10.ogg"] = "piano10";
         b.h["blocks/noteblocks/piano11.ogg"] = "piano11";
         b.h["blocks/noteblocks/piano12.ogg"] = "piano12";
         b.h["blocks/noteblocks/piano13.ogg"] = "piano13";
         b.h["blocks/noteblocks/piano14.ogg"] = "piano14";
         b.h["blocks/noteblocks/piano15.ogg"] = "piano15";
         b.h["blocks/noteblocks/piano16.ogg"] = "piano16";
         b.h["blocks/noteblocks/piano17.ogg"] = "piano17";
         b.h["blocks/noteblocks/piano18.ogg"] = "piano18";
         b.h["blocks/noteblocks/piano19.ogg"] = "piano19";
         b.h["blocks/noteblocks/piano20.ogg"] = "piano20";
         b.h["blocks/noteblocks/piano21.ogg"] = "piano21";
         b.h["blocks/noteblocks/piano22.ogg"] = "piano22";
         b.h["blocks/noteblocks/piano23.ogg"] = "piano23";
         b.h["blocks/noteblocks/piano24.ogg"] = "piano24";
         b.h["blocks/noteblocks/piano25.ogg"] = "piano25";
         b.h["blocks/noteblocks/snare.ogg"] = "snare";
         b.h["entities/balloon1.ogg"] = "balloon1";
         b.h["entities/balloon2.ogg"] = "balloon2";
         b.h["entities/balloon3.ogg"] = "balloon3";
         b.h["entities/balloon4.ogg"] = "balloon4";
         b.h["entities/htele.ogg"] = "htele";
         b.h["entities/pop.ogg"] = "pop";
         b.h["entities/shurikenthrow.ogg"] = "shurikenthrow";
         b.h["entities/teleporter.ogg"] = "teleporter";
         b.h["entities/throwsfx.ogg"] = "throwsfx";
         b.h["entities/trrrr.ogg"] = "Trrrr";
         b.h["items/bowsfx.ogg"] = "bowsfx";
         b.h["items/firethrow.ogg"] = "firethrow";
         b.h["misc/boom.ogg"] = "boom";
         b.h["misc/fuse.ogg"] = "fuse";
         b.h["misc/levelup.ogg"] = "levelup";
         b.h["misc/orb1.ogg"] = "orb1";
         b.h["misc/orb2.ogg"] = "orb2";
         b.h["misc/orb3.ogg"] = "orb3";
         b.h["misc/orb4.ogg"] = "orb4";
         b.h["misc/orb5.ogg"] = "orb5";
         b.h["misc/tp1.ogg"] = "tp1";
         b.h["misc/tp2.ogg"] = "tp2";
         b.h["mobs/bat/bathurt1.ogg"] = "bathurt1";
         b.h["mobs/bat/bathurt2.ogg"] = "bathurt2";
         b.h["mobs/bat/bathurt3.ogg"] = "bathurt3";
         b.h["mobs/bat/bathurt4.ogg"] = "bathurt4";
         b.h["mobs/bat/batidle1.ogg"] = "batidle1";
         b.h["mobs/bat/batidle2.ogg"] = "batidle2";
         b.h["mobs/bat/batidle3.ogg"] = "batidle3";
         b.h["mobs/bat/batidle4.ogg"] = "batidle4";
         b.h["mobs/bat/batidle5.ogg"] = "batidle5";
         b.h["mobs/blaze/blaze1.ogg"] = "blaze1";
         b.h["mobs/blaze/blaze2.ogg"] = "blaze2";
         b.h["mobs/blaze/blaze3.ogg"] = "blaze3";
         b.h["mobs/blaze/blaze4.ogg"] = "blaze4";
         b.h["mobs/blaze/blaze5.ogg"] = "blaze5";
         b.h["mobs/blaze/blazedeath.ogg"] = "blazedeath";
         b.h["mobs/blaze/blazehurt1.ogg"] = "blazehurt1";
         b.h["mobs/blaze/blazehurt2.ogg"] = "blazehurt2";
         b.h["mobs/blaze/blazehurt3.ogg"] = "blazehurt3";
         b.h["mobs/chicken/chicken1.ogg"] = "chicken1";
         b.h["mobs/chicken/chicken2.ogg"] = "chicken2";
         b.h["mobs/chicken/chicken3.ogg"] = "chicken3";
         b.h["mobs/chicken/layegg.ogg"] = "layEgg";
         b.h["mobs/cow/cow1.ogg"] = "cow1";
         b.h["mobs/cow/cow2.ogg"] = "cow2";
         b.h["mobs/cow/cow3.ogg"] = "cow3";
         b.h["mobs/cow/cow4.ogg"] = "cow4";
         b.h["mobs/cow/cowhurt1.ogg"] = "cowhurt1";
         b.h["mobs/creeper/creeper1.ogg"] = "creeper1";
         b.h["mobs/creeper/creeper2.ogg"] = "creeper2";
         b.h["mobs/creeper/creeper3.ogg"] = "creeper3";
         b.h["mobs/creeper/creeper4.ogg"] = "creeper4";
         b.h["mobs/creeper/creeperdeath.ogg"] = "creeperdeath";
         b.h["mobs/enderman/endermanidle1.ogg"] = "endermanidle1";
         b.h["mobs/enderman/endermanidle2.ogg"] = "endermanidle2";
         b.h["mobs/enderman/endermanidle3.ogg"] = "endermanidle3";
         b.h["mobs/enderman/endermanidle4.ogg"] = "endermanidle4";
         b.h["mobs/enderman/endermanidle5.ogg"] = "endermanidle5";
         b.h["mobs/nethereye/nethereye1.ogg"] = "nethereye1";
         b.h["mobs/nethereye/nethereye2.ogg"] = "nethereye2";
         b.h["mobs/nethereye/nethereye3.ogg"] = "nethereye3";
         b.h["mobs/nethereye/nethereye4.ogg"] = "nethereye4";
         b.h["mobs/pig/pig1.ogg"] = "pig1";
         b.h["mobs/pig/pig2.ogg"] = "pig2";
         b.h["mobs/pig/pig3.ogg"] = "pig3";
         b.h["mobs/pig/pig4.ogg"] = "pig4";
         b.h["mobs/pig/pig5.ogg"] = "pig5";
         b.h["mobs/player/drink1.ogg"] = "drink1";
         b.h["mobs/player/drink2.ogg"] = "drink2";
         b.h["mobs/player/eat1.ogg"] = "eat1";
         b.h["mobs/player/eat2.ogg"] = "eat2";
         b.h["mobs/player/eat3.ogg"] = "eat3";
         b.h["mobs/player/eat4.ogg"] = "eat4";
         b.h["mobs/player/ouch1.ogg"] = "ouch1";
         b.h["mobs/player/ouch2.ogg"] = "ouch2";
         b.h["mobs/rabbit/rabbithurt1.ogg"] = "rabbitHurt1";
         b.h["mobs/rabbit/rabbithurt2.ogg"] = "rabbitHurt2";
         b.h["mobs/rabbit/rabbithurt3.ogg"] = "rabbitHurt3";
         b.h["mobs/rabbit/rabbithurt4.ogg"] = "rabbitHurt4";
         b.h["mobs/sheep/sheep1.ogg"] = "sheep1";
         b.h["mobs/sheep/sheep2.ogg"] = "sheep2";
         b.h["mobs/sheep/sheep3.ogg"] = "sheep3";
         b.h["mobs/skeleton/skeleton1.ogg"] = "skeleton1";
         b.h["mobs/skeleton/skeleton2.ogg"] = "skeleton2";
         b.h["mobs/skeleton/skeleton3.ogg"] = "skeleton3";
         b.h["mobs/skeleton/skeleton4.ogg"] = "skeleton4";
         b.h["mobs/skeleton/skeletondeath.ogg"] = "skeletondeath";
         b.h["mobs/skeleton/skeletonhurt1.ogg"] = "skeletonhurt1";
         b.h["mobs/skeleton/skeletonhurt2.ogg"] = "skeletonhurt2";
         b.h["mobs/skeleton/skeletonhurt3.ogg"] = "skeletonhurt3";
         b.h["mobs/skeleton/skeletonhurt4.ogg"] = "skeletonhurt4";
         b.h["mobs/slime/slimejump1.ogg"] = "slimejump1";
         b.h["mobs/slime/slimejump2.ogg"] = "slimejump2";
         b.h["mobs/slime/slimeland1.ogg"] = "slimeland1";
         b.h["mobs/slime/slimeland2.ogg"] = "slimeland2";
         b.h["mobs/slime/slimeland3.ogg"] = "slimeland3";
         b.h["mobs/slime/slimeland4.ogg"] = "slimeland4";
         b.h["mobs/snowgolem/snowgolemhurt1.ogg"] = "snowgolemhurt1";
         b.h["mobs/snowgolem/snowgolemhurt2.ogg"] = "snowgolemhurt2";
         b.h["mobs/snowgolem/snowgolemhurt3.ogg"] = "snowgolemhurt3";
         b.h["mobs/snowgolem/snowgolemhurt4.ogg"] = "snowgolemhurt4";
         b.h["mobs/snowgolem/snowgolemhurt5.ogg"] = "snowgolemhurt5";
         b.h["mobs/snowgolem/snowgolemhurt6.ogg"] = "snowgolemhurt6";
         b.h["mobs/spider/spider1.ogg"] = "spider1";
         b.h["mobs/spider/spider2.ogg"] = "spider2";
         b.h["mobs/spider/spider3.ogg"] = "spider3";
         b.h["mobs/spider/spider4.ogg"] = "spider4";
         b.h["mobs/spider/spiderdeath.ogg"] = "spiderdeath";
         b.h["mobs/wolf/bark1.ogg"] = "Bark1";
         b.h["mobs/wolf/bark2.ogg"] = "Bark2";
         b.h["mobs/wolf/bark3.ogg"] = "Bark3";
         b.h["mobs/wolf/bark4.ogg"] = "Bark4";
         b.h["mobs/wolf/bark5.ogg"] = "Bark5";
         b.h["mobs/wolf/bark6.ogg"] = "Bark6";
         b.h["mobs/wolf/bark7.ogg"] = "Bark7";
         b.h["mobs/wolf/bark8.ogg"] = "Bark8";
         b.h["mobs/wolf/bark9.ogg"] = "Bark9";
         b.h["mobs/wolf/bark10.ogg"] = "Bark10";
         b.h["mobs/wolf/growl1.ogg"] = "Growl1";
         b.h["mobs/wolf/growl2.ogg"] = "Growl2";
         b.h["mobs/wolf/growl3.ogg"] = "Growl3";
         b.h["mobs/wolf/growl4.ogg"] = "Growl4";
         b.h["mobs/wolf/whine.ogg"] = "Whine";
         b.h["mobs/zombie/zombie1.ogg"] = "zombie1";
         b.h["mobs/zombie/zombie2.ogg"] = "zombie2";
         b.h["mobs/zombie/zombie3.ogg"] = "zombie3";
         b.h["mobs/zombie/zombiedie.ogg"] = "zombiedie";
         b.h["mobs/zombie/zombiehurt1.ogg"] = "zombiehurt1";
         b.h["mobs/zombie/zombiehurt2.ogg"] = "zombiehurt2";
         b.h["ui/tick.ogg"] = "tick";
         b.h["weather/closethunder1.ogg"] = "closeThunder1";
         b.h["weather/closethunder2.ogg"] = "closeThunder2";
         b.h["weather/closethunder3.ogg"] = "closeThunder3";
         b.h["weather/closethunder4.ogg"] = "closeThunder4";
         b.h["weather/distantthunder1.ogg"] = "distantThunder1";
         b.h["weather/distantthunder2.ogg"] = "distantThunder2";
         b.h["weather/distantthunder3.ogg"] = "distantThunder3";
         b.h["weather/distantthunder4.ogg"] = "distantThunder4";
         b.h["weather/distantthunder5.ogg"] = "distantThunder5";
         b.h["weather/distantthunder6.ogg"] = "distantThunder6";
         b.h["weather/distantthunder7.ogg"] = "distantThunder7";
         b.h["weather/distantthunder8.ogg"] = "distantThunder8";
         b.h["weather/distantthunder9.ogg"] = "distantThunder9";
         b.h["weather/distantthunder10.ogg"] = "distantThunder10";
         this.remainingSounds = b;
         b = new e();
         b.h["ambience/enderbg.ogg"] = "EnderBG";
         b.h["ambience/underwater.ogg"] = "underwater";
         b.h["music/enderdragondeath.ogg"] = "enderdragondeath";
         b.h["music/song1.ogg"] = "song1";
         b.h["music/song2.ogg"] = "song2";
         b.h["music/song3.ogg"] = "song3";
         b.h["music/song4.ogg"] = "song4";
         b.h["music/song5.ogg"] = "song5";
         this.remainingMusic = b;
         b = new e();
         b.h["ui/hit.ogg"] = "hit";
         b.h["ui/rollover.ogg"] = "rollOver";
         this.preloadSounds = b;
         b = new e();
         b.h["music/menumusic.ogg"] = "mainSong";
         this.preloadMusic = b;
         this.mouses = new Ma();
         this.quickShiftClick = 0;
         this.callOnMouseUp = new e();
         this.uiIsDown = !1;
         this.uiOccupiedTick = 0;
         this.uiHoverID = "";
         this.isMessage = this.MUTED = this.fullscreenCache = this.wasPawsed = this.wasDeactivated = !1;
         this.newestVersion = this.newestVersionHas = "";
         this.frame = "menu";
         m.Instance = this;
         p.call(this);
         Aa.connect(Aa.run, p.requestInterstitial);
         this.splash = new og();
         this.API = new kh("20884:ik7xzKSP", "YuAXlrNiTHqvgvpYloCTPA==", function (a) {
           null != a.get_user() && a.get_user().supporter && Aa.waitingForNG && ((Aa.waitingForNG = !1), Aa.initializeIFrame());
         });
       };
       r.Main = m;
       m.__name__ = "Main";
       m.addSimpleButton = function (b, a, c, d, f, l, k, h, g) {
         null == g && (g = !1);
         var C = 48;
         b = m.buttonBehavior(b, g, c, d, (f * k) | 0, (l * k) | 0, h);
         2 == b ? (C = 64) : 1 == b && (C = 80);
         c = new t(c, d, f * k, l * k);
         C = new t(C, 0, 16, 16);
         d = new t(4, 4, 8, 8);
         g ? ((g = new e()), (f = w.repeatArray([0.8, 0.8, 0.8, 1], 6)), (g.h.color = f), (f = w.repeatArray([0.2, 0.2, 0.2, 0], 6)), (g.h.colorOffset = f)) : (g = null);
         a.add9Slice(c, C, d, 0, g);
         return 2 == b;
       };
       m.addSimpleButtonBetter = function (b, a, c, d, f, l, k, h, g) {
         null == g && (g = !1);
         var C = 48;
         b = m.buttonBehavior(b, g, c, d, f, l, h);
         2 == b ? (C = 64) : 1 == b && (C = 80);
         c = new t(c, d, f, l);
         C = new t(C, 0, 16, 16);
         d = new t(4, 4, 8, 8);
         g ? ((g = new e()), (f = w.repeatArray([0.6, 0.6, 0.6, 1], 6)), (g.h.color = f), (f = w.repeatArray([0.4, 0.4, 0.4, 0], 6)), (g.h.colorOffset = f)) : (g = null);
         a.add9Slice(c, C, d, 0, g, k);
         return 2 == b;
       };
       m.buttonBehavior = function (b, a, c, d, f, e, k, h) {
         null == h && (h = !0);
         var l = 0;
         !a && new t(c, d, f, e).containsPoint(m.Instance.mouse)
           ? ((a = m.Instance.getUIHover() == b),
             m.Instance.setUIHover(b, h),
             m.Instance.getUIHover() == b &&
               ((m.Instance.cursor = Ua.POINTER),
               G.gt(m.Instance.mouseDown(), 0) ? (m.Instance.setUIDown(!0, h), (l = 2)) : (m.Instance.setUIDown(!1, h), (l = 1)),
               a && 1 == m.Instance.mouseUp() && (m.Instance.setUIHover("", !1), null != k && k())))
           : m.Instance.getUIHover() == b && m.Instance.setUIHover("", h);
         return l;
       };
       m.__super__ = p;
       m.prototype = v(p.prototype, {
         initialize: function () {
           var b = this;
           this.scene.setup2D(552, 414, new F(-16703699));
           this.set_fps(50);
           this.viewportScale = 0;
           this.mainMenu = new nd(this.scene);
           J.initialize(function () {
             "1.30.5" != J.version && (1 == b.mainMenu.versionDialogFrame && (b.mainMenu.versionDialogFrame = 2), (J.version = "1.30.5"), J.save());
           });
           this.getNews();
           q.generateBlockData();
           y.texturePackInit();
           for (var a = Object.keys(this.remainingSounds.h), c = a.length, d = 0; d < c; ) {
             var f = a[d++];
             P.loadSound("assets/sfx/" + f, this.remainingSounds.h[f], null, 5);
           }
           a = Object.keys(this.remainingMusic.h);
           c = a.length;
           for (d = 0; d < c; ) (f = a[d++]), P.loadSound("assets/sfx/" + f, this.remainingMusic.h[f], md.MUSIC, 5);
           this.__window.onMaximize.add(function () {
             if (1 == b.__window.__maximized && 0 == b.keyDown(27)) {
               var a = b.__window;
               a.__minimized = !1;
               a.__maximized = a.__backend.setMaximized(!1);
               b.__window.set_fullscreen(!0);
               b.fullscreenCache = !0;
             }
           });
         },
         preRun: function () {
           var b = new e();
           b.h.op = "connect";
           b.h.id = "07M3i0";
           b.h.version = "1.30.5";
           b.h.url = L.location.href;
         },
         set_frame: function (b) {
           this.frame = b;
           "menu" == this.frame && null != window.gameplayStop && window.gameplayStop();
           this.resize();
           return b;
         },
         onWindowResize: function (b, a) {},
         resize: function () {
           "menu" == this.frame
             ? null != this.mainMenu && this.mainMenu.resize()
             : "game" == this.frame
             ? null != this.game && this.game.resize()
             : "respawn" == this.frame
             ? null != this.respawn && this.respawn.resize()
             : "credits" == this.frame && null != this.credits && this.credits.resize();
         },
         loop: function () {
           this.scene.fillRect(null, new F(-16300172));
           y.state == Uc.LOADING_IMAGES
             ? y.texturePackCheckImages()
             : "menu" == this.frame
             ? (this.volumeAndClose(), this.mainMenu.run())
             : "game" == this.frame
             ? this.game.run()
             : "credits" == this.frame
             ? (null == this.credits && (this.credits = new lh(this.scene)), this.credits.run(this.tick))
             : "respawn" == this.frame && (null == this.respawn && (this.respawn = new mh(this.scene)), this.respawn.run());
         },
         onMouseWheel: function (b, a, c) {
           p.prototype.onMouseWheel.call(this, b, a, c);
           null != this.game && this.game.mouseWheelHandler();
         },
         onKeyDown: function (b, a) {
           p.prototype.onKeyDown.call(this, b, a);
           if (27 == b && 1 == this.keyDown(27) && (null == this.game || this.game.pawsed) && 1 == this.fullscreenCache)
             (b = this.__window), (b.__minimized = !1), (this.fullscreenCache = this.__window.set_fullscreen((b.__maximized = b.__backend.setMaximized(!1))));
           else if (null != this.game) this.game.onKeyDown(b);
         },
         keyPreventDefault: function () {
           fa.current.__window.onKeyDown.cancel();
         },
         onWindowFocusOut: function () {
           J.focusPause && (ya.set_masterVolume(0), this.wasDeactivated || (this.wasPawsed = null != this.game && this.game.pawsed), (this.wasDeactivated = !0), null != this.game && (this.game.pawsed = !0));
           for (var b = this.isDown.keys(); b.hasNext(); ) {
             var a = b.next();
             this.isUp.h[a] = this.tick;
             this.isDown.h.hasOwnProperty(a) && ((this.wasDown.h[a] = this.isDown.h[a]), this.isDown.remove(a));
           }
         },
         getIsDown: function () {
           return this.isDown;
         },
         onWindowFocusIn: function () {
           J.focusPause && (ya.set_masterVolume(this.MUTED ? 0 : 1), (this.wasDeactivated = !1), null != this.game && (this.game.pawsed = this.wasPawsed));
         },
         getUIHover: function () {
           return this.uiHoverID;
         },
         setUIHover: function (b, a) {
           null == a && (a = !0);
           if (this.uiHoverID == b) return (this.uiOccupiedTick = this.tick), this.uiHoverID;
           if (this.uiOccupiedTick == this.tick) return this.uiHoverID;
           this.uiOccupiedTick = this.tick;
           "" == b && this.setUIDown(!1);
           G.gte(1, this.mouseDown()) && ((this.uiHoverID = b), "" != b && a && P.getSound("rollOver_" + ((5 * Math.random()) | 0)).play(J.soundVol / 100));
           return this.uiHoverID;
         },
         setUIDown: function (b, a) {
           null == a && (a = !0);
           !this.uiIsDown && b && a && P.getSound("hit_" + ((5 * Math.random()) | 0)).play(J.soundVol / 100);
           this.uiIsDown = b;
         },
         onMouseDown: function (b, a, c) {
           p.prototype.onMouseDown.call(this, b, a, c);
           null != this.game && (0 == c ? this.game.mD2() : 1 == c ? this.game.mMC() : 2 == c && this.game.rMD());
         },
         onMouseUp: function (b, a, c) {
           p.prototype.onMouseUp.call(this, b, a, c);
           b = this.callOnMouseUp.h;
           a = Object.keys(b);
           for (var d = a.length, f = 0; f < d; ) b[a[f++]]();
           this.callOnMouseUp = new e();
           null != this.game && (0 == c ? this.game.mU2() : 2 == c && this.game.rMU());
         },
         onMouseMove: function (b, a) {
           p.prototype.onMouseMove.call(this, b, a);
         },
         onTouchStart: function (b) {
           J.touchControls &&
             null != this.game &&
             1 == this.game.blackScreen.currentFrame &&
             (p.prototype.onTouchStart.call(this, b),
             (this.mouses.h[b.id] = { x: this.touches.h[b.id].x, y: this.touches.h[b.id].y, type: "", tick: this.tick, pressed: !1, afterQuickShiftClick: !1 }),
             1 == this.game.inventario.currentFrame &&
               (w.distance(this.touches.h[b.id].x - this.game.touchPadPosition.x, this.touches.h[b.id].y - this.game.touchPadPosition.y) < 55 * this.game.touchScale
                 ? ((this.mouses.h[b.id].type = "pad"), this.doMousePadLogic(b.id))
                 : this.touches.h[b.id].x >= this.game.touchButtonPosition3.x &&
                   this.touches.h[b.id].x < this.game.touchButtonPosition3.x + 100 * this.game.touchScale &&
                   this.touches.h[b.id].y >= this.game.touchButtonPosition3.y &&
                   this.touches.h[b.id].y < this.game.touchButtonPosition3.y + 34 * this.game.touchScale
                 ? (this.onKeyDown(J.getKeyBinding("inventory"), 0), (this.mouses.h[b.id].type = "btn2"), (this.game.touchButtonPressed3 = !0))
                 : this.touches.h[b.id].x >= this.game.touchButtonPosition2.x &&
                   this.touches.h[b.id].x < this.game.touchButtonPosition2.x + 100 * this.game.touchScale &&
                   this.touches.h[b.id].y >= this.game.touchButtonPosition2.y &&
                   this.touches.h[b.id].y < this.game.touchButtonPosition2.y + 34 * this.game.touchScale
                 ? (this.onKeyDown(J.getKeyBinding("dropItem"), 0), (this.mouses.h[b.id].type = "btn3"), (this.game.touchButtonPressed2 = !0))
                 : this.touches.h[b.id].x >= this.game.touchButtonPosition1.x &&
                   this.touches.h[b.id].x < this.game.touchButtonPosition1.x + 100 * this.game.touchScale &&
                   this.touches.h[b.id].y >= this.game.touchButtonPosition1.y &&
                   this.touches.h[b.id].y < this.game.touchButtonPosition1.y + 34 * this.game.touchScale
                 ? (this.onKeyDown(J.getKeyBinding("commands"), 0), (this.mouses.h[b.id].type = "btn4"), (this.game.touchButtonPressed1 = !0))
                 : G.gt(this.keyDown(1073742050), 0) || G.gt(this.keyDown(J.getKeyBinding("pick")), 0)
                 ? this.game.mMC()
                 : 0 < this.quickShiftClick && (this.mouses.h[b.id].afterQuickShiftClick = !0)));
         },
         onTouchMove: function (b) {
           J.touchControls &&
             null != this.game &&
             1 == this.game.blackScreen.currentFrame &&
             (p.prototype.onTouchMove.call(this, b),
             null != this.mouses.h[b.id] &&
               ((this.mouses.h[b.id].x = this.touches.h[b.id].x),
               (this.mouses.h[b.id].y = this.touches.h[b.id].y),
               "pad" == this.mouses.h[b.id].type ? this.doMousePadLogic(b.id) : "btn" != I.substr(this.mouses.h[b.id].type, 0, 3) && this.setMousePosition(this.touches.h[b.id].x, this.touches.h[b.id].y)));
         },
         doMousePadLogic: function (b) {
           if (this.mouses.h[b].x < this.game.touchPadPosition.x - 20 * this.game.touchScale) {
             if (0 == this.keyDown(J.getKeyBinding("left"))) this.onKeyDown(J.getKeyBinding("left"), 0);
             this.game.touchPad4Pressed = !0;
           } else this.onKeyUp(J.getKeyBinding("left"), 0), (this.game.touchPad4Pressed = !1);
           if (this.mouses.h[b].x > this.game.touchPadPosition.x + 20 * this.game.touchScale) {
             if (0 == this.keyDown(J.getKeyBinding("right"))) this.onKeyDown(J.getKeyBinding("right"), 0);
             this.game.touchPad2Pressed = !0;
           } else this.onKeyUp(J.getKeyBinding("right"), 0), (this.game.touchPad2Pressed = !1);
           if (this.mouses.h[b].y < this.game.touchPadPosition.y - 20 * this.game.touchScale) {
             if (0 == this.keyDown(J.getKeyBinding("up"))) this.onKeyDown(J.getKeyBinding("up"), 0);
             this.game.touchPad1Pressed = !0;
           } else this.onKeyUp(J.getKeyBinding("up"), 0), (this.game.touchPad1Pressed = !1);
           if (this.mouses.h[b].y > this.game.touchPadPosition.y + 20 * this.game.touchScale) {
             if (0 == this.keyDown(J.getKeyBinding("down"))) this.onKeyDown(J.getKeyBinding("down"), 0);
             this.game.touchPad3Pressed = !0;
           } else this.onKeyUp(J.getKeyBinding("down"), 0), (this.game.touchPad3Pressed = !1);
         },
         onTouchEnd: function (b) {
           J.touchControls &&
             null != this.game &&
             1 == this.game.blackScreen.currentFrame &&
             (p.prototype.onTouchEnd.call(this, b),
             this.mouses.h.hasOwnProperty(b.id) &&
               ("pad" == this.mouses.h[b.id].type
                 ? (this.onKeyUp(J.getKeyBinding("left"), 0),
                   this.onKeyUp(J.getKeyBinding("right"), 0),
                   this.onKeyUp(J.getKeyBinding("up"), 0),
                   this.onKeyUp(J.getKeyBinding("down"), 0),
                   (this.game.touchPad1Pressed = !1),
                   (this.game.touchPad2Pressed = !1),
                   (this.game.touchPad3Pressed = !1),
                   (this.game.touchPad4Pressed = !1))
                 : "btn2" == this.mouses.h[b.id].type
                 ? (this.onKeyUp(J.getKeyBinding("inventory"), 0), (this.game.touchButtonPressed3 = !1))
                 : "btn3" == this.mouses.h[b.id].type
                 ? (this.onKeyUp(J.getKeyBinding("dropItem"), 0), (this.game.touchButtonPressed2 = !1))
                 : "btn4" == this.mouses.h[b.id].type
                 ? (this.onKeyUp(J.getKeyBinding("commands"), 0), (this.game.touchButtonPressed1 = !1))
                 : this.mouses.h[b.id].pressed
                 ? this.mouses.h[b.id].afterQuickShiftClick
                   ? ((this.game.rMouseD = 0), (this.game.waitTillRightMouseIsUp = !1))
                   : ((this.game.mouseD = 0), (this.game.waitTillMouseIsUp = !1))
                 : (this.quickShiftClick = Math.floor(3 + this.get_fps() / 3)),
               this.mouses.remove(b.id)));
         },
         onTouchCancel: function (b) {
           J.touchControls && p.prototype.onTouchCancel.call(this, b);
         },
         loadAssets: function () {
           P.loadImage("assets/images/world/blocks.png", "blocks");
           P.loadImage("assets/images/backgrounds/background_trees.png", "background_trees");
           P.loadImage("assets/images/backgrounds/nether_bg.png", "nether_bg");
           P.loadImage("assets/images/backgrounds/ender_bg.png", "ender_bg");
           P.loadImage("assets/images/world/sun_and_moon.png", "sun_and_moon");
           P.loadImage("assets/images/world/stars.png", "stars");
           P.loadImage("assets/images/world/frank.png", "frank");
           P.loadImage("assets/images/world/end_portal.png", "end_portal");
           P.loadImage("assets/images/world/mobs.png", "mobs");
           P.loadImage("assets/images/world/pumpkin_overlay.png", "pumpkin_overlay");
           P.loadImage("assets/images/world/flameball.png", "flameball");
           P.loadImage("assets/images/world/raything.png", "raything");
           P.loadImage("assets/images/world/ehc.png", "ehc");
           P.loadImage("assets/images/world/teleporter.png", "teleporter");
           P.loadImage("assets/images/backgrounds/main_menu_bg.png", "main_menu_bg");
           P.loadImage("assets/images/branding/title_logo.png", "title_logo").smoothing = !0;
           P.loadImage("assets/images/branding/zanzlanz_title.png", "zanzlanz_title").smoothing = !0;
           P.loadImage("assets/images/ui/ui.png", "ui");
           P.loadImage("assets/images/ui/things_to_other_places.png", "things_to_other_places").smoothing = !0;
           P.loadImage("assets/images/ui/spinning_diamond.png", "spinning_diamond").smoothing = !0;
           P.loadImage("assets/images/ui/diamond_burst.png", "diamond_burst");
           P.loadImage("assets/images/ui/reticle.png", "reticle");
           P.loadImage("assets/images/ui/hotbar.png", "hotbar");
           P.loadImage("assets/images/ui/inventory.png", "inventory");
           P.loadImage("assets/images/ui/inventory_armor.png", "inventory_armor");
           P.loadImage("assets/images/ui/inventory_crafting.png", "inventory_crafting");
           P.loadImage("assets/images/ui/inventory_craftingtable.png", "inventory_craftingtable");
           P.loadImage("assets/images/ui/inventory_furnace.png", "inventory_furnace");
           P.loadImage("assets/images/ui/inventory_chest.png", "inventory_chest");
           P.loadImage("assets/images/ui/inventory_creative.png", "inventory_creative");
           P.loadImage("assets/images/ui/inventory_single.png", "inventory_single");
           P.loadImage("assets/images/ui/inventory_enchanting.png", "inventory_enchanting");
           P.loadImage("assets/images/ui/inventory_enchantment_button.png", "inventory_enchantment_button");
           P.loadImage("assets/images/ui/inventory_brewing.png", "inventory_brewing");
           P.loadImage("assets/images/ui/inventory_anvil.png", "inventory_anvil");
           P.loadImage("assets/images/ui/trash_bin.png", "trash_bin");
           P.loadImage("assets/images/ui/sign.png", "sign");
           P.loadImage("assets/images/ui/achievements.png", "achievements");
           P.loadImage("assets/images/ui/effects.png", "effects");
           P.loadImage("assets/images/ui/boss_bar.png", "boss_bar");
           P.loadImage("assets/images/ui/stone_brick_blur.png", "stone_brick_blur");
           P.loadImage("assets/images/ui/pick_crack.png", "pick_crack");
           P.loadImage("assets/images/ui/skin_upload_progress.png", "skin_upload_progress");
           P.loadImage("assets/fonts/volter.png", "font_volter");
           P.loadImage("assets/fonts/basis33.png", "font_basis33");
           for (var b = Object.keys(this.preloadSounds.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             P.loadSound("assets/sfx/" + d, this.preloadSounds.h[d], null, 5);
           }
           b = Object.keys(this.preloadMusic.h);
           a = b.length;
           for (c = 0; c < a; ) (d = b[c++]), P.loadSound("assets/sfx/" + d, this.preloadMusic.h[d], md.MUSIC, 5);
         },
         getNews: function () {
           var b = this,
             a = new e();
           a.h.version = "1.30.5";
           cb.send("https://mineblocks.com/1/scripts/currentVersion", !1, a, function (a) {
             b.mainMenu.setNews(Object.prototype.hasOwnProperty.call(a.h, "news") ? a.h.news : "", Object.prototype.hasOwnProperty.call(a.h, "newsURL") ? a.h.newsURL : "");
             Object.prototype.hasOwnProperty.call(a.h, "jumpText") && b.mainMenu.setJumpTexts(a.h.jumpText.split(","));
             var c = Object.prototype.hasOwnProperty.call(a.h, "ver") ? a.h.ver : "";
             b.newestVersion = c;
             c = Object.prototype.hasOwnProperty.call(a.h, "has") ? a.h.has : "";
             b.newestVersionHas = c;
             c = Object.prototype.hasOwnProperty.call(a.h, "isMessage") && "true" == a.h.isMessage;
             b.isMessage = c;
             "" != b.newestVersionHas && (1 == b.isMessage ? (b.mainMenu.versionDialogFrame = 4) : U.versionToNumber("1.30.5") < U.versionToNumber(b.newestVersion) && (b.mainMenu.versionDialogFrame = 3));
           });
         },
         volumeAndClose: function () {
           if (null == this.volumeAndCloseEntity) {
             var b = P.getImage("ui"),
               a = Fa.getShader(),
               c = new e(),
               d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.volumeAndCloseEntity = new da(b, null, a, c);
             this.volumeAndCloseEntity.layer = 21;
             this.volumeAndCloseEntity.isTransparent = !0;
           }
           "game" == this.frame
             ? this.volumeAndCloseEntity.updateQuad(0, new M(this.scene.get_width() - 56, 0), new h(41, 208), new h(28, 15), new h(56, 30))
             : this.volumeAndCloseEntity.updateQuad(0, new M(this.scene.get_width() - 56, 0), new h(41, 208), new h(), new h());
           if (!new t(this.scene.get_width() - 56, -1, 28, 28).containsPoint(m.Instance.mouse) || ("game" == this.frame && 1 != this.game.blackScreen.currentFrame))
             (b = this.volumeAndCloseEntity), (a = this.scene.get_width() - 56), (f = 0 < ya.masterVolume ? 16 : 8), (l = 0 < ya.masterVolume ? 32 : 16), b.updateQuad(1, new M(a, -1), new h(16, 16), new h(f, 16), new h(l, 32));
           else {
             b = this.volumeAndCloseEntity;
             a = new M(this.scene.get_width() - 56, -1);
             var f = new h(16, 16),
               l = new h(0 < ya.masterVolume ? 16 : 8, 16),
               k = new h(0 < ya.masterVolume ? 32 : 16, 32);
             c = new e();
             d = w.repeatArray([0.2, 0.2, 0.2, 0], 6);
             c.h.colorOffset = d;
             b.updateQuad(1, a, f, l, k, null, null, c);
             m.Instance.cursor = Ua.POINTER;
             1 == m.Instance.mouseUp() &&
               ((this.MUTED = !this.MUTED), ya.set_masterVolume(this.MUTED ? 0 : 1), "game" != this.frame || 1 == this.game.blackScreen.currentFrame) &&
               (P.getSound("song1_0").stop(), P.getSound("song2_0").stop(), P.getSound("song3_0").stop(), P.getSound("song4_0").stop(), P.getSound("song5_0").stop());
           }
           !new t(this.scene.get_width() - 28, -1, 28, 28).containsPoint(m.Instance.mouse) || ("game" == this.frame && 1 != this.game.blackScreen.currentFrame)
             ? "game" != this.frame || 1 != this.game.inventario.currentFrame
               ? this.volumeAndCloseEntity.updateQuad(2, new M(this.scene.get_width() - 30, -1), new h(32, 16), new h(16, 16), new h(32, 32))
               : this.volumeAndCloseEntity.updateQuad(2, new M(this.scene.get_width() - 30, -1), new h(38, 112), new h(16, 16), new h(32, 32))
             : ("game" != this.frame || 1 != this.game.inventario.currentFrame
                 ? ((b = this.volumeAndCloseEntity),
                   (a = new M(this.scene.get_width() - 30, -1)),
                   (f = new h(32, 16)),
                   (l = new h(16, 16)),
                   (k = new h(32, 32)),
                   (c = new e()),
                   (d = w.repeatArray([0.2, 0.2, 0.2, 0], 6)),
                   (c.h.colorOffset = d),
                   b.updateQuad(2, a, f, l, k, null, null, c))
                 : (this.game.showBottomTooltip("Pause/Settings"), this.volumeAndCloseEntity.updateQuad(2, new M(this.scene.get_width() - 30, -1), new h(54, 112), new h(16, 16), new h(32, 32))),
               (m.Instance.cursor = Ua.POINTER),
               1 == m.Instance.mouseUp() &&
                 ("menu" == this.frame
                   ? 1 != this.mainMenu.versionDialogFrame
                     ? (this.mainMenu.versionDialogFrame = 1)
                     : 1 != this.mainMenu.currentFrame && this.mainMenu.gotoAndStop(1)
                   : "game" == this.frame && 1 == this.game.blackScreen.currentFrame && this.game.openPauseMenu()));
           this.scene.draw(this.volumeAndCloseEntity);
         },
         __class__: m,
       });
       var nb = function () {};
       r.ManifestResources = nb;
       nb.__name__ = "ManifestResources";
       nb.init = function (b) {
         nb.preloadLibraries = [];
         nb.preloadLibraryNames = [];
         nb.rootPath = null;
         null != b && Object.prototype.hasOwnProperty.call(b, "rootPath") && (nb.rootPath = Z.field(b, "rootPath"));
         null == nb.rootPath && (nb.rootPath = "./");
         b = Ec.fromManifest(
           Rb.parse(
             '{"name":null,"assets":"aoy4:pathy28:assets%2Ffonts%2Fbasis33.pngy4:sizei2137y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y27:assets%2Ffonts%2Fvolter.pngR2i1874R3R4R5R7R6tgoR0y52:assets%2Fimages%2Fbackgrounds%2Fbackground_trees.pngR2i166844R3R4R5R8R6tgoR0y44:assets%2Fimages%2Fbackgrounds%2Fender_bg.pngR2i2760463R3R4R5R9R6tgoR0y48:assets%2Fimages%2Fbackgrounds%2Fmain_menu_bg.pngR2i125570R3R4R5R10R6tgoR0y45:assets%2Fimages%2Fbackgrounds%2Fnether_bg.pngR2i67363R3R4R5R11R6tgoR0y41:assets%2Fimages%2Fbranding%2Fmbb_icon.pngR2i709R3R4R5R12R6tgoR0y43:assets%2Fimages%2Fbranding%2Ftitle_logo.pngR2i40054R3R4R5R13R6tgoR0y47:assets%2Fimages%2Fbranding%2Fzanzlanz_title.pngR2i7323R3R4R5R14R6tgoR0y39:assets%2Fimages%2Fui%2Fachievements.pngR2i387R3R4R5R15R6tgoR0y35:assets%2Fimages%2Fui%2Fboss_bar.pngR2i215R3R4R5R16R6tgoR0y40:assets%2Fimages%2Fui%2Fdiamond_burst.pngR2i109750R3R4R5R17R6tgoR0y34:assets%2Fimages%2Fui%2Feffects.pngR2i3071R3R4R5R18R6tgoR0y33:assets%2Fimages%2Fui%2Fhotbar.pngR2i288R3R4R5R19R6tgoR0y36:assets%2Fimages%2Fui%2Finventory.pngR2i505R3R4R5R20R6tgoR0y42:assets%2Fimages%2Fui%2Finventory_anvil.pngR2i635R3R4R5R21R6tgoR0y42:assets%2Fimages%2Fui%2Finventory_armor.pngR2i301R3R4R5R22R6tgoR0y44:assets%2Fimages%2Fui%2Finventory_brewing.pngR2i1597R3R4R5R23R6tgoR0y42:assets%2Fimages%2Fui%2Finventory_chest.pngR2i357R3R4R5R24R6tgoR0y45:assets%2Fimages%2Fui%2Finventory_crafting.pngR2i307R3R4R5R25R6tgoR0y50:assets%2Fimages%2Fui%2Finventory_craftingtable.pngR2i351R3R4R5R26R6tgoR0y45:assets%2Fimages%2Fui%2Finventory_creative.pngR2i1239R3R4R5R27R6tgoR0y47:assets%2Fimages%2Fui%2Finventory_enchanting.pngR2i274R3R4R5R28R6tgoR0y55:assets%2Fimages%2Fui%2Finventory_enchantment_button.pngR2i1828R3R4R5R29R6tgoR0y44:assets%2Fimages%2Fui%2Finventory_furnace.pngR2i459R3R4R5R30R6tgoR0y43:assets%2Fimages%2Fui%2Finventory_single.pngR2i157R3R4R5R31R6tgoR0y37:assets%2Fimages%2Fui%2Fpick_crack.pngR2i1185R3R4R5R32R6tgoR0y34:assets%2Fimages%2Fui%2Freticle.pngR2i150R3R4R5R33R6tgoR0y31:assets%2Fimages%2Fui%2Fsign.pngR2i934R3R4R5R34R6tgoR0y47:assets%2Fimages%2Fui%2Fskin_upload_progress.pngR2i1706R3R4R5R35R6tgoR0y43:assets%2Fimages%2Fui%2Fspinning_diamond.pngR2i6897R3R4R5R36R6tgoR0y43:assets%2Fimages%2Fui%2Fstone_brick_blur.pngR2i1161R3R4R5R37R6tgoR0y49:assets%2Fimages%2Fui%2Fthings_to_other_places.pngR2i11518R3R4R5R38R6tgoR0y36:assets%2Fimages%2Fui%2Ftrash_bin.pngR2i354R3R4R5R39R6tgoR0y29:assets%2Fimages%2Fui%2Fui.pngR2i29390R3R4R5R40R6tgoR0y37:assets%2Fimages%2Fworld%2Fballoon.pngR2i663R3R4R5R41R6tgoR0y37:assets%2Fimages%2Fworld%2Fblocks.jsonR2i34537R3y4:TEXTR5R42R6tgoR0y36:assets%2Fimages%2Fworld%2Fblocks.pngR2i139967R3R4R5R44R6tgoR0y36:assets%2Fimages%2Fworld%2Fbobber.pngR2i139R3R4R5R45R6tgoR0y33:assets%2Fimages%2Fworld%2Fehc.pngR2i4482R3R4R5R46R6tgoR0y47:assets%2Fimages%2Fworld%2Fenchantment_glint.pngR2i20452R3R4R5R47R6tgoR0y40:assets%2Fimages%2Fworld%2Fend_portal.pngR2i544R3R4R5R48R6tgoR0y39:assets%2Fimages%2Fworld%2Fflameball.pngR2i666R3R4R5R49R6tgoR0y35:assets%2Fimages%2Fworld%2Ffrank.pngR2i1581R3R4R5R50R6tgoR0y34:assets%2Fimages%2Fworld%2Fmobs.pngR2i25996R3R4R5R51R6tgoR0y39:assets%2Fimages%2Fworld%2Fparticles.pngR2i6370R3R4R5R52R6tgoR0y45:assets%2Fimages%2Fworld%2Fpumpkin_overlay.pngR2i34358R3R4R5R53R6tgoR0y38:assets%2Fimages%2Fworld%2Fraything.pngR2i7561R3R4R5R54R6tgoR0y35:assets%2Fimages%2Fworld%2Fstars.pngR2i3746R3R4R5R55R6tgoR0y42:assets%2Fimages%2Fworld%2Fsun_and_moon.pngR2i2901R3R4R5R56R6tgoR0y40:assets%2Fimages%2Fworld%2Fteleporter.pngR2i4910R3R4R5R57R6tgoR0y30:assets%2Fimages%2Fzanzlanz.pngR2i2912R3R4R5R58R6tgoR2i877296R3y5:MUSICR5y37:assets%2Fsfx%2Fambience%2Fenderbg.mp3y9:pathGroupaR60y37:assets%2Fsfx%2Fambience%2Fenderbg.ogghR6tgoR2i567794R3y5:SOUNDR5R62R61aR60R62hgoR2i48901R3R59R5y35:assets%2Fsfx%2Fambience%2Ffire1.mp3R61aR64y35:assets%2Fsfx%2Fambience%2Ffire1.ogghR6tgoR2i51295R3R63R5R65R61aR64R65hgoR2i58932R3R59R5y35:assets%2Fsfx%2Fambience%2Ffire2.mp3R61aR66y35:assets%2Fsfx%2Fambience%2Ffire2.ogghR6tgoR2i62710R3R63R5R67R61aR66R67hgoR2i63947R3R59R5y35:assets%2Fsfx%2Fambience%2Ffire3.mp3R61aR68y35:assets%2Fsfx%2Fambience%2Ffire3.ogghR6tgoR2i58296R3R63R5R69R61aR68R69hgoR2i64365R3R59R5y35:assets%2Fsfx%2Fambience%2Ffire4.mp3R61aR70y35:assets%2Fsfx%2Fambience%2Ffire4.ogghR6tgoR2i59437R3R63R5R71R61aR70R71hgoR2i64365R3R59R5y35:assets%2Fsfx%2Fambience%2Ffire5.mp3R61aR72y35:assets%2Fsfx%2Fambience%2Ffire5.ogghR6tgoR2i66196R3R63R5R73R61aR72R73hgoR2i571350R3R59R5y36:assets%2Fsfx%2Fambience%2Fnether.mp3R61aR74y36:assets%2Fsfx%2Fambience%2Fnether.ogghR6tgoR2i332037R3R63R5R75R61aR74R75hgoR2i99056R3R59R5y37:assets%2Fsfx%2Fambience%2Fportal1.mp3R61aR76y37:assets%2Fsfx%2Fambience%2Fportal1.ogghR6tgoR2i67356R3R63R5R77R61aR76R77hgoR2i48901R3R59R5y37:assets%2Fsfx%2Fambience%2Fportal2.mp3R61aR78y37:assets%2Fsfx%2Fambience%2Fportal2.ogghR6tgoR2i38930R3R63R5R79R61aR78R79hgoR2i112013R3R59R5y37:assets%2Fsfx%2Fambience%2Fportal3.mp3R61aR80y37:assets%2Fsfx%2Fambience%2Fportal3.ogghR6tgoR2i84887R3R63R5R81R61aR80R81hgoR2i84427R3R59R5y37:assets%2Fsfx%2Fambience%2Fportal4.mp3R61aR82y37:assets%2Fsfx%2Fambience%2Fportal4.ogghR6tgoR2i65518R3R63R5R83R61aR82R83hgoR2i71471R3R59R5y37:assets%2Fsfx%2Fambience%2Fportal5.mp3R61aR84y37:assets%2Fsfx%2Fambience%2Fportal5.ogghR6tgoR2i56117R3R63R5R85R61aR84R85hgoR2i107833R3R59R5y39:assets%2Fsfx%2Fambience%2Frainsound.mp3R61aR86y39:assets%2Fsfx%2Fambience%2Frainsound.ogghR6tgoR2i86177R3R63R5R87R61aR86R87hgoR2i26749R3R59R5y40:assets%2Fsfx%2Fambience%2Funderwater.mp3R61aR88y40:assets%2Fsfx%2Fambience%2Funderwater.ogghR6tgoR2i45299R3R63R5R89R61aR88R89hgoR2i16718R3R59R5y38:assets%2Fsfx%2Fblocks%2Fanvilsound.mp3R61aR90y38:assets%2Fsfx%2Fblocks%2Fanvilsound.ogghR6tgoR2i17823R3R63R5R91R61aR90R91hgoR2i4597R3R59R5y35:assets%2Fsfx%2Fblocks%2Fcrunch1.mp3R61aR92y35:assets%2Fsfx%2Fblocks%2Fcrunch1.ogghR6tgoR2i9972R3R63R5R93R61aR92R93hgoR2i4597R3R59R5y35:assets%2Fsfx%2Fblocks%2Fcrunch2.mp3R61aR94y35:assets%2Fsfx%2Fblocks%2Fcrunch2.ogghR6tgoR2i8895R3R63R5R95R61aR94R95hgoR2i4179R3R59R5y35:assets%2Fsfx%2Fblocks%2Fcrunch3.mp3R61aR96y35:assets%2Fsfx%2Fblocks%2Fcrunch3.ogghR6tgoR2i9349R3R63R5R97R61aR96R97hgoR2i4597R3R59R5y37:assets%2Fsfx%2Fblocks%2Fdoorclose.mp3R61aR98y37:assets%2Fsfx%2Fblocks%2Fdoorclose.ogghR6tgoR2i9573R3R63R5R99R61aR98R99hgoR2i2925R3R59R5y36:assets%2Fsfx%2Fblocks%2Fdooropen.mp3R61aR100y36:assets%2Fsfx%2Fblocks%2Fdooropen.ogghR6tgoR2i6973R3R63R5R101R61aR100R101hgoR2i12120R3R59R5y34:assets%2Fsfx%2Fblocks%2Fglass1.mp3R61aR102y34:assets%2Fsfx%2Fblocks%2Fglass1.ogghR6tgoR2i16395R3R63R5R103R61aR102R103hgoR2i27585R3R59R5y34:assets%2Fsfx%2Fblocks%2Fglass2.mp3R61aR104y34:assets%2Fsfx%2Fblocks%2Fglass2.ogghR6tgoR2i24429R3R63R5R105R61aR104R105hgoR2i25495R3R59R5y34:assets%2Fsfx%2Fblocks%2Fglass3.mp3R61aR106y34:assets%2Fsfx%2Fblocks%2Fglass3.ogghR6tgoR2i23620R3R63R5R107R61aR106R107hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass1.mp3R61aR108y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass1.ogghR6tgoR2i7194R3R63R5R109R61aR108R109hgoR2i1671R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass10.mp3R61aR110y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass10.ogghR6tgoR2i7081R3R63R5R111R61aR110R111hgoR2i2507R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass11.mp3R61aR112y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass11.ogghR6tgoR2i6696R3R63R5R113R61aR112R113hgoR2i1671R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass12.mp3R61aR114y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass12.ogghR6tgoR2i7130R3R63R5R115R61aR114R115hgoR2i3343R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass13.mp3R61aR116y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass13.ogghR6tgoR2i7179R3R63R5R117R61aR116R117hgoR2i2925R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass14.mp3R61aR118y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass14.ogghR6tgoR2i6918R3R63R5R119R61aR118R119hgoR2i3343R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass15.mp3R61aR120y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass15.ogghR6tgoR2i7157R3R63R5R121R61aR120R121hgoR2i3761R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass16.mp3R61aR122y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass16.ogghR6tgoR2i7209R3R63R5R123R61aR122R123hgoR2i3761R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass17.mp3R61aR124y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass17.ogghR6tgoR2i7311R3R63R5R125R61aR124R125hgoR2i1671R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass18.mp3R61aR126y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass18.ogghR6tgoR2i7177R3R63R5R127R61aR126R127hgoR2i2925R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass19.mp3R61aR128y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass19.ogghR6tgoR2i6967R3R63R5R129R61aR128R129hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass2.mp3R61aR130y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass2.ogghR6tgoR2i7112R3R63R5R131R61aR130R131hgoR2i3761R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass20.mp3R61aR132y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass20.ogghR6tgoR2i7480R3R63R5R133R61aR132R133hgoR2i2925R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass21.mp3R61aR134y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass21.ogghR6tgoR2i7292R3R63R5R135R61aR134R135hgoR2i2089R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass22.mp3R61aR136y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass22.ogghR6tgoR2i7119R3R63R5R137R61aR136R137hgoR2i3343R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass23.mp3R61aR138y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass23.ogghR6tgoR2i6917R3R63R5R139R61aR138R139hgoR2i3343R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass24.mp3R61aR140y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass24.ogghR6tgoR2i6959R3R63R5R141R61aR140R141hgoR2i3761R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass25.mp3R61aR142y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass25.ogghR6tgoR2i7107R3R63R5R143R61aR142R143hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass3.mp3R61aR144y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass3.ogghR6tgoR2i7146R3R63R5R145R61aR144R145hgoR2i2089R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass4.mp3R61aR146y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass4.ogghR6tgoR2i7289R3R63R5R147R61aR146R147hgoR2i2089R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass5.mp3R61aR148y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass5.ogghR6tgoR2i7122R3R63R5R149R61aR148R149hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass6.mp3R61aR150y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass6.ogghR6tgoR2i7218R3R63R5R151R61aR150R151hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass7.mp3R61aR152y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass7.ogghR6tgoR2i6990R3R63R5R153R61aR152R153hgoR2i1253R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass8.mp3R61aR154y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass8.ogghR6tgoR2i6939R3R63R5R155R61aR154R155hgoR2i3343R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass9.mp3R61aR156y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fbass9.ogghR6tgoR2i7222R3R63R5R157R61aR156R157hgoR2i28421R3R59R5y45:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fkick.mp3R61aR158y45:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fkick.ogghR6tgoR2i14789R3R63R5R159R61aR158R159hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano1.mp3R61aR160y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano1.ogghR6tgoR2i7901R3R63R5R161R61aR160R161hgoR2i2089R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano10.mp3R61aR162y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano10.ogghR6tgoR2i8037R3R63R5R163R61aR162R163hgoR2i4597R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano11.mp3R61aR164y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano11.ogghR6tgoR2i8119R3R63R5R165R61aR164R165hgoR2i4597R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano12.mp3R61aR166y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano12.ogghR6tgoR2i8125R3R63R5R167R61aR166R167hgoR2i4179R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano13.mp3R61aR168y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano13.ogghR6tgoR2i6620R3R63R5R169R61aR168R169hgoR2i4597R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano14.mp3R61aR170y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano14.ogghR6tgoR2i8412R3R63R5R171R61aR170R171hgoR2i4179R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano15.mp3R61aR172y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano15.ogghR6tgoR2i7959R3R63R5R173R61aR172R173hgoR2i4179R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano16.mp3R61aR174y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano16.ogghR6tgoR2i8058R3R63R5R175R61aR174R175hgoR2i2507R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano17.mp3R61aR176y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano17.ogghR6tgoR2i8087R3R63R5R177R61aR176R177hgoR2i2507R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano18.mp3R61aR178y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano18.ogghR6tgoR2i8134R3R63R5R179R61aR178R179hgoR2i4179R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano19.mp3R61aR180y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano19.ogghR6tgoR2i8035R3R63R5R181R61aR180R181hgoR2i3343R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano2.mp3R61aR182y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano2.ogghR6tgoR2i8079R3R63R5R183R61aR182R183hgoR2i4597R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano20.mp3R61aR184y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano20.ogghR6tgoR2i8212R3R63R5R185R61aR184R185hgoR2i4179R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano21.mp3R61aR186y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano21.ogghR6tgoR2i8023R3R63R5R187R61aR186R187hgoR2i2507R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano22.mp3R61aR188y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano22.ogghR6tgoR2i8215R3R63R5R189R61aR188R189hgoR2i3761R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano23.mp3R61aR190y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano23.ogghR6tgoR2i8331R3R63R5R191R61aR190R191hgoR2i4597R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano24.mp3R61aR192y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano24.ogghR6tgoR2i8242R3R63R5R193R61aR192R193hgoR2i5015R3R59R5y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano25.mp3R61aR194y48:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano25.ogghR6tgoR2i8893R3R63R5R195R61aR194R195hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano3.mp3R61aR196y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano3.ogghR6tgoR2i7884R3R63R5R197R61aR196R197hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano4.mp3R61aR198y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano4.ogghR6tgoR2i7932R3R63R5R199R61aR198R199hgoR2i4597R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano5.mp3R61aR200y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano5.ogghR6tgoR2i8217R3R63R5R201R61aR200R201hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano6.mp3R61aR202y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano6.ogghR6tgoR2i7960R3R63R5R203R61aR202R203hgoR2i3761R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano7.mp3R61aR204y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano7.ogghR6tgoR2i7903R3R63R5R205R61aR204R205hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano8.mp3R61aR206y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano8.ogghR6tgoR2i7980R3R63R5R207R61aR206R207hgoR2i4179R3R59R5y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano9.mp3R61aR208y47:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fpiano9.ogghR6tgoR2i7905R3R63R5R209R61aR208R209hgoR2i28839R3R59R5y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fsnare.mp3R61aR210y46:assets%2Fsfx%2Fblocks%2Fnoteblocks%2Fsnare.ogghR6tgoR2i8569R3R63R5R211R61aR210R211hgoR2i2089R3R59R5y31:assets%2Fsfx%2Fblocks%2Foff.mp3R61aR212y31:assets%2Fsfx%2Fblocks%2Foff.ogghR6tgoR2i6929R3R63R5R213R61aR212R213hgoR2i2507R3R59R5y30:assets%2Fsfx%2Fblocks%2Fon.mp3R61aR214y30:assets%2Fsfx%2Fblocks%2Fon.ogghR6tgoR2i6654R3R63R5R215R61aR214R215hgoR2i4597R3R59R5y36:assets%2Fsfx%2Fblocks%2Fpistonin.mp3R61aR216y36:assets%2Fsfx%2Fblocks%2Fpistonin.ogghR6tgoR2i8757R3R63R5R217R61aR216R217hgoR2i4597R3R59R5y37:assets%2Fsfx%2Fblocks%2Fpistonout.mp3R61aR218y37:assets%2Fsfx%2Fblocks%2Fpistonout.ogghR6tgoR2i8179R3R63R5R219R61aR218R219hgoR2i13374R3R59R5y34:assets%2Fsfx%2Fblocks%2Fsizzle.mp3R61aR220y34:assets%2Fsfx%2Fblocks%2Fsizzle.ogghR6tgoR2i14592R3R63R5R221R61aR220R221hgoR2i2507R3R59R5y42:assets%2Fsfx%2Fblocks%2Fslimeblockjump.mp3R61aR222y42:assets%2Fsfx%2Fblocks%2Fslimeblockjump.ogghR6tgoR2i7161R3R63R5R223R61aR222R223hgoR2i5851R3R59R5y42:assets%2Fsfx%2Fblocks%2Fslimeblockland.mp3R61aR224y42:assets%2Fsfx%2Fblocks%2Fslimeblockland.ogghR6tgoR2i10289R3R63R5R225R61aR224R225hgoR2i4597R3R59R5y33:assets%2Fsfx%2Fblocks%2Fsmush.mp3R61aR226y33:assets%2Fsfx%2Fblocks%2Fsmush.ogghR6tgoR2i14473R3R63R5R227R61aR226R227hgoR2i17136R3R59R5y34:assets%2Fsfx%2Fblocks%2Fsplash.mp3R61aR228y34:assets%2Fsfx%2Fblocks%2Fsplash.ogghR6tgoR2i26751R3R63R5R229R61aR228R229hgoR2i5787R3R59R5y33:assets%2Fsfx%2Fblocks%2Fstone.mp3R61aR230y33:assets%2Fsfx%2Fblocks%2Fstone.ogghR6tgoR2i12104R3R63R5R231R61aR230R231hgoR2i39288R3R59R5y33:assets%2Fsfx%2Fblocks%2Fwater.mp3R61aR232y33:assets%2Fsfx%2Fblocks%2Fwater.ogghR6tgoR2i87045R3R63R5R233R61aR232R233hgoR2i7941R3R59R5y32:assets%2Fsfx%2Fblocks%2Fwood.mp3R61aR234y32:assets%2Fsfx%2Fblocks%2Fwood.ogghR6tgoR2i18312R3R63R5R235R61aR234R235hgoR2i2925R3R59R5y38:assets%2Fsfx%2Fentities%2Fballoon1.mp3R61aR236y38:assets%2Fsfx%2Fentities%2Fballoon1.ogghR6tgoR2i7419R3R63R5R237R61aR236R237hgoR2i3761R3R59R5y38:assets%2Fsfx%2Fentities%2Fballoon2.mp3R61aR238y38:assets%2Fsfx%2Fentities%2Fballoon2.ogghR6tgoR2i7749R3R63R5R239R61aR238R239hgoR2i3761R3R59R5y38:assets%2Fsfx%2Fentities%2Fballoon3.mp3R61aR240y38:assets%2Fsfx%2Fentities%2Fballoon3.ogghR6tgoR2i7888R3R63R5R241R61aR240R241hgoR2i3761R3R59R5y38:assets%2Fsfx%2Fentities%2Fballoon4.mp3R61aR242y38:assets%2Fsfx%2Fentities%2Fballoon4.ogghR6tgoR2i7829R3R63R5R243R61aR242R243hgoR2i10449R3R59R5y35:assets%2Fsfx%2Fentities%2Fhtele.mp3R61aR244y35:assets%2Fsfx%2Fentities%2Fhtele.ogghR6tgoR2i13786R3R63R5R245R61aR244R245hgoR2i1565R3R59R5y33:assets%2Fsfx%2Fentities%2Fpop.mp3R61aR246y33:assets%2Fsfx%2Fentities%2Fpop.ogghR6tgoR2i4838R3R63R5R247R61aR246R247hgoR2i4597R3R59R5y43:assets%2Fsfx%2Fentities%2Fshurikenthrow.mp3R61aR248y43:assets%2Fsfx%2Fentities%2Fshurikenthrow.ogghR6tgoR2i11311R3R63R5R249R61aR248R249hgoR2i25913R3R59R5y40:assets%2Fsfx%2Fentities%2Fteleporter.mp3R61aR250y40:assets%2Fsfx%2Fentities%2Fteleporter.ogghR6tgoR2i26815R3R63R5R251R61aR250R251hgoR2i4597R3R59R5y38:assets%2Fsfx%2Fentities%2Fthrowsfx.mp3R61aR252y38:assets%2Fsfx%2Fentities%2Fthrowsfx.ogghR6tgoR2i9374R3R63R5R253R61aR252R253hgoR2i9613R3R59R5y35:assets%2Fsfx%2Fentities%2Ftrrrr.mp3R61aR254y35:assets%2Fsfx%2Fentities%2Ftrrrr.ogghR6tgoR2i14194R3R63R5R255R61aR254R255hgoR2i2925R3R59R5y33:assets%2Fsfx%2Fitems%2Fbowsfx.mp3R61aR256y33:assets%2Fsfx%2Fitems%2Fbowsfx.ogghR6tgoR2i10394R3R63R5R257R61aR256R257hgoR2i7523R3R59R5y36:assets%2Fsfx%2Fitems%2Ffirethrow.mp3R61aR258y36:assets%2Fsfx%2Fitems%2Ffirethrow.ogghR6tgoR2i10515R3R63R5R259R61aR258R259hgoR2i12120R3R59R5y30:assets%2Fsfx%2Fmisc%2Fboom.mp3R61aR260y30:assets%2Fsfx%2Fmisc%2Fboom.ogghR6tgoR2i14739R3R63R5R261R61aR260R261hgoR2i22987R3R59R5y30:assets%2Fsfx%2Fmisc%2Ffuse.mp3R61aR262y30:assets%2Fsfx%2Fmisc%2Ffuse.ogghR6tgoR2i28116R3R63R5R263R61aR262R263hgoR2i31346R3R59R5y33:assets%2Fsfx%2Fmisc%2Flevelup.mp3R61aR264y33:assets%2Fsfx%2Fmisc%2Flevelup.ogghR6tgoR2i30473R3R63R5R265R61aR264R265hgoR2i31346R3R59R5y30:assets%2Fsfx%2Fmisc%2Forb1.mp3R61aR266y30:assets%2Fsfx%2Fmisc%2Forb1.ogghR6tgoR2i15163R3R63R5R267R61aR266R267hgoR2i31346R3R59R5y30:assets%2Fsfx%2Fmisc%2Forb2.mp3R61aR268y30:assets%2Fsfx%2Fmisc%2Forb2.ogghR6tgoR2i16545R3R63R5R269R61aR268R269hgoR2i31346R3R59R5y30:assets%2Fsfx%2Fmisc%2Forb3.mp3R61aR270y30:assets%2Fsfx%2Fmisc%2Forb3.ogghR6tgoR2i16368R3R63R5R271R61aR270R271hgoR2i31346R3R59R5y30:assets%2Fsfx%2Fmisc%2Forb4.mp3R61aR272y30:assets%2Fsfx%2Fmisc%2Forb4.ogghR6tgoR2i15889R3R63R5R273R61aR272R273hgoR2i31346R3R59R5y30:assets%2Fsfx%2Fmisc%2Forb5.mp3R61aR274y30:assets%2Fsfx%2Fmisc%2Forb5.ogghR6tgoR2i16800R3R63R5R275R61aR274R275hgoR2i2507R3R59R5y29:assets%2Fsfx%2Fmisc%2Ftp1.mp3R61aR276y29:assets%2Fsfx%2Fmisc%2Ftp1.ogghR6tgoR2i6574R3R63R5R277R61aR276R277hgoR2i3343R3R59R5y29:assets%2Fsfx%2Fmisc%2Ftp2.mp3R61aR278y29:assets%2Fsfx%2Fmisc%2Ftp2.ogghR6tgoR2i7623R3R63R5R279R61aR278R279hgoR2i12538R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt1.mp3R61aR280y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt1.ogghR6tgoR2i13035R3R63R5R281R61aR280R281hgoR2i12538R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt2.mp3R61aR282y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt2.ogghR6tgoR2i12992R3R63R5R283R61aR282R283hgoR2i12120R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt3.mp3R61aR284y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt3.ogghR6tgoR2i13094R3R63R5R285R61aR284R285hgoR2i12538R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt4.mp3R61aR286y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbathurt4.ogghR6tgoR2i13432R3R63R5R287R61aR286R287hgoR2i17554R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle1.mp3R61aR288y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle1.ogghR6tgoR2i16504R3R63R5R289R61aR288R289hgoR2i14628R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle2.mp3R61aR290y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle2.ogghR6tgoR2i14745R3R63R5R291R61aR290R291hgoR2i5851R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle3.mp3R61aR292y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle3.ogghR6tgoR2i16234R3R63R5R293R61aR292R293hgoR2i13792R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle4.mp3R61aR294y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle4.ogghR6tgoR2i15313R3R63R5R295R61aR294R295hgoR2i15882R3R59R5y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle5.mp3R61aR296y40:assets%2Fsfx%2Fmobs%2Fbat%2Fbatidle5.ogghR6tgoR2i16140R3R63R5R297R61aR296R297hgoR2i40124R3R59R5y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze1.mp3R61aR298y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze1.ogghR6tgoR2i34415R3R63R5R299R61aR298R299hgoR2i45557R3R59R5y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze2.mp3R61aR300y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze2.ogghR6tgoR2i38780R3R63R5R301R61aR300R301hgoR2i17554R3R59R5y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze3.mp3R61aR302y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze3.ogghR6tgoR2i17592R3R63R5R303R61aR302R303hgoR2i36362R3R59R5y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze4.mp3R61aR304y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze4.ogghR6tgoR2i31864R3R63R5R305R61aR304R305hgoR2i34690R3R59R5y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze5.mp3R61aR306y40:assets%2Fsfx%2Fmobs%2Fblaze%2Fblaze5.ogghR6tgoR2i30102R3R63R5R307R61aR306R307hgoR2i34272R3R59R5y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazedeath.mp3R61aR308y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazedeath.ogghR6tgoR2i30429R3R63R5R309R61aR308R309hgoR2i9613R3R59R5y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt1.mp3R61aR310y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt1.ogghR6tgoR2i12518R3R63R5R311R61aR310R311hgoR2i9195R3R59R5y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt2.mp3R61aR312y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt2.ogghR6tgoR2i12000R3R63R5R313R61aR312R313hgoR2i9613R3R59R5y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt3.mp3R61aR314y44:assets%2Fsfx%2Fmobs%2Fblaze%2Fblazehurt3.ogghR6tgoR2i12552R3R63R5R315R61aR314R315hgoR2i9195R3R59R5y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken1.mp3R61aR316y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken1.ogghR6tgoR2i12640R3R63R5R317R61aR316R317hgoR2i7523R3R59R5y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken2.mp3R61aR318y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken2.ogghR6tgoR2i11163R3R63R5R319R61aR318R319hgoR2i5433R3R59R5y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken3.mp3R61aR320y44:assets%2Fsfx%2Fmobs%2Fchicken%2Fchicken3.ogghR6tgoR2i11348R3R63R5R321R61aR320R321hgoR2i2507R3R59R5y42:assets%2Fsfx%2Fmobs%2Fchicken%2Flayegg.mp3R61aR322y42:assets%2Fsfx%2Fmobs%2Fchicken%2Flayegg.ogghR6tgoR2i6759R3R63R5R323R61aR322R323hgoR2i21315R3R59R5y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow1.mp3R61aR324y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow1.ogghR6tgoR2i13949R3R63R5R325R61aR324R325hgoR2i28003R3R59R5y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow2.mp3R61aR326y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow2.ogghR6tgoR2i16617R3R63R5R327R61aR326R327hgoR2i22569R3R59R5y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow3.mp3R61aR328y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow3.ogghR6tgoR2i14120R3R63R5R329R61aR328R329hgoR2i20897R3R59R5y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow4.mp3R61aR330y36:assets%2Fsfx%2Fmobs%2Fcow%2Fcow4.ogghR6tgoR2i19292R3R63R5R331R61aR330R331hgoR2i5851R3R59R5y40:assets%2Fsfx%2Fmobs%2Fcow%2Fcowhurt1.mp3R61aR332y40:assets%2Fsfx%2Fmobs%2Fcow%2Fcowhurt1.ogghR6tgoR2i6999R3R63R5R333R61aR332R333hgoR2i9195R3R59R5y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper1.mp3R61aR334y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper1.ogghR6tgoR2i11971R3R63R5R335R61aR334R335hgoR2i7105R3R59R5y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper2.mp3R61aR336y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper2.ogghR6tgoR2i9528R3R63R5R337R61aR336R337hgoR2i5015R3R59R5y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper3.mp3R61aR338y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper3.ogghR6tgoR2i9077R3R63R5R339R61aR338R339hgoR2i10031R3R59R5y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper4.mp3R61aR340y44:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeper4.ogghR6tgoR2i12363R3R63R5R341R61aR340R341hgoR2i2089R3R59R5y48:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeperdeath.mp3R61aR342y48:assets%2Fsfx%2Fmobs%2Fcreeper%2Fcreeperdeath.ogghR6tgoR2i8384R3R63R5R343R61aR342R343hgoR2i6269R3R59R5y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle1.mp3R61aR344y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle1.ogghR6tgoR2i10582R3R63R5R345R61aR344R345hgoR2i9195R3R59R5y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle2.mp3R61aR346y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle2.ogghR6tgoR2i13025R3R63R5R347R61aR346R347hgoR2i8359R3R59R5y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle3.mp3R61aR348y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle3.ogghR6tgoR2i12605R3R63R5R349R61aR348R349hgoR2i7941R3R59R5y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle4.mp3R61aR350y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle4.ogghR6tgoR2i12809R3R63R5R351R61aR350R351hgoR2i5015R3R59R5y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle5.mp3R61aR352y50:assets%2Fsfx%2Fmobs%2Fenderman%2Fendermanidle5.ogghR6tgoR2i9637R3R63R5R353R61aR352R353hgoR2i7105R3R59R5y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye1.mp3R61aR354y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye1.ogghR6tgoR2i11922R3R63R5R355R61aR354R355hgoR2i7105R3R59R5y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye2.mp3R61aR356y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye2.ogghR6tgoR2i10730R3R63R5R357R61aR356R357hgoR2i10449R3R59R5y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye3.mp3R61aR358y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye3.ogghR6tgoR2i13231R3R63R5R359R61aR358R359hgoR2i5433R3R59R5y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye4.mp3R61aR360y48:assets%2Fsfx%2Fmobs%2Fnethereye%2Fnethereye4.ogghR6tgoR2i9810R3R63R5R361R61aR360R361hgoR2i4597R3R59R5y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig1.mp3R61aR362y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig1.ogghR6tgoR2i19090R3R63R5R363R61aR362R363hgoR2i4179R3R59R5y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig2.mp3R61aR364y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig2.ogghR6tgoR2i16744R3R63R5R365R61aR364R365hgoR2i7105R3R59R5y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig3.mp3R61aR366y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig3.ogghR6tgoR2i24834R3R63R5R367R61aR366R367hgoR2i5433R3R59R5y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig4.mp3R61aR368y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig4.ogghR6tgoR2i20545R3R63R5R369R61aR368R369hgoR2i3761R3R59R5y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig5.mp3R61aR370y36:assets%2Fsfx%2Fmobs%2Fpig%2Fpig5.ogghR6tgoR2i15764R3R63R5R371R61aR370R371hgoR2i11702R3R59R5y41:assets%2Fsfx%2Fmobs%2Fplayer%2Fdrink1.mp3R61aR372y41:assets%2Fsfx%2Fmobs%2Fplayer%2Fdrink1.ogghR6tgoR2i17308R3R63R5R373R61aR372R373hgoR2i11702R3R59R5y41:assets%2Fsfx%2Fmobs%2Fplayer%2Fdrink2.mp3R61aR374y41:assets%2Fsfx%2Fmobs%2Fplayer%2Fdrink2.ogghR6tgoR2i18317R3R63R5R375R61aR374R375hgoR2i5851R3R59R5y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat1.mp3R61aR376y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat1.ogghR6tgoR2i10335R3R63R5R377R61aR376R377hgoR2i5851R3R59R5y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat2.mp3R61aR378y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat2.ogghR6tgoR2i11627R3R63R5R379R61aR378R379hgoR2i6687R3R59R5y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat3.mp3R61aR380y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat3.ogghR6tgoR2i13747R3R63R5R381R61aR380R381hgoR2i6269R3R59R5y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat4.mp3R61aR382y39:assets%2Fsfx%2Fmobs%2Fplayer%2Feat4.ogghR6tgoR2i8204R3R63R5R383R61aR382R383hgoR2i5851R3R59R5y40:assets%2Fsfx%2Fmobs%2Fplayer%2Fouch1.mp3R61aR384y40:assets%2Fsfx%2Fmobs%2Fplayer%2Fouch1.ogghR6tgoR2i9200R3R63R5R385R61aR384R385hgoR2i13374R3R59R5y40:assets%2Fsfx%2Fmobs%2Fplayer%2Fouch2.mp3R61aR386y40:assets%2Fsfx%2Fmobs%2Fplayer%2Fouch2.ogghR6tgoR2i14411R3R63R5R387R61aR386R387hgoR2i4597R3R59R5y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt1.mp3R61aR388y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt1.ogghR6tgoR2i9075R3R63R5R389R61aR388R389hgoR2i4179R3R59R5y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt2.mp3R61aR390y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt2.ogghR6tgoR2i8905R3R63R5R391R61aR390R391hgoR2i5015R3R59R5y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt3.mp3R61aR392y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt3.ogghR6tgoR2i8763R3R63R5R393R61aR392R393hgoR2i5433R3R59R5y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt4.mp3R61aR394y46:assets%2Fsfx%2Fmobs%2Frabbit%2Frabbithurt4.ogghR6tgoR2i9473R3R63R5R395R61aR394R395hgoR2i16300R3R59R5y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep1.mp3R61aR396y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep1.ogghR6tgoR2i36212R3R63R5R397R61aR396R397hgoR2i12538R3R59R5y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep2.mp3R61aR398y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep2.ogghR6tgoR2i22534R3R63R5R399R61aR398R399hgoR2i15464R3R59R5y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep3.mp3R61aR400y40:assets%2Fsfx%2Fmobs%2Fsheep%2Fsheep3.ogghR6tgoR2i25981R3R63R5R401R61aR400R401hgoR2i10031R3R59R5y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton1.mp3R61aR402y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton1.ogghR6tgoR2i14416R3R63R5R403R61aR402R403hgoR2i6687R3R59R5y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton2.mp3R61aR404y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton2.ogghR6tgoR2i11195R3R63R5R405R61aR404R405hgoR2i6687R3R59R5y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton3.mp3R61aR406y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton3.ogghR6tgoR2i10820R3R63R5R407R61aR406R407hgoR2i9613R3R59R5y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton4.mp3R61aR408y46:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeleton4.ogghR6tgoR2i13434R3R63R5R409R61aR408R409hgoR2i5851R3R59R5y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletondeath.mp3R61aR410y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletondeath.ogghR6tgoR2i9634R3R63R5R411R61aR410R411hgoR2i4597R3R59R5y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt1.mp3R61aR412y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt1.ogghR6tgoR2i8724R3R63R5R413R61aR412R413hgoR2i4597R3R59R5y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt2.mp3R61aR414y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt2.ogghR6tgoR2i8599R3R63R5R415R61aR414R415hgoR2i5433R3R59R5y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt3.mp3R61aR416y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt3.ogghR6tgoR2i9346R3R63R5R417R61aR416R417hgoR2i12538R3R59R5y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt4.mp3R61aR418y50:assets%2Fsfx%2Fmobs%2Fskeleton%2Fskeletonhurt4.ogghR6tgoR2i14797R3R63R5R419R61aR418R419hgoR2i5851R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimejump1.mp3R61aR420y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimejump1.ogghR6tgoR2i9928R3R63R5R421R61aR420R421hgoR2i3343R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimejump2.mp3R61aR422y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimejump2.ogghR6tgoR2i8893R3R63R5R423R61aR422R423hgoR2i5851R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland1.mp3R61aR424y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland1.ogghR6tgoR2i10167R3R63R5R425R61aR424R425hgoR2i8777R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland2.mp3R61aR426y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland2.ogghR6tgoR2i13761R3R63R5R427R61aR426R427hgoR2i7105R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland3.mp3R61aR428y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland3.ogghR6tgoR2i14438R3R63R5R429R61aR428R429hgoR2i6687R3R59R5y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland4.mp3R61aR430y44:assets%2Fsfx%2Fmobs%2Fslime%2Fslimeland4.ogghR6tgoR2i11917R3R63R5R431R61aR430R431hgoR2i4179R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt1.mp3R61aR432y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt1.ogghR6tgoR2i11151R3R63R5R433R61aR432R433hgoR2i4179R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt2.mp3R61aR434y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt2.ogghR6tgoR2i10493R3R63R5R435R61aR434R435hgoR2i5433R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt3.mp3R61aR436y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt3.ogghR6tgoR2i10638R3R63R5R437R61aR436R437hgoR2i3761R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt4.mp3R61aR438y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt4.ogghR6tgoR2i8188R3R63R5R439R61aR438R439hgoR2i4179R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt5.mp3R61aR440y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt5.ogghR6tgoR2i10593R3R63R5R441R61aR440R441hgoR2i5851R3R59R5y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt6.mp3R61aR442y52:assets%2Fsfx%2Fmobs%2Fsnowgolem%2Fsnowgolemhurt6.ogghR6tgoR2i10792R3R63R5R443R61aR442R443hgoR2i2507R3R59R5y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider1.mp3R61aR444y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider1.ogghR6tgoR2i9547R3R63R5R445R61aR444R445hgoR2i5015R3R59R5y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider2.mp3R61aR446y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider2.ogghR6tgoR2i9583R3R63R5R447R61aR446R447hgoR2i13792R3R59R5y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider3.mp3R61aR448y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider3.ogghR6tgoR2i16473R3R63R5R449R61aR448R449hgoR2i10449R3R59R5y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider4.mp3R61aR450y42:assets%2Fsfx%2Fmobs%2Fspider%2Fspider4.ogghR6tgoR2i13533R3R63R5R451R61aR450R451hgoR2i17554R3R59R5y46:assets%2Fsfx%2Fmobs%2Fspider%2Fspiderdeath.mp3R61aR452y46:assets%2Fsfx%2Fmobs%2Fspider%2Fspiderdeath.ogghR6tgoR2i18109R3R63R5R453R61aR452R453hgoR2i7523R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark1.mp3R61aR454y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark1.ogghR6tgoR2i9540R3R63R5R455R61aR454R455hgoR2i6269R3R59R5y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark10.mp3R61aR456y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark10.ogghR6tgoR2i12864R3R63R5R457R61aR456R457hgoR2i7523R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark2.mp3R61aR458y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark2.ogghR6tgoR2i14452R3R63R5R459R61aR458R459hgoR2i6687R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark3.mp3R61aR460y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark3.ogghR6tgoR2i14013R3R63R5R461R61aR460R461hgoR2i6269R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark4.mp3R61aR462y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark4.ogghR6tgoR2i11703R3R63R5R463R61aR462R463hgoR2i4597R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark5.mp3R61aR464y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark5.ogghR6tgoR2i12245R3R63R5R465R61aR464R465hgoR2i7105R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark6.mp3R61aR466y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark6.ogghR6tgoR2i12677R3R63R5R467R61aR466R467hgoR2i6687R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark7.mp3R61aR468y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark7.ogghR6tgoR2i13470R3R63R5R469R61aR468R469hgoR2i7523R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark8.mp3R61aR470y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark8.ogghR6tgoR2i14787R3R63R5R471R61aR470R471hgoR2i5851R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark9.mp3R61aR472y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fbark9.ogghR6tgoR2i11406R3R63R5R473R61aR472R473hgoR2i18808R3R59R5y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl1.mp3R61aR474y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl1.ogghR6tgoR2i19613R3R63R5R475R61aR474R475hgoR2i23823R3R59R5y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl2.mp3R61aR476y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl2.ogghR6tgoR2i22937R3R63R5R477R61aR476R477hgoR2i18808R3R59R5y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl3.mp3R61aR478y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl3.ogghR6tgoR2i21270R3R63R5R479R61aR478R479hgoR2i24241R3R59R5y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl4.mp3R61aR480y39:assets%2Fsfx%2Fmobs%2Fwolf%2Fgrowl4.ogghR6tgoR2i23980R3R63R5R481R61aR480R481hgoR2i8359R3R59R5y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fwhine.mp3R61aR482y38:assets%2Fsfx%2Fmobs%2Fwolf%2Fwhine.ogghR6tgoR2i12573R3R63R5R483R61aR482R483hgoR2i14628R3R59R5y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie1.mp3R61aR484y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie1.ogghR6tgoR2i15745R3R63R5R485R61aR484R485hgoR2i17136R3R59R5y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie2.mp3R61aR486y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie2.ogghR6tgoR2i18480R3R63R5R487R61aR486R487hgoR2i9195R3R59R5y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie3.mp3R61aR488y42:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombie3.ogghR6tgoR2i11318R3R63R5R489R61aR488R489hgoR2i12120R3R59R5y44:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiedie.mp3R61aR490y44:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiedie.ogghR6tgoR2i14714R3R63R5R491R61aR490R491hgoR2i6687R3R59R5y46:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiehurt1.mp3R61aR492y46:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiehurt1.ogghR6tgoR2i9602R3R63R5R493R61aR492R493hgoR2i3761R3R59R5y46:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiehurt2.mp3R61aR494y46:assets%2Fsfx%2Fmobs%2Fzombie%2Fzombiehurt2.ogghR6tgoR2i7947R3R63R5R495R61aR494R495hgoR2i295497R3R59R5y43:assets%2Fsfx%2Fmusic%2Fenderdragondeath.mp3R61aR496y43:assets%2Fsfx%2Fmusic%2Fenderdragondeath.ogghR6tgoR2i630698R3R63R5R497R61aR496R497hgoR2i1179480R3R59R5y36:assets%2Fsfx%2Fmusic%2Fmenumusic.mp3R61aR498y36:assets%2Fsfx%2Fmusic%2Fmenumusic.ogghR6tgoR2i1045022R3R63R5R499R61aR498R499hgoR2i1382191R3R59R5y32:assets%2Fsfx%2Fmusic%2Fsong1.mp3R61aR500y32:assets%2Fsfx%2Fmusic%2Fsong1.ogghR6tgoR2i1030604R3R63R5R501R61aR500R501hgoR2i824633R3R59R5y32:assets%2Fsfx%2Fmusic%2Fsong2.mp3R61aR502y32:assets%2Fsfx%2Fmusic%2Fsong2.ogghR6tgoR2i599031R3R63R5R503R61aR502R503hgoR2i877296R3R59R5y32:assets%2Fsfx%2Fmusic%2Fsong3.mp3R61aR504y32:assets%2Fsfx%2Fmusic%2Fsong3.ogghR6tgoR2i667805R3R63R5R505R61aR504R505hgoR2i793286R3R59R5y32:assets%2Fsfx%2Fmusic%2Fsong4.mp3R61aR506y32:assets%2Fsfx%2Fmusic%2Fsong4.ogghR6tgoR2i626236R3R63R5R507R61aR506R507hgoR2i945005R3R59R5y32:assets%2Fsfx%2Fmusic%2Fsong5.mp3R61aR508y32:assets%2Fsfx%2Fmusic%2Fsong5.ogghR6tgoR2i803240R3R63R5R509R61aR508R509hgoR2i5223R3R59R5y27:assets%2Fsfx%2Fui%2Fhit.mp3R61aR510y27:assets%2Fsfx%2Fui%2Fhit.ogghR6tgoR2i5783R3R63R5R511R61aR510R511hgoR2i3133R3R59R5y32:assets%2Fsfx%2Fui%2Frollover.mp3R61aR512y32:assets%2Fsfx%2Fui%2Frollover.ogghR6tgoR2i5457R3R63R5R513R61aR512R513hgoR2i2347R3R59R5y28:assets%2Fsfx%2Fui%2Ftick.mp3R61aR514y28:assets%2Fsfx%2Fui%2Ftick.ogghR6tgoR2i5494R3R63R5R515R61aR514R515hgoR2i29675R3R59R5y42:assets%2Fsfx%2Fweather%2Fclosethunder1.mp3R61aR516y42:assets%2Fsfx%2Fweather%2Fclosethunder1.ogghR6tgoR2i44589R3R63R5R517R61aR516R517hgoR2i77322R3R59R5y42:assets%2Fsfx%2Fweather%2Fclosethunder2.mp3R61aR518y42:assets%2Fsfx%2Fweather%2Fclosethunder2.ogghR6tgoR2i115666R3R63R5R519R61aR518R519hgoR2i97384R3R59R5y42:assets%2Fsfx%2Fweather%2Fclosethunder3.mp3R61aR520y42:assets%2Fsfx%2Fweather%2Fclosethunder3.ogghR6tgoR2i145791R3R63R5R521R61aR520R521hgoR2i55588R3R59R5y42:assets%2Fsfx%2Fweather%2Fclosethunder4.mp3R61aR522y42:assets%2Fsfx%2Fweather%2Fclosethunder4.ogghR6tgoR2i82241R3R63R5R523R61aR522R523hgoR2i73142R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder1.mp3R61aR524y44:assets%2Fsfx%2Fweather%2Fdistantthunder1.ogghR6tgoR2i55319R3R63R5R525R61aR524R525hgoR2i142524R3R59R5y45:assets%2Fsfx%2Fweather%2Fdistantthunder10.mp3R61aR526y45:assets%2Fsfx%2Fweather%2Fdistantthunder10.ogghR6tgoR2i106241R3R63R5R527R61aR526R527hgoR2i160078R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder2.mp3R61aR528y44:assets%2Fsfx%2Fweather%2Fdistantthunder2.ogghR6tgoR2i107523R3R63R5R529R61aR528R529hgoR2i182648R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder3.mp3R61aR530y44:assets%2Fsfx%2Fweather%2Fdistantthunder3.ogghR6tgoR2i122253R3R63R5R531R61aR530R531hgoR2i87353R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder4.mp3R61aR532y44:assets%2Fsfx%2Fweather%2Fdistantthunder4.ogghR6tgoR2i65263R3R63R5R533R61aR532R533hgoR2i51409R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder5.mp3R61aR534y44:assets%2Fsfx%2Fweather%2Fdistantthunder5.ogghR6tgoR2i41060R3R63R5R535R61aR534R535hgoR2i96130R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder6.mp3R61aR536y44:assets%2Fsfx%2Fweather%2Fdistantthunder6.ogghR6tgoR2i69260R3R63R5R537R61aR536R537hgoR2i58096R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder7.mp3R61aR538y44:assets%2Fsfx%2Fweather%2Fdistantthunder7.ogghR6tgoR2i47967R3R63R5R539R61aR538R539hgoR2i127059R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder8.mp3R61aR540y44:assets%2Fsfx%2Fweather%2Fdistantthunder8.ogghR6tgoR2i93132R3R63R5R541R61aR540R541hgoR2i144195R3R59R5y44:assets%2Fsfx%2Fweather%2Fdistantthunder9.mp3R61aR542y44:assets%2Fsfx%2Fweather%2Fdistantthunder9.ogghR6tgoR2i109206R3R63R5R543R61aR542R543hgoR2i77322R3R59R5y34:assets%2Fsfx%2Fzanzlanz-splash.mp3R61aR544y34:assets%2Fsfx%2Fzanzlanz-splash.ogghR6tgoR2i169226R3R63R5R545R61aR544R545hgh","rootPath":null,"version":2,"libraryArgs":[],"libraryType":null}',
             nb.rootPath
           )
         );
         qa.registerLibrary("default", b);
         b = qa.getLibrary("default");
         null != b ? nb.preloadLibraries.push(b) : nb.preloadLibraryNames.push("default");
       };
       Math.__name__ = "Math";
       var ma = function (b, a, c, d, f) {
         null == d && (d = 4);
         this.useCamera = !1;
         this.transform = new T();
         this.ignoreBuffers = new e();
         this.attribs = new e();
         this.uniforms = new e();
         this.textureBuffers = new e();
         this.forceNoCulling = !1;
         this.customBlendFunc = null;
         this.isTransparent = !1;
         this.layer = 0;
         this.blendMode = La.NORMAL;
         this.visible = !0;
         this.tags = b;
         this.shaderProgram = c;
         this.primitiveMode = d;
         this.mesh = a;
         this.vboIndex = p.gl.createBuffer();
         this.camera = f;
       };
       r["lemongine.Entity"] = ma;
       ma.__name__ = "lemongine.Entity";
       ma.entitySortFunction = function (b, a) {
         return b.isTransparent != a.isTransparent
           ? (b.isTransparent ? 1 : 0) - (a.isTransparent ? 1 : 0)
           : b.layer != a.layer
           ? b.layer - a.layer
           : b.shaderProgram != a.shaderProgram
           ? b.shaderProgram.id > a.shaderProgram.id
             ? 1
             : -1
           : 0;
       };
       ma.prototype = {
         render: function (b, a, c, d) {
           null == d && (d = !0);
           null == c && (c = !0);
           null == a && (a = !0);
           a && this.shaderProgram.useProgram();
           var f = this.attribs;
           a = this.shaderProgram.getBuiltin("vertex");
           f.h[a] = this.mesh.vertices;
           if (this.mesh.hasUVs && this.shaderProgram.hasBuiltin("uv"))
             (f = this.attribs), (a = this.shaderProgram.getBuiltin("uv")), f.h[a] != this.mesh.uvs && ((f = this.attribs), (a = this.shaderProgram.getBuiltin("uv")), (f.h[a] = this.mesh.uvs));
           else if (((f = this.attribs), (a = this.shaderProgram.getBuiltin("uv")), Object.prototype.hasOwnProperty.call(f.h, a))) {
             f = this.attribs;
             a = this.shaderProgram.getBuiltin("uv");
             var e = f;
             Object.prototype.hasOwnProperty.call(e.h, a) && delete e.h[a];
           }
           this.mesh.hasNormals && this.shaderProgram.hasBuiltin("normal")
             ? ((f = this.attribs), (a = this.shaderProgram.getBuiltin("normal")), f.h[a] != this.mesh.normals && ((f = this.attribs), (a = this.shaderProgram.getBuiltin("normal")), (f.h[a] = this.mesh.normals)))
             : ((f = this.attribs),
               (a = this.shaderProgram.getBuiltin("normal")),
               Object.prototype.hasOwnProperty.call(f.h, a) && ((f = this.attribs), (a = this.shaderProgram.getBuiltin("normal")), (e = f), Object.prototype.hasOwnProperty.call(e.h, a) && delete e.h[a]));
           this.mesh.isIndexed
             ? this.attribs.h["~index"] != this.mesh.indices && (this.attribs.h["~index"] = this.mesh.indices)
             : Object.prototype.hasOwnProperty.call(this.attribs.h, "~index") && ((e = this.attribs), Object.prototype.hasOwnProperty.call(e.h, "~index") && delete e.h["~index"]);
           c
             ? ((c = this.useCamera && null != this.camera ? this.camera : b.camera),
               this.shaderProgram.updateProjectionMatrix(c),
               this.shaderProgram.hasBuiltin("viewMatrix") && this.shaderProgram.setUniform(this.shaderProgram.builtinBuffers.h.viewMatrix, c.getTransformValues(), "matrix4"))
             : (this.ignoreBuffer(this.shaderProgram.getBuiltin("vertex")),
               this.mesh.hasUVs && this.shaderProgram.hasBuiltin("uv") && this.ignoreBuffer(this.shaderProgram.getBuiltin("uv")),
               this.mesh.hasNormals && this.shaderProgram.hasBuiltin("normal") && this.ignoreBuffer(this.shaderProgram.getBuiltin("normal")),
               this.shaderProgram.hasBuiltin("viewMatrix") && this.ignoreBuffer(this.shaderProgram.getBuiltin("viewMatrix")));
           this.shaderProgram.hasBuiltin("modelMatrix") && this.shaderProgram.setUniform(this.shaderProgram.builtinBuffers.h.modelMatrix, this.transform.values, "matrix4");
           this.shaderProgram.hasBuiltin("time") && this.shaderProgram.setUniform(this.shaderProgram.builtinBuffers.h.time, new Date().getTime() / 1e3, "float");
           c = this.shaderProgram.uniforms.h;
           a = Object.keys(c);
           e = a.length;
           for (var k = 0; k < e; ) {
             var h = c[a[k++]];
             if (1 == this.ignoreBuffers.h[h.name]) this.ignoreBuffers.h[h.name] = !1;
             else {
               var g = h.value;
               if (Object.prototype.hasOwnProperty.call(this.uniforms.h, h.name)) g = this.uniforms.h[h.name].value;
               else if (!h.set) {
                 Ia.trace("Warning! '" + h.name + "' is a null uniform.", { fileName: "lemongine/Entity.hx", lineNumber: 138, className: "lemongine.Entity", methodName: "render" });
                 continue;
               }
               if ("matrix4" == h.type) (g = H.__cast(g, Array)), (f = null != g ? new Float32Array(g) : null), Qb.uniformMatrix4fv(p.gl, h.location, !1, f);
               else if ("float" == h.type) p.gl.uniform1f(h.location, H.__cast(g, pg));
               else if ("float2" == h.type) {
                 g = H.__cast(g, Array);
                 var m = null != g ? new Float32Array(g) : null;
                 ei.uniform2fv(p.gl, h.location, m);
               } else
                 "float3" == h.type
                   ? ((g = H.__cast(g, Array)), (g = null != g ? new Float32Array(g) : null), p.gl.uniform3fv(h.location, g))
                   : "float4" == h.type
                   ? ((g = H.__cast(g, Array)), (f = null != g ? new Float32Array(g) : null), p.gl.uniform4fv(h.location, f))
                   : Ia.trace("Warning! Uniform type '" + h.type + "' not defined (on '" + h.name + "').", { fileName: "lemongine/Entity.hx", lineNumber: 179, className: "lemongine.Entity", methodName: "render" });
             }
           }
           if (Object.prototype.hasOwnProperty.call(this.attribs.h, "~index") && ((g = this.attribs.h["~index"]), (this.ignoreBuffers.h["~index"] = !0), p.gl.bindBuffer(p.gl.ELEMENT_ARRAY_BUFFER, g.buffer), g.dirtyBuffer))
             if (((g.dirtyBuffer = !1), g.dirtyLength)) {
               m = p.gl;
               var A = p.gl.ELEMENT_ARRAY_BUFFER;
               g = g.getValue();
               f = null != g ? new Uint16Array(g) : null;
               Qb.bufferData(m, A, f, p.gl.STATIC_DRAW);
             } else if (-1 == g.dirtyStart) {
               f = p.gl;
               var n = p.gl.ELEMENT_ARRAY_BUFFER;
               g = g.getValue();
               m = null != g ? new Uint16Array(g) : null;
               f.bufferSubData(n, 0, m);
             } else (f = p.gl), (n = p.gl.ELEMENT_ARRAY_BUFFER), (A = 2 * g.dirtyStart), (g = g.getValue().slice(g.dirtyStart, g.dirtyEnd)), (m = null != g ? new Uint16Array(g) : null), f.bufferSubData(n, A, m);
           c = this.shaderProgram.attribs.h;
           a = Object.keys(c);
           e = a.length;
           for (k = 0; k < e; )
             (h = c[a[k++]]),
               1 == this.ignoreBuffers.h[h.name]
                 ? (this.ignoreBuffers.h[h.name] = !1)
                 : ((g = this.attribs.h[h.name]),
                   "float" == h.type
                     ? (p.gl.bindBuffer(p.gl.ARRAY_BUFFER, g.buffer),
                       g.dirtyBuffer &&
                         ((g.dirtyBuffer = !1),
                         g.dirtyLength
                           ? ((m = p.gl), (A = p.gl.ARRAY_BUFFER), (g = g.getValue()), (f = null != g ? new Float32Array(g) : null), Qb.bufferData(m, A, f, p.gl.STATIC_DRAW))
                           : -1 == g.dirtyStart
                           ? ((m = p.gl), (n = p.gl.ARRAY_BUFFER), (g = g.getValue()), (g = null != g ? new Float32Array(g) : null), m.bufferSubData(n, 0, g))
                           : ((f = p.gl), (m = p.gl.ARRAY_BUFFER), (A = 4 * g.dirtyStart), (g = g.getValue().slice(g.dirtyStart, g.dirtyEnd)), (g = null != g ? new Float32Array(g) : null), f.bufferSubData(m, A, g))),
                       p.gl.vertexAttribPointer(h.location, h.dataCount, p.gl.FLOAT, !1, 4 * h.dataStride, 4 * h.dataOffset),
                       p.gl.enableVertexAttribArray(h.location))
                     : "uint" == h.type
                     ? (p.gl.bindBuffer(p.gl.ARRAY_BUFFER, g.buffer),
                       g.dirtyBuffer &&
                         ((g.dirtyBuffer = !1),
                         g.dirtyLength
                           ? ((f = p.gl), (m = p.gl.ARRAY_BUFFER), (g = g.getValue()), (g = null != g ? new Uint16Array(g) : null), Qb.bufferData(f, m, g, p.gl.STATIC_DRAW))
                           : -1 == g.dirtyStart
                           ? ((f = p.gl), (m = p.gl.ARRAY_BUFFER), (g = g.getValue()), (g = null != g ? new Uint16Array(g) : null), f.bufferSubData(m, 0, g))
                           : ((f = p.gl), (m = p.gl.ARRAY_BUFFER), (A = 2 * g.dirtyStart), (g = g.getValue().slice(g.dirtyStart, g.dirtyEnd)), (g = null != g ? new Uint16Array(g) : null), f.bufferSubData(m, A, g))),
                       p.gl.vertexAttribPointer(h.location, h.dataCount, p.gl.FLOAT, !1, 2 * h.dataStride, 2 * h.dataOffset),
                       p.gl.enableVertexAttribArray(h.location))
                     : Ia.trace("Warning! Attrib type '" + h.type + "' not defined (on '" + h.name + "').", { fileName: "lemongine/Entity.hx", lineNumber: 327, className: "lemongine.Entity", methodName: "render" }));
           if (d)
             for (d = 0, c = Object.keys(this.shaderProgram.textureBuffers.h), a = c.length, e = 0; e < a; )
               (h = c[e++]),
                 (k = this.shaderProgram.textureBuffers.h[h]),
                 Object.prototype.hasOwnProperty.call(this.textureBuffers.h, h) && (k = this.textureBuffers.h[h]),
                 (k.dirtyRender = !1),
                 (h = p.gl.getUniformLocation(this.shaderProgram.program, h)),
                 p.gl.uniform1i(h, d),
                 p.gl.activeTexture(p.gl.TEXTURE0 + d),
                 k.isCubemap ? p.gl.bindTexture(p.gl.TEXTURE_CUBE_MAP, k.getTextureBuffer()) : p.gl.bindTexture(p.gl.TEXTURE_2D, k.getTextureBuffer()),
                 ++d;
           if (!(0 == this.mesh.numVertices() || (this.mesh.isIndexed && 0 == this.mesh.numIndices()))) {
             null != this.customBlendFunc
               ? p.gl.blendFuncSeparate(this.customBlendFunc[0], this.customBlendFunc[1], this.customBlendFunc[2], this.customBlendFunc[3])
               : this.blendMode == La.ADD
               ? p.gl.blendFunc(p.gl.ONE, p.gl.ONE)
               : this.isTransparent
               ? p.gl.blendFuncSeparate(p.gl.ONE, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE)
               : p.gl.blendFuncSeparate(p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ZERO);
             this.forceNoCulling && oa.setCulling(!1);
             this.mesh.isIndexed ? p.gl.drawElements(this.primitiveMode, this.mesh.numIndices(), p.gl.UNSIGNED_SHORT, 0) : p.gl.drawArrays(this.primitiveMode, 0, Math.floor(this.mesh.numVertices()));
             c = this.shaderProgram.attribs.h;
             a = Object.keys(c);
             e = a.length;
             for (k = 0; k < e; ) p.gl.disableVertexAttribArray(c[a[k++]].location);
             this.forceNoCulling && oa.setCulling(b.cull, b.isBackFace);
           }
         },
         setUniform: function (b, a) {
           null == a && (a = "");
           Object.prototype.hasOwnProperty.call(this.uniforms.h, b) ? (this.uniforms.h[b].value = a) : (this.uniforms.h[b] = { name: b, value: a });
           return this.shaderProgram.uniforms.h[b].location;
         },
         setAttrib: function (b, a, c, d, f) {
           null == f && (f = -1);
           null == d && (d = -1);
           null == c && (c = !0);
           if (!Object.prototype.hasOwnProperty.call(this.attribs.h, b)) {
             if (null == this.shaderProgram.attribs.h[b]) return -1;
             var e = this.attribs,
               k = new Fc(b, this.shaderProgram.attribs.h[b].type);
             e.h[b] = k;
           }
           this.attribs.h[b].setValue(a, c, d, f);
           return this.shaderProgram.attribs.h[b].location;
         },
         getAttrib: function (b) {
           return Object.prototype.hasOwnProperty.call(this.attribs.h, b) ? this.attribs.h[b] : null;
         },
         setTextureBuffer: function (b, a) {
           Object.prototype.hasOwnProperty.call(this.shaderProgram.textureBuffers.h, b) || (this.shaderProgram.textureBuffers.h[b] = a);
           (Object.prototype.hasOwnProperty.call(this.textureBuffers.h, b) && this.textureBuffers.h[b] == a) || ((this.textureBuffers.h[b] = a), (a.dirtyRender = !0));
         },
         ignoreBuffer: function (b) {
           this.ignoreBuffers.h[b] = !0;
         },
         __class__: ma,
       };
       var da = function (b, a, c, d) {
         this.arr = [];
         this.extraAttribsNamesAndDefaults = new e();
         this.useColorUniforms = !0;
         this.colorOffset = [0, 0, 0, 0];
         this.color = new F(-1);
         this.clip = [];
         this.hasCustomAttribValues = new e();
         this.hasCustomUVs = new Ma();
         this.unclearedQuadsMap = new Ma();
         this.unusedQuadsMap = new Ma();
         this.unusedQuads = [];
         this.size = this.numQuads = 0;
         a = La.NORMAL;
         if (null == c) c = Xb.getShader(a);
         else if (((this.useColorUniforms = !1), null != d)) {
           this.extraAttribsNamesAndDefaults = d;
           a = Object.keys(d.h);
           d = a.length;
           for (var f = 0; f < d; ) this.hasCustomAttribValues.h[a[f++]] = new Ma();
         }
         ma.call(this, [], new Ed([], null, []), c);
         this.set_texture(b);
         this.updateShaderAttribs();
       };
       r["lemongine.QuadPoolEntity"] = da;
       da.__name__ = "lemongine.QuadPoolEntity";
       da.__super__ = ma;
       da.prototype = v(ma.prototype, {
         updateShaderAttribs: function () {
           this.setColor(this.color);
           this.setColorOffset(this.colorOffset[0], this.colorOffset[1], this.colorOffset[2], this.colorOffset[3]);
           this.setAttrib("texClip", this.clip);
           for (var b = Object.keys(this.extraAttribsNamesAndDefaults.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             null == this.getAttrib(d) && this.setAttrib(d, []);
           }
           this.set_texture(this.texture);
         },
         setColor: function (b) {
           this.color = b;
           this.useColorUniforms && this.setUniform("color", [G.toFloat(b.r) / G.toFloat(255), G.toFloat(b.g) / G.toFloat(255), G.toFloat(b.b) / G.toFloat(255), G.toFloat(b.a) / G.toFloat(255)]);
         },
         setColorOffset: function (b, a, c, d) {
           null == d && (d = 0);
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.colorOffset = [b, a, c, d];
           this.useColorUniforms && this.setUniform("colorOffset", [b, a, c, d]);
         },
         set_texture: function (b) {
           null != b && ((this.texture = b), this.setTextureBuffer("texture", this.texture), this.setUniform("texSize", [this.texture.width, this.texture.height]));
           return b;
         },
         addQuad: function (b, a, c, d, f, e, k, g) {
           null == d && (d = !0);
           null == a && (a = new h());
           null == c && (c = null == this.texture ? new h() : new h(G.toFloat(this.texture.width), G.toFloat(this.texture.height)));
           if (d && 0 < this.unusedQuads.length) return this.updateQuad(this.nearestConsecutiveEmpty(1), b, a, c, f, e, k, g);
           null == e
             ? (null == b && (b = new M()),
               null != f
                 ? w.pushAll(this.mesh.getVertices(), [b.x, b.y, b.z, b.x, b.y + f.y, b.z, b.x + f.x, b.y, b.z, b.x + f.x, b.y, b.z, b.x, b.y + f.y, b.z, b.x + f.x, b.y + f.y, b.z])
                 : w.pushAll(this.mesh.getVertices(), [b.x, b.y, b.z, b.x, b.y + c.y, b.z, b.x + c.x, b.y, b.z, b.x + c.x, b.y, b.z, b.x, b.y + c.y, b.z, b.x + c.x, b.y + c.y, b.z]))
             : w.pushAll(this.mesh.getVertices(), e);
           null != k ? ((this.hasCustomUVs.h[this.size] = !0), w.pushAll(this.mesh.getUVs(), k)) : w.pushAll(this.mesh.getUVs(), da.defaultUVs);
           this.mesh.vertices.setDirty(!0);
           this.mesh.uvs.setDirty(!0);
           w.pushAll(this.clip, w.repeatArray([a.x, a.y, c.x, c.y], 6));
           this.setAttrib("texClip", this.clip);
           b = Object.keys(this.extraAttribsNamesAndDefaults.h);
           a = b.length;
           for (c = 0; c < a; )
             (d = b[c++]),
               null != g && Object.prototype.hasOwnProperty.call(g.h, d)
                 ? ((this.hasCustomAttribValues.h[d].h[this.size] = !0), w.pushAll(this.getAttrib(d).value, g.h[d]))
                 : ((f = this.extraAttribsNamesAndDefaults.h[d]), w.pushAll(this.getAttrib(d).value, f)),
               this.getAttrib(d).setDirty(!0);
           this.numQuads++;
           return this.size++;
         },
         nearestConsecutiveEmpty: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 2);
           for (var c, d = 0, f = this.unusedQuads; d < f.length; ) {
             var e = f[d];
             ++d;
             if (this.unusedQuadsMap.h.hasOwnProperty(e) && !(e < a)) {
               c = !1;
               for (var k = 1; k < b; ) {
                 var h = k++;
                 if (e + h >= this.size) return e;
                 if (!this.unusedQuadsMap.h.hasOwnProperty(e + h)) {
                   c = !0;
                   break;
                 }
               }
               if (!c) return e;
             }
           }
           return this.size;
         },
         updateQuad: function (b, a, c, d, f, e, k, g) {
           if (b >= this.size) return this.addQuad(a, c, d, !1, f, e, k, g);
           if (0 > b) return this.addQuad(a, c, d, !0, f, e, k, g);
           this.unusedQuadsMap.h.hasOwnProperty(b) && (this.numQuads++, I.remove(this.unusedQuads, b), this.unusedQuadsMap.remove(b), this.unclearedQuadsMap.remove(b));
           if (null != c || null != a || null != d || null != e || null != f)
             null == d && (d = new h(this.getAttrib("texClip").value[24 * b + 2], this.getAttrib("texClip").value[24 * b + 3])),
               null != c && (w.spliceInsert(this.clip, 24 * b, 24, w.repeatArray([c.x, c.y, d.x, d.y], 6)), this.setAttrib("texClip", this.clip, !1, 24 * b, 24)),
               null == e
                 ? (null == a && (a = new M(this.mesh.vertices.value[18 * b], this.mesh.vertices.value[18 * b + 1], this.mesh.vertices.value[18 * b + 2])),
                   null != f
                     ? ((c = this.arr[3] = this.arr[0] = a.x),
                       (this.arr[12] = c),
                       (c = this.arr[7] = this.arr[1] = a.y),
                       (this.arr[10] = c),
                       (c = this.arr[9] = this.arr[6] = a.x + f.x),
                       (this.arr[15] = c),
                       (c = this.arr[13] = this.arr[4] = a.y + f.y))
                     : ((c = this.arr[3] = this.arr[0] = a.x),
                       (this.arr[12] = c),
                       (c = this.arr[7] = this.arr[1] = a.y),
                       (this.arr[10] = c),
                       (c = this.arr[9] = this.arr[6] = a.x + d.x),
                       (this.arr[15] = c),
                       (c = this.arr[13] = this.arr[4] = a.y + d.y)),
                   (this.arr[16] = c),
                   (c = this.arr[14] = this.arr[11] = this.arr[8] = this.arr[5] = this.arr[2] = a.z),
                   (this.arr[17] = c))
                 : ((this.arr[0] = e[0]),
                   (this.arr[1] = e[1]),
                   (this.arr[2] = e[2]),
                   (this.arr[3] = e[3]),
                   (this.arr[4] = e[4]),
                   (this.arr[5] = e[5]),
                   (this.arr[6] = e[6]),
                   (this.arr[7] = e[7]),
                   (this.arr[8] = e[8]),
                   (this.arr[9] = e[9]),
                   (this.arr[10] = e[10]),
                   (this.arr[11] = e[11]),
                   (this.arr[12] = e[12]),
                   (this.arr[13] = e[13]),
                   (this.arr[14] = e[14]),
                   (this.arr[15] = e[15]),
                   (this.arr[16] = e[16]),
                   (this.arr[17] = e[17])),
               w.spliceInsert(this.mesh.vertices.value, 18 * b, 18, this.arr),
               this.mesh.vertices.setDirty(!1, 18 * b, 18);
           null != k
             ? ((this.hasCustomUVs.h[b] = !0), w.spliceInsert(this.mesh.uvs.value, 12 * b, 12, k), this.mesh.uvs.setDirty(!1, 12 * b, 12))
             : this.hasCustomUVs.h.hasOwnProperty(b) && (this.hasCustomUVs.remove(b), w.spliceInsert(this.mesh.uvs.value, 12 * b, 12, da.defaultUVs), this.mesh.uvs.setDirty(!1, 12 * b, 12));
           a = Object.keys(this.extraAttribsNamesAndDefaults.h);
           d = a.length;
           for (f = 0; f < d; )
             (k = a[f++]),
               null == g || null == g.h[k]
                 ? this.hasCustomAttribValues.h[k].h.hasOwnProperty(b) &&
                   (this.hasCustomAttribValues.h[k].remove(b),
                   w.spliceInsert(this.getAttrib(k).value, b * this.extraAttribsNamesAndDefaults.h[k].length, this.extraAttribsNamesAndDefaults.h[k].length, this.extraAttribsNamesAndDefaults.h[k]),
                   this.getAttrib(k).setDirty(!1, b * this.extraAttribsNamesAndDefaults.h[k].length, this.extraAttribsNamesAndDefaults.h[k].length))
                 : ((this.hasCustomAttribValues.h[k].h[b] = !0), w.spliceInsert(this.getAttrib(k).value, b * g.h[k].length, g.h[k].length, g.h[k]), this.getAttrib(k).setDirty(!1, b * g.h[k].length, g.h[k].length));
           return b;
         },
         removeQuad: function (b, a) {
           null == a && (a = !0);
           null == b && (b = 0);
           0 > b ||
             b >= this.size ||
             (a ? this.updateQuad(b, new M(), new h(), new h()) : (this.unclearedQuadsMap.h[b] = !0),
             this.unusedQuadsMap.h.hasOwnProperty(b) ||
               (this.numQuads--,
               nh.insert(this.unusedQuads, b, function (a, b) {
                 return a - b;
               }),
               (this.unusedQuadsMap.h[b] = !0)));
         },
         clearPool: function (b, a) {
           null == a && (a = !1);
           null == b && (b = !1);
           this.numQuads = 0;
           if (b) {
             this.mesh.vertices.value.splice(0, this.mesh.vertices.value.length);
             this.mesh.vertices.setDirty(!0);
             this.mesh.getUVs().splice(0, this.mesh.getUVs().length);
             this.mesh.uvs.setDirty(!0);
             this.clip = [];
             this.setAttrib("texClip", this.clip, !0);
             a = Object.keys(this.extraAttribsNamesAndDefaults.h);
             for (var c = a.length, d = 0; d < c; ) (b = a[d++]), (this.hasCustomAttribValues.h[b] = new Ma()), this.setAttrib(b, []);
             this.hasCustomUVs = new Ma();
             this.unusedQuads = [];
             this.unusedQuadsMap = new Ma();
             this.unclearedQuadsMap = new Ma();
             this.size = 0;
           } else {
             if (a) {
               c = 0;
               for (d = this.mesh.vertices.value.length; c < d; ) this.mesh.vertices.value[c++] = 0;
               this.mesh.vertices.setDirty(!1, 0, this.mesh.vertices.value.length);
             }
             this.unusedQuads = [];
             c = 0;
             for (d = this.size; c < d; ) (b = c++), (this.unusedQuads[b] = b), this.unusedQuadsMap.h.hasOwnProperty(b) || ((this.unusedQuadsMap.h[b] = !0), a || (this.unclearedQuadsMap.h[b] = !0));
           }
         },
         resetUnusedQuads: function () {
           for (var b = this.unclearedQuadsMap.keys(); b.hasNext(); ) {
             var a = b.next();
             w.spliceInsert(this.clip, 24 * a, 24, w.repeatArray([0], 24));
             w.spliceInsert(this.mesh.getVertices(), 18 * a, 18, w.repeatArray([0], 18));
             this.unclearedQuadsMap.remove(a);
           }
           this.mesh.vertices.setDirty();
           this.setAttrib("texClip", this.clip);
         },
         add9Slice: function (b, a, c, d, f, e) {
           null == e && (e = 1);
           null == d && (d = 0);
           null == a && (a = new t(0, 0, G.toFloat(this.texture.width), G.toFloat(this.texture.height)));
           var l = this.nearestConsecutiveEmpty(9);
           this.update9Slice(l, b, a, c, d, f, e);
           return l;
         },
         update9Slice: function (b, a, c, d, f, e, k) {
           null == k && (k = 1);
           null == f && (f = 0);
           var l = d.x * k,
             g = d.y * k;
           this.updateQuad(b, new M(a.x, a.y, f), new h(c.x, c.y), new h(d.x, d.y), new h(l, g), null, null, e);
           l = c.x + d.x;
           g = a.width - (c.width - d.width) * k;
           var m = d.y * k;
           this.updateQuad(b + 1, new M(a.x + d.x * k, a.y, f), new h(l, c.y), new h(d.width, d.y), new h(g, m), null, null, e);
           this.updateQuad(b + 2, new M(a.x + a.width - (c.width - d.get_right()) * k, a.y, f), new h(c.x + d.get_right(), c.y), new h(c.width - d.get_right(), d.y), new h((c.width - d.get_right()) * k, d.y * k), null, null, e);
           var A = c.x;
           l = c.y + d.y;
           g = d.x * k;
           m = a.height - (c.height - d.height) * k;
           this.updateQuad(b + 3, new M(a.x, a.y + d.y * k, f), new h(A, l), new h(d.x, d.height), new h(g, m), null, null, e);
           l = c.x + d.x;
           g = c.y + d.y;
           m = a.width - (c.width - d.width) * k;
           A = a.height - (c.height - d.height) * k;
           this.updateQuad(b + 4, new M(a.x + d.x * k, a.y + d.y * k, f), new h(l, g), new h(d.width, d.height), new h(m, A), null, null, e);
           this.updateQuad(
             b + 5,
             new M(a.x + a.width - (c.width - d.get_right()) * k, a.y + d.y * k, f),
             new h(c.x + d.get_right(), c.y + d.y),
             new h(c.width - d.get_right(), d.height),
             new h((c.width - d.get_right()) * k, a.height - (c.height - d.height) * k),
             null,
             null,
             e
           );
           this.updateQuad(b + 6, new M(a.x, a.y + a.height - (c.height - d.get_bottom()) * k, f), new h(c.x, c.y + d.get_bottom()), new h(d.x, c.height - d.get_bottom()), new h(d.x * k, (c.height - d.get_bottom()) * k), null, null, e);
           this.updateQuad(
             b + 7,
             new M(a.x + d.x * k, a.y + a.height - (c.height - d.get_bottom()) * k, f),
             new h(c.x + d.x, c.y + d.get_bottom()),
             new h(d.width, c.height - d.get_bottom()),
             new h(a.width - (c.width - d.width) * k, (c.height - d.get_bottom()) * k),
             null,
             null,
             e
           );
           this.updateQuad(
             b + 8,
             new M(a.x + a.width - (c.width - d.get_right()) * k, a.y + a.height - (c.height - d.get_bottom()) * k, f),
             new h(c.x + d.get_right(), c.y + d.get_bottom()),
             new h(c.width - d.get_right(), c.height - d.get_bottom()),
             new h((c.width - d.get_right()) * k, (c.height - d.get_bottom()) * k),
             null,
             null,
             e
           );
           return b;
         },
         remove9Slice: function (b, a) {
           null == a && (a = !0);
           this.removeQuad(b, a);
           this.removeQuad(b + 1, a);
           this.removeQuad(b + 2, a);
           this.removeQuad(b + 3, a);
           this.removeQuad(b + 4, a);
           this.removeQuad(b + 5, a);
           this.removeQuad(b + 6, a);
           this.removeQuad(b + 7, a);
           this.removeQuad(b + 8, a);
         },
         __class__: da,
       });
       var ja = function (b, a, c, d) {
         this.v3 = new M();
         this.attributeMultipliers = new e();
         this.overrideEmptySearchIndex = -1;
         this.currentMatrix = new T();
         da.call(this, b, a, c, d);
       };
       r.QuadPoolEntity_MatrixState = ja;
       ja.__name__ = "QuadPoolEntity_MatrixState";
       ja.__super__ = da;
       ja.prototype = v(da.prototype, {
         nearestConsecutiveEmpty: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 2);
           -1 < this.overrideEmptySearchIndex && (a = this.overrideEmptySearchIndex);
           return da.prototype.nearestConsecutiveEmpty.call(this, b, a);
         },
         addQuad: function (b, a, c, d, f, l, k, g) {
           null == d && (d = !0);
           null == a && (a = new h());
           null == c && (c = null == this.texture ? new h() : new h(G.toFloat(this.texture.width), G.toFloat(this.texture.height)));
           for (var C = Object.keys(this.attributeMultipliers.h), m = C.length, A = 0; A < m; ) {
             var n = C[A++];
             if (null != g && Object.prototype.hasOwnProperty.call(g.h, n)) {
               var p = O.clone(g.h[n]);
               g.h[n] = p;
               p = 0;
               for (var q = g.h[n].length; p < q; ) {
                 var t = p++;
                 g.h[n][t] *= this.attributeMultipliers.h[n][t % this.attributeMultipliers.h[n].length];
               }
             } else null == g && (g = new e()), 4 < this.attributeMultipliers.h[n].length ? (g.h[n] = this.attributeMultipliers.h[n]) : ((p = w.repeatArray(this.attributeMultipliers.h[n], 6)), (g.h[n] = p));
           }
           return d && 0 < this.unusedQuads.length
             ? this.updateQuad(this.nearestConsecutiveEmpty(1), b, a, c, f, l, k, g)
             : null == l
             ? (null == b && (b = new M()),
               null != f
                 ? da.prototype.addQuad.call(this, b, a, c, d, f, this.applyMatrixToVertices([b.x, b.y, b.z, b.x, b.y + f.y, b.z, b.x + f.x, b.y, b.z, b.x + f.x, b.y, b.z, b.x, b.y + f.y, b.z, b.x + f.x, b.y + f.y, b.z]), k, g)
                 : da.prototype.addQuad.call(this, b, a, c, d, f, this.applyMatrixToVertices([b.x, b.y, b.z, b.x, b.y + c.y, b.z, b.x + c.x, b.y, b.z, b.x + c.x, b.y, b.z, b.x, b.y + c.y, b.z, b.x + c.x, b.y + c.y, b.z]), k, g))
             : da.prototype.addQuad.call(this, b, a, c, d, f, this.applyMatrixToVertices(l), k, g);
         },
         applyMatrixToVertices: function (b) {
           for (var a = 0, c = (b.length / 3) | 0; a < c; ) {
             var d = a++;
             this.currentMatrix.apply(this.v3.set(b[3 * d], b[3 * d + 1], b[3 * d + 2]));
             b[3 * d] = this.v3.x;
             b[3 * d + 1] = this.v3.y;
             b[3 * d + 2] = this.v3.z;
           }
           return b;
         },
         updateQuad: function (b, a, c, d, f, l, k, g) {
           if (b >= this.size) return this.addQuad(a, c, d, !1, f, l, k, g);
           if (0 > b) return this.addQuad(a, c, d, !0, f, l, k, g);
           for (var C = Object.keys(this.attributeMultipliers.h), m = C.length, A = 0; A < m; ) {
             var n = C[A++];
             if (null != g && Object.prototype.hasOwnProperty.call(g.h, n)) {
               var p = O.clone(g.h[n]);
               g.h[n] = p;
               p = 0;
               for (var q = g.h[n].length; p < q; ) {
                 var t = p++;
                 g.h[n][t] *= this.attributeMultipliers.h[n][t % this.attributeMultipliers.h[n].length];
               }
             } else null == g && (g = new e()), 4 < this.attributeMultipliers.h[n].length ? (g.h[n] = this.attributeMultipliers.h[n]) : ((p = w.repeatArray(this.attributeMultipliers.h[n], 6)), (g.h[n] = p));
           }
           return null != c || null != a || null != d || null != l || null != f
             ? (null == d && (d = new h(this.getAttrib("texClip").value[24 * b + 2], this.getAttrib("texClip").value[24 * b + 3])),
               null != c && (w.spliceInsert(this.clip, 24 * b, 24, w.repeatArray([c.x, c.y, d.x, d.y], 6)), this.setAttrib("texClip", this.clip, !1, 24 * b, 24)),
               null == l
                 ? (null == a && (a = new M(this.mesh.vertices.value[18 * b], this.mesh.vertices.value[18 * b + 1], this.mesh.vertices.value[18 * b + 2])),
                   null != f
                     ? ((l = this.arr[3] = this.arr[0] = a.x),
                       (this.arr[12] = l),
                       (l = this.arr[7] = this.arr[1] = a.y),
                       (this.arr[10] = l),
                       (l = this.arr[9] = this.arr[6] = a.x + f.x),
                       (this.arr[15] = l),
                       (l = this.arr[13] = this.arr[4] = a.y + f.y))
                     : ((l = this.arr[3] = this.arr[0] = a.x),
                       (this.arr[12] = l),
                       (l = this.arr[7] = this.arr[1] = a.y),
                       (this.arr[10] = l),
                       (l = this.arr[9] = this.arr[6] = a.x + d.x),
                       (this.arr[15] = l),
                       (l = this.arr[13] = this.arr[4] = a.y + d.y)),
                   (this.arr[16] = l),
                   (l = this.arr[14] = this.arr[11] = this.arr[8] = this.arr[5] = this.arr[2] = a.z),
                   (this.arr[17] = l),
                   da.prototype.updateQuad.call(this, b, a, c, d, f, this.applyMatrixToVertices(this.arr), k, g))
                 : da.prototype.updateQuad.call(this, b, a, c, d, f, this.applyMatrixToVertices(l), k, g))
             : da.prototype.updateQuad.call(this, b, a, c, d, f, null, k, g);
         },
         __class__: ja,
       });
       var Z = function () {};
       r.Reflect = Z;
       Z.__name__ = "Reflect";
       Z.field = function (b, a) {
         try {
           return b[a];
         } catch (c) {
           return null;
         }
       };
       Z.fields = function (b) {
         var a = [];
         if (null != b) {
           var c = Object.prototype.hasOwnProperty,
             d;
           for (d in b) "__id__" != d && "hx__closures__" != d && c.call(b, d) && a.push(d);
         }
         return a;
       };
       Z.isFunction = function (b) {
         return "function" == typeof b ? !(b.__name__ || b.__ename__) : !1;
       };
       Z.compare = function (b, a) {
         return b == a ? 0 : b > a ? 1 : -1;
       };
       Z.compareMethods = function (b, a) {
         return b == a ? !0 : Z.isFunction(b) && Z.isFunction(a) ? (b.scope == a.scope && b.method == a.method ? null != b.method : !1) : !1;
       };
       Z.isEnumValue = function (b) {
         return null != b ? null != b.__enum__ : !1;
       };
       Z.deleteField = function (b, a) {
         if (!Object.prototype.hasOwnProperty.call(b, a)) return !1;
         delete b[a];
         return !0;
       };
       var ea = function (b, a, c) {
         this.changes = new e();
         this.blocksRendering = 0;
         this.xChunk = b;
         this.yChunk = a;
         this.world = c;
       };
       r.RenderChunk = ea;
       ea.__name__ = "RenderChunk";
       ea.prototype = {
         init: function () {
           var b = y.blockTextures,
             a = Fa.getShader(xa.NORMAL),
             c = new e(),
             d = w.repeatArray([1], 24);
           c.h.color = d;
           d = w.repeatArray([0], 24);
           c.h.colorOffset = d;
           this.entity = new da(b, null, a, c);
           this.entity.isTransparent = !0;
         },
         render: function () {
           null == this.entity && this.init();
           for (var b = (this.blocksRendering = 0); 16 > b; )
             for (var a = b++, c = 0; 16 > c; ) {
               var d = c++,
                 f = this.world.getBlock(16 * this.xChunk + a, 16 * this.yChunk + d, !0);
               null != f && ((f.renderChunk = this), f.render(a, 16 - d - 1, this.entity));
             }
         },
         renderBlock: function (b, a) {
           if (null == this.entity) this.render();
           else {
             var c = this.world.getBlock(b, a, !0);
             if (null != c) {
               var d = b - 16 * this.xChunk,
                 f = a - 16 * this.yChunk;
               0 > d || 16 <= d || 0 > f || 16 <= f
                 ? Ia.trace("ERROR: Block (" + b + ", " + a + ") does not belong to render chunk (" + this.xChunk + ", " + this.yChunk + ")", {
                     fileName: "src/RenderChunk.hx",
                     lineNumber: 52,
                     className: "RenderChunk",
                     methodName: "renderBlock",
                   })
                 : ((c.renderChunk = this), c.render(d, 16 - f - 1, this.entity));
             }
           }
         },
         addChange: function (b, a) {
           this.changes.h[b + "," + a] = new h(b, a);
         },
         renderChanges: function () {
           for (var b = this.changes.h, a = Object.keys(b), c = a.length, d = 0; d < c; ) {
             var f = b[a[d++]];
             this.renderBlock(f.x | 0, f.y | 0);
           }
           this.changes.h = Object.create(null);
         },
         __class__: ea,
       };
       var h = function (b, a) {
         null == a && (a = 0);
         null == b && (b = 0);
         this.x = this.y = 0;
         this.x = b;
         this.y = a;
       };
       r["lemongine.Point"] = h;
       h.__name__ = "lemongine.Point";
       h.prototype = {
         set: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           this.x = b;
           this.y = a;
           return this;
         },
         length: function () {
           return Math.sqrt(this.x * this.x + this.y * this.y);
         },
         normalize: function () {
           var b = this.length();
           this.x /= b;
           this.y /= b;
           return this;
         },
         multiply: function (b) {
           this.x *= b;
           this.y *= b;
           return this;
         },
         add: function (b) {
           this.x += b.x;
           this.y += b.y;
           return this;
         },
         distanceTo: function (b) {
           return Math.sqrt((this.x - b.x) * (this.x - b.x) + (this.y - b.y) * (this.y - b.y));
         },
         toLimeVector: function () {
           return new Fd(this.x, this.y);
         },
         __class__: h,
       };
       var qb = function (b) {
         this.skin = new sa();
         this.loading = this.loaded = this.failed = !1;
         null != b && ((this.skin = b), (this.loaded = !0));
       };
       r.Skin = qb;
       qb.__name__ = "Skin";
       qb.prototype = {
         resetFrames: function () {
           this.skin.clear();
         },
         __class__: qb,
       };
       var sa = function (b, a, c, d) {
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.filterEntityNeedsResize = !0;
         this.isCubemap = this.smoothing = this.isShaderPass = !1;
         this.width = this.height = 0;
         this.dirtyBuffer = this.dirtyRender = !0;
         this.imageLoaded = !1;
         this.premultiplied = !0;
         0 != b &&
           (this.setDimensions(Math.abs(b) | 0, Math.abs(a) | 0),
           (b = this.width * this.height * 4),
           (b = null != b ? new Uint8Array(b) : null),
           (this.data = new ua(new Ta(b, this.width, this.height))),
           0 != c && this.fillRect(null, c, !0),
           (this.imageLoaded = !0));
       };
       r["lemongine.Image"] = sa;
       sa.__name__ = "lemongine.Image";
       sa.getWhitePixel = function () {
         null == sa.whitePixel && ((sa.whitePixel = new sa(1, 1, -1)), sa.whitePixel.set_premultiplied(!0));
         return sa.whitePixel;
       };
       sa.prototype = {
         fromScene: function (b) {
           this.fromGLTexture(b.get_width(), b.get_height(), b.get_glTexture());
           return this;
         },
         fromData: function (b, a) {
           this.data = b;
           this.dirtyRender = !0;
           this.setDimensions(b.width, b.height);
           null != a ? (this.textureLocation = a) : (this.dirtyBuffer = !0);
           this.imageLoaded = !0;
           return this;
         },
         fromGLTexture: function (b, a, c) {
           this.setDimensions(b, a);
           this.textureLocation = c;
           this.dirtyBuffer = !1;
           return this;
         },
         updateImageFromTexture: function () {
           var b = p.gl.createFramebuffer();
           p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, b);
           p.gl.framebufferTexture2D(p.gl.FRAMEBUFFER, p.gl.COLOR_ATTACHMENT0, p.gl.TEXTURE_2D, this.textureLocation, 0);
           var a = this.width * this.height * 4;
           a = null != a ? new Uint8Array(a) : null;
           p.gl.readPixels(0, 0, this.width, this.height, p.gl.RGBA, p.gl.UNSIGNED_BYTE, a);
           p.gl.deleteFramebuffer(b);
           b = new ua(new Ta(a, this.width, this.height, 32, 0));
           b.buffer.premultiplied = this.premultiplied;
           this.fromData(b);
           this.imageLoaded = !0;
           return this;
         },
         clone: function (b) {
           null == b && (b = !1);
           var a = new sa();
           if (null == this.textureLocation)
             if (b) this.updateTextureBuffer();
             else return a.fromData(this.data.clone()), a;
           var c = new fb(1, 1, fc.ORTHOGRAPHIC, new F(0));
           c.setup2D(this.width, this.height, new F(0));
           a.fromGLTexture(this.width, this.height, c.get_glTexture());
           b ? c.draw2D(this) : c.draw2DFlipped(this);
           return a;
         },
         setDimensions: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           if (this.width != b || this.height != a)
             (this.width = b), (this.height = a), (this.rectangle = new t(0, 0, G.toFloat(b), G.toFloat(a))), (this.limeRectangle = new Sb(0, 0, G.toFloat(b), G.toFloat(a))), (this.dirtyBuffer = this.filterEntityNeedsResize = !0);
         },
         updateImageIfNotLoaded: function () {
           this.imageLoaded || null == this.textureLocation || this.updateImageFromTexture();
         },
         copyPixels: function (b, a, c, d, f, e) {
           null == e && (e = !0);
           this.updateImageIfNotLoaded();
           b.updateImageIfNotLoaded();
           a = null == a ? new Fd(0, 0) : a.toLimeVector();
           c = null == c ? new Sb(0, 0, G.toFloat(b.width), G.toFloat(b.height)) : c.toLimeRectangle();
           d = null == d ? null : d.data;
           f = null == f ? null : f.toLimeVector();
           this.data.copyPixels(b.data, c, a, d, f, e);
           this.dirtyBuffer = this.dirtyRender = !0;
           return this;
         },
         clear: function () {
           this.imageLoaded && this.fillRect();
         },
         fillRect: function (b, a, c) {
           null == c && (c = !0);
           null == a && (a = 0);
           this.updateImageIfNotLoaded();
           c || (a = (a & 16777215) + -16777216);
           b = null == b ? this.limeRectangle : b.toLimeRectangle();
           this.data.fillRect(b, F.ARBGtoRGBA(a));
           this.dirtyBuffer = this.dirtyRender = !0;
           return this;
         },
         setPixel: function (b, a, c, d) {
           null == d && (d = !0);
           this.updateImageIfNotLoaded();
           d ? this.data.setPixel32(b, a, F.ARBGtoRGBA(c)) : this.data.setPixel(b, a, F.ARBGtoRGBA(c));
           this.dirtyBuffer = this.dirtyRender = !0;
           return this;
         },
         getPixel: function (b, a) {
           this.updateImageIfNotLoaded();
           return this.data.getPixel(Math.floor(b), Math.floor(a), 1);
         },
         getPixel32: function (b, a) {
           this.updateImageIfNotLoaded();
           return this.data.getPixel32(Math.floor(b), Math.floor(a), 1);
         },
         toEntity: function (b, a) {
           null == a && (a = !1);
           null == b && (b = new t(0, 0, G.toFloat(this.width), G.toFloat(this.height)));
           var c = Xb.getShader();
           c = new ma([], ba.createQuad(b.width, b.height), c);
           c.setTextureBuffer("texture", this);
           c.setAttrib("texClip", w.repeatArray([b.x, b.y, b.width, b.height], 6));
           c.setUniform("texSize", [this.width, this.height]);
           a || c.transform.translate(b.width / 2, b.height / 2);
           return c;
         },
         getTextureBuffer: function () {
           this.updateTextureBuffer();
           return this.textureLocation;
         },
         updateTextureBuffer: function () {
           this.dirtyBuffer &&
             ((this.dirtyBuffer = !1),
             this.data.set_premultiplied(this.premultiplied),
             va.convertToData(this.data),
             null != this.textureLocation
               ? (p.gl.bindTexture(p.gl.TEXTURE_2D, this.textureLocation), Qb.texImage2D(p.gl, p.gl.TEXTURE_2D, 0, p.gl.RGBA, this.data.buffer.width, this.data.buffer.height, 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, this.data.get_data()))
               : ((this.textureLocation = p.gl.createTexture()),
                 p.gl.bindTexture(p.gl.TEXTURE_2D, this.textureLocation),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_S, p.gl.CLAMP_TO_EDGE),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_T, p.gl.CLAMP_TO_EDGE),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MAG_FILTER, this.smoothing ? p.gl.LINEAR : p.gl.NEAREST),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MIN_FILTER, this.smoothing ? p.gl.LINEAR : p.gl.NEAREST),
                 this.isShaderPass
                   ? Qb.texImage2D(p.gl, p.gl.TEXTURE_2D, 0, H.__cast(p.gl, WebGL2RenderingContext).RGBA32F, this.data.buffer.width, this.data.buffer.height, 0, p.gl.RGBA, p.gl.FLOAT, null)
                   : Qb.texImage2D(p.gl, p.gl.TEXTURE_2D, 0, p.gl.RGBA, this.data.buffer.width, this.data.buffer.height, 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, this.data.get_data())));
         },
         blurFilter: function (b, a, c, d) {
           null == d && (d = !0);
           this.createFilterEntity(Gc.getShader(c, d), !0);
           this.filterEntity.setUniform("texSize", [this.width, this.height]);
           this.filterEntity.setTextureBuffer("texture", this);
           this.filterEntity.setUniform("blur", [b, 0.5]);
           this.filterScene.clear();
           this.filterScene.draw(this.filterEntity, !0);
           this.filterScene.set_glTexture(this.filterSceneImageSecondPass.getTextureBuffer());
           this.filterEntity.setTextureBuffer("texture", this.filterSceneImage);
           this.filterEntity.setUniform("blur", [0.5, a]);
           this.filterScene.clear();
           this.filterScene.set_cull(!1);
           this.filterEntity.transform.scale(1, -1).translate(0, G.toFloat(this.height), 0);
           this.filterScene.draw(this.filterEntity, !0);
           this.filterScene.set_cull(!0);
           this.filterEntity.transform.scale(1, -1).translate(0, G.toFloat(this.height), 0);
           this.filterScene.set_glTexture(this.filterSceneImage.getTextureBuffer());
           return this.filterSceneImageSecondPass;
         },
         createFilterEntity: function (b, a) {
           null == a && (a = !1);
           null == this.filterEntity && ((this.filterScene = new fb(1, 1, fc.ORTHOGRAPHIC, new F(0))), (this.filterEntity = new ma([], ba.createQuad(1, 1), b)), (this.filterEntity.isTransparent = !0), (this.filterSceneImage = new sa()));
           this.filterEntity.shaderProgram != b && (this.filterEntity.shaderProgram = b);
           this.filterEntityNeedsResize
             ? ((this.filterEntityNeedsResize = !1),
               this.filterScene.setup2D(this.width, this.height, new F()),
               this.filterSceneImage.fromGLTexture(this.width, this.height, this.filterScene.get_glTexture()),
               a && (this.filterSceneImageSecondPass = new sa(G.toFloat(this.width), G.toFloat(this.height), 0)),
               this.filterEntity.transform.reset().translate(0.5, 0.5, 0).scale(G.toFloat(this.width), G.toFloat(this.height)))
             : a && null == this.filterSceneImageSecondPass && (this.filterSceneImageSecondPass = new sa(G.toFloat(this.width), G.toFloat(this.height), 0));
         },
         set_premultiplied: function (b) {
           this.data.set_premultiplied(b);
           return (this.premultiplied = b);
         },
         destroy: function () {
           null != this.textureLocation && p.gl.deleteTexture(this.textureLocation);
           null != this.filterSceneImage && this.filterSceneImage.destroy();
           null != this.filterSceneImageSecondPass && this.filterSceneImageSecondPass.destroy();
         },
         __class__: sa,
       };
       var Ta = function (b, a, c, d, f) {
         null == d && (d = 32);
         null == c && (c = 0);
         null == a && (a = 0);
         this.data = b;
         this.width = a;
         this.height = c;
         this.bitsPerPixel = d;
         this.format = null == f ? 0 : f;
         this.premultiplied = !1;
         this.transparent = !0;
       };
       r["lime.graphics.ImageBuffer"] = Ta;
       Ta.__name__ = "lime.graphics.ImageBuffer";
       Ta.prototype = {
         clone: function () {
           var b = new Ta(this.data, this.width, this.height, this.bitsPerPixel);
           if (null != this.data) {
             var a = this.data.byteLength;
             a = null != a ? new Uint8Array(a) : null;
             b.data = a;
             a = this.data;
             a = null != a ? new Uint8Array(a) : null;
             b.data.set(a);
           } else
             null != this.__srcImageData
               ? ((b.__srcCanvas = window.document.createElement("canvas")),
                 (b.__srcContext = b.__srcCanvas.getContext("2d")),
                 (b.__srcCanvas.width = this.__srcImageData.width),
                 (b.__srcCanvas.height = this.__srcImageData.height),
                 (b.__srcImageData = b.__srcContext.createImageData(this.__srcImageData.width, this.__srcImageData.height)),
                 b.__srcImageData.data.set(new Uint8ClampedArray(this.__srcImageData.data)))
               : null != this.__srcCanvas
               ? ((b.__srcCanvas = window.document.createElement("canvas")),
                 (b.__srcContext = b.__srcCanvas.getContext("2d")),
                 (b.__srcCanvas.width = this.__srcCanvas.width),
                 (b.__srcCanvas.height = this.__srcCanvas.height),
                 b.__srcContext.drawImage(this.__srcCanvas, 0, 0))
               : (b.__srcImage = this.__srcImage);
           b.bitsPerPixel = this.bitsPerPixel;
           b.format = this.format;
           b.premultiplied = this.premultiplied;
           b.transparent = this.transparent;
           return b;
         },
         get_src: function () {
           return null != this.__srcImage ? this.__srcImage : this.__srcCanvas;
         },
         get_stride: function () {
           return this.width * ((this.bitsPerPixel / 8) | 0);
         },
         __class__: Ta,
       };
       var ua = function (b, a, c, d, f, e, k) {
         null == f && (f = -1);
         null == d && (d = -1);
         null == c && (c = 0);
         null == a && (a = 0);
         this.offsetX = a;
         this.offsetY = c;
         this.width = d;
         this.height = f;
         this.version = 0;
         null == k && (k = Ga.CANVAS);
         this.type = k;
         if (null == b) {
           if (0 < d && 0 < f)
             switch (this.type._hx_index) {
               case 0:
                 this.buffer = new Ta(null, d, f);
                 va.createCanvas(this, d, f);
                 null != e && 0 != e && this.fillRect(new Sb(0, 0, d, f), e);
                 break;
               case 1:
                 (b = d * f * 4), (b = null != b ? new Uint8Array(b) : null), (this.buffer = new Ta(b, d, f)), null != e && 0 != e && this.fillRect(new Sb(0, 0, d, f), e);
             }
         } else this.__fromImageBuffer(b);
       };
       r["lime.graphics.Image"] = ua;
       ua.__name__ = "lime.graphics.Image";
       ua.fromFile = function (b) {
         if (null == b) return null;
         var a = new ua();
         return a.__fromFile(b) ? a : null;
       };
       ua.loadFromBase64 = function (b, a) {
         return null == b || null == a ? Xa.withValue(null) : ra.loadImage("data:" + a + ";base64," + b);
       };
       ua.loadFromBytes = function (b) {
         if (null == b) return Xa.withValue(null);
         if (ua.__isPNG(b)) var a = "image/png";
         else if (ua.__isJPG(b)) a = "image/jpeg";
         else if (ua.__isGIF(b)) a = "image/gif";
         else if (ua.__isWebP(b)) a = "image/webp";
         else return Xa.withValue(null);
         return ra.loadImageFromBytes(b, a);
       };
       ua.loadFromFile = function (b) {
         return null == b ? Xa.withValue(null) : ra.loadImage(b);
       };
       ua.__isGIF = function (b) {
         if (null == b || 6 > b.length) return !1;
         b = b.getString(0, 6);
         return "GIF87a" != b ? "GIF89a" == b : !0;
       };
       ua.__isJPG = function (b) {
         return null == b || 4 > b.length ? !1 : 255 == b.b[0] && 216 == b.b[1] && 255 == b.b[b.length - 2] ? 217 == b.b[b.length - 1] : !1;
       };
       ua.__isPNG = function (b) {
         return null == b || 8 > b.length ? !1 : 137 == b.b[0] && 80 == b.b[1] && 78 == b.b[2] && 71 == b.b[3] && 13 == b.b[4] && 10 == b.b[5] && 26 == b.b[6] ? 10 == b.b[7] : !1;
       };
       ua.__isWebP = function (b) {
         return null == b || 16 > b.length ? !1 : "RIFF" == b.getString(0, 4) ? "WEBP" == b.getString(8, 4) : !1;
       };
       ua.prototype = {
         clone: function () {
           if (null != this.buffer) {
             this.type == Ga.CANVAS ? va.convertToCanvas(this) : va.convertToData(this);
             var b = new ua(this.buffer.clone(), this.offsetX, this.offsetY, this.width, this.height, null, this.type);
             b.version = this.version;
             return b;
           }
           return new ua(null, this.offsetX, this.offsetY, this.width, this.height, null, this.type);
         },
         copyChannel: function (b, a, c, d, f) {
           a = this.__clipRect(a);
           if (null != this.buffer && null != a && !((f == Gd.ALPHA && !this.get_transparent()) || 0 >= a.width || 0 >= a.height))
             switch ((a.x + a.width > b.width && (a.width = b.width - a.x), a.y + a.height > b.height && (a.height = b.height - a.y), this.type._hx_index)) {
               case 0:
                 va.copyChannel(this, b, a, c, d, f);
                 break;
               case 1:
                 va.convertToData(this);
                 va.convertToData(b);
                 Ya.copyChannel(this, b, a, c, d, f);
                 break;
               case 2:
                 switch (d._hx_index) {
                   case 0:
                     var e = 1;
                     break;
                   case 1:
                     e = 2;
                     break;
                   case 2:
                     e = 4;
                     break;
                   case 3:
                     e = 8;
                 }
                 switch (f._hx_index) {
                   case 0:
                     var k = 1;
                     break;
                   case 1:
                     k = 2;
                     break;
                   case 2:
                     k = 4;
                     break;
                   case 3:
                     k = 8;
                 }
                 a.offset(b.offsetX, b.offsetY);
                 c.offset(this.offsetX, this.offsetY);
                 this.buffer.__srcBitmapData.copyChannel(b.buffer.get_src(), a.__toFlashRectangle(), c.__toFlashPoint(), e, k);
             }
         },
         copyPixels: function (b, a, c, d, f, e) {
           null == e && (e = !1);
           if (null != this.buffer && null != b && !(0 >= a.width || 0 >= a.height || 0 >= this.width || 0 >= this.height))
             switch (
               (a.x + a.width > b.width && (a.width = b.width - a.x),
               a.y + a.height > b.height && (a.height = b.height - a.y),
               0 > a.x && ((a.width += a.x), (a.x = 0)),
               0 > a.y && ((a.height += a.y), (a.y = 0)),
               c.x + a.width > this.width && (a.width = this.width - c.x),
               c.y + a.height > this.height && (a.height = this.height - c.y),
               0 > c.x && ((a.width += c.x), (a.x -= c.x), (c.x = 0)),
               0 > c.y && ((a.height += c.y), (a.y -= c.y), (c.y = 0)),
               b == this && c.x < a.get_right() && c.y < a.get_bottom() && (b = this.clone()),
               d == b && (null == f || (0 == f.x && 0 == f.y)) && (f = d = null),
               this.type._hx_index)
             ) {
               case 0:
                 null != d ? (va.convertToData(this), va.convertToData(b), null != d && va.convertToData(d), Ya.copyPixels(this, b, a, c, d, f, e)) : (va.convertToCanvas(this), va.convertToCanvas(b), va.copyPixels(this, b, a, c, d, f, e));
                 break;
               case 1:
                 va.convertToData(this);
                 va.convertToData(b);
                 null != d && va.convertToData(d);
                 Ya.copyPixels(this, b, a, c, d, f, e);
                 break;
               case 2:
                 a.offset(b.offsetX, b.offsetY),
                   c.offset(this.offsetX, this.offsetY),
                   null != d && null != f && f.offset(d.offsetX, d.offsetY),
                   this.buffer.__srcBitmapData.copyPixels(b.buffer.__srcBitmapData, a.__toFlashRectangle(), c.__toFlashPoint(), null != d ? d.buffer.get_src() : null, null != f ? f.__toFlashPoint() : null, e);
             }
         },
         encode: function (b, a) {
           null == a && (a = 90);
           if (null == b) return oh.encode(this);
           switch (b._hx_index) {
             case 0:
               return Qh.encode(this);
             case 1:
               return Rh.encode(this, a);
             case 2:
               return oh.encode(this);
           }
         },
         fillRect: function (b, a, c) {
           b = this.__clipRect(b);
           if (null != this.buffer && null != b)
             switch (this.type._hx_index) {
               case 0:
                 va.fillRect(this, b, a, c);
                 break;
               case 1:
                 va.convertToData(this);
                 if (0 == this.buffer.data.length) break;
                 Ya.fillRect(this, b, a, c);
                 break;
               case 2:
                 b.offset(this.offsetX, this.offsetY);
                 if (null == c) a = ((a & 255) << 24) | (((a >>> 24) & 255) << 16) | (((a >>> 16) & 255) << 8) | ((a >>> 8) & 255);
                 else
                   switch (c) {
                     case 1:
                       break;
                     case 2:
                       a = ((a & 255) << 24) | (((a >>> 8) & 255) << 16) | (((a >>> 16) & 255) << 8) | ((a >>> 24) & 255);
                       break;
                     default:
                       a = ((a & 255) << 24) | (((a >>> 24) & 255) << 16) | (((a >>> 16) & 255) << 8) | ((a >>> 8) & 255);
                   }
                 this.buffer.__srcBitmapData.fillRect(b.__toFlashRectangle(), a);
             }
         },
         getPixel: function (b, a, c) {
           if (null == this.buffer || 0 > b || 0 > a || b >= this.width || a >= this.height) return 0;
           switch (this.type._hx_index) {
             case 0:
               return va.getPixel(this, b, a, c);
             case 1:
               return va.convertToData(this), Ya.getPixel(this, b, a, c);
             case 2:
               b = this.buffer.__srcBitmapData.getPixel(b + this.offsetX, a + this.offsetY);
               if (null == c) return (((b >>> 16) & 255) << 24) | (((b >>> 8) & 255) << 16) | ((b & 255) << 8) | ((b >>> 24) & 255);
               switch (c) {
                 case 1:
                   return b;
                 case 2:
                   return ((b & 255) << 24) | (((b >>> 8) & 255) << 16) | (((b >>> 16) & 255) << 8) | ((b >>> 24) & 255);
                 default:
                   return (((b >>> 16) & 255) << 24) | (((b >>> 8) & 255) << 16) | ((b & 255) << 8) | ((b >>> 24) & 255);
               }
             default:
               return 0;
           }
         },
         getPixel32: function (b, a, c) {
           if (null == this.buffer || 0 > b || 0 > a || b >= this.width || a >= this.height) return 0;
           switch (this.type._hx_index) {
             case 0:
               return va.getPixel32(this, b, a, c);
             case 1:
               return va.convertToData(this), Ya.getPixel32(this, b, a, c);
             case 2:
               b = this.buffer.__srcBitmapData.getPixel32(b + this.offsetX, a + this.offsetY);
               if (null == c) return (((b >>> 16) & 255) << 24) | (((b >>> 8) & 255) << 16) | ((b & 255) << 8) | ((b >>> 24) & 255);
               switch (c) {
                 case 1:
                   return b;
                 case 2:
                   return ((b & 255) << 24) | (((b >>> 8) & 255) << 16) | (((b >>> 16) & 255) << 8) | ((b >>> 24) & 255);
                 default:
                   return (((b >>> 16) & 255) << 24) | (((b >>> 8) & 255) << 16) | ((b & 255) << 8) | ((b >>> 24) & 255);
               }
             default:
               return 0;
           }
         },
         getPixels: function (b, a) {
           if (null == this.buffer) return null;
           switch (this.type._hx_index) {
             case 0:
               return va.getPixels(this, b, a);
             case 1:
               return va.convertToData(this), Ya.getPixels(this, b, a);
             case 2:
               return null;
             default:
               return null;
           }
         },
         setPixel: function (b, a, c, d) {
           if (!(null == this.buffer || 0 > b || 0 > a || b >= this.width || a >= this.height))
             switch (this.type._hx_index) {
               case 0:
                 va.setPixel(this, b, a, c, d);
                 break;
               case 1:
                 va.convertToData(this);
                 Ya.setPixel(this, b, a, c, d);
                 break;
               case 2:
                 if (null == d) c = ((c & 255) << 24) | (((c >>> 24) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 8) & 255);
                 else
                   switch (d) {
                     case 1:
                       break;
                     case 2:
                       c = ((c & 255) << 24) | (((c >>> 8) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 24) & 255);
                       break;
                     default:
                       c = ((c & 255) << 24) | (((c >>> 24) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 8) & 255);
                   }
                 this.buffer.__srcBitmapData.setPixel(b + this.offsetX, a + this.offsetX, c);
             }
         },
         setPixel32: function (b, a, c, d) {
           if (!(null == this.buffer || 0 > b || 0 > a || b >= this.width || a >= this.height))
             switch (this.type._hx_index) {
               case 0:
                 va.setPixel32(this, b, a, c, d);
                 break;
               case 1:
                 va.convertToData(this);
                 Ya.setPixel32(this, b, a, c, d);
                 break;
               case 2:
                 if (null == d) c = ((c & 255) << 24) | (((c >>> 24) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 8) & 255);
                 else
                   switch (d) {
                     case 1:
                       break;
                     case 2:
                       c = ((c & 255) << 24) | (((c >>> 8) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 24) & 255);
                       break;
                     default:
                       c = ((c & 255) << 24) | (((c >>> 24) & 255) << 16) | (((c >>> 16) & 255) << 8) | ((c >>> 8) & 255);
                   }
                 this.buffer.__srcBitmapData.setPixel32(b + this.offsetX, a + this.offsetY, c);
             }
         },
         __clipRect: function (b) {
           return null == b ||
             (0 > b.x && ((b.width -= -b.x), (b.x = 0), 0 >= b.x + b.width)) ||
             (0 > b.y && ((b.height -= -b.y), (b.y = 0), 0 >= b.y + b.height)) ||
             (b.x + b.width >= this.width && ((b.width -= b.x + b.width - this.width), 0 >= b.width)) ||
             (b.y + b.height >= this.height && ((b.height -= b.y + b.height - this.height), 0 >= b.height))
             ? null
             : b;
         },
         __fromBase64: function (b, a, c) {
           var d = this,
             f = new Image();
           f.addEventListener(
             "load",
             function (a) {
               d.buffer = new Ta(null, f.width, f.height);
               d.buffer.__srcImage = f;
               d.offsetX = 0;
               d.offsetY = 0;
               d.width = d.buffer.width;
               d.height = d.buffer.height;
               null != c && c(d);
             },
             !1
           );
           f.src = "data:" + a + ";base64," + b;
         },
         __fromBytes: function (b, a) {
           if (ua.__isPNG(b)) var c = "image/png";
           else if (ua.__isJPG(b)) c = "image/jpeg";
           else if (ua.__isGIF(b)) c = "image/gif";
           else return !1;
           this.__fromBase64(Hc.encode(b), c, a);
           return !0;
         },
         __fromFile: function (b, a, c) {
           var d = this,
             f = new Image();
           ra.__isSameOrigin(b) || (f.crossOrigin = "Anonymous");
           f.onload = function (b) {
             d.buffer = new Ta(null, f.width, f.height);
             d.buffer.__srcImage = f;
             d.width = f.width;
             d.height = f.height;
             null != a && a(d);
           };
           f.onerror = function (a) {
             null != c && c();
           };
           f.src = b;
           return !0;
         },
         __fromImageBuffer: function (b) {
           this.buffer = b;
           null != b && (-1 == this.width && (this.width = b.width), -1 == this.height && (this.height = b.height));
         },
         get_data: function () {
           null == this.buffer.data && 0 < this.buffer.width && 0 < this.buffer.height && va.convertToData(this);
           return this.buffer.data;
         },
         get_format: function () {
           return this.buffer.format;
         },
         set_format: function (b) {
           this.buffer.format != b && 1 == this.type._hx_index && Ya.setFormat(this, b);
           return (this.buffer.format = b);
         },
         get_premultiplied: function () {
           return this.buffer.premultiplied;
         },
         set_premultiplied: function (b) {
           if (b && !this.buffer.premultiplied)
             switch (this.type._hx_index) {
               case 0:
               case 1:
                 va.convertToData(this), Ya.multiplyAlpha(this);
             }
           else !b && this.buffer.premultiplied && 1 == this.type._hx_index && (va.convertToData(this), Ya.unmultiplyAlpha(this));
           return b;
         },
         get_rect: function () {
           return new Sb(0, 0, this.width, this.height);
         },
         get_transparent: function () {
           return null == this.buffer ? !1 : this.buffer.transparent;
         },
         set_transparent: function (b) {
           return null == this.buffer ? !1 : (this.buffer.transparent = b);
         },
         __class__: ua,
       };
       var Ga = (D["lime.graphics.ImageType"] = {
         __ename__: "lime.graphics.ImageType",
         __constructs__: null,
         CANVAS: { _hx_name: "CANVAS", _hx_index: 0, __enum__: "lime.graphics.ImageType", toString: n },
         DATA: { _hx_name: "DATA", _hx_index: 1, __enum__: "lime.graphics.ImageType", toString: n },
         FLASH: { _hx_name: "FLASH", _hx_index: 2, __enum__: "lime.graphics.ImageType", toString: n },
         CUSTOM: { _hx_name: "CUSTOM", _hx_index: 3, __enum__: "lime.graphics.ImageType", toString: n },
       });
       Ga.__constructs__ = [Ga.CANVAS, Ga.DATA, Ga.FLASH, Ga.CUSTOM];
       var va = function () {};
       r["lime._internal.graphics.ImageCanvasUtil"] = va;
       va.__name__ = "lime._internal.graphics.ImageCanvasUtil";
       va.convertToCanvas = function (b, a) {
         null == a && (a = !1);
         var c = b.buffer;
         null != c.__srcImage
           ? (null == c.__srcCanvas && (va.createCanvas(b, c.__srcImage.width, c.__srcImage.height), c.__srcContext.drawImage(c.__srcImage, 0, 0)), (c.__srcImage = null))
           : null == c.__srcCanvas && null != c.data
           ? (b.set_transparent(!0), va.createCanvas(b, c.width, c.height), va.createImageData(b), c.__srcContext.putImageData(c.__srcImageData, 0, 0))
           : b.type == Ga.DATA && null != c.__srcImageData && b.dirty && (c.__srcContext.putImageData(c.__srcImageData, 0, 0), (b.dirty = !1));
         a ? ((c.data = null), (c.__srcImageData = null)) : null == c.data && null != c.__srcImageData && (c.data = c.__srcImageData.data);
         b.type = Ga.CANVAS;
       };
       va.convertToData = function (b, a) {
         null == a && (a = !1);
         var c = b.buffer;
         null != c.__srcImage && va.convertToCanvas(b);
         if (null != c.__srcCanvas && null == c.data) va.createImageData(b), b.type == Ga.CANVAS && (b.dirty = !1);
         else if (b.type == Ga.CANVAS && null != c.__srcCanvas && b.dirty) {
           if (null == c.__srcImageData) va.createImageData(b);
           else {
             c.__srcImageData = c.__srcContext.getImageData(0, 0, c.width, c.height);
             var d = c.__srcImageData.data.buffer;
             d = null != d ? new Uint8Array(d) : null;
             c.data = d;
           }
           b.dirty = !1;
         }
         a && ((b.buffer.__srcCanvas = null), (b.buffer.__srcContext = null));
         b.type = Ga.DATA;
       };
       va.copyChannel = function (b, a, c, d, f, e) {
         va.convertToData(a);
         va.convertToData(b);
         Ya.copyChannel(b, a, c, d, f, e);
       };
       va.copyPixels = function (b, a, c, d, f, e, k) {
         null == k && (k = !1);
         null == d ||
           d.x >= b.width ||
           d.y >= b.height ||
           null == c ||
           1 > c.width ||
           1 > c.height ||
           (null != f && f.get_transparent() && (null == e && (e = new Fd()), (a = a.clone()), a.copyChannel(f, new Sb(c.x + e.x, c.y + e.y, c.width, c.height), new Fd(c.x, c.y), Gd.ALPHA, Gd.ALPHA)),
           va.convertToCanvas(b, !0),
           k || (b.get_transparent() && a.get_transparent() && b.buffer.__srcContext.clearRect(d.x + b.offsetX, d.y + b.offsetY, c.width + b.offsetX, c.height + b.offsetY)),
           va.convertToCanvas(a),
           null != a.buffer.get_src() &&
             ((b.buffer.__srcContext.globalCompositeOperation = "source-over"),
             b.buffer.__srcContext.drawImage(a.buffer.get_src(), (c.x + a.offsetX) | 0, (c.y + a.offsetY) | 0, c.width | 0, c.height | 0, (d.x + b.offsetX) | 0, (d.y + b.offsetY) | 0, c.width | 0, c.height | 0)),
           (b.dirty = !0),
           b.version++);
       };
       va.createCanvas = function (b, a, c) {
         var d = b.buffer;
         null == d.__srcCanvas &&
           ((d.__srcCanvas = window.document.createElement("canvas")),
           (d.__srcCanvas.width = a),
           (d.__srcCanvas.height = c),
           b.get_transparent() ? (d.__srcContext = d.__srcCanvas.getContext("2d")) : (b.get_transparent() || d.__srcCanvas.setAttribute("moz-opaque", "true"), (d.__srcContext = d.__srcCanvas.getContext("2d", { alpha: !1 }))));
       };
       va.createImageData = function (b) {
         b = b.buffer;
         if (null == b.__srcImageData) {
           null == b.data ? (b.__srcImageData = b.__srcContext.getImageData(0, 0, b.width, b.height)) : ((b.__srcImageData = b.__srcContext.createImageData(b.width, b.height)), b.__srcImageData.data.set(b.data));
           var a = b.__srcImageData.data.buffer;
           a = null != a ? new Uint8Array(a) : null;
           b.data = a;
         }
       };
       va.fillRect = function (b, a, c, d) {
         va.convertToCanvas(b);
         if (1 == d) {
           d = (c >> 16) & 255;
           var f = (c >> 8) & 255;
           var e = c & 255;
           c = b.get_transparent() ? (c >> 24) & 255 : 255;
         } else (d = (c >> 24) & 255), (f = (c >> 16) & 255), (e = (c >> 8) & 255), (c = b.get_transparent() ? c & 255 : 255);
         0 == a.x && 0 == a.y && a.width == b.width && a.height == b.height && b.get_transparent() && 0 == c
           ? (b.buffer.__srcCanvas.width = b.buffer.width)
           : (255 > c && b.buffer.__srcContext.clearRect(a.x + b.offsetX, a.y + b.offsetY, a.width + b.offsetX, a.height + b.offsetY),
             0 < c && ((b.buffer.__srcContext.fillStyle = "rgba(" + d + ", " + f + ", " + e + ", " + c / 255 + ")"), b.buffer.__srcContext.fillRect(a.x + b.offsetX, a.y + b.offsetY, a.width + b.offsetX, a.height + b.offsetY)),
             (b.dirty = !0),
             b.version++);
       };
       va.getPixel = function (b, a, c, d) {
         va.convertToData(b);
         return Ya.getPixel(b, a, c, d);
       };
       va.getPixel32 = function (b, a, c, d) {
         va.convertToData(b);
         return Ya.getPixel32(b, a, c, d);
       };
       va.getPixels = function (b, a, c) {
         va.convertToData(b);
         return Ya.getPixels(b, a, c);
       };
       va.setPixel = function (b, a, c, d, f) {
         va.convertToData(b);
         Ya.setPixel(b, a, c, d, f);
       };
       va.setPixel32 = function (b, a, c, d, f) {
         va.convertToData(b);
         Ya.setPixel32(b, a, c, d, f);
       };
       var Sb = function (b, a, c, d) {
         null == d && (d = 0);
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.x = b;
         this.y = a;
         this.width = c;
         this.height = d;
       };
       r["lime.math.Rectangle"] = Sb;
       Sb.__name__ = "lime.math.Rectangle";
       Sb.prototype = {
         intersection: function (b, a) {
           null == a && (a = new Sb());
           var c = this.x < b.x ? b.x : this.x,
             d = this.get_right() > b.get_right() ? b.get_right() : this.get_right();
           if (d <= c) return a.setEmpty(), a;
           var f = this.y < b.y ? b.y : this.y;
           b = this.get_bottom() > b.get_bottom() ? b.get_bottom() : this.get_bottom();
           if (b <= f) return a.setEmpty(), a;
           a.x = c;
           a.y = f;
           a.width = d - c;
           a.height = b - f;
           return a;
         },
         offset: function (b, a) {
           this.x += b;
           this.y += a;
         },
         setEmpty: function () {
           this.x = this.y = this.width = this.height = 0;
         },
         setTo: function (b, a, c, d) {
           this.x = b;
           this.y = a;
           this.width = c;
           this.height = d;
         },
         __toFlashRectangle: function () {
           return null;
         },
         get_bottom: function () {
           return this.y + this.height;
         },
         get_right: function () {
           return this.x + this.width;
         },
         __class__: Sb,
       };
       var ka = function () {};
       r.SkinLoader = ka;
       ka.__name__ = "SkinLoader";
       ka.getSkinFrom = function (b, a, c, d, f) {
         a.loading = !0;
         a.loaded = !1;
         a.failed = !1;
         ua.loadFromFile(b)
           .onComplete(function (b) {
             a.skin.fromData(b);
             ka.skinLoadedEvent(a);
             null != d && d(a);
           })
           .onError(function (b) {
             a.failed = !0;
             a.loading = !1;
             a.loaded = !1;
             null != f && f();
           });
       };
       ka.loadFromData = function (b, a) {
         a.resetFrames();
         for (var c = 0, d = b.length; c < d; )
           for (var f = c++, e = 0, k = b[f].length; e < k; ) {
             var h = e++;
             a.skin.setPixel(f, h, b[f][h], !0);
           }
         a == ka.frames && (ka.msg = "Saved skin loaded!");
       };
       ka.loadDefault = function (b, a, c) {
         null == c && (c = !1);
         ka.frames.skin.copyPixels(P.getImage("frank"), null, null, null, null, !1);
         ka.frames.loaded = !0;
         c || ka.saveSkinData();
         a == ka.frames && ((ka.defaultSkin = !0), b && (ka.msg = "Default skin loaded!"));
       };
       ka.addTransparency = function (b) {
         for (var a = !1, c = 0; 272 > c; ) {
           for (var d = c++, f = 0; 22 > f; )
             if (G.gt(255, (b.skin.getPixel32(d, f++) >>> 24) & 255)) {
               a = !0;
               break;
             }
           if (a) break;
         }
         if (!a) {
           var e = b.skin.getPixel(1, 1);
           for (c = 0; 272 > c; )
             for (d = c++, f = 0; 22 > f; ) {
               var k = f++;
               b.skin.getPixel(d, k) == e ? b.skin.setPixel(d, k, 0) : 16711935 == e && 16712191 == b.skin.getPixel(d, k) ? b.skin.setPixel(d, k, 0) : 16712191 == e && 16711935 == b.skin.getPixel(d, k) && b.skin.setPixel(d, k, 0);
             }
         }
         return !a;
       };
       ka.skinLoadedEvent = function (b) {
         ka.addTransparency(b);
         b.loading = !1;
       };
       ka.saveSkinData = function () {
         null != J.skins[0] ? ((J.skins[4] = J.skins[3]), (J.skins[3] = J.skins[2]), (J.skins[2] = J.skins[1]), (J.skins[1] = J.skins[0])) : (J.skins[0] = []);
         ka.saveSkinDataTo(ka.frames.skin, J.skins[0]);
         J.save();
       };
       ka.saveSkinDataTo = function (b, a) {
         for (var c = 0; 272 > c; ) {
           var d = c++;
           a[d] = [];
           for (var f = 0; 22 > f; ) {
             var e = f++;
             a[d][e] = b.getPixel32(d, e);
           }
         }
       };
       var t = function (b, a, c, d) {
         null == d && (d = 0);
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.x = this.y = this.width = this.height = this.centerX = this.centerY = 0;
         this.x = b;
         this.y = a;
         this.set_width(c);
         this.set_height(d);
       };
       r["lemongine.Rectangle"] = t;
       t.__name__ = "lemongine.Rectangle";
       t.prototype = {
         set: function (b, a, c, d) {
           null == d && (d = 0);
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.x = b;
           this.y = a;
           this.set_width(c);
           this.set_height(d);
           return this;
         },
         clone: function () {
           return new t(this.x, this.y, this.width, this.height);
         },
         contains: function (b, a) {
           return b >= this.x && a >= this.y && b < this.x + this.width ? a < this.y + this.height : !1;
         },
         containsPoint: function (b) {
           return b.x >= this.x && b.y >= this.y && b.x < this.x + this.width ? b.y < this.y + this.height : !1;
         },
         intersects: function (b) {
           return !(b.get_right() <= this.get_left() || b.get_left() >= this.get_right() || b.get_top() >= this.get_bottom() || b.get_bottom() <= this.get_top());
         },
         intersection: function (b) {
           var a = Math.max(this.get_left(), b.get_left()),
             c = Math.min(this.get_right(), b.get_right()),
             d = Math.max(this.get_top(), b.get_top());
           b = Math.min(this.get_bottom(), b.get_bottom());
           return new t(a, d, Math.max(0, c - a), Math.max(0, b - d));
         },
         translate: function (b, a) {
           this.x += b;
           this.y += a;
           return this;
         },
         get_position: function () {
           null == this._position ? (this._position = new h(this.x, this.y)) : this._position.set(this.x, this.y);
           return this._position;
         },
         get_size: function () {
           null == this._size ? (this._size = new h(this.width, this.height)) : this._size.set(this.width, this.height);
           return this._size;
         },
         toLimeRectangle: function () {
           return new Sb(this.x, this.y, this.width, this.height);
         },
         toArray: function () {
           return [this.x, this.y, this.width, this.height];
         },
         set_width: function (b) {
           0 > b ? ((this.x += b), (this.width = -b)) : (this.width = b);
           return b;
         },
         set_height: function (b) {
           0 > b ? ((this.y += b), (this.height = -b)) : (this.height = b);
           return b;
         },
         get_left: function () {
           return this.x;
         },
         get_right: function () {
           return this.x + this.width;
         },
         get_top: function () {
           return this.y;
         },
         get_bottom: function () {
           return this.y + this.height;
         },
         get_centerX: function () {
           return this.x + 0.5 * this.width;
         },
         get_centerY: function () {
           return this.y + 0.5 * this.height;
         },
         __class__: t,
       };
       var ec = function (b) {
         this.skinIDToSlot = new Ma();
         this.unusedSlots = [];
         this.slots = [];
         this.game = b;
         this.skinScene = new fb(810, 1012, fc.ORTHOGRAPHIC, new F(0));
         this.skinScene.setup2D(810, 1012, new F(0));
         this.skinScene.clear();
         this.skinTexture = new sa().fromScene(this.skinScene);
         b = 0;
         for (var a = Math.floor(this.skinScene.get_width() / ec.skinSize.x); b < a; )
           for (var c = b++, d = 0, f = Math.floor(this.skinScene.get_height() / ec.skinSize.y); d < f; ) this.unusedSlots.push(new h(c * ec.skinSize.x, d++ * ec.skinSize.y));
       };
       r.SkinTextureManager = ec;
       ec.__name__ = "SkinTextureManager";
       ec.prototype = {
         getTextureSlot: function (b) {
           var a = this,
             c = null != this.game ? this.game.world.tick : m.Instance.tick;
           if (!this.skinIDToSlot.h.hasOwnProperty(b)) {
             if (0 < this.unusedSlots.length) {
               var d = this.unusedSlots.shift();
               this.slots.push({ skinID: b, tickUpdated: c, rect: new t(d.x, d.y, ec.skinSize.x, ec.skinSize.y), loaded: !1, failed: !1 });
               this.skinIDToSlot.h[b] = this.slots.length - 1;
             } else {
               d = c - 1;
               for (var f = -1, e = this.skinIDToSlot.iterator(); e.hasNext(); ) {
                 var k = e.next();
                 if (this.slots[k].failed || c - this.slots[k].tickUpdated > 10 * m.Instance.get_fps()) {
                   f = k;
                   break;
                 }
                 this.slots[k].tickUpdated < d && ((d = this.slots[k].tickUpdated), (f = k));
               }
               if (-1 != f)
                 this.skinIDToSlot.remove(this.slots[f].skinID),
                   (this.slots[f].skinID = b),
                   (this.slots[f].loaded = !1),
                   (this.slots[f].failed = !1),
                   (this.skinIDToSlot.h[b] = f),
                   this.skinScene.fillRect(new t(this.slots[f].rect.x, this.skinScene.get_height() - this.slots[f].rect.y - this.slots[f].rect.height, this.slots[f].rect.width, this.slots[f].rect.height), F.clear, 0, !0);
               else return ec.blankSlot;
             }
             d = function (c) {
               a.skinIDToSlot.h.hasOwnProperty(b) &&
                 (a.skinScene.draw2DFlipped(
                   c.skin,
                   new h(a.slots[a.skinIDToSlot.h[b]].rect.x, a.skinScene.get_height() - a.slots[a.skinIDToSlot.h[b]].rect.y - a.slots[a.skinIDToSlot.h[b]].rect.height),
                   new t(0, 0, a.slots[a.skinIDToSlot.h[b]].rect.width, a.slots[a.skinIDToSlot.h[b]].rect.height)
                 ),
                 (a.slots[a.skinIDToSlot.h[b]].loaded = !0),
                 (a.slots[a.skinIDToSlot.h[b]].failed = !1));
             };
             f = function () {
               a.skinIDToSlot.h.hasOwnProperty(b) && ((a.slots[a.skinIDToSlot.h[b]].loaded = !0), (a.slots[a.skinIDToSlot.h[b]].failed = !0));
             };
             null != this.game ? this.game.getSkinObject(null == b ? "null" : "" + b, d, f) : ((e = new qb()), e.resetFrames(), ka.getSkinFrom("https://mineblocks.com/1/skins/" + b + ".png", e, 0, d, f));
           }
           this.slots[this.skinIDToSlot.h[b]].tickUpdated = c;
           return this.slots[this.skinIDToSlot.h[b]];
         },
         __class__: ec,
       };
       var E = function () {};
       r.Std = E;
       E.__name__ = "Std";
       E.string = function (b) {
         return H.__string_rec(b, "");
       };
       E.parseInt = function (b) {
         if (null != b)
           for (var a = 0, c = b.length; a < c; ) {
             var d = a++,
               f = b.charCodeAt(d);
             if (8 >= f || (14 <= f && 32 != f && 45 != f))
               if (((a = b.charCodeAt(d + 1)), (b = parseInt(b, 120 == a || 88 == a ? 16 : 10)), isNaN(b))) break;
               else return b;
           }
         return null;
       };
       var Sh = function () {};
       r["_String.String_Impl_"] = Sh;
       Sh.__name__ = "_String.String_Impl_";
       Sh.fromCharCode = function (b) {
         return String.fromCodePoint(b);
       };
       var ph = function () {
         this.b = "";
       };
       r.StringBuf = ph;
       ph.__name__ = "StringBuf";
       ph.prototype = { __class__: ph };
       var Sa = function () {};
       r.StringTools = Sa;
       Sa.__name__ = "StringTools";
       Sa.startsWith = function (b, a) {
         return b.length >= a.length ? 0 == b.lastIndexOf(a, 0) : !1;
       };
       Sa.endsWith = function (b, a) {
         var c = a.length,
           d = b.length;
         return d >= c ? b.indexOf(a, d - c) == d - c : !1;
       };
       Sa.isSpace = function (b, a) {
         b = I.cca(b, a);
         return 8 < b && 14 > b ? !0 : 32 == b;
       };
       Sa.ltrim = function (b) {
         for (var a = b.length, c = 0; c < a && Sa.isSpace(b, c); ) ++c;
         return 0 < c ? I.substr(b, c, a - c) : b;
       };
       Sa.rtrim = function (b) {
         for (var a = b.length, c = 0; c < a && Sa.isSpace(b, a - c - 1); ) ++c;
         return 0 < c ? I.substr(b, 0, a - c) : b;
       };
       Sa.trim = function (b) {
         return Sa.ltrim(Sa.rtrim(b));
       };
       Sa.replace = function (b, a, c) {
         return b.split(a).join(c);
       };
       Sa.hex = function (b, a) {
         for (var c = ""; (c = "0123456789ABCDEF".charAt(b & 15) + c), (b >>>= 4), 0 < b; );
         if (null != a) for (; c.length < a; ) c = "0" + c;
         return c;
       };
       var R = function () {};
       r.TextCache = R;
       R.__name__ = "TextCache";
       R.get = function (b, a, c, d, f, e, k, h) {
         null == k && (k = Q.LEFT);
         var l = !1;
         if (Object.prototype.hasOwnProperty.call(R.entityCache.h, b))
           (b = R.entityCache.h[b]), (b.entity.textAlignment = k), a != b.entity.text && (l = !0), b.entity.setText(a), (b.expires = 10), null == f || f.equals(b.color) || (b.entity.setColor(f), (b.color = f));
         else {
           null == f && (f = new F(-16777216));
           var g = R.entityCache;
           a = { entity: new nc(null != d ? d : x.get_volter(), a, f, k), color: f, expires: 1, aliasBleed: 1.5 };
           g.h[b] = a;
           b = R.entityCache.h[b];
         }
         null != h && h != b.aliasBleed && (b.aliasBleed = h);
         if (null != e && e != b.scale) {
           c = null != c ? new M(c.x, c.y, b.entity.transform.getZ()) : new M(b.entity.transform.getX(), b.entity.transform.getY(), b.entity.transform.getZ());
           b.entity.transform.reset().scale(e, e, e).setPosition(c.x, c.y, c.z);
           if (null == b.scale || (Math.floor(e) == e) != (Math.floor(b.scale) == b.scale))
             Math.floor(e) != e ? ((b.entity.shaderProgram = Gb.getShader()), b.entity.setUniform("aliasBleed", b.aliasBleed / 2)) : (b.entity.shaderProgram = gc.getShader(La.NORMAL)), b.entity.updateShaderAttribs();
           b.scale = e;
           k == Q.CENTER ? b.entity.transform.translate(0, (-b.entity.calculatedHeight * e) / 2) : k == Q.RIGHT && b.entity.transform.translate(-b.entity.calculatedWidth * e, 0);
         } else
           null == c || (b.entity.transform.getX() == c.x && b.entity.transform.getY() == c.y)
             ? l && (k == Q.CENTER ? b.entity.transform.translate(0, (-b.entity.calculatedHeight * e) / 2) : k == Q.RIGHT && b.entity.transform.translate(-b.entity.calculatedWidth * e, 0))
             : ((b.point = c),
               b.entity.transform.setPosition(c.x, c.y, b.entity.transform.getZ()),
               k == Q.CENTER ? b.entity.transform.translate(0, (-b.entity.calculatedHeight * e) / 2) : k == Q.RIGHT && b.entity.transform.translate(-b.entity.calculatedWidth * e, 0));
         return b.entity;
       };
       var Uc = (D.TextureLoadingState = {
         __ename__: "TextureLoadingState",
         __constructs__: null,
         DONE: { _hx_name: "DONE", _hx_index: 0, __enum__: "TextureLoadingState", toString: n },
         INIT: { _hx_name: "INIT", _hx_index: 1, __enum__: "TextureLoadingState", toString: n },
         LOADING_IMAGES: { _hx_name: "LOADING_IMAGES", _hx_index: 2, __enum__: "TextureLoadingState", toString: n },
         PROCESSING: { _hx_name: "PROCESSING", _hx_index: 3, __enum__: "TextureLoadingState", toString: n },
       });
       Uc.__constructs__ = [Uc.DONE, Uc.INIT, Uc.LOADING_IMAGES, Uc.PROCESSING];
       var y = function () {};
       r.Textures = y;
       y.__name__ = "Textures";
       y.getTexture = function (b, a) {
         null == a && (a = "");
         "" != a && (b += "[" + a + "]");
         return Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, b) ? y.blockTextureMap.h[b] : y.blockTextureMap.h.missing;
       };
       y.hasTexture = function (b, a) {
         null == a && (a = "");
         "" != a && (b += "[" + a + "]");
         return Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, b);
       };
       y.texturePackInit = function () {
         y.blockTexturesScene = new fb(0, 0);
         y.texturePackJson = {};
         try {
           y.texturePackJson = JSON.parse(qa.getText("assets/images/world/blocks.json"));
         } catch (l) {
           Ia.trace("Couldn't load texture pack JSON! " + E.string(na.caught(l).unwrap()), { fileName: "src/Textures.hx", lineNumber: 53, className: "Textures", methodName: "texturePackInit" });
           y.state = Uc.DONE;
           return;
         }
         y.inputTextures = new e();
         for (var b = 0, a = H.__cast(y.texturePackJson.images, Array).length; b < a; ) {
           var c = y.texturePackJson.images[b++],
             d = y.inputTextures,
             f = c.meta.file;
           c = P.loadImage("assets/images/world/" + c.meta.file);
           d.h[f] = c;
         }
         y.state = Uc.LOADING_IMAGES;
       };
       y.texturePackCheckImages = function () {
         for (var b = y.inputTextures.h, a = Object.keys(b), c = a.length, d = 0; d < c; ) if (!b[a[d++]].imageLoaded) return !1;
         y.texturePackProcess();
         return !0;
       };
       y.texturePackProcess = function () {
         y.blockTexturesScene.setup2D(1024, 1024, new F(0));
         y.blockTexturesScene.clear();
         y.blockTextures = new sa().fromScene(y.blockTexturesScene);
         y.blockTexturesOccupied = new Ma();
         for (var b = 0, a = Math.pow(1024 / y.TEXTURE_UNIT_SIZE, 2); b < a; ) y.blockTexturesUnoccupied.h[b++] = !0;
         var c = new h();
         b = 0;
         for (a = H.__cast(y.texturePackJson.images, Array).length; b < a; )
           for (var d = y.texturePackJson.images[b++], f = 0, e = Z.fields(d.textures); f < e.length; ) {
             var k = e[f];
             ++f;
             var g = d.meta.unit_size;
             var m = null != Z.field(d.textures, k).width ? Z.field(d.textures, k).width * g : g;
             var n = null != Z.field(d.textures, k).height ? Z.field(d.textures, k).height * g : g;
             y.nearestUnoccupied(c, y.blockTexturesUnoccupied, Math.ceil(m / y.TEXTURE_UNIT_SIZE), Math.ceil(n / y.TEXTURE_UNIT_SIZE));
             y.blockTexturesScene.draw2D(y.inputTextures.h[d.meta.file], new h(c.x * y.TEXTURE_UNIT_SIZE, c.y * y.TEXTURE_UNIT_SIZE), new t(Z.field(d.textures, k).x * g, Z.field(d.textures, k).y * g, m, n));
             g = 0;
             for (var A = Math.ceil(m / y.TEXTURE_UNIT_SIZE); g < A; )
               for (var p = g++, q = 0, r = Math.ceil(n / y.TEXTURE_UNIT_SIZE); q < r; ) {
                 var w = q++;
                 y.blockTexturesUnoccupied.remove((1024 / y.TEXTURE_UNIT_SIZE) * (c.y + w) + (c.x + p));
                 y.blockTexturesOccupied.h[(1024 / y.TEXTURE_UNIT_SIZE) * (c.y + w) + (c.x + p)] = k;
               }
             g = y.blockTextureMap;
             m = new t(c.x * y.TEXTURE_UNIT_SIZE, c.y * y.TEXTURE_UNIT_SIZE, m, n);
             g.h[k] = m;
           }
         c = y.blockTextures.clone(!0);
         b = 0;
         for (a = Z.fields(y.texturePackJson.compositing); b < a.length; )
           if (((d = a[b]), ++b, Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, d))) {
             k = [];
             m = Z.field(y.texturePackJson.compositing, d);
             f = 0;
             for (e = m.length; f < e; )
               (n = f++),
                 Object.prototype.hasOwnProperty.call(m[n], "id") &&
                   Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, Z.field(m[n], "id")) &&
                   k.push(new h(y.blockTextureMap.h[Z.field(m[n], "id")].x, y.blockTextureMap.h[Z.field(m[n], "id")].y));
             y.stackTextures(c, y.blockTexturesScene, y.blockTextureMap.h[d], k);
           }
         c.destroy();
         c = y.blockTextures.clone();
         y.blockTexturesScene.clear();
         y.blockTexturesScene.draw2D(c);
         y.blockTexturesScene.render();
         y.state = Uc.DONE;
       };
       y.nearestUnoccupied = function (b, a, c, d) {
         for (var f, e = a.keys(); e.hasNext(); ) {
           var k = e.next();
           f = !1;
           if (!(k % (1024 / y.TEXTURE_UNIT_SIZE) > 1024 / y.TEXTURE_UNIT_SIZE - c)) {
             for (var h = 0; h < c; ) {
               for (var g = h++, m = 0; m < d; ) a.h.hasOwnProperty(k + m++ * (1024 / y.TEXTURE_UNIT_SIZE) + g) || (f = !0);
               if (f) break;
             }
             if (!f) {
               b.set(k % (1024 / y.TEXTURE_UNIT_SIZE), Math.floor(k / (1024 / y.TEXTURE_UNIT_SIZE)));
               return;
             }
           }
         }
         Ia.trace("Error! Failed to find available texture spot.", { fileName: "src/Textures.hx", lineNumber: 169, className: "Textures", methodName: "nearestUnoccupied" });
       };
       y.stackTextures = function (b, a, c, d) {
         a.fillRect(new t(c.x, c.y, c.width, c.height), F.clear, 0, !0);
         for (var f = 0; f < d.length; ) {
           var e = d[f];
           ++f;
           a.draw2D(b, new h(c.x, c.y), new t(e.x, e.y, c.width, c.height));
         }
       };
       y.addTexture = function (b, a, c, d) {
         if (!Object.prototype.hasOwnProperty.call(y.blockTextureMap.h, b)) {
           for (var f = new h(); ; )
             if ((y.nearestUnoccupied(f, y.blockTexturesUnoccupied, Math.ceil(c.width / y.TEXTURE_UNIT_SIZE), Math.ceil(c.height / y.TEXTURE_UNIT_SIZE)), 0 == f.x && 0 == f.y && 0 < y.runtimeBlockTextures.length)) {
               null != y.runtimeBlockTextures[0].deleteCallback && y.runtimeBlockTextures[0].deleteCallback();
               for (var e = 0, k = Math.ceil(y.runtimeBlockTextures[0].clip.width / y.TEXTURE_UNIT_SIZE); e < k; )
                 for (var g = e++, m = 0, n = Math.ceil(y.runtimeBlockTextures[0].clip.height / y.TEXTURE_UNIT_SIZE); m < n; ) {
                   var A = m++;
                   y.blockTexturesOccupied.remove((1024 / y.TEXTURE_UNIT_SIZE) * (y.runtimeBlockTextures[0].point.y + A) + (y.runtimeBlockTextures[0].point.x + g));
                   y.blockTexturesUnoccupied.h[(1024 / y.TEXTURE_UNIT_SIZE) * (y.runtimeBlockTextures[0].point.y + A) + (y.runtimeBlockTextures[0].point.x + g)] = !0;
                 }
               y.runtimeBlockTextures.shift();
             } else break;
           var p = new t(
             f.x * y.TEXTURE_UNIT_SIZE,
             y.blockTexturesScene.get_height() - f.y * y.TEXTURE_UNIT_SIZE - Math.ceil(c.height / y.TEXTURE_UNIT_SIZE) * y.TEXTURE_UNIT_SIZE,
             Math.ceil(c.width / y.TEXTURE_UNIT_SIZE) * y.TEXTURE_UNIT_SIZE,
             Math.ceil(c.height / y.TEXTURE_UNIT_SIZE) * y.TEXTURE_UNIT_SIZE
           );
           y.blockTexturesScene.fillRect(p, F.clear, 0, !0);
           y.blockTexturesScene.draw2DFlipped(a, new h(f.x * y.TEXTURE_UNIT_SIZE, y.blockTexturesScene.get_height() - f.y * y.TEXTURE_UNIT_SIZE - c.height), c);
           e = 0;
           for (k = Math.ceil(c.width / y.TEXTURE_UNIT_SIZE); e < k; )
             for (g = e++, m = 0, n = Math.ceil(c.height / y.TEXTURE_UNIT_SIZE); m < n; )
               (A = m++), y.blockTexturesUnoccupied.remove((1024 / y.TEXTURE_UNIT_SIZE) * (f.y + A) + (f.x + g)), (y.blockTexturesOccupied.h[(1024 / y.TEXTURE_UNIT_SIZE) * (f.y + A) + (f.x + g)] = b);
           a = y.blockTextureMap;
           c = new t(f.x * y.TEXTURE_UNIT_SIZE, f.y * y.TEXTURE_UNIT_SIZE, c.width, c.height);
           a.h[b] = c;
           y.runtimeBlockTextures.push({ id: b, point: f, clip: p, deleteCallback: d });
         }
       };
       var ub = (D.ValueType = {
         __ename__: "ValueType",
         __constructs__: null,
         TNull: { _hx_name: "TNull", _hx_index: 0, __enum__: "ValueType", toString: n },
         TInt: { _hx_name: "TInt", _hx_index: 1, __enum__: "ValueType", toString: n },
         TFloat: { _hx_name: "TFloat", _hx_index: 2, __enum__: "ValueType", toString: n },
         TBool: { _hx_name: "TBool", _hx_index: 3, __enum__: "ValueType", toString: n },
         TObject: { _hx_name: "TObject", _hx_index: 4, __enum__: "ValueType", toString: n },
         TFunction: { _hx_name: "TFunction", _hx_index: 5, __enum__: "ValueType", toString: n },
         TClass:
           ((ia = function (b) {
             return { _hx_index: 6, c: b, __enum__: "ValueType", toString: n };
           }),
           (ia._hx_name = "TClass"),
           (ia.__params__ = ["c"]),
           ia),
         TEnum:
           ((ia = function (b) {
             return { _hx_index: 7, e: b, __enum__: "ValueType", toString: n };
           }),
           (ia._hx_name = "TEnum"),
           (ia.__params__ = ["e"]),
           ia),
         TUnknown: { _hx_name: "TUnknown", _hx_index: 8, __enum__: "ValueType", toString: n },
       });
       ub.__constructs__ = [ub.TNull, ub.TInt, ub.TFloat, ub.TBool, ub.TObject, ub.TFunction, ub.TClass, ub.TEnum, ub.TUnknown];
       var Za = function () {};
       r.Type = Za;
       Za.__name__ = "Type";
       Za.createInstance = function (b, a) {
         return new (Function.prototype.bind.apply(b, [null].concat(a)))();
       };
       Za.createEnum = function (b, a, c) {
         var d = Z.field(b, a);
         if (null == d) throw na.thrown("No such constructor " + a);
         if (Z.isFunction(d)) {
           if (null == c) throw na.thrown("Constructor " + a + " need parameters");
           return d.apply(b, c);
         }
         if (null != c && 0 != c.length) throw na.thrown("Constructor " + a + " does not need parameters");
         return d;
       };
       Za.typeof = function (b) {
         switch (typeof b) {
           case "boolean":
             return ub.TBool;
           case "function":
             return b.__name__ || b.__ename__ ? ub.TObject : ub.TFunction;
           case "number":
             return Math.ceil(b) == b % 2147483648 ? ub.TInt : ub.TFloat;
           case "object":
             if (null == b) return ub.TNull;
             var a = b.__enum__;
             if (null != a) return ub.TEnum(D[a]);
             b = H.getClass(b);
             return null != b ? ub.TClass(b) : ub.TObject;
           case "string":
             return ub.TClass(String);
           case "undefined":
             return ub.TNull;
           default:
             return ub.TUnknown;
         }
       };
       Za.enumParameters = function (b) {
         var a = D[b.__enum__].__constructs__[b._hx_index].__params__;
         if (null != a) {
           for (var c = [], d = 0; d < a.length; ) {
             var f = a[d];
             ++d;
             c.push(b[f]);
           }
           return c;
         }
         return [];
       };
       var W = function () {};
       r.UI = W;
       W.__name__ = "UI";
       W.checkbox = function (b, a, c, d, f, e, k, g) {
         null == g && (g = -1);
         null == k && (k = !1);
         var l = !1;
         a = m.buttonBehavior(
           a,
           k,
           d,
           f,
           0 > g ? 14 : g,
           15,
           function () {
             l = !0;
             e();
           },
           !1
         );
         l && (c = !c);
         b.addQuad(new M(d, f, 0), new h(c ? 14 : 0, 128 + (k ? 30 : 2 != a ? 0 : 15)), new h(14, 15));
       };
       W.radio = function (b, a, c, d, f, e, k, g, z) {
         null == z && (z = -1);
         null == g && (g = !1);
         var l = !1;
         a = m.buttonBehavior(
           a,
           c == d || g,
           f,
           e,
           0 > z ? 14 : z,
           15,
           function () {
             l = !0;
             k();
           },
           !1
         );
         l && (c = d);
         b.addQuad(new M(f, e, 0), new h(91 + (c == d ? 14 : 0), 128 + (g ? 30 : 2 != a ? 0 : 15)), new h(14, 15));
       };
       W.numericStepper = function (b, a, c, d, f, e, k, g, z, n) {
         b.add9Slice(new t(d, f, e, 22), new t(28, 150, 4, 4), new t(2, 1, 1, 1));
         if (null == W.fields.h[a]) {
           var l = R.get(a, null == c ? "null" : "" + c, new h(), x.get_volter(), F.black, 1.6, Q.CENTER, 1.5);
           l.layer = b.layer + 1;
           var C = W.fields;
           l = { textField: l, input: new Ha(l, new h(e / 1.6, 11.25), 1.6) };
           C.h[a] = l;
           W.fields.h[a].input.set_allowedCharacters("0-9");
         }
         var p = m.buttonBehavior(a + "Up", !1, d + e, f, 21, 10, null, !1);
         2 == p && ((C = m.Instance.mouseDown()), (l = (m.Instance.get_fps() / 6) | 0), 1 == (G.toFloat(C) % G.toFloat(l) | 0) && ((c = w.clamp(k, g, c + z)), W.fields.h[a].input.set_text(null == c ? "null" : "" + c), n(c)));
         b.addQuad(new M(d + e, f), new h(28 + 21 * p, 128), new h(21, 10));
         p = m.buttonBehavior(a + "Down", !1, d + e, f + 10, 21, 12, null, !1);
         2 == p && ((C = m.Instance.mouseDown()), (l = (m.Instance.get_fps() / 6) | 0), 1 == (G.toFloat(C) % G.toFloat(l) | 0) && ((c = w.clamp(k, g, c - z)), W.fields.h[a].input.set_text(null == c ? "null" : "" + c), n(c)));
         b.addQuad(new M(d + e, f + 10), new h(28 + 21 * p, 138), new h(21, 12));
         W.fields.h[a].input.transform
           .reset()
           .scale2D(1.6)
           .translate(d + 8, f + 4);
         W.fields.h[a].input.set_maxLength(3);
         W.fields.h[a].input.containsPoint(m.Instance.mouse)
           ? W.fields.h[a].input.focused || ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (W.fields.h[a].input.set_focused(!0), W.fields.h[a].input.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
           : W.fields.h[a].input.focused && 1 == m.Instance.mouseDown() && W.fields.h[a].input.set_focused(!1);
         W.fields.h[a].input.get_text() != (null == c ? "null" : "" + c) &&
           ((c = w.clamp(k, g, E.parseInt(W.fields.h[a].input.get_text()))), W.fields.h[a].input.get_text() != (null == c ? "null" : "" + c) && W.fields.h[a].input.set_text(null == c ? "null" : "" + c), n(c));
         W.fields.h[a].input.update(m.Instance.scene);
       };
       W.textfield = function (b, a, c, d, f, e, k, g, z, n) {
         null == n && (n = "");
         null == z && (z = 30);
         b.add9Slice(new t(d, f, e, (8 * k + 8) | 0), new t(28, 150, 4, 4), new t(2, 1, 1, 1));
         if (null == W.fields.h[a]) {
           var l = R.get(a, c, new h(), x.get_volter(), F.black, k, Q.LEFT, 1.5);
           l.layer = b.layer + 1;
           b = W.fields;
           e = { textField: l, input: new Ha(l, new h(e / k - 8, 11.25), k) };
           b.h[a] = e;
         }
         W.fields.h[a].input.transform
           .reset()
           .scale2D(k)
           .translate(d + 4, f + 4);
         W.fields.h[a].input.set_maxLength(z);
         W.fields.h[a].input.set_allowedCharacters(n);
         W.fields.h[a].input.containsPoint(m.Instance.mouse)
           ? W.fields.h[a].input.focused || ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (W.fields.h[a].input.set_focused(!0), W.fields.h[a].input.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
           : W.fields.h[a].input.focused && 1 == m.Instance.mouseDown() && W.fields.h[a].input.set_focused(!1);
         W.fields.h[a].input.get_text() != c && ((c = W.fields.h[a].input.get_text()), W.fields.h[a].input.get_text() != c && W.fields.h[a].input.set_text(c), g(c));
         W.fields.h[a].input.update(m.Instance.scene);
       };
       W.dynamicText = function (b, a, c, d, f, e, k) {
         if (null == W.fields.h[a]) {
           var l = R.get(a, c, new h(), x.get_volter(), F.white, k, Q.LEFT, 1.5);
           l.layer = b.layer + 1;
           b = W.fields;
           e = { textField: l, input: new Ha(l, new h(e / k, 11.25), k) };
           b.h[a] = e;
           W.fields.h[a].input.readonly = !0;
           W.fields.h[a].input.setSelection(0, 0);
         }
         W.fields.h[a].input.transform.reset().scale2D(k).translate(d, f);
         W.fields.h[a].input.containsPoint(m.Instance.mouse)
           ? W.fields.h[a].input.focused || ((m.Instance.cursor = Ua.TEXT), 1 == m.Instance.mouseDown() && (W.fields.h[a].input.set_focused(!0), W.fields.h[a].input.mouseDownHandler(m.Instance.mouse.x, m.Instance.mouse.y, 0)))
           : W.fields.h[a].input.focused && 1 == m.Instance.mouseDown() && W.fields.h[a].input.set_focused(!1);
         W.fields.h[a].input.get_text() != c && (W.fields.h[a].input.set_text(c), W.fields.h[a].input.setSelection(0, 0));
         W.fields.h[a].input.update(m.Instance.scene);
       };
       W.dropdown = function (b, a, c, d, f, l, k, g, z) {
         null == z && (z = !1);
         var C = m.buttonBehavior(a, z, f, l, k + 22, 22, null, !1);
         2 == C &&
           1 == m.Instance.mouseDown() &&
           (null != W.currentDropdown && 1 == W.currentDropdown.open && W.currentDropdown.id == a
             ? (W.currentDropdown.open = !1)
             : (W.currentDropdown = { open: !0, id: a, options: c, index: d, onChange: g, x: f, y: l + 22, width: k + 22, scrollPosition: 0 }));
         null != W.currentDropdown && 1 == W.currentDropdown.open && W.currentDropdown.id == a && (C = 2);
         if (z) {
           g = new t(f, l, k, 22);
           var A = new t(28 + (0 == C ? 0 : 27), 154, 5, 22),
             n = new t(3, 3, 1, 16),
             p = new e(),
             q = w.repeatArray([0.4, 0.4, 0.4, 1], 6);
           p.h.color = q;
           q = w.repeatArray([0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0], 6);
           p.h.colorOffset = q;
           b.add9Slice(g, A, n, 0, p);
           g = new M(f + k, l);
           A = new h(33 + (0 == C ? 0 : 27), 154);
           n = new h(22, 22);
           p = new e();
           q = w.repeatArray([0.4, 0.4, 0.4, 1], 6);
           p.h.color = q;
           q = w.repeatArray([0.13333333333333333, 0.13333333333333333, 0.13333333333333333, 0], 6);
           p.h.colorOffset = q;
           b.addQuad(g, A, n, !0, null, null, null, p);
         } else b.add9Slice(new t(f, l, k, 22), new t(28 + (0 == C ? 0 : 27), 154, 5, 22), new t(3, 3, 1, 16)), b.addQuad(new M(f + k, l), new h(33 + (0 == C ? 0 : 27), 154), new h(22, 22));
         0 < c.length &&
           ((a = R.get(a, c[d], new h(f + 6, l + 5), x.get_volter(), z ? new F(-12303292) : F.black, 1.3, Q.LEFT, 1.5)), a.setUniform("mask", [-1, 0, (k - 4) / 1.3, 16.923076923076923]), (a.layer = b.layer + 1), m.Instance.scene.draw(a));
       };
       W.drawDropdown = function () {
         if (null != W.currentDropdown && W.currentDropdown.open) {
           if (null == W.dropdownEntity) {
             var b = P.getImage("ui"),
               a = Fa.getShader(xa.NORMAL),
               c = new e(),
               d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             W.dropdownEntity = new da(b, null, a, c);
             W.dropdownEntity.isTransparent = !0;
             W.dropdownEntity.layer = 29;
           }
           W.dropdownEntity.clearPool(!1, !0);
           var f = !1;
           if (6 <= W.currentDropdown.options.length) {
             var l = W.currentDropdown.y,
               k = 20 * W.currentDropdown.options.length;
             0 == m.Instance.mouseDown() &&
               new t(W.currentDropdown.x, l, W.currentDropdown.width - 22, 110).containsPoint(m.Instance.mouse) &&
               (0 < m.Instance.mouseWheelDelta
                 ? (W.currentDropdown.scrollPosition = Math.max(0, W.currentDropdown.scrollPosition - 8))
                 : 0 > m.Instance.mouseWheelDelta && (W.currentDropdown.scrollPosition = Math.min(k - 110, W.currentDropdown.scrollPosition + 8)));
             b = W.dropdownEntity;
             a = new M(W.currentDropdown.x + W.currentDropdown.width - 22, l);
             var g = new h(96, 0),
               z = new h(1, 1),
               n = new h(22, 110);
             c = new e();
             d = w.repeatArray([0.8588235294117647, 0.8627450980392157, 0.8666666666666667, 1], 6);
             c.h.color = d;
             b.addQuad(a, g, z, !0, n, null, null, c);
             c = m.buttonBehavior(W.currentDropdown.id + "ScrollUp", !1, W.currentDropdown.x + W.currentDropdown.width - 22, l, 22, 20, null, !1);
             W.dropdownEntity.addQuad(new M(W.currentDropdown.x + W.currentDropdown.width - 22, l), new h(128 + 22 * c, 170), new h(22, 20), !0, new h(22, 20));
             2 == c && ((W.currentDropdown.scrollPosition = Math.max(0, W.currentDropdown.scrollPosition - 4)), (f = !0));
             c = m.buttonBehavior(W.currentDropdown.id + "ScrollDown", !1, W.currentDropdown.x + W.currentDropdown.width - 22, (l + 110 - 20) | 0, 22, 20, null, !1);
             W.dropdownEntity.addQuad(new M(W.currentDropdown.x + W.currentDropdown.width - 22, (l + 110 - 20 + 1) | 0), new h(128 + 22 * c, 203), new h(22, 20), !0, new h(22, 20));
             2 == c && ((W.currentDropdown.scrollPosition = Math.min(k - 110, W.currentDropdown.scrollPosition + 4)), (f = !0));
             c = Math.max(12, 70 * Math.min(1, 110 / Math.max(1, k))) | 0;
             b = new t(W.currentDropdown.x + W.currentDropdown.width - 22, l + 20 + Math.min(70 - c, ((70 - c) * W.currentDropdown.scrollPosition) / (k - 110)), 22, c + 1);
             c = m.buttonBehavior(W.currentDropdown.id + "Scrollbar", !1, b.x | 0, b.y | 0, b.width | 0, b.height | 0, null, !1);
             G.gt(m.Instance.mouseDown(), 0) &&
               m.Instance.getUIHover() == W.currentDropdown.id + "Scrollbar" &&
               (1 == m.Instance.mouseDown() && (W.scrollMousePosition = m.Instance.mouse.y - b.y),
               (c = 2),
               (f = !0),
               (W.currentDropdown.scrollPosition = w.clamp(0, k - 110, ((m.Instance.mouse.y - W.scrollMousePosition - (l + 22)) / 66) * k)));
             W.dropdownEntity.add9Slice(b, new t(128 + 22 * c, 190, 22, 3), new t(1, 1, 20, 1), 0, null, 1);
             W.dropdownEntity.addQuad(new M(b.x, (b.get_centerY() | 0) - 5), new h(128 + 22 * c, 193), new h(22, 10), !0, new h(22, 10));
             b = l - (W.currentDropdown.scrollPosition | 0);
             c = 0;
             for (k = W.currentDropdown.options.length; c < k; )
               (d = [c++]),
                 b < l - 20 ||
                   b > l + 110 ||
                   ((g = Math.max(W.currentDropdown.y, b) | 0),
                   (z = Math.min(W.currentDropdown.y + 110, b + 20) | 0),
                   (a = m.buttonBehavior(
                     W.currentDropdown.id + "Index" + d[0],
                     !1,
                     W.currentDropdown.x,
                     g,
                     W.currentDropdown.width - 22,
                     z - g,
                     (function (a) {
                       return function () {
                         W.currentDropdown.open = !1;
                         W.currentDropdown.onChange(a[0], W.currentDropdown.options[a[0]]);
                       };
                     })(d),
                     !1
                   )),
                   0 < a && (f = !0),
                   W.dropdownEntity.add9Slice(new t(W.currentDropdown.x, g, W.currentDropdown.width - 22, z - g), new t(82 + (0 < a ? 6 : W.currentDropdown.index == d[0] ? 3 : 0), 154, 3, 20), new t(1, 1, 1, 18)),
                   (a = R.get("dropDownIndex" + d[0], W.currentDropdown.options[d[0]], new h(W.currentDropdown.x + 4, b + 4), x.get_volter(), F.black, 1.3, Q.LEFT, 1.5)),
                   a.setUniform("mask", [-1, (l + 1 - (b + 4)) / 1.3, (W.currentDropdown.width - 22) / 1.3, 83.07692307692308]),
                   (a.layer = 30),
                   m.Instance.scene.draw(a)),
                 (b += 20);
           } else
             for (c = 0, k = W.currentDropdown.options.length; c < k; )
               (l = [c++]),
                 (a = m.buttonBehavior(
                   W.currentDropdown.id + "Index" + l[0],
                   !1,
                   W.currentDropdown.x,
                   W.currentDropdown.y + 20 * l[0],
                   W.currentDropdown.width,
                   20,
                   (function (a) {
                     return function () {
                       W.currentDropdown.open = !1;
                       W.currentDropdown.onChange(a[0], W.currentDropdown.options[a[0]]);
                     };
                   })(l),
                   !1
                 )),
                 0 < a && (f = !0),
                 W.dropdownEntity.add9Slice(new t(W.currentDropdown.x, W.currentDropdown.y + 20 * l[0], W.currentDropdown.width, 20), new t(82 + (0 < a ? 6 : W.currentDropdown.index == l[0] ? 3 : 0), 154, 3, 20), new t(1, 1, 1, 18)),
                 (a = R.get("dropDownIndex" + l[0], W.currentDropdown.options[l[0]], new h(W.currentDropdown.x + 4, W.currentDropdown.y + 20 * l[0] + 4), x.get_volter(), F.black, 1.3, Q.LEFT, 1.5)),
                 a.setUniform("mask", [-1, 0, (W.currentDropdown.width - 6) / 1.3, 20]),
                 (a.layer = 30),
                 m.Instance.scene.draw(a);
           1 != m.Instance.mouseDown() || 0 != f || new t(W.currentDropdown.x, W.currentDropdown.y - 22, W.currentDropdown.width, 22).containsPoint(m.Instance.mouse) || (W.currentDropdown.open = !1);
           m.Instance.scene.draw(W.dropdownEntity);
         }
       };
       var G = {
           gt: function (b, a) {
             var c = 0 > b;
             return c != 0 > a ? c : b > a;
           },
           gte: function (b, a) {
             var c = 0 > b;
             return c != 0 > a ? c : b >= a;
           },
           toFloat: function (b) {
             return 0 > b ? 4294967296 + b : b + 0;
           },
         },
         U = function (b, a, c) {
           null == b && (b = "");
           this.mobTmpData = new e();
           this.mobData = new e();
           this.chunks = new e();
           this.fallingBlockNum = this.flameballNum = this.zombiepigmanNum = this.enderdragonNum = this.spawnskinNum = this.nethereyeNum = this.snowgolemNum = this.magmacubeNum = this.skeletonNum = this.endermanNum = this.creeperNum = this.chickenNum = this.zombieNum = this.rabbitNum = this.spiderNum = this.sheepNum = this.ghastNum = this.blazeNum = this.slimeNum = this.squidNum = this.wolfNum = this.mobNum = this.cowNum = this.pigNum = this.batNum = this.dead = 0;
           this.cheats = !1;
           this.worldVer = "1.30.5";
           this.portalCoords = null;
           this.spawnPoint = new h();
           this.toGrow = new e();
           this.signs = new e();
           this.rafts = new e();
           this.drops = new e();
           this.carts = new e();
           this.onFire = new e();
           this.xpOrbs = new e();
           this.arrows = new e();
           this.spears = new e();
           this.effects = new e();
           this.firstTimes = new e();
           this.inventoryList = [];
           this.balloons = new e();
           this.loadedSkins = new e();
           this.snowballs = new e();
           this.shurikens = new e();
           this.gameRules = new e();
           this.fireballs = new e();
           this.flameballs = new e();
           this.fallingBlocks = new e();
           this.splashPotions = new e();
           this.chests = new e();
           this.mobs = new e();
           this.enderChests = new e();
           this.selectedInventoryItem = 0;
           this.respawn = !1;
           this.lastTarget = "";
           this.defeatedEnder = !1;
           this.xSpeed = this.ySpeed = 0;
           this.worldY = 120;
           this.worldX = 500;
           this.sleepingAnimation = 0;
           this.worldHeight = 120;
           this.worldWidth = 1e3;
           this.gamemode = U.gamemodes.h.SURVIVAL;
           this.hardcore = !1;
           this.difficulty = "normal";
           this.fly = !1;
           this.experience = 0;
           this.health = 20;
           this.achieve = [];
           this.food = 1e3;
           this.armors = [
             ["air", 0, new e()],
             ["air", 0, new e()],
             ["air", 0, new e()],
             ["air", 0, new e()],
           ];
           this.endPortal = new h();
           this.enderCrystals = new e();
           this.snowRegions = new Ma();
           this.day = this.rainDay = 1;
           this.tim = 4;
           this.air = 11;
           this.tick = 0;
           this.riding = "";
           this.biomeList = [];
           this.water = new e();
           this.toSmelt = new e();
           this.toBrew = new e();
           this.wheat = new e();
           this.hasSignal = new e();
           this.playingTNT = new e();
           this.raining = 0;
           this.states = new e();
           this.scene = [];
           this.numberOfScenes = 3;
           this.sceneNum = U.sceneNums.h.OVERWORLD;
           this.seedNum = "";
           this.seed = 0;
           this.fileName = "New World";
           this.lastSaveDate = new Date();
           this.entities = new e();
           this.loadingWorld = !1;
           this.setMobData();
           this.player = new qg("char", null, this);
           this.clearWorldProperties();
           "" != b && this.fromLocalStorage(b, a, c);
         };
       r.World = U;
       U.__name__ = "World";
       U.versionToNumber = function (b) {
         null == b && (b = "");
         var a = 0;
         for (b = b.split("."); 4 > b.length; ) b.push("0");
         "1" == b[0] && (30 < E.parseInt(b[1]) || (30 == E.parseInt(b[1]) && 3 < E.parseInt(b[2]))) && (b[0] = "2");
         for (var c = 0, d = b.length; c < d; ) {
           var f = c++;
           a += E.parseInt(b[f]) * Math.pow(1e3, b.length - f - 1);
         }
         return a;
       };
       U.prototype = {
         fromLocalStorage: function (b, a, c) {
           var d = this;
           this.loadingWorld = !0;
           new Qc(b, "Mine_Blocks", function (b) {
             d.saveStorage = b;
             d.loadingWorld = !1;
             if (Object.prototype.hasOwnProperty.call(b.data.h, "data")) {
               d.worldData = b.data.h.data;
               try {
                 d.loadScene();
               } catch (l) {
                 b.removeSaveOnExitListener();
                 null != c && c(d);
                 return;
               }
               null != a && a(d);
             } else b.removeSaveOnExitListener(), d.savee(), null != c && c(d);
           });
         },
         clearWorldProperties: function () {
           this.armors = [
             ["air", 0, new e()],
             ["air", 0, new e()],
             ["air", 0, new e()],
             ["air", 0, new e()],
           ];
           for (var b = 0; 45 > b; ) this.inventoryList[b++] = g.emptyItem();
           this.seed = (1e5 * Math.random()) | 0;
           this.portalCoords = null;
           this.spawnPoint = new h();
           this.sleepingAnimation = 0;
           this.difficulty = "normal";
           this.defeatedEnder = !1;
           this.flameballNum = this.rainDay = this.day = this.fallingBlockNum = 0;
           this.hardcore = !1;
           this.lastTarget = "";
           this.experience = 0;
           this.sceneNum = 1;
           this.cheats = -1;
           this.riding = "";
           this.food = 1e3;
           this.tim = this.tick = this.raining = 0;
           this.enderCrystals = new e();
           this.splashPotions = new e();
           this.fallingBlocks = new e();
           this.enderChests = new e();
           this.loadedSkins = new e();
           this.firstTimes = new e();
           this.playingTNT = new e();
           this.flameballs = new e();
           this.biomeList = [];
           this.gameRules = new e();
           this.snowballs = new e();
           this.shurikens = new e();
           this.fireballs = new e();
           this.hasSignal = new e();
           this.balloons = new e();
           this.toSmelt = new e();
           this.effects = new e();
           this.achieve = [];
           this.toBrew = new e();
           this.toGrow = new e();
           this.onFire = new e();
           this.xpOrbs = new e();
           this.arrows = new e();
           this.spears = new e();
           this.states = new e();
           this.chests = new e();
           this.wheat = new e();
           this.signs = new e();
           this.drops = new e();
           this.rafts = new e();
           this.carts = new e();
           this.water = new e();
           this.scene = [];
           this.mobs = new e();
           this.cowNum = this.pigNum = this.batNum = this.wolfNum = this.sheepNum = this.blazeNum = this.slimeNum = this.squidNum = this.ghastNum = this.spiderNum = this.zombieNum = this.rabbitNum = this.creeperNum = this.chickenNum = this.endermanNum = this.skeletonNum = this.snowgolemNum = this.nethereyeNum = this.spawnskinNum = this.magmacubeNum = this.enderdragonNum = this.zombiepigmanNum = 0;
         },
         fromFileData: function (b, a) {
           null == a && (a = !0);
           var c = "";
           try {
             for (var d = 0, f = b.length; d < f; ) {
               var e = d++,
                 k = I.cca(b, e) - (((5 * e) % 33) + 1);
               c += String.fromCodePoint(k);
             }
             this.worldData = JSON.parse(c);
           } catch (C) {
             return null;
           }
           a && this.loadScene();
           return this;
         },
         loadScene: function (b) {
           null == b && (b = -1);
           var a = this;
           this.clearWorldProperties();
           this.resetWorldChunks();
           this.clearWorldEntities();
           null != m.Instance.game && (m.Instance.game.lighting.clearLights(), (m.Instance.game.bossBarFrame = 1));
           this.worldDataMap = O.mappifyObjectsInMap(this.worldData);
           0 < b ? (this.sceneNum = b) : this.dE(this.worldDataMap, "sceneNum") ? (this.sceneNum = this.dG(this.worldDataMap, "sceneNum")) : (this.sceneNum = U.sceneNums.h.OVERWORLD);
           b = Object.create(null);
           b.selectedInventoryItem = function (b, c) {
             a.selectedInventoryItem = c;
           };
           b.sleepingAnimation = function (b, c) {
             a.sleepingAnimation = c;
           };
           b.fallingBlockNum = function (b, c) {
             a.fallingBlockNum = c;
           };
           b.defeatedEnder = function (b, c) {
             a.defeatedEnder = c;
           };
           b.worldHeight = function (b, c) {
             a.worldHeight = c;
           };
           b.worldWidth = function (b, c) {
             a.worldWidth = c;
           };
           b.experience = function (b, c) {
             a.experience = c;
           };
           b.difficulty = function (b, c) {
             a.difficulty = c;
           };
           b.lastTarget = function (b, c) {
             a.lastTarget = c;
           };
           b.hardcore = function (b, c) {
             a.hardcore = c;
           };
           b.gamemode = function (b, c) {
             a.gamemode = c;
           };
           b.seedNum = function (b, c) {
             a.seedNum = c;
           };
           b.raining = function (b, c) {
             a.raining = c;
           };
           b.rainDay = function (b, c) {
             a.rainDay = c;
           };
           b.respawn = function (b, c) {
             a.respawn = c;
           };
           b.health = function (b, c) {
             a.health = c;
           };
           b.worldX = function (b, c) {
             a.worldX = c;
           };
           b.worldY = function (b, c) {
             a.worldY = c;
           };
           b.xSpeed = function (b, c) {
             a.xSpeed = c;
           };
           b.ySpeed = function (b, c) {
             a.ySpeed = c;
           };
           b.riding = function (b, c) {
             a.riding = c;
           };
           b.cheats = function (b, c) {
             a.cheats = c;
           };
           b.seed = function (b, c) {
             a.seed = c;
           };
           b.food = function (b, c) {
             a.food = c;
           };
           b.tick = function (b, c) {
             a.tick = c;
           };
           b.air = function (b, c) {
             a.air = c;
           };
           b.tim = function (b, c) {
             a.tim = c;
           };
           b.day = function (b, c) {
             a.day = c;
           };
           b.fly = function (b, c) {
             a.fly = c;
           };
           b.inventoryList = B(this, this.parseInventoryList);
           b.enderCrystals = B(this, this.parseEnderCrystals);
           b.fallingBlocks = B(this, this.parseFallingBlocks);
           b.splashPotions = B(this, this.parseSplashPotions);
           b.portalCoords = B(this, this.parsePortalCoords);
           b.snowRegions = B(this, this.parseSnowRegions);
           b.loadedSkins = B(this, this.parseLoadedSkins);
           b.enderChests = B(this, this.parseEnderChests);
           b.flameballs = B(this, this.parseFlameballs);
           b.playingTNT = B(this, this.parsePlayingTNT);
           b.spawnPoint = B(this, this.parseSpawnPoint);
           b.firstTimes = B(this, this.parseFirstTimes);
           b.hasSignal = B(this, this.parseHasSignal);
           b.endPortal = B(this, this.parseEndPortal);
           b.biomeList = B(this, this.parseBiomeList);
           b.gameRules = B(this, this.parseGameRules);
           b.shurikens = B(this, this.parseShurikens);
           b.fireballs = B(this, this.parseFireballs);
           b.snowballs = B(this, this.parseSnowballs);
           b.balloons = B(this, this.parseBalloons);
           b.toSmelt = B(this, this.parseToSmelt);
           b.achieve = B(this, this.parseAchieve);
           b.effects = B(this, this.parseEffects);
           b.states = B(this, this.parseStates);
           b.toBrew = B(this, this.parseToBrew);
           b.armors = B(this, this.parseArmors);
           b.chests = B(this, this.parseChests);
           b.spears = B(this, this.parseSpears);
           b.arrows = B(this, this.parseArrows);
           b.toGrow = B(this, this.parseToGrow);
           b.xpOrbs = B(this, this.parseXpOrbs);
           b.onFire = B(this, this.parseOnFire);
           b.scene = B(this, this.parseScene);
           b.wheat = B(this, this.parseWheat);
           b.water = B(this, this.parseWater);
           b.carts = B(this, this.parseCarts);
           b.drops = B(this, this.parseDrops);
           b.signs = B(this, this.parseSigns);
           b.rafts = B(this, this.parseRafts);
           b.mobs = B(this, this.parseMobs);
           b.zombiepigmanNum = function (b, c) {
             a.zombiepigmanNum = c;
           };
           b.enderdragonNum = function (b, c) {
             a.enderdragonNum = c;
           };
           b.spawnskinNum = function (b, c) {
             a.spawnskinNum = c;
           };
           b.nethereyeNum = function (b, c) {
             a.nethereyeNum = c;
           };
           b.snowgolemNum = function (b, c) {
             a.snowgolemNum = c;
           };
           b.magmacubeNum = function (b, c) {
             a.magmacubeNum = c;
           };
           b.skeletonNum = function (b, c) {
             a.skeletonNum = c;
           };
           b.endermanNum = function (b, c) {
             a.endermanNum = c;
           };
           b.creeperNum = function (b, c) {
             a.creeperNum = c;
           };
           b.chickenNum = function (b, c) {
             a.chickenNum = c;
           };
           b.zombieNum = function (b, c) {
             a.zombieNum = c;
           };
           b.rabbitNum = function (b, c) {
             a.rabbitNum = c;
           };
           b.spiderNum = function (b, c) {
             a.spiderNum = c;
           };
           b.sheepNum = function (b, c) {
             a.sheepNum = c;
           };
           b.ghastNum = function (b, c) {
             a.ghastNum = c;
           };
           b.blazeNum = function (b, c) {
             a.blazeNum = c;
           };
           b.slimeNum = function (b, c) {
             a.slimeNum = c;
           };
           b.squidNum = function (b, c) {
             a.squidNum = c;
           };
           b.wolfNum = function (b, c) {
             a.wolfNum = c;
           };
           b.mobNum = function (b, c) {
             a.mobNum = c;
           };
           b.cowNum = function (b, c) {
             a.cowNum = c;
           };
           b.pigNum = function (b, c) {
             a.pigNum = c;
           };
           b.batNum = function (b, c) {
             a.batNum = c;
           };
           b.fileInfo = B(this, this.parseFileInfo);
           this.worldVer = this.dG(this.worldDataMap, "worldVer");
           "1.30.5" != this.worldVer && (this.updateWorldVersion(this.worldDataMap), (this.worldData = O.objectifyObjectsInMap(this.worldDataMap)), this.saveStorageToDisc());
           for (var c = Object.keys(this.worldDataMap.h), d = c.length, f = 0; f < d; ) {
             var e = c[f++];
             if ("1" == I.substr(e, -1, 1) || "2" == I.substr(e, -1, 1) || "3" == I.substr(e, -1, 1)) {
               if (I.substr(e, -1, 1) == this.sceneNum && Object.prototype.hasOwnProperty.call(b, I.substr(e, 0, e.length - 1))) b[I.substr(e, 0, e.length - 1)](e, this.worldDataMap.h[e]);
             } else if (Object.prototype.hasOwnProperty.call(b, e)) b[e](e, this.worldDataMap.h[e]);
           }
           return this;
         },
         threadedSave: function () {
           this.savee();
         },
         saveItem: function (b, a) {
           null == this.worldData && (this.worldData = {});
           var c = new e();
           c.h.o = a;
           this.worldData[b] = Z.field(O.objectifyObjectsInMap(c), "o");
         },
         savee: function () {
           this.saveItem("water" + this.sceneNum, this.water);
           this.saveItem("wheat" + this.sceneNum, this.wheat);
           this.saveItem("firstTimes" + this.sceneNum, this.firstTimes);
           this.saveItem("playingTNT" + this.sceneNum, this.playingTNT);
           this.saveItem("toSmelt" + this.sceneNum, this.toSmelt);
           this.saveItem("toBrew" + this.sceneNum, this.toBrew);
           this.saveItem("states" + this.sceneNum, this.states);
           this.saveItem("toGrow" + this.sceneNum, this.toGrow);
           this.saveItem("onFire" + this.sceneNum, this.onFire);
           this.saveItem("hasSignal" + this.sceneNum, this.hasSignal);
           this.saveItem("signs" + this.sceneNum, this.signs);
           this.saveItem("enderCrystals", this.enderCrystals);
           this.saveItem("biomeList", this.biomeList);
           this.saveItem("chests" + this.sceneNum, this.chests);
           this.saveItem("enderChests", this.enderChests);
           this.saveItem("inventoryList", this.inventoryList);
           this.saveItem("drops" + this.sceneNum, this.drops);
           this.saveItem("armors", this.armors);
           this.saveItem("scene" + this.sceneNum, this.scene);
           this.saveItem("mobs" + this.sceneNum, this.mobs);
           this.saveItem("zombiepigmanNum" + this.sceneNum, this.zombiepigmanNum);
           this.saveItem("enderdragonNum" + this.sceneNum, this.enderdragonNum);
           this.saveItem("spawnskinNum" + this.sceneNum, this.spawnskinNum);
           this.saveItem("nethereyeNum" + this.sceneNum, this.nethereyeNum);
           this.saveItem("snowgolemNum" + this.sceneNum, this.snowgolemNum);
           this.saveItem("magmacubeNum" + this.sceneNum, this.magmacubeNum);
           this.saveItem("skeletonNum" + this.sceneNum, this.skeletonNum);
           this.saveItem("endermanNum" + this.sceneNum, this.endermanNum);
           this.saveItem("creeperNum" + this.sceneNum, this.creeperNum);
           this.saveItem("chickenNum" + this.sceneNum, this.chickenNum);
           this.saveItem("zombieNum" + this.sceneNum, this.zombieNum);
           this.saveItem("rabbitNum" + this.sceneNum, this.rabbitNum);
           this.saveItem("spiderNum" + this.sceneNum, this.spiderNum);
           this.saveItem("sheepNum" + this.sceneNum, this.sheepNum);
           this.saveItem("ghastNum" + this.sceneNum, this.ghastNum);
           this.saveItem("blazeNum" + this.sceneNum, this.blazeNum);
           this.saveItem("slimeNum" + this.sceneNum, this.slimeNum);
           this.saveItem("squidNum" + this.sceneNum, this.squidNum);
           this.saveItem("wolfNum" + this.sceneNum, this.wolfNum);
           this.saveItem("mobNum" + this.sceneNum, this.mobNum);
           this.saveItem("cowNum" + this.sceneNum, this.cowNum);
           this.saveItem("pigNum" + this.sceneNum, this.pigNum);
           this.saveItem("batNum" + this.sceneNum, this.batNum);
           this.saveItem("arrows" + this.sceneNum, this.arrows);
           this.saveItem("spears" + this.sceneNum, this.spears);
           this.saveItem("shurikens" + this.sceneNum, this.shurikens);
           this.saveItem("carts" + this.sceneNum, this.carts);
           this.saveItem("rafts" + this.sceneNum, this.rafts);
           this.saveItem("fireballs" + this.sceneNum, this.fireballs);
           this.saveItem("flameballs" + this.sceneNum, this.flameballs);
           this.saveItem("xpOrbs" + this.sceneNum, this.xpOrbs);
           this.saveItem("fallingBlocks" + this.sceneNum, this.fallingBlocks);
           this.saveItem("balloons" + this.sceneNum, this.balloons);
           this.saveItem("snowballs" + this.sceneNum, this.snowballs);
           this.saveItem("splashPotions" + this.sceneNum, this.splashPotions);
           this.saveItem("flameballNum", this.flameballNum);
           this.saveItem("fallingBlockNum", this.fallingBlockNum);
           this.saveItem("fly", this.fly);
           this.saveItem("gamemode", this.gamemode);
           this.saveItem("cheats", this.cheats);
           this.saveItem("difficulty", this.difficulty);
           this.saveItem("hardcore", this.hardcore);
           this.saveItem("spiderNum", this.spiderNum);
           this.saveItem("food", this.food);
           this.saveItem("achieve", this.achieve);
           this.saveItem("seedNum", this.seedNum);
           this.saveItem("seed", this.seed);
           this.saveItem("rainDay", this.rainDay);
           this.saveItem("sceneNum", this.sceneNum);
           this.saveItem("lastTarget", this.lastTarget);
           this.saveItem("raining", this.raining);
           this.saveItem("defeatedEnder", this.defeatedEnder);
           this.saveItem("day", this.day);
           this.saveItem("air", this.air);
           this.saveItem("tim", this.tim);
           this.saveItem("experience", this.experience);
           this.saveItem("effects", this.effects);
           this.saveItem("selectedInventoryItem", this.selectedInventoryItem);
           this.saveItem("tick", this.tick);
           this.saveItem("sleepingAnimation", this.sleepingAnimation);
           this.saveItem("gameRules", this.gameRules);
           this.saveItem("health", this.health);
           this.saveItem("xSpeed", this.xSpeed);
           this.saveItem("ySpeed", this.ySpeed);
           this.saveItem("riding", this.riding);
           this.saveItem("spawnPoint" + this.sceneNum, [this.spawnPoint.x, this.spawnPoint.y]);
           null != this.portalCoords && this.saveItem("portalCoords", [this.portalCoords.x, this.portalCoords.y]);
           this.saveItem("endPortal", [this.endPortal.x, this.endPortal.y]);
           this.saveItem("worldX", this.worldX);
           this.saveItem("worldY", this.worldY);
           this.saveItem("worldVer", this.worldVer);
           this.saveStorageToDisc();
         },
         saveStorageToDisc: function () {
           null == this.saveStorage.quotaExceededCallback &&
             (this.saveStorage.quotaExceededCallback = function () {
               m.Instance.game.saveWarning++;
               3 >= m.Instance.game.saveWarning && (m.Instance.game.console.newLine("[ERROR] Could not save game! Your browser storage may be limited."), m.Instance.game.console.newLine("        See FAQ for details."));
             });
           if (null != this.saveStorage) {
             var b = new e();
             b.h.data = this.worldData;
             this.saveStorage.data = b;
             this.saveStorage.save();
           }
         },
         getSaveData: function (b) {
           return Z.field(this.worldData, b);
         },
         getFG: function (b, a) {
           b = Math.floor(b);
           a = Math.floor(a);
           return 0 > b || b >= this.scene.length || null == this.scene[Math.floor(b)] || 0 > a || a >= this.scene[Math.floor(b)].length || null == this.scene[Math.floor(b)][Math.floor(a)] ? "air" : this.scene[Math.floor(b)][Math.floor(a)];
         },
         setFG: function (b, a, c) {
           "undefined" == c && (Ia.trace("Warning: type is undefined", { fileName: "src/World.hx", lineNumber: 637, className: "World", methodName: "setFG" }), (c = "air"));
           b |= 0;
           a |= 0;
           if (0 > b || 0 > a) return !1;
           if (b >= this.scene.length || null == this.scene[b | 0]) this.scene[b | 0] = [];
           "air" == c && (c = null);
           this.scene[b | 0][a | 0] = c;
           if ("sl" == c || "gasd" == c) this.toGrow.h["blockX" + b + "Y" + a] = !0;
           null != this.getChunk(b, a) && this.getChunk(b, a).createBlock(b | 0, a | 0);
           null != m.Instance.game.getRenderChunk(b | 0, a | 0) && m.Instance.game.getRenderChunk(b | 0, a | 0).addChange(b | 0, a | 0);
           return !0;
         },
         canBeOnFire: function (b, a) {
           b = this.getFG(b, a);
           return "n" == b || "magma" == b ? !0 : null == q.get(b, "flamRate") ? !1 : !0;
         },
         resetWorldChunks: function () {
           this.chunks.h = Object.create(null);
           null != m.Instance.game && (m.Instance.game.renderChunks.h = Object.create(null));
         },
         clearWorldEntities: function () {
           if (null != m.Instance.game) {
             if (null != m.Instance.game.entityPools) for (var b = m.Instance.game.entityPools.h, a = Object.keys(b), c = a.length, d = 0; d < c; ) b[a[d++]].entity.clearPool(!0);
             null != m.Instance.game.worldGradientEntity && m.Instance.game.worldGradientEntity.clearPool(!0);
           }
           null != this.entities && (this.entities.h = Object.create(null));
         },
         getChunk: function (b, a, c, d) {
           null == d && (d = !1);
           null == c && (c = E.string(this.sceneNum));
           b = Math.floor(b / 8);
           a = Math.floor(a / 8);
           if (Object.prototype.hasOwnProperty.call(this.chunks.h, c + ":" + b + "," + a)) return this.chunks.h[c + ":" + b + "," + a];
           if (d) {
             d = this.chunks;
             var f = new qh(b, a, this);
             d.h[c + ":" + b + "," + a] = f;
             return this.chunks.h[c + ":" + b + "," + a];
           }
           return null;
         },
         getBlock: function (b, a, c) {
           null == c && (c = !1);
           return "air" != this.getFG(b, a) && null != this.getChunk(b, a, null, c) ? ((c = w.modulus(b, 8) | 0), this.getChunk(b, a).tiles[c][w.modulus(a, 8) | 0]) : null;
         },
         getSignal: function (b, a) {
           return Object.prototype.hasOwnProperty.call(this.hasSignal.h, "blockX" + b + "Y" + a) ? this.hasSignal.h["blockX" + b + "Y" + a][0] : 0;
         },
         parseFileInfo: function (b, a) {
           null == a ? ((this.lastSaveDate = new Date()), (this.fileName = "New World")) : ((this.lastSaveDate = new Date(this.dG(a, "date"))), (this.fileName = E.string(this.dG(a, "name")).replace(/[\\/:"*?<>|]+\/g/g, "")));
         },
         parseScene: function (b, a) {
           this.scene = a;
         },
         parseStates: function (b, a) {
           this.states = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.states.h[f] = a.h[f];
           }
         },
         parseWheat: function (b, a) {
           this.wheat = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.wheat.h[f] = a.h[f];
           }
         },
         parseHasSignal: function (b, a) {
           this.hasSignal = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.hasSignal.h[f] = a.h[f];
           }
         },
         parseToBrew: function (b, a) {
           this.toBrew = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.toBrew.h[f] = a.h[f];
           }
         },
         parseToSmelt: function (b, a) {
           this.toSmelt = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.toSmelt.h[f] = a.h[f];
           }
         },
         parseWater: function (b, a) {
           this.water = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.water.h[f] = a.h[f];
           }
         },
         parseInventoryList: function (b, a) {
           this.inventoryList = [];
           for (b = 0; 45 > b; ) {
             var c = b++;
             this.inventoryList[c] = a[c];
           }
         },
         inventoryItem: function (b) {
           null == this.inventoryList[b] && (this.inventoryList[b] = g.emptyItem());
           return this.inventoryList[b];
         },
         armorsAsItem: function (b) {
           return null == this.armors[b] ? g.emptyItem() : [this.armors[b][0], 1, this.armors[b][1], this.armors[b][2]];
         },
         get_selectedInventoryItemType: function () {
           return null == this.inventoryList[this.selectedInventoryItem] || null == this.inventoryList[this.selectedInventoryItem][0] ? "air" : this.inventoryList[this.selectedInventoryItem][0];
         },
         get_selectedInventoryTool: function () {
           return null == this.inventoryList[this.selectedInventoryItem] ? !1 : q.get(this.inventoryList[this.selectedInventoryItem][0], "tool");
         },
         get_selectedInventoryItemExtra: function () {
           return null == this.inventoryList[this.selectedInventoryItem] || null == this.inventoryList[this.selectedInventoryItem][3] || "Object" != O.getQualifiedClassName(this.inventoryList[this.selectedInventoryItem][3])
             ? new e()
             : this.inventoryList[this.selectedInventoryItem][3];
         },
         parseLoadedSkins: function (b, a) {
           this.loadedSkins = new e();
           b = Object.keys(a.h).length;
           for (a = 0; a < b; ) ++a;
         },
         parsePortalCoords: function (b, a) {
           null == a || isNaN(a[0]) || isNaN(a[1]) ? (this.portalCoords = null) : (this.portalCoords = new h(a[0], a[1]));
         },
         parseSpawnPoint: function (b, a) {
           this.spawnPoint = null == a ? new h() : new h(a[0], a[1]);
         },
         parseAchieve: function (b, a) {
           this.achieve = a;
         },
         parseFirstTimes: function (b, a) {
           this.firstTimes = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.firstTimes.h[f] = a.h[f];
           }
         },
         parseMobs: function (b, a) {
           this.mobs = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.mobs.h[f] = a.h[f];
           }
         },
         parseChests: function (b, a) {
           this.chests = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.chests.h[f] = a.h[f];
           }
         },
         parseEnderChests: function (b, a) {
           this.enderChests = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.enderChests.h[f] = a.h[f];
           }
         },
         parseSpears: function (b, a) {
           this.spears = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.spears.h[f] = a.h[f];
           }
         },
         parseArrows: function (b, a) {
           this.arrows = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.arrows.h[f] = a.h[f];
           }
         },
         parseShurikens: function (b, a) {
           this.shurikens = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.shurikens.h[f] = a.h[f];
           }
         },
         parseCarts: function (b, a) {
           this.carts = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.carts.h[f] = a.h[f];
           }
         },
         parseToGrow: function (b, a) {
           this.toGrow = new e();
           b = Object.keys(a.h);
           a = b.length;
           for (var c = 0; c < a; ) this.toGrow.h[b[c++]] = !0;
         },
         parseDrops: function (b, a) {
           this.drops = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.drops.h[f] = a.h[f];
           }
         },
         parseSigns: function (b, a) {
           this.signs = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.signs.h[f] = a.h[f];
           }
         },
         parseArmors: function (b, a) {
           this.armors = [];
           for (b = 0; 4 > b; ) {
             var c = b++;
             this.armors[c] = null == a[c] || null == a[c][0] || "" == a[c][0] ? g.makeDynamicArray(["air", 0, new e()]) : a[c];
           }
         },
         parsePlayingTNT: function (b, a) {
           this.playingTNT = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.playingTNT.h[f] = a.h[f];
           }
         },
         parseEffects: function (b, a) {
           this.effects = new e();
           if ("Object" == O.getQualifiedClassName(a)) {
             b = Object.keys(a.h);
             for (var c = b.length, d = 0; d < c; ) {
               var f = b[d++];
               this.effects.h[f] = a.h[f];
             }
           }
         },
         parseBiomeList: function (b, a) {
           this.biomeList = [];
           b = 0;
           for (var c = a.length; b < c; ) {
             var d = b++;
             this.biomeList[d] = a[d];
           }
         },
         parseSnowRegions: function (b, a) {
           this.snowRegions = new Ma();
           if (null != a)
             for (b = a.keys(); b.hasNext(); ) {
               var c = b.next();
               this.snowRegions.h[c] = a.h[c];
             }
         },
         parseGameRules: function (b, a) {
           this.gameRules = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.gameRules.h[f] = a.h[f];
           }
         },
         parseEnderCrystals: function (b, a) {
           this.enderCrystals = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.enderCrystals.h[f] = a.h[f];
           }
         },
         parseEndPortal: function (b, a) {
           this.endPortal = null == a ? new h(0, 0) : new h(a[0], a[1]);
         },
         parseRafts: function (b, a) {
           this.rafts = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             "raft" != I.substr(f, 0, 4) ? (this.rafts.h["raft" + f] = a.h[f]) : (this.rafts.h[f] = a.h[f]);
           }
         },
         parseFlameballs: function (b, a) {
           this.flameballs = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.flameballs.h[f] = a.h[f];
           }
         },
         parseFireballs: function (b, a) {
           this.fireballs = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.fireballs.h[f] = a.h[f];
           }
         },
         parseXpOrbs: function (b, a) {
           this.xpOrbs = new e();
           if (null != a && "Object" == O.getQualifiedClassName(a)) {
             b = Object.keys(a.h);
             for (var c = b.length, d = 0; d < c; ) {
               var f = b[d++];
               if ("xpOrb" != I.substr(E.string(a.h[f][0]), 0, 5)) break;
               this.xpOrbs.h[f] = a.h[f];
             }
           }
         },
         parseFallingBlocks: function (b, a) {
           this.fallingBlocks = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.fallingBlocks.h[f] = a.h[f];
           }
         },
         parseOnFire: function (b, a) {
           this.onFire = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.onFire.h[f] = a.h[f];
           }
         },
         parseBalloons: function (b, a) {
           this.balloons = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.balloons.h[f] = a.h[f];
           }
         },
         parseSnowballs: function (b, a) {
           this.snowballs = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.snowballs.h[f] = a.h[f];
           }
         },
         parseSplashPotions: function (b, a) {
           this.splashPotions = new e();
           b = Object.keys(a.h);
           for (var c = b.length, d = 0; d < c; ) {
             var f = b[d++];
             this.splashPotions.h[f] = a.h[f];
           }
         },
         dG: function (b, a) {
           return b.h[a];
         },
         dS: function (b, a, c) {
           b.h[a] = c;
         },
         dE: function (b, a) {
           return null != b && Object.prototype.hasOwnProperty.call(b.h, a) ? null != b.h[a] : !1;
         },
         itemArr: function (b, a, c, d) {
           null == c && (c = 0);
           null == d && (d = new e());
           return [b, a, c, d];
         },
         mDM: function (b) {
           return null == b ? new e() : b;
         },
         updateWorldVersion: function (b) {
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("1.27")) {
             var a = this.dG(b, "achieve");
             "number" == typeof a &&
               (a | 0) === a &&
               (1 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1])
                 : 2 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 0, 1])
                 : 3 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 0, 1, 1])
                 : 4 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1])
                 : 5 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1])
                 : 6 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 0, 0, 0, 0, 1])
                 : 7 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 0, 0, 1])
                 : 8 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1])
                 : 9 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1])
                 : 11 >= this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
                 : 12 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1])
                 : 15 >= this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1])
                 : 16 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1])
                 : 17 == this.dG(b, "achieve")
                 ? this.dS(b, "achieve", [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])
                 : this.dS(b, "achieve", [0]));
             this.dE(b, "keepInventory") &&
               (this.dS(this.dG(b, "gameRules"), "keepinventory", b.h.keepInventory), this.dS(this.dG(b, "gameRules"), "dodaylightcycle", b.h.doDaylightCycle), this.dS(this.dG(b, "gameRules"), "dofiretick", b.h.doFireTick));
             !this.dE(b, "firstTimes1") && this.dE(b, "firstTimes") && (this.dS(b, "firstTimes1", this.dG(b, "firstTimes")), Object.prototype.hasOwnProperty.call(b.h, "firstTimes") && delete b.h.firstTimes);
             for (var c = 0, d = this.numberOfScenes + 1; c < d; )
               for (var f = c++, l = this.mDM(this.dG(b, "drops" + f)).h, k = Object.keys(l), h = k.length, m = 0; m < h; ) {
                 var n = l[k[m++]],
                   A = E.parseInt(this.dG(this.dG(b, "drops" + f), n)[2]);
                 isNaN(A) || ((A = H.__cast(this.dG(b, "drops" + f), e)), Object.prototype.hasOwnProperty.call(A.h, n) && delete A.h[n]);
               }
           }
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("1.28"))
             for (
               this.migrateItems(b, [
                 ["cloth", "cloth", !0, "both"],
                 ["dye", "dye", !0, "item"],
               ]),
                 c = 0,
                 d = this.numberOfScenes + 1;
               c < d;
 
             ) {
               f = c++;
               l = this.dG(b, "toSmelt" + f);
               if (null != l)
                 for (k = Object.keys(l.h), h = k.length, m = 0; m < h; ) {
                   n = k[m++];
                   a = this.dG(this.dG(b, "toSmelt" + f), n);
                   A = new e();
                   var p = this.itemArr(a[0], a[1], 0, new e());
                   A.h.input = p;
                   p = this.itemArr(a[2], a[3], 0, new e());
                   A.h.fuel = p;
                   A.h.smeltTimer = a[4];
                   A.h.fuelTimer = a[4];
                   A.h.fuelTimerTotal = a[8];
                   a = this.itemArr(a[5], a[6], 0, new e());
                   A.h.output = a;
                   this.dS(l, n, g.makeDynamicMap(A));
                 }
               l = this.dG(b, "spears" + f);
               if (null != l)
                 for (A = Object.keys(l.h), k = A.length, h = 0; h < k; )
                   (m = A[h++]),
                     (n = this.dG(this.dG(b, "spears" + f), m)),
                     (a = new e()),
                     (a.h.x = n[1]),
                     (a.h.y = n[2]),
                     (a.h.speedX = n[4]),
                     (a.h.speedY = n[5]),
                     (a.h.rotation = ((n[3] + 90) / 180) * Math.PI),
                     (a.h.shotBy = n[7]),
                     (a.h.timer = 0),
                     this.dS(l, m, g.makeDynamicMap(a));
               l = this.dG(b, "arrows" + f);
               if (null != l)
                 for (k = Object.keys(l.h), h = k.length, m = 0; m < h; )
                   (n = k[m++]),
                     (a = this.dG(this.dG(b, "arrows" + f), n)),
                     (A = new e()),
                     (A.h.x = a[1]),
                     (A.h.y = a[2]),
                     (A.h.speedX = a[3]),
                     (A.h.speedY = a[4]),
                     (A.h.rotation = ((a[5] + 90) / 180) * Math.PI),
                     (A.h.shotBy = a[7]),
                     (A.h.punch = a[8]),
                     (A.h.power = a[9]),
                     (A.h.flame = a[10]),
                     (A.h.infinity = a[11]),
                     this.dS(l, n, g.makeDynamicMap(A));
               l = this.dG(b, "shurikens" + f);
               if (null != l)
                 for (A = Object.keys(l.h), k = A.length, h = 0; h < k; )
                   (m = A[h++]),
                     (n = this.dG(this.dG(b, "shurikens" + f), m)),
                     (a = new e()),
                     (a.h.x = n[1]),
                     (a.h.y = n[2]),
                     (a.h.speedX = n[3]),
                     (a.h.speedY = n[4]),
                     (a.h.rotation = 0),
                     (a.h.shotBy = n[6]),
                     (a.h.type = "bone"),
                     (a.h.timer = 0),
                     this.dS(l, m, g.makeDynamicMap(a));
               l = this.dG(b, "fireballs" + f);
               if (null != l)
                 for (A = Object.keys(l.h), k = A.length, h = 0; h < k; )
                   (m = A[h++]), (n = this.dG(this.dG(b, "fireballs" + f), m)), (a = new e()), (a.h.x = n[1]), (a.h.y = n[2]), (a.h.speedX = n[3]), (a.h.speedY = n[4]), (a.h.shotBy = n[5]), this.dS(l, m, g.makeDynamicMap(a));
             }
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("1.29")) {
             c = 0;
             for (d = this.numberOfScenes + 1; c < d; )
               for (f = c++, k = Object.keys(this.mDM(this.dG(b, "mobs" + f)).h), h = k.length, m = 0; m < h; )
                 if (((n = k[m++]), "Array" == O.getQualifiedClassName(g.makeDynamicMap(this.dG(b, "mobs" + f)).h[n]))) {
                   l = g.makeDynamicMap(this.dG(b, "mobs" + f)).h[n];
                   A = new e();
                   A.h.type = l[0];
                   A.h.id = l[1];
                   A.h.scene = l[2];
                   A.h.name = null;
                   A.h.variant = "";
                   A.h.babyTimer = 0;
                   A.h.breedTimer = 0;
                   A.h.x = l[3];
                   A.h.y = l[4];
                   A.h.speedX = null != E.parseInt(E.string(l[5])) ? E.parseInt(E.string(l[5])) : 0;
                   A.h.speedY = null != E.parseInt(E.string(l[6])) ? E.parseInt(E.string(l[6])) : 0;
                   A.h.direction = 1;
                   A.h.health = l[7];
                   a = new e();
                   a.h.left = l[8];
                   a.h.right = l[9];
                   a.h.up = l[10];
                   A.h.keys = a;
                   A.h.target = null;
                   A.h.focus = null;
                   A.h.riddenBy = null;
                   A.h.riding = null;
                   A.h.leash = null;
                   p = [];
                   A.h.inventory = p;
                   p = [];
                   A.h.handItems = p;
                   a = [];
                   A.h.armor = a;
                   A.h.defaultDrops = !0;
                   A.h.handDropChances = [0.085, 0.085];
                   A.h.armorDropChances = [0.085, 0.085, 0.085, 0.085];
                   A.h.persists = !1;
                   A.h.air = 0;
                   A.h.airTimer = 0;
                   A.h.startUnderwaterTimer = 0;
                   A.h.animationType = "idle";
                   A.h.animationFrame = 0;
                   A.h.attackCooldown = 0;
                   A.h.hitCooldown = 0;
                   A.h.lastDamageType = "";
                   A.h.lastDamageID = "";
                   A.h.ticksSinceLastDamageID = 0;
                   A.h.falling = !1;
                   A.h.wasFalling = !1;
                   A.h.wasFallingSpeed = 0;
                   A.h.effects = new e();
                   switch (A.h.type) {
                     case "chicken":
                       A.h.target = l[11];
                       A.h.name = l[12];
                       1 == l[13] && ((H.__cast(A.h.armor, Array)[0] = this.itemArr("ShadesCap", 1, 0)), (H.__cast(A.h.armorDropChances, Array)[0] = 1));
                       break;
                     case "cow":
                       1 == l[10] && (A.h.variant = "mooshroom");
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[12];
                       break;
                     case "creeper":
                       A.h.charged = !1;
                       A.h.fuse = l[11];
                       a = l[12];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[13];
                       break;
                     case "dummy":
                       A.h.type = "spawnskin";
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.skin = l[12];
                       A.h.name = l[13];
                       break;
                     case "enderdragon":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.nextSpotX = l[12];
                       A.h.nextSpotY = l[13];
                       A.h.official = l[14];
                       A.h.endTimer = l[15];
                       A.h.endingX = l[16];
                       A.h.endingY = l[17];
                       A.h.name = l[18];
                       A.h.flyBob = 0;
                       A.h.flameBallThread = 0;
                       A.h.flameBallDelay = 0;
                       break;
                     case "enderman":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       1 == l[12] && (H.__cast(A.h.handItems, Array)[0] = [l[12], 1, 0, new e()]);
                       A.h.name = l[14];
                       A.h.teleportDistance = 10;
                       break;
                     case "netherwalker":
                       A.h.type = "nethereye";
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[12];
                       break;
                     case "pig":
                       1 == l[11] && (A.h.saddleItem = g.makeDynamicArray(["saddle", 1, 0, new e()]));
                       A.h.riddenBy = l[12];
                       a = l[13];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[14];
                       break;
                     case "rabbit":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.rabbitType = l[12];
                       A.h.name = l[13];
                       break;
                     case "sheep":
                       this.dS(A, "color", l[11]);
                       this.dS(A, "sheared", l[12]);
                       this.dS(A, "eating", !1);
                       a = l[13];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[14];
                       break;
                     case "skeleton":
                       H.__cast(A.h.handItems, Array)[0] = this.itemArr("bow", 1, Math.floor(50 * Math.random() + 10));
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[12];
                       break;
                     case "magmacube":
                     case "slime":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.size = Math.log(l[12] / 15) / Math.log(2) + 1;
                       A.h.name = l[13];
                       break;
                     case "squid":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[12];
                       A.h.actualRotation = l[13];
                       A.h.rotationDirection = l[14];
                       A.h.cooldownSpeed = l[15];
                       A.h.actualSpeed = l[16];
                       A.h.movementCooldown = l[17];
                       A.h.rotationSpeed = l[18];
                       break;
                     case "wolf":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.tameable = !0;
                       A.h.tamed = 1 == l[12];
                       1 == A.h.tamed ? this.dS(A, "tamedBy", this.player.id) : (A.h.tamedBy = null);
                       A.h.sitting = l[13];
                       A.h.name = l[14];
                       A.h.collarColor = l[15];
                       break;
                     case "blaze":
                     case "ghast":
                     case "snowgolem":
                     case "spider":
                     case "zombie":
                       a = l[11];
                       A.h.focus = a;
                       A.h.target = a;
                       A.h.name = l[12];
                       break;
                     case "zombiepigman":
                       (a = l[11]), (A.h.focus = a), (A.h.target = a), (A.h.name = l[12]), 1 == l[13] && (H.__cast(A.h.handItems, Array)[0] = [l[13], 1, 0, new e()]), (A.h.aggressiveness = l[14]);
                   }
                   H.__cast(this.dG(b, "mobs" + f), e).h[n] = A;
                 }
             null != this.dG(this.dG(b, "chests1"), "ender") &&
               ((c = new e()),
               (d = this.player.id),
               (p = this.dG(this.dG(b, "chests1"), "ender")),
               (c.h[d] = p),
               this.dS(b, "enderChests", c),
               (A = H.__cast(this.dG(b, "chests1"), e)),
               Object.prototype.hasOwnProperty.call(A.h, "ender") && delete A.h.ender);
             this.dS(b, "worldX", 275 - this.dG(b, "worldX"));
             this.dS(b, "worldY", 200 - this.dG(b, "worldY"));
             c = 0;
             for (d = this.numberOfScenes + 1; c < d; )
               if (((f = c++), this.dE(b, "spawnPoint" + f) && this.dS(b, "spawnPoint" + f, [275 - this.dG(b, "spawnPoint" + f)[0], 200 - this.dG(b, "spawnPoint" + f)[1]]), this.dE(b, "carts" + f))) {
                 l = new e();
                 k = Object.keys(this.mDM(this.dG(b, "carts" + f)).h);
                 h = k.length;
                 for (m = 0; m < h; )
                   (n = k[m++]),
                     "Array" == O.getQualifiedClassName(g.makeDynamicMap(this.dG(b, "carts" + f)).h[n]) &&
                       ((n = this.dG(this.dG(b, "carts" + f), n)),
                       (a = "cart" + E.string(n[0])),
                       (A = new e()),
                       (A.h.id = "cart" + E.string(n[0])),
                       (A.h.x = n[1]),
                       (A.h.y = n[2]),
                       (A.h.speedX = n[3]),
                       (A.h.speedY = n[4]),
                       (A.h.riddenBy = n[5]),
                       (A.h.onActivator = n[6]),
                       (A.h.type = n[7]),
                       (A.h.health = 3),
                       (A.h.tilt = 0),
                       (A.h.onRail = 0),
                       (l.h[a] = g.makeDynamicMap(A)));
                 b.h["carts" + f] = l;
               }
             this.dE(b, "portalCoords") && this.dS(b, "portalCoords", [275 - this.dG(b, "portalCoords")[0], 200 - this.dG(b, "portalCoords")[1]]);
             this.migrateItems(b, [
               ["bed", "bed", "red", "item"],
               ["bed1", "bed1", "red", "block"],
               ["bed2", "bed2", "red", "block"],
             ]);
             this.dS(b, "gamemode", 1 == this.dG(b, "creative") ? U.gamemodes.h.CREATIVE : U.gamemodes.h.SURVIVAL);
             this.dS(b, "spawnskinNum", this.dG(b, "dummyNum"));
           }
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("1.29.1"))
             for (c = 0, d = this.numberOfScenes + 1; c < d; )
               for (f = c++, k = Object.keys(this.mDM(this.dG(b, "mobs" + f)).h), h = k.length, m = 0; m < h; )
                 (n = k[m++]),
                   (A = H.__cast(this.dG(b, "mobs" + f), e).h[n]),
                   "chicken" == A.h.type &&
                     g.makeDynamicArray(A.h.handItems)[0] &&
                     "ShadesCap" == g.makeDynamicArray(A.h.handItems)[0][0] &&
                     ((g.makeDynamicArray(A.h.armor)[0] = this.itemArr("ShadesCap", 1, 0)), (g.makeDynamicArray(A.h.armorDropChances)[0] = 1), A.h.handItems.splice(0, 1));
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("1.30"))
             for (c = 0, d = this.numberOfScenes + 1; c < d; )
               for (f = c++, k = Object.keys(this.mDM(this.dG(b, "onFire" + f)).h), h = k.length, m = 0; m < h; )
                 (n = k[m++]),
                   "blockX" == I.substr(n, 0, 6) &&
                     ((A = E.parseInt(n.split("X")[1].split("Y")[0])),
                     (l = E.parseInt(n.split("X")[1].split("Y")[1])),
                     null != H.__cast(this.dG(b, "scene" + f), Array) &&
                       null != H.__cast(this.dG(b, "scene" + f), Array)[A] &&
                       null != q.get(H.__cast(H.__cast(this.dG(b, "scene" + f), Array)[A], Array)[l], "flamRate") &&
                       (H.__cast(this.dG(b, "scene" + f), Array)[A][l] = "fire"),
                     (A = g.makeDynamicMap(this.dG(b, "onFire" + f))),
                     Object.prototype.hasOwnProperty.call(A.h, n) && delete A.h[n]);
           if (U.versionToNumber(this.worldVer) < U.versionToNumber("2.0")) {
             c = 0;
             for (d = this.numberOfScenes + 1; c < d; ) {
               f = c++;
               k = Object.keys(this.mDM(this.dG(b, "balloons" + f)).h);
               h = k.length;
               for (m = 0; m < h; )
                 (n = k[m++]),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "x", this.dG(this.dG(this.dG(b, "balloons" + f), n), "x") / 30),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "y", this.dG(this.dG(this.dG(b, "balloons" + f), n), "y") / 30),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "stringX", this.dG(this.dG(this.dG(b, "balloons" + f), n), "stringX") / 30),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "stringY", this.dG(this.dG(this.dG(b, "balloons" + f), n), "stringY") / 30),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "speedX", g.migrateSpeed(this.dG(this.dG(this.dG(b, "balloons" + f), n), "speedX"))),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "speedY", g.migrateSpeed(this.dG(this.dG(this.dG(b, "balloons" + f), n), "speedY"))),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "stringSpeedX", g.migrateSpeed(this.dG(this.dG(this.dG(b, "balloons" + f), n), "stringSpeedX"))),
                   this.dS(this.dG(this.dG(b, "balloons" + f), n), "stringSpeedY", g.migrateSpeed(this.dG(this.dG(this.dG(b, "balloons" + f), n), "stringSpeedY")));
               A = Object.keys(this.mDM(this.dG(b, "drops" + f)).h);
               k = A.length;
               for (h = 0; h < k; ) (m = A[h++]), (this.dG(this.dG(b, "drops" + f), m)[0] = this.dG(this.dG(b, "drops" + f), m)[0] / 30), (this.dG(this.dG(b, "drops" + f), m)[1] = this.dG(this.dG(b, "drops" + f), m)[1] / 30);
               if ("Array" != O.getQualifiedClassName(this.dG(b, "xpOrbs" + f)))
                 for (k = Object.keys(this.mDM(this.dG(b, "xpOrbs" + f)).h), h = k.length, m = 0; m < h; )
                   (n = k[m++]), (this.dG(this.dG(b, "xpOrbs" + f), n)[1] = this.dG(this.dG(b, "xpOrbs" + f), n)[1] / 30), (this.dG(this.dG(b, "xpOrbs" + f), n)[2] = this.dG(this.dG(b, "xpOrbs" + f), n)[2] / 30);
               A = Object.keys(this.mDM(this.dG(b, "fallingBlocks" + f)).h);
               k = A.length;
               for (h = 0; h < k; )
                 (m = A[h++]), (this.dG(this.dG(b, "fallingBlocks" + f), m)[2] = this.dG(this.dG(b, "fallingBlocks" + f), m)[2] / 30), (this.dG(this.dG(b, "fallingBlocks" + f), m)[3] = this.dG(this.dG(b, "fallingBlocks" + f), m)[3] / 30);
               this.dE(b, "spawnPoint" + f) && this.dS(b, "spawnPoint" + f, [this.dG(b, "spawnPoint" + f)[0] / 30, this.dG(b, "spawnPoint" + f)[1] / 30]);
               A = Object.keys(this.mDM(this.dG(b, "rafts" + f)).h);
               k = A.length;
               for (h = 0; h < k; )
                 (m = A[h++]),
                   (this.dG(this.dG(b, "rafts" + f), m)[1] = this.dG(this.dG(b, "rafts" + f), m)[1] / 30),
                   (this.dG(this.dG(b, "rafts" + f), m)[2] = this.dG(this.dG(b, "rafts" + f), m)[2] / 30),
                   (this.dG(this.dG(b, "rafts" + f), m)[3] = g.migrateSpeed(this.dG(this.dG(b, "rafts" + f), m)[3])),
                   (this.dG(this.dG(b, "rafts" + f), m)[4] = g.migrateSpeed(this.dG(this.dG(b, "rafts" + f), m)[4]));
               l = Object.keys(this.mDM(this.dG(b, "flameballs" + f)).h);
               k = l.length;
               for (h = 0; h < k; )
                 (m = l[h++]),
                   (a = this.dG(this.dG(b, "flameballs" + f), m)),
                   (n = this.dG(b, "flameballs" + f)),
                   (A = new e()),
                   (A.h.x = a[1] / 30),
                   (A.h.y = a[2] / 30),
                   (A.h.speedX = g.migrateSpeed(a[3])),
                   (A.h.speedY = g.migrateSpeed(a[4])),
                   (A.h.shotBy = "new" == I.substr(E.string(a[5]), 0, 3) ? I.substr(E.string(a[5]), 3, null) : a[5]),
                   this.dS(n, m, g.makeDynamicMap(A));
               a = 0;
               for (A = "arrows spears shurikens splashPotions carts mobs".split(" "); a < A.length; )
                 for (l = A[a], ++a, k = Object.keys(this.mDM(this.dG(b, l + f)).h), h = k.length, m = 0; m < h; )
                   (n = k[m++]),
                     this.dS(this.dG(this.dG(b, l + f), n), "x", this.dG(this.dG(this.dG(b, l + f), n), "x") / 30),
                     this.dS(this.dG(this.dG(b, l + f), n), "y", this.dG(this.dG(this.dG(b, l + f), n), "y") / 30),
                     this.dS(this.dG(this.dG(b, l + f), n), "speedX", g.migrateSpeed(this.dG(this.dG(this.dG(b, l + f), n), "speedX"))),
                     this.dS(this.dG(this.dG(b, l + f), n), "speedY", g.migrateSpeed(this.dG(this.dG(this.dG(b, l + f), n), "speedY")));
             }
             this.dE(b, "portalCoords") && this.dS(b, "portalCoords", [this.dG(b, "portalCoords")[0] / 30, this.dG(b, "portalCoords")[1] / 30]);
             this.dE(b, "worldX") && this.dS(b, "worldX", this.dG(b, "worldX") / 30);
             this.dE(b, "worldY") && this.dS(b, "worldY", this.dG(b, "worldY") / 30);
           }
           U.versionToNumber(this.worldVer) < U.versionToNumber("1.30.4") &&
             this.migrateItems(b, [
               ["cl", "clore", !1, "block"],
               ["dm", "dmore", !1, "block"],
               ["cy", "cy1", !1, "block"],
             ]);
           this.dS(b, "worldVer", "1.30.5");
           this.worldVer = "1.30.5";
         },
         migrateItems: function (b, a) {
           for (var c = 0, d = this.dG(b, "inventoryList").length; c < d; ) {
             var f = c++;
             if (this.dG(b, "inventoryList")[f] instanceof Array && null != this.dG(b, "inventoryList")[f][0])
               for (var l = 0, k = a.length; l < k; ) {
                 var h = l++;
                 if ("block" != a[h][3] && I.substr(E.string(this.dG(b, "inventoryList")[f][0]), 0, a[h][O.tripleEqual(a[h][2], !0) ? 0 : 1].length) == a[h][0] && this.dG(b, "inventoryList")[f][0] != a[h][1]) {
                   if (O.tripleEqual(a[h][2], !0)) {
                     null == this.dG(b, "inventoryList")[f][3] && (this.dG(b, "inventoryList")[f][3] = new e());
                     var m = this.dG(b, "inventoryList")[f];
                     l = this.dG(b, "inventoryList")[f][0];
                     k = a[h][0].length;
                     var n = this.dG(b, "inventoryList")[f];
                     m[3].type = l.substr(k, n[0].length - a[h][0].length);
                   } else O.tripleEqual(a[h][2], !1) || (null == this.dG(b, "inventoryList")[f][3] && (this.dG(b, "inventoryList")[f][3] = new e()), (this.dG(b, "inventoryList")[f][3].type = a[h][2]));
                   this.dG(b, "inventoryList")[f][0] = a[h][1];
                   break;
                 }
               }
           }
           c = 0;
           for (d = this.numberOfScenes + 1; c < d; ) {
             f = c++;
             for (var A = Object.keys(this.mDM(this.dG(b, "drops" + f)).h), p = A.length, q = 0; q < p; ) {
               var t = A[q++];
               l = 0;
               for (k = a.length; l < k; )
                 if (
                   ((h = l++),
                   "block" != a[h][3] ? ((m = parseFloat(E.string(this.dG(this.dG(b, "drops" + f), t)[2]))), (m = !isNaN(m))) : (m = !0),
                   !m && I.substr(E.string(this.dG(this.dG(b, "drops" + f), t)[2]), 0, a[h][O.tripleEqual(a[h][2], !0) ? 0 : 1].length) == a[h][0] && this.dG(this.dG(b, "drops" + f), t)[2] != a[h][1])
                 ) {
                   O.tripleEqual(a[h][2], !0)
                     ? (null == this.dG(this.dG(b, "drops" + f), t)[6] && (this.dG(this.dG(b, "drops" + f), t)[6] = new e()),
                       (l = this.dG(this.dG(b, "drops" + f), t)),
                       (n = this.dG(this.dG(b, "drops" + f), t)[2]),
                       (k = a[h][0].length),
                       (m = this.dG(this.dG(b, "drops" + f), t)),
                       (l[6].type = n.substr(k, m[2].length - a[h][0].length)))
                     : O.tripleEqual(a[h][2], !1) || (null == this.dG(this.dG(b, "drops" + f), t)[6] && (this.dG(this.dG(b, "drops" + f), t)[6] = new e()), (this.dG(this.dG(b, "drops" + f), t)[6].type = a[h][2]));
                   this.dG(this.dG(b, "drops" + f), t)[2] = a[h][1];
                   break;
                 }
             }
             "string" == typeof this.dG(b, "states" + f) && this.dS(b, "states" + f, new e());
             if (null != this.dG(b, "scene" + f))
               for (h = 0, l = this.dG(b, "scene" + f).length; h < l; )
                 if (((A = h++), this.dG(b, "scene" + f)[A] instanceof Array))
                   for (p = 0, q = this.dG(b, "scene" + f)[A].length; p < q; )
                     if (((t = p++), null != this.dG(b, "scene" + f)[A][t]))
                       if ("dispense" == this.dG(b, "scene" + f)[A][t] || "dropper" == this.dG(b, "scene" + f)[A][t])
                         for (m = 0; 9 > m; ) {
                           k = this.dG(this.dG(b, "states" + f), "blockX" + A + "Y" + t + "_2")[m++];
                           n = 0;
                           for (var r = a.length; n < r; ) {
                             var w = n++;
                             if ("block" != a[w][3] && null != k && null != k[0] && k[0].substr(0, a[w][O.tripleEqual(a[w][2], !0) ? 0 : 1].length) == a[w][0] && k[0] != a[w][1]) {
                               O.tripleEqual(a[w][2], !0)
                                 ? (null == k[3] && (k[3] = new e()), (k[3].type = k[0].substr(a[w][0].length, k[0].length - a[w][0].length)))
                                 : O.tripleEqual(a[w][2], !1) || (null == k[3] && (k[3] = new e()), (k[3].type = a[w][2]));
                               k[0] = a[w][1];
                               break;
                             }
                           }
                         }
                       else
                         for (k = 0, n = a.length; k < n; )
                           if (((m = k++), "item" != a[m][3] ? ((r = parseFloat(this.dG(b, "scene" + f)[A][t])), (r = !isNaN(r))) : (r = !0), !r)) {
                             r = this.dG(b, "scene" + f)[A][t];
                             w = a[m];
                             var y = O.tripleEqual(a[m][2], !0) ? 0 : 1;
                             if (r.substr(0, w[y].length) == a[m][0] && (this.dG(b, "scene" + f)[A][t] != a[m][1] || a[m][0] == a[m][1])) {
                               O.tripleEqual(a[m][2], !0)
                                 ? ((k = this.dG(b, "states" + f)), (n = this.dG(b, "scene" + f)[A][t]), (r = a[m][0].length), (w = this.dG(b, "scene" + f)[A]), this.dS(k, "blockX" + A + "Y" + t, n.substr(r, w[t].length - a[m][0].length)))
                                 : O.tripleEqual(a[m][2], !1) || this.dS(this.dG(b, "states" + f), "blockX" + A + "Y" + t, a[m][2]);
                               this.dG(b, "scene" + f)[A][t] = a[m][1];
                               break;
                             }
                           }
             A = Object.keys(this.mDM(this.dG(b, "chests" + f)).h);
             p = A.length;
             for (q = 0; q < p; )
               for (t = A[q++], h = 0; 27 > h; )
                 if (((m = this.dG(this.dG(b, "chests" + f), t)[h++]), null != m && null != m[0]))
                   for (k = 0, n = a.length; k < n; )
                     if (((l = k++), "block" != a[l][3] && m[0].substr(0, a[l][O.tripleEqual(a[l][2], !0) ? 0 : 1].length) == a[l][0] && m[0] != a[l][1])) {
                       O.tripleEqual(a[l][2], !0)
                         ? (null == m[3] && (m[3] = new e()), (k = g.makeDynamicMap(m[3])), (n = m[0].substr(a[l][O.tripleEqual(a[l][2], !0) ? 0 : 1].length, m[0].length - a[l][O.tripleEqual(a[l][2], !0) ? 0 : 1].length)), (k.h.type = n))
                         : O.tripleEqual(a[l][2], !1) || (null == m[3] && (m[3] = new e()), (g.makeDynamicMap(m[3]).h.type = a[l][2]));
                       m[0] = a[l][1];
                       break;
                     }
             f = Object.keys(this.mDM(this.dG(b, "toSmelt" + f)).h).length;
             for (h = 0; h < f; ) ++h;
           }
           A = Object.keys(this.mDM(this.dG(b, "enderChests")).h);
           p = A.length;
           for (q = 0; q < p; )
             for (t = A[q++], c = 0; 27 > c; )
               if (((m = this.dG(this.dG(b, "enderChests"), t)[c++]), null != m && null != m[0]))
                 for (d = 0, l = a.length; d < l; )
                   if (((h = d++), "block" != a[h][3] && m[0].substr(0, a[h][O.tripleEqual(a[h][2], !0) ? 0 : 1].length) == a[h][0] && m[0] != a[h][1])) {
                     O.tripleEqual(a[h][2], !0)
                       ? (null == m[3] && (m[3] = new e()), (k = g.makeDynamicMap(m[3])), (n = m[0].substr(a[h][O.tripleEqual(a[h][2], !0) ? 0 : 1].length, m[0].length - a[h][O.tripleEqual(a[h][2], !0) ? 0 : 1].length)), (k.h.type = n))
                       : O.tripleEqual(a[h][2], !1) || (null == m[3] && (m[3] = new e()), (g.makeDynamicMap(m[3]).h.type = a[h][2]));
                     m[0] = a[h][1];
                     break;
                   }
         },
         setMobNum: function (b, a, c) {
           null == c && (c = !1);
           null == a && (a = 0);
           switch (b) {
             case "bat":
               this.batNum = (c ? 0 : this.batNum) + a;
               break;
             case "blaze":
               this.blazeNum = (c ? 0 : this.blazeNum) + a;
               break;
             case "chicken":
               this.chickenNum = (c ? 0 : this.chickenNum) + a;
               break;
             case "cow":
               this.cowNum = (c ? 0 : this.cowNum) + a;
               break;
             case "creeper":
               this.creeperNum = (c ? 0 : this.creeperNum) + a;
               break;
             case "enderdragon":
               this.enderdragonNum = (c ? 0 : this.enderdragonNum) + a;
               break;
             case "enderman":
               this.endermanNum = (c ? 0 : this.endermanNum) + a;
               break;
             case "ghast":
               this.ghastNum = (c ? 0 : this.ghastNum) + a;
               break;
             case "magmacube":
               this.magmacubeNum = (c ? 0 : this.magmacubeNum) + a;
               break;
             case "mob":
               this.mobNum = (c ? 0 : this.mobNum) + a;
               break;
             case "nethereye":
               this.nethereyeNum = (c ? 0 : this.nethereyeNum) + a;
               break;
             case "pig":
               this.pigNum = (c ? 0 : this.pigNum) + a;
               break;
             case "rabbit":
               this.rabbitNum = (c ? 0 : this.rabbitNum) + a;
               break;
             case "sheep":
               this.sheepNum = (c ? 0 : this.sheepNum) + a;
               break;
             case "skeleton":
               this.skeletonNum = (c ? 0 : this.skeletonNum) + a;
               break;
             case "slime":
               this.slimeNum = (c ? 0 : this.slimeNum) + a;
               break;
             case "snowgolem":
               this.snowgolemNum = (c ? 0 : this.snowgolemNum) + a;
               break;
             case "spawnskin":
               this.spawnskinNum = (c ? 0 : this.spawnskinNum) + a;
               break;
             case "spider":
               this.spiderNum = (c ? 0 : this.spiderNum) + a;
               break;
             case "squid":
               this.squidNum = (c ? 0 : this.squidNum) + a;
               break;
             case "wolf":
               this.wolfNum = (c ? 0 : this.wolfNum) + a;
               break;
             case "zombie":
               this.zombieNum = (c ? 0 : this.zombieNum) + a;
               break;
             case "zombiepigman":
               this.zombiepigmanNum = (c ? 0 : this.zombiepigmanNum) + a;
           }
         },
         setMobData: function () {
           var b = this,
             a = this,
             c = this.mobData,
             d = new e();
           d.h.name = "Zombie";
           d.h.constructor = db;
           d.h.hostile = !0;
           d.h.passive = !1;
           var f = new e();
           f.h.hurt = ["zombiehurt1", "zombiehurt2"];
           f.h.idle = ["zombie1", "zombie2", "zombie3"];
           f.h.death = ["zombiedie"];
           d.h.sounds = f;
           d.h.idleSoundFrequency = 400;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "rf";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 3;
           var l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "ii";
           var k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.016666666666666666;
           k.h.lootingBonusChances = 0.45;
           f.h.rare = k;
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           var C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "carrot";
           k = new e();
           k.h.lowerBound = 0.016666666666666666;
           k.h.upperBound = 0.03333333333333333;
           k.h.lootingBonusChances = 0.45;
           f.h.rare = k;
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           var z = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "potato";
           k = new e();
           k.h.lowerBound = 0.03333333333333333;
           k.h.upperBound = 0.05000000000000001;
           k.h.lootingBonusChances = 0.45;
           f.h.rare = k;
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           d.h.drops = [l, C, z, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.burnsInSun = !0;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5, 6];
           k.h.frameDelay = 6;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = f;
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.0125;
           d.h.walkSpeed = 1.1;
           d.h.canClimb = !0;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           c.h.zombie = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Skeleton";
           d.h.constructor = Vc;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.hurt = ["skeletonhurt1", "skeletonhurt2", "skeletonhurt3", "skeletonhurt4"];
           f.h.idle = ["skeleton1", "skeleton2", "skeleton3", "skeleton4"];
           f.h.death = ["skeletondeath"];
           d.h.sounds = f;
           d.h.idleSoundFrequency = 400;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "bone";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "arrow";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           d.h.drops = [l, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.burnsInSun = !0;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5, 6];
           k.h.frameDelay = 4;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = f;
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.0125;
           d.h.walkSpeed = 1;
           d.h.canClimb = !0;
           d.h.attackBow = !0;
           d.h.attackFrequency = 70;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           c.h.skeleton = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Pig";
           d.h.constructor = od;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.hurt = ["pig1", "pig2", "pig3", "pig4", "pig5"];
           f.h.idle = ["pig1", "pig2", "pig3", "pig4", "pig5"];
           d.h.sounds = f;
           d.h.idleSoundFrequency = 1e3;
           d.h.despawnChance = 2.5e-5;
           d.h.canBreed = !0;
           f = new e();
           f.h.carrot = !0;
           f.h.potato = !0;
           f.h.beet = !0;
           f.h.coas = !0;
           d.h.followItems = f;
           f = new e();
           f.h.carrot = !0;
           f.h.potato = !0;
           f.h.beet = !0;
           d.h.breedItems = f;
           d.h.canBeBaby = !0;
           f = new e();
           f.h.type = "pork";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           f.h.onFire = !1;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cpork";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           f.h.onFire = !0;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "bacon";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.3333333333333333;
           k.h.lootingBonusChances = 0.3333333333333333;
           f.h.rare = k;
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 1;
           f.h.onFire = !1;
           z = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cbacon";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.3333333333333333;
           k.h.lootingBonusChances = 0.3333333333333333;
           f.h.rare = k;
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 1;
           f.h.onFire = !0;
           d.h.drops = [l, C, z, g.makeDynamicMap(f)];
           d.h.health = 10;
           d.h.xp = 4;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 4, 4];
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = f;
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.doFrightenedRunning = !0;
           d.h.walkSpeed = 1;
           d.h.walkSpeedWhenRidden = 3;
           d.h.sprintMultiplier = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.8, -0.8, 1.6, 0.8);
           d.h.collisionBounds = l;
           d.h.specialRendering = function (a) {};
           c.h.pig = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Snow Golem";
           d.h.constructor = rg;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.hurt = "snowgolemhurt1 snowgolemhurt2 snowgolemhurt3 snowgolemhurt4 snowgolemhurt5 snowgolemhurt6".split(" ");
           f.h.death = "snowgolemhurt1 snowgolemhurt2 snowgolemhurt3 snowgolemhurt4 snowgolemhurt5 snowgolemhurt6".split(" ");
           d.h.sounds = f;
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 0;
           f = new e();
           f.h.type = "snowb";
           f.h.quantity = 0;
           f.h.randomBonus = 15;
           f.h.lootBonus = 3;
           d.h.drops = [g.makeDynamicMap(f)];
           d.h.health = 4;
           d.h.xp = 0;
           d.h.burnsInDesert = !0;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = f;
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.0125;
           d.h.walkSpeed = 1;
           d.h.canClimb = !0;
           d.h.attackSnowball = !0;
           d.h.attackFrequency = 100;
           d.h.randomlyHostileChance = 0.01;
           d.h.randomlyForgetHostility = 0.001;
           f = new e();
           f.h.zombiepigman = !0;
           f.h.slime = !0;
           f.h.zombie = !0;
           f.h.skeleton = !0;
           f.h.spider = !0;
           f.h.enderman = !0;
           f.h.blaze = !0;
           f.h.nethereye = !0;
           f.h.ghast = !0;
           d.h.randomlyHostileTowards = f;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.8, 0.8, 1.8);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (c) {
             1 == m.Instance.game.getGameRule("mobgriefing") &&
               1 != q.get(a.getFG(Math.floor(b.mobs.h[c].h.x / 1), Math.floor(-b.mobs.h[c].h.y)), "walkThroughBlock") &&
               "air" == a.getFG(Math.floor(b.mobs.h[c].h.x / 1), Math.floor(-b.mobs.h[c].h.y) + 1) &&
               a.setFG(Math.floor(b.mobs.h[c].h.x / 1), Math.floor(-b.mobs.h[c].h.y) + 1, "snow");
           };
           c.h.snowgolem = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Sheep";
           d.h.constructor = sc;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.hurt = ["sheep1", "sheep2", "sheep3"];
           f.h.idle = ["sheep1", "sheep2", "sheep3"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 1e3;
           d.h.despawnChance = 2.5e-5;
           d.h.canBreed = !0;
           f = new e();
           f.h.wheat = !0;
           d.h.followItems = g.makeDynamicMap(f);
           f = new e();
           f.h.wheat = !0;
           d.h.breedItems = g.makeDynamicMap(f);
           d.h.canBeBaby = !0;
           f = new e();
           f.h.type = "cloth";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           f.h.setColor = !0;
           k = new e();
           k.h.sheared = ["==", !1];
           f.h.properties = g.makeDynamicMap(k);
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "mutton";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           f.h.onFire = !1;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cmutton";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           f.h.onFire = !0;
           d.h.drops = [l, C, g.makeDynamicMap(f)];
           d.h.health = 8;
           d.h.xp = 4;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 2, 1, 3];
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [4, 5];
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.eating = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.doFrightenedRunning = !0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.8, -1.3, 1.6, 1.3);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (a) {
             var c = b.mobs.h[a],
               d = Math.floor(c.h.x / 1),
               f = Math.floor(-c.h.y);
             Math.random() < 1 / ((2e3 * m.Instance.get_fps()) / 25) && "dt" == b.getFG(d, f) && 1 == b.states.h["blockX" + d + "Y" + f] && (c.h.eating = 1);
             0 < c.h.eating &&
               ((c.h.eating += 1),
               32 == c.h.eating &&
                 ((c.h.sheared = !1),
                 "dt" == b.getFG(d, f) &&
                   (m.Instance.game.blockSound(d, f, c.h.x - b.worldX, c.h.y - b.worldY),
                   1 == m.Instance.game.getGameRule("mobgriefing") && ((b.states.h["blockX" + d + "Y" + f] = 2), null != b.getBlock(d, f) && H.__cast(b.getBlock(d, f), Rd).updateRenderer())),
                 (c.h.eating = 0)),
               (b.mobTmpData.h[a].h.immobile = !0));
           };
           c.h.sheep = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Spider";
           d.h.constructor = Wc;
           d.h.hostile = !1;
           d.h.passive = !1;
           d.h.neutral = !0;
           f = new e();
           f.h.hurt = ["spider1", "spider2", "spider3", "spider4"];
           f.h.idle = ["spider1", "spider2", "spider3", "spider4"];
           f.h.death = ["spiderdeath"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           f = new e();
           f.h.type = "fiber";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "se";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.3333333333333333;
           k.h.lootingBonusChances = 0.3333333333333333;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           d.h.drops = [l, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 4;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.ignoreWeb = !0;
           d.h.ignoreCliffs = !0;
           d.h.climbsWalls = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5, 6, 7, 8];
           k.h.frameDelay = 2;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.014285714285714285;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.016666666666666666;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.jumpAttack = !0;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.8, -1, 1.6, 1);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (a) {
             Math.random() < 1 / ((100 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(b.mobs.h[a].h.keys).h.up = !0);
             Math.random() < 1 / ((50 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(b.mobs.h[a].h.keys).h.up = !1);
             Math.random() < 1 / ((200 * m.Instance.get_fps()) / 25) &&
               (48 > b.tim && 2 <= b.tim && 0 == b.raining && -50 >= b.mobs.h[a].h.y && null == b.mobs.h[a].h.target ? ((b.mobs.h[a].h.aggressiveness = 0), (b.mobs.h[a].h.target = null)) : (b.mobs.h[a].h.aggressiveness = 1e3));
           };
           c.h.spider = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Nethereye";
           d.h.constructor = sg;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.idle = ["nethereye1", "nethereye2", "nethereye3", "nethereye4"];
           f.h.hurt = ["nethereye1", "nethereye2", "nethereye3", "nethereye4"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 2e3;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "nbr";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 3;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "ob";
           k = new e();
           k.h.randomNum = 0;
           k.h.lowerBound = 0;
           k.h.upperBound = 0.0666;
           k.h.lootingBonusChances = 0.4;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 2;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "br";
           k = new e();
           k.h.randomNum = 0;
           k.h.lowerBound = 0.0666;
           k.h.upperBound = 0.2;
           k.h.lootingBonusChances = 0.1;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 2;
           d.h.drops = [l, C, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.takesFallDamage = !1;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !1;
           d.h.animations = null;
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.ignoreCliffs = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.5, -0.5, 1, 1);
           d.h.collisionBounds = l;
           d.h["float"] = !0;
           d.h.floatMaxSpeed = 5;
           d.h.followVertically = !0;
           d.h.specialGravityFunction = function (a) {
             a = b.mobs.h[a];
             m.Instance.game.collision(a.h.x - 0.3333333333333333, a.h.y + 0.3333333333333333, 0.6666666666666666, 0, 0.16666666666666666, !1)
               ? ((a.h.y -= 0.06666666666666667), (a.h.speedY += g.migrateSpeed(2)))
               : (a.h.speedY -= g.migrateSpeed(1));
             1 == q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y)), "liquidCollision") && ((a.h.speedX *= g.migrateDampening(0.8)), (a.h.speedY *= g.migrateDampening(0.8)));
             a.h.speedX *= g.migrateDampening(0.9);
             a.h.speedY *= g.migrateDampening(0.9);
           };
           c.h.nethereye = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Bat";
           d.h.constructor = tg;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.idle = ["batidle1", "batidle2", "batidle3", "batidle4", "batidle5"];
           f.h.hurt = ["bathurt1", "bathurt2", "bathurt3", "bathurt4"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 1200;
           d.h.despawnChance = 1e-4;
           d.h.drops = [];
           d.h.health = 6;
           d.h.xp = 0;
           d.h.takesFallDamage = !1;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !0;
           d.h.animations = null;
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.ignoreCliffs = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.5, -0.5, 1, 1);
           d.h.collisionBounds = l;
           d.h["float"] = !0;
           d.h.floatMaxSpeed = 3;
           d.h.floatJump = 1.4;
           d.h.followVertically = !0;
           d.h.specialGravityFunction = function (c) {
             var d = b.mobs.h[c],
               f = !1;
             Math.random() < 1 / ((10 * m.Instance.get_fps()) / 25) &&
               a.gamemode != U.gamemodes.h.CREATIVE &&
               5 > Math.abs(b.worldX - d.h.x) &&
               ((f = !0), (g.makeDynamicMap(d.h.keys).h.left = b.worldX > d.h.x), (g.makeDynamicMap(d.h.keys).h.right = !g.makeDynamicMap(d.h.keys).h.left));
             for (var e = 0, l = 0; 10 > e && q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) - e), "walkThroughBlockHit") && 1 != q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) - e), "liquidCollision"); ) ++e;
             for (; 4 > l && q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) + l), "walkThroughBlockHit") && 1 != q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) + l), "liquidCollision"); ) ++l;
             1 != d.h.hanging &&
               Math.random() < 1 / ((20 * m.Instance.get_fps()) / 25) &&
               2 < e &&
               1 != q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) + 1), "walkThroughBlockHit") &&
               "b" != b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) + 1) &&
               (d.h.hanging = !0);
             if (1 == d.h.hanging)
               if (
                 ((d.h.speedY = 0),
                 (d.h.speedX = 0),
                 (g.makeDynamicMap(d.h.keys).h.up = !1),
                 (d.h.y = -Math.floor(-d.h.y) - 0.36666666666666664),
                 (b.mobTmpData.h[c].h.immobile = !0),
                 f || 1 == q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y) + 1), "walkThroughBlockHit") || 0.03333333333333333 > Math.random())
               )
                 (d.h.hanging = !1), (d.h.speedY = g.migrateSpeed(-2)), (g.makeDynamicMap(d.h.keys).h.left = 0.5 > Math.random()), (g.makeDynamicMap(d.h.keys).h.right = !g.makeDynamicMap(d.h.keys).h.left);
               else return;
             3 >= e
               ? Math.random() < 1 / ((5 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(d.h.keys).h.up = !0)
               : 8 <= e || 2 >= l
               ? Math.random() < 1 / ((5 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(d.h.keys).h.up = !1)
               : Math.random() < 1 / ((20 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(d.h.keys).h.up = !g.makeDynamicMap(d.h.keys).h.up);
             Math.random() < 1 / ((40 * m.Instance.get_fps()) / 25) && ((g.makeDynamicMap(d.h.keys).h.left = g.makeDynamicMap(d.h.keys).h.right), (g.makeDynamicMap(d.h.keys).h.right = !g.makeDynamicMap(d.h.keys).h.left));
             0 == g.makeDynamicMap(d.h.keys).h.up && (d.h.speedY -= g.migrateAcc(0.8, 1));
             1 != d.h.hanging && (1 == g.makeDynamicMap(d.h.keys).h.left ? (d.h.speedX += g.migrateAcc(0.4, 1)) : (d.h.speedX -= g.migrateAcc(0.4, 1)));
             d.h.speedX = Math.max(g.migrateSpeed(-5), Math.min(g.migrateSpeed(5), d.h.speedX));
             1 == q.get(b.getFG(Math.floor(d.h.x / 1), Math.floor(-d.h.y)), "liquidCollision") && ((d.h.speedX *= g.migrateDampening(0.7)), (d.h.speedY *= g.migrateDampening(0.7)));
           };
           c.h.bat = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Cow";
           d.h.constructor = ug;
           f = new e();
           f.h.mooshroom = "Mooshroom";
           f.h.cowctus = "Cowctus";
           d.h.variants = g.makeDynamicMap(f);
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.idle = ["cow1", "cow2", "cow3", "cow4"];
           f.h.hurt = ["cowhurt1"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 1e3;
           d.h.despawnChance = 2.5e-5;
           d.h.canBreed = !0;
           f = new e();
           f.h.wheat = !0;
           d.h.followItems = g.makeDynamicMap(f);
           f = new e();
           f.h.wheat = !0;
           d.h.breedItems = g.makeDynamicMap(f);
           d.h.canBeBaby = !0;
           f = new e();
           f.h.type = "leather";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "ms1";
           f.h.quantity = 1;
           f.h.randomBonus = 2;
           f.h.lootBonus = 3;
           f.h.isVariant = "mooshroom";
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "ms2";
           f.h.quantity = 1;
           f.h.randomBonus = 2;
           f.h.lootBonus = 3;
           f.h.isVariant = "mooshroom";
           z = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "beef";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           f.h.onFire = !1;
           var n = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cbeef";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           f.h.onFire = !0;
           k = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "ct";
           f.h.quantity = 1;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           f.h.isVariant = "cowctus";
           d.h.drops = [l, C, z, n, k, g.makeDynamicMap(f)];
           d.h.health = 10;
           d.h.xp = 4;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 1, 3];
           l = new e();
           C = new e();
           C.h.offset = 9;
           l.h.mooshroom = g.makeDynamicMap(C);
           C = new e();
           C.h.offset = 3;
           l.h.cowctus = g.makeDynamicMap(C);
           k.h.variants = g.makeDynamicMap(l);
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           l = new e();
           C = new e();
           C.h.offset = 9;
           l.h.mooshroom = g.makeDynamicMap(C);
           C = new e();
           C.h.offset = 3;
           l.h.cowctus = g.makeDynamicMap(C);
           k.h.variants = g.makeDynamicMap(l);
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [7, 8, 9];
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.chargewalk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [7];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.chargeidle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.doFrightenedRunning = !0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.8, -1.3, 1.6, 1.3);
           d.h.collisionBounds = l;
           d.h.specialOnHit = function (c, d, f, e) {
             d = b.mobs.h[c];
             if ("cowctus" == d.h.variant && !(("attack" != f && ("projectile" != f || (e != a.player.id && null == b.mobs.h[e]))) || 0 < d.h.aggressiveness))
               for (
                 f = 10 * m.Instance.get_fps(),
                   d.h.aggressiveness = f,
                   d.h.target = e,
                   f = m.Instance.get_fps(),
                   d.h.chargeTimer = f,
                   d.h.direction = null != b.mobTmpData.h[c] && b.mobTmpData.h[c].h.followPoint.x > d.h.x ? 1 : 0,
                   g.makeDynamicMap(d.h.keys).h.left = 0 == d.h.direction,
                   g.makeDynamicMap(d.h.keys).h.right = 1 == d.h.direction,
                   g.makeDynamicMap(d.h.keys).h.up = !1,
                   c = 1,
                   e = 4 * (J.particles - 1) + 1;
                 c < e;
 
               )
                 ++c, new Pc(d.h.x + (40 * Math.random() - 20) / 30, d.h.y - (30 * Math.random()) / 30, m.Instance.game, b, d.h.speedX);
           };
           d.h.specialFunction = function (c) {
             var d = b.mobs.h[c];
             0 < d.h.aggressiveness && --d.h.aggressiveness;
             if ("cowctus" == d.h.variant)
               if (0 < d.h.aggressiveness) {
                 b.mobTmpData.h[c].h.overrideMovement = !0;
                 if (0 < d.h.chargeTimer) {
                   if ((--d.h.chargeTimer, (b.mobTmpData.h[c].h.immobile = !0), (b.mobTmpData.h[c].h.animationOverride = "chargeidle"), 0 >= d.h.chargeTimer))
                     for (var f = 1, e = 4 * (J.particles - 1) + 1; f < e; ) ++f, new Pc(d.h.x + (40 * Math.random() - 20) / 30, d.h.y - (30 * Math.random()) / 30, m.Instance.game, b, d.h.speedX);
                 } else {
                   g.makeDynamicMap(d.h.keys).h.left = 0 == d.h.direction;
                   g.makeDynamicMap(d.h.keys).h.right = 1 == d.h.direction;
                   g.makeDynamicMap(d.h.keys).h.up = !1;
                   b.mobTmpData.h[c].h.forceSpeedMultiplier = 3.9;
                   if (null != b.mobTmpData.h[c].h.followPoint)
                     if (b.mobTmpData.h[c].h.followPoint.x > d.h.x != (1 == d.h.direction))
                       (f = 0.5 * m.Instance.get_fps()),
                         (d.h.chargeTimer = f),
                         (d.h.direction = b.mobTmpData.h[c].h.followPoint.x > d.h.x ? 1 : 0),
                         (g.makeDynamicMap(d.h.keys).h.left = 0 == d.h.direction),
                         (g.makeDynamicMap(d.h.keys).h.right = 1 == d.h.direction);
                     else if ((1 == g.makeDynamicMap(d.h.keys).h.left && 1 != b.mobTmpData.h[c].h.leftable) || (1 == g.makeDynamicMap(d.h.keys).h.right && 1 != b.mobTmpData.h[c].h.rightable))
                       (d.h.aggressiveness = 0), (d.h.chargeTimer = 0), (d.h.target = null);
                   if ((1 == g.makeDynamicMap(d.h.keys).h.left || 1 == g.makeDynamicMap(d.h.keys).h.right) && 2 < Math.abs(d.h.speedX)) {
                     if (((b.mobTmpData.h[c].h.animationOverride = "chargewalk"), 1 == b.tick % 2))
                       for (f = 1, e = J.particles - 1 + 1; f < e; ) ++f, new Pc(d.h.x + (40 * Math.random() - 20) / 30, d.h.y - (30 * Math.random()) / 30, m.Instance.game, b, d.h.speedX);
                   } else b.mobTmpData.h[c].h.animationOverride = "chargeidle";
                 }
                 d.h.target == a.player.id
                   ? m.Instance.game.getMob(c).mobCollision(c, a.player.id) &&
                     (m.Instance.game.addParticles("shockwave", 4, 2, new h(d.h.x + ((0 < d.h.direction ? 20 : -20) - 20) / 30, 1.3333333333333333), new h(d.h.y - 1.6666666666666667, 1)),
                     (a.worldY -= 0.3333333333333333),
                     (b.ySpeed = g.migrateSpeed(20)),
                     (f = 5 + (null != g.makeDynamicMap(d.h.effects).h.strength ? g.makeDynamicMap(g.makeDynamicMap(d.h.effects).h.strength).h.level * g.makeDynamicMap(m.Instance.game.effectData.h.strength).h.perLevel : 0)),
                     (f += null != g.makeDynamicMap(d.h.effects).h.weakness ? g.makeDynamicMap(g.makeDynamicMap(d.h.effects).h.weakness).h.level * g.makeDynamicMap(m.Instance.game.effectData.h.weakness).h.perLevel : 0),
                     m.Instance.game.ouch(1, -f, "attack"),
                     null != b.armors[1][2] &&
                       (null != g.makeDynamicMap(b.armors[1][2]).h.thorns1
                         ? (m.Instance.game.getMob(c).hurtMob(c, 2, "attack", a.player.id), (f = d.h.speedX + g.migrateSpeed(11 * Math.random() - 5)), (d.h.speedX = f), (g.makeDynamicMap(d.h.keys).h.up = !0))
                         : null != g.makeDynamicMap(b.armors[1][2]).h.thorns2
                         ? (m.Instance.game.getMob(c).hurtMob(c, 4, "attack", a.player.id), (f = d.h.speedX + g.migrateSpeed(19 * Math.random() - 9)), (d.h.speedX = f), (g.makeDynamicMap(d.h.keys).h.up = !0))
                         : null != g.makeDynamicMap(b.armors[1][2]).h.thorns3 &&
                           (m.Instance.game.getMob(c).hurtMob(c, 6, "attack", a.player.id), (f = d.h.speedX + g.migrateSpeed(27 * Math.random() - 13)), (d.h.speedX = f), (g.makeDynamicMap(d.h.keys).h.up = !0))),
                     (d.h.aggressiveness = 0),
                     (d.h.chargeTimer = 0),
                     (d.h.target = null))
                   : null != d.h.target &&
                     null != b.mobs.h[d.h.target] &&
                     m.Instance.game.getMob(c).mobCollision(c, d.h.target) &&
                     (m.Instance.game.addParticles("shockwave", 4, 2, new h(d.h.x + ((0 < d.h.direction ? 20 : -20) - 20) / 30, 1.3333333333333333), new h(d.h.y - 1.6666666666666667, 1)),
                     (f = b.mobs.h[d.h.target]),
                     (f.h.y -= 0.3333333333333333),
                     (b.mobs.h[d.h.target].h.speedY = g.migrateSpeed(20)),
                     (f = 5 + (g.makeDynamicMap(d.h.effects).h.strength ? g.makeDynamicMap(g.makeDynamicMap(d.h.effects).h.strength).h.level * g.makeDynamicMap(m.Instance.game.effectData.h.strength).h.perLevel : 0)),
                     (f += g.makeDynamicMap(d.h.effects).h.weakness ? g.makeDynamicMap(g.makeDynamicMap(d.h.effects).h.weakness).h.level * g.makeDynamicMap(m.Instance.game.effectData.h.weakness).h.perLevel : 0),
                     m.Instance.game.getMob(c).hurtMob(d.h.target, f, "attack", c),
                     (d.h.aggressiveness = 0),
                     (d.h.chargeTimer = 0),
                     (d.h.target = null));
               } else (d.h.chargeTimer = 0), (b.mobTmpData.h[c].h.animationOverride = "");
           };
           c.h.cow = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Chicken";
           d.h.constructor = vg;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.hurt = ["chicken1", "chicken2", "chicken3"];
           f.h.idle = ["chicken1", "chicken2", "chicken3"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           d.h.canBreed = !0;
           f = new e();
           f.h.seed = !0;
           f.h.pseed = !0;
           f.h.wseed = !0;
           f.h.bseed = !0;
           d.h.followItems = g.makeDynamicMap(f);
           f = new e();
           f.h.seed = !0;
           f.h.pseed = !0;
           f.h.wseed = !0;
           f.h.bseed = !0;
           d.h.breedItems = g.makeDynamicMap(f);
           d.h.canBeBaby = !0;
           f = new e();
           f.h.type = "feather";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "chicken";
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 2;
           f.h.onFire = !1;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cchicken";
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 2;
           f.h.onFire = !0;
           d.h.drops = [l, C, g.makeDynamicMap(f)];
           d.h.health = 4;
           d.h.xp = 2;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !1;
           f = new e();
           k = new e();
           k.h.frames = [6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11];
           k.h.frameDelay = 2;
           k.h.loop = !0;
           f.h.falling = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [2, 2, 3, 3, 3, 4, 4, 5, 5];
           k.h.frameDelay = 2;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.03333333333333333;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.1;
           d.h.percentageChanceToJump = 0.0025;
           d.h.doFrightenedRunning = !0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 2;
           d.h.fallSpeed = 0.5;
           d.h.jumpSpeedMultiplier = 0.5;
           d.h.hostileOnFire = !0;
           d.h.attackContact = !0;
           d.h.attackFrequency = 70;
           d.h.attackDamage = 3;
           d.h.ignoreCliffs = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -0.8, 0.8, 0.8);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (c) {
             if (
               Object.prototype.hasOwnProperty.call(b.onFire.h, c) &&
               (m.Instance.game.addEffect(c, "jumpboost", 2, 2),
               m.Instance.game.addEffect(c, "speed", 2, 1),
               m.Instance.game.addEffect(c, "regeneration", 2, 1),
               m.Instance.game.addEffect(c, "fireresistance", 2, 1),
               Math.random() < 1 / ((320 * m.Instance.get_fps()) / 25) && m.Instance.game.requestSound("distantThunder" + ((10 * Math.random() + 1) | 0), 0, 0),
               m.Instance.game.addParticles("lavabubble", 2, 0, new h(b.mobs.h[c].h.x, 0), new h(b.mobs.h[c].h.y, 0)),
               m.Instance.game.addParticles("chicken", 1, 1, new h(b.mobs.h[c].h.x - 0.3333333333333333, 0.6666666666666666), new h(b.mobs.h[c].h.y - 0.6666666666666666, 0.6666666666666666)),
               1 == b.gameRules.h.mobgriefing)
             ) {
               var d = Math.floor(b.mobs.h[c].h.x / 1 + (3 * Math.random() - 1)),
                 f = Math.floor(-b.mobs.h[c].h.y + (3 * Math.random() - 1));
               m.Instance.game.canFireExistAt(d, f) && "air" == a.getFG(d, f) && a.setFG(d, f);
             }
             0 == b.mobs.h[c].h.babyTimer &&
               Math.random() < 1 / (240 * m.Instance.get_fps() - (1 == b.onFire.h[c] ? 120 * m.Instance.get_fps() : 0)) &&
               (m.Instance.game.requestSound("layEgg", b.mobs.h[c].h.x - b.worldX, b.mobs.h[c].h.y - b.worldY),
               1 == b.onFire.h[c] ? m.Instance.game.addDrop("fireegg", b.mobs.h[c].h.x, b.mobs.h[c].h.y, 1, null, null) : m.Instance.game.addDrop("egg", b.mobs.h[c].h.x, b.mobs.h[c].h.y, 1, null, null));
             b.mobs.h[c].h.falling && Math.random() < 1 / ((30 * m.Instance.get_fps()) / 25) && (b.mobTmpData.h[c].h.lookingBackwards = !1);
             Math.random() < 1 / ((120 * m.Instance.get_fps()) / 25) && (b.mobTmpData.h[c].h.lookingBackwards = !0);
             Math.random() < 1 / ((30 * m.Instance.get_fps()) / 25) && (b.mobTmpData.h[c].h.lookingBackwards = !1);
           };
           c.h.chicken = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Creeper";
           d.h.constructor = Xc;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.hurt = ["creeper1", "creeper2", "creeper3", "creeper4"];
           f.h.death = ["creeperdeath"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           f = new e();
           f.h.type = "gp";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           d.h.drops = [g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5];
           k.h.frameDelay = 8;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.016666666666666666;
           d.h.walkSpeed = 1;
           d.h.attackExplode = !0;
           d.h.fuseLength = 140;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.85, 0.8, 1.85);
           d.h.collisionBounds = l;
           c.h.creeper = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Rabbit";
           d.h.constructor = wg;
           d.h.hostile = !1;
           d.h.passive = !0;
           f = new e();
           f.h.hurt = ["rabbitHurt1", "rabbitHurt2", "rabbitHurt3", "rabbitHurt4"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           d.h.canBreed = !0;
           f = new e();
           f.h.fw1 = !0;
           f.h.carrot = !0;
           f.h.gcarrot = !0;
           d.h.followItems = g.makeDynamicMap(f);
           f = new e();
           f.h.fw1 = !0;
           f.h.carrot = !0;
           f.h.gcarrot = !0;
           d.h.breedItems = g.makeDynamicMap(f);
           d.h.canBeBaby = !0;
           f = new e();
           f.h.type = "rleather";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "crabbit";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           f.h.onFire = !0;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "rabbit";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           f.h.onFire = !1;
           z = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "rfoot";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.1;
           k.h.lootingBonusChances = 0.03;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           n = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "carrot";
           k = new e();
           k.h.lowerBound = 0.1;
           k.h.upperBound = 0.35;
           k.h.lootingBonusChances = 0.03;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           d.h.drops = [l, C, z, n, g.makeDynamicMap(f)];
           d.h.health = 3;
           d.h.xp = 2;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.animations = null;
           d.h.hops = !0;
           d.h.percentageChanceToDoMovement = 1;
           d.h.percentageChanceToChangeDirection = 0.0125;
           d.h.percentageChanceToStopMoving = 0.16666666666666666;
           d.h.percentageChanceToJump = 5.555555555555556e-4;
           d.h.doFrightenedRunning = !0;
           d.h.walkSpeed = 1.5;
           d.h.sprintMultiplier = 1.5;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -0.8, 0.8, 0.8);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (a) {
             a = b.mobs.h[a];
             if (1 == m.Instance.game.getGameRule("mobgriefing") && Math.random() < 1 / (30 * m.Instance.get_fps())) {
               var c = Math.floor(a.h.x / 1),
                 d = Math.floor(-a.h.y);
               "carrot" == b.getFG(c, d) &&
                 null != b.wheat.h["blockX" + c + "Y" + d] &&
                 7 == b.wheat.h["blockX" + c + "Y" + d] &&
                 (m.Instance.game.blockSound(c, d, -b.worldX - a.h.x, b.worldY - a.h.y), m.Instance.game.requestRemove(c, d, !0, !1, !0));
             }
             !a.h.falling && 0.3333333333333333 > Math.random() && ((c = g.makeDynamicMap(a.h.keys)), (d = g.makeDynamicMap(a.h.keys)), (g.makeDynamicMap(a.h.keys).h.up = !1), (d.h.left = !1), (c.h.right = !1));
           };
           c.h.rabbit = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Wolf";
           d.h.constructor = hc;
           d.h.hostile = !1;
           d.h.passive = !1;
           d.h.neutral = !0;
           d.h.tameable = !0;
           f = new e();
           f.h.idle = "Bark1 Bark2 Bark3 Bark4 Bark5 Bark6 Bark7 Bark8 Bark9 Bark10".split(" ");
           f.h.hurt = ["Whine"];
           f.h.aggroIdle = ["Growl1", "Growl2", "Growl3", "Growl4"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 3e3;
           d.h.despawnChance = 1e-4;
           d.h.canBreed = !0;
           d.h.followItems = new e();
           f = new e();
           f.h.pork = !0;
           f.h.cpork = !0;
           f.h.beef = !0;
           f.h.cbeef = !0;
           f.h.chicken = !0;
           f.h.cchicken = !0;
           f.h.rabbit = !0;
           f.h.crabbit = !0;
           f.h.mutton = !0;
           f.h.cmutton = !0;
           f.h.rf = !0;
           f.h.fi = !0;
           f.h.cfi = !0;
           f.h.salmon = !0;
           f.h.csalmon = !0;
           d.h.breedItems = g.makeDynamicMap(f);
           d.h.canBeBaby = !0;
           d.h.drops = [];
           d.h.health = 20;
           d.h.xp = 8;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [2, 3, 4, 5, 5];
           k.h.frameDelay = 4;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [6];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.sitting = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.03333333333333333;
           d.h.percentageChanceToChangeDirection = 0.016666666666666666;
           d.h.percentageChanceToStopMoving = 0.16666666666666666;
           d.h.percentageChanceToJump = 0.01;
           d.h.walkSpeed = 2;
           d.h.sprintMultiplier = 1.5;
           f = new e();
           f.h.sheep = !0;
           f.h.chicken = !0;
           d.h.randomlyHostileTowards = g.makeDynamicMap(f);
           d.h.randomlyHostileChance = 0.0033333333333333335;
           d.h.randomlyForgetHostility = 0.001;
           d.h.attackContact = !0;
           d.h.attackFrequency = 30;
           d.h.attackDamage = 3;
           d.h.groupAttack = !0;
           d.h.groupAttackDistance = 10;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.8, -1.3, 1.6, 1.3);
           d.h.collisionBounds = l;
           d.h.specialInit = function (a) {
             1 == b.mobs.h[a].h.sitting && (b.mobTmpData.h[a].h.immobile = !0);
           };
           d.h.specialFunction = function (c) {
             b.mobTmpData.h[c].h.animationOffset = 1 == b.mobs.h[c].h.tamed ? 5 : 0;
             if (1 == b.mobs.h[c].h.tamed) {
               if ((null == b.mobs.h[c].h.target || null == b.mobs.h[b.mobs.h[c].h.target] || 7 < Math.abs(b.mobs.h[b.mobs.h[c].h.target].h.x - b.mobs.h[c].h.x)) && null != b.mobs.h[b.lastTarget] && "wolf" != b.mobs.h[b.lastTarget].h.type) {
                 var d = b.mobs.h[c],
                   f = b.lastTarget;
                 b.mobs.h[c].h.target = f;
                 d.h.focus = f;
                 d = b.mobs.h[c];
                 f = 25 * m.Instance.get_fps();
                 d.h.aggressiveness = f;
               }
               b.mobs.h[c].h.sitting && (b.mobTmpData.h[c].h.immobile = !0);
             } else b.mobs.h[c].h.sitting && (b.mobs.h[c].h.sitting = !1);
             b.mobs.h[c].h.tamed && 5 > b.mobs.h[c].h.health && 0.002 > Math.random() && m.Instance.game.requestSound("Whine", b.mobs.h[c].h.x - a.worldX, b.mobs.h[c].h.y - a.worldY);
             b.mobs.h[c].h.sitting && null != q.get(b.getFG(Math.floor(b.mobs.h[c].h.x / 1), Math.floor(-b.mobs.h[c].h.y)), "liquidCollision") && (b.mobs.h[c].h.sitting = !1);
           };
           c.h.wolf = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Slime";
           d.h.constructor = xg;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.hurt = ["slimejump1", "slimejump2", "slimeland3"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           f = new e();
           f.h.type = "slimeball";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           k = new e();
           k.h.size = ["==", 1];
           f.h.properties = g.makeDynamicMap(k);
           d.h.drops = [g.makeDynamicMap(f)];
           d.h.health = 4;
           d.h.healthFunction = function (a) {
             return Math.pow(4, b.mobs.h[a].h.size - 1) | 0;
           };
           d.h.xp = 0;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.animations = null;
           d.h.hops = !0;
           d.h.percentageChanceToDoMovement = 0.0125;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 1;
           d.h.percentageChanceToJump = 0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.45, -0.45, 0.9, 0.9);
           d.h.collisionBounds = l;
           d.h.specialDeath = function (a) {
             m.Instance.game.dropXP(b.mobs.h[a].h.x, b.mobs.h[a].h.y, Math.pow(2, b.mobs.h[a].h.size - 1) | 0);
             if (1 < b.mobs.h[a].h.size)
               for (var c = (4 * Math.random() + 1) | 0; 0 < c; ) {
                 var d = K.spawnMob("slime", b.mobs.h[a].h.x, b.mobs.h[a].h.y, b.mobs.h[a].h.name);
                 b.mobs.h[d].h.size = b.mobs.h[a].h.size - 1;
                 b.mobs.h[d].h.health = Math.pow(4, b.mobs.h[d].h.size - 1);
                 --c;
               }
           };
           c.h.slime = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Magma Cube";
           d.h.constructor = yg;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.hurt = ["slimejump1", "slimejump2", "slimeland3"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           f = new e();
           f.h.type = "magmac";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           k = new e();
           k.h.size = ["!=", 1];
           f.h.properties = g.makeDynamicMap(k);
           d.h.drops = [g.makeDynamicMap(f)];
           d.h.health = 4;
           d.h.healthFunction = function (a) {
             return Math.pow(4, b.mobs.h[a].h.size - 1) | 0;
           };
           d.h.xp = 0;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !0;
           d.h.animations = null;
           d.h.hops = !0;
           d.h.percentageChanceToDoMovement = 0.0125;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 1;
           d.h.percentageChanceToJump = 0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.45, -0.45, 0.9, 0.9);
           d.h.collisionBounds = l;
           d.h.specialDeath = function (a) {
             m.Instance.game.dropXP(b.mobs.h[a].h.x, b.mobs.h[a].h.y, Math.pow(2, b.mobs.h[a].h.size - 1) | 0);
             if (1 < b.mobs.h[a].h.size)
               for (var c = (4 * Math.random() + 1) | 0; 0 < c; ) {
                 var d = K.spawnMob("magmacube", b.mobs.h[a].h.x, b.mobs.h[a].h.y, b.mobs.h[a].h.name);
                 b.mobs.h[d].h.size = b.mobs.h[a].h.size - 1;
                 b.mobs.h[d].h.health = Math.pow(4, b.mobs.h[d].h.size - 1);
                 --c;
               }
           };
           c.h.magmacube = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Ghast";
           d.h.constructor = zg;
           d.h.hostile = !0;
           d.h.passive = !1;
           d.h.sounds = new e();
           d.h.idleSoundFrequency = 2e3;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "gp";
           f.h.quantity = 1;
           f.h.randomBonus = 1;
           f.h.lootBonus = 3;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "gt";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           d.h.drops = [l, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.takesFallDamage = !1;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !1;
           d.h.animations = null;
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.03571428571428571;
           d.h.percentageChanceToJump = 0.007142857142857143;
           d.h.walkSpeed = 0.2;
           d.h.sprintMultiplier = 1.5;
           d.h.attackCharge = !0;
           d.h.attackFrequency = 180;
           d.h.attackDamage = 3;
           d.h.ignoreCliffs = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 5;
           l = new t(-2, -4, 4, 4);
           d.h.collisionBounds = l;
           d.h["float"] = !0;
           d.h.floatMaxSpeed = 2;
           d.h.floatJump = 0;
           d.h.followVertically = !0;
           d.h.specialGravityFunction = function (a) {
             a = b.mobs.h[a];
             for (var c = 0, d = 0; 7 > c && q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y) - c), "walkThroughBlockHit") && 1 != q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y) - c), "liquidCollision"); ) ++c;
             for (; 7 > d && q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y) + 3 + d), "walkThroughBlockHit") && 1 != q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y) + 3 + d), "liquidCollision"); ) ++d;
             3 <= c - d || 6 <= c
               ? Math.random() < 1 / ((120 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(a.h.keys).h.up = !1)
               : -3 >= c - d && Math.random() < 1 / ((5 * m.Instance.get_fps()) / 25) && (g.makeDynamicMap(a.h.keys).h.up = !0);
             1 == g.makeDynamicMap(a.h.keys).h.up ? (a.h.speedY += g.migrateSpeed(0.5)) : (a.h.speedY -= g.migrateSpeed(0.15));
             1 == q.get(b.getFG(Math.floor(a.h.x / 1), Math.floor(-a.h.y)), "liquidCollision") && ((a.h.speedX *= g.migrateDampening(0.8)), (a.h.speedY *= g.migrateDampening(0.8)));
             a.h.speedX *= g.migrateDampening(0.9);
             a.h.speedY *= g.migrateDampening(0.9);
           };
           c.h.ghast = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Squid";
           d.h.constructor = Ag;
           d.h.hostile = !1;
           d.h.passive = !0;
           d.h.sounds = new e();
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 2.5e-5;
           f = new e();
           f.h.type = "ink";
           f.h.quantity = 1;
           f.h.randomBonus = 2;
           f.h.lootBonus = 3;
           d.h.drops = [g.makeDynamicMap(f)];
           d.h.health = 10;
           d.h.xp = 4;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.animations = null;
           d.h.aiType = "custom";
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 3;
           l = new t(-0.3333333333333333, -0.3333333333333333, 0.6666666666666666, 0.6666666666666666);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (a) {
             var c = b.mobs.h[a],
               d = b.mobTmpData.h[a];
             c.h.actualSpeed = 2;
             c.h.movementCooldown += 3 * c.h.cooldownSpeed;
             if (200 <= c.h.movementCooldown) {
               c.h.movementCooldown = 0;
               var f = c.h.cooldownSpeed + ((1 - c.h.cooldownSpeed) / 5 + (0.2 * Math.random() - 0.1));
               c.h.cooldownSpeed = f;
               f = c.h.rotationSpeed + (-c.h.rotationSpeed / 5 + (Math.random() - 0.5));
               c.h.rotationSpeed = f;
               d.h.closeAnimation = 10;
               c.h.speedX -= g.migrateSpeed(Math.cos((c.h.actualRotation / 180) * Math.PI) * c.h.actualSpeed);
               c.h.speedY -= g.migrateSpeed(Math.sin((c.h.actualRotation / 180) * Math.PI) * c.h.actualSpeed);
             }
             0 < d.h.closeAnimation && --d.h.closeAnimation;
             d = m.Instance.game.collision(c.h.x + 0.6666666666666666, c.h.y, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !0) ? 1 : 0;
             f = m.Instance.game.collision(c.h.x, c.h.y + 0.6666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !0) ? 1 : 0;
             var e = m.Instance.game.collision(c.h.x - 0.6666666666666666, c.h.y, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !0) ? 1 : 0,
               l = m.Instance.game.collision(c.h.x, c.h.y - 0.6666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !0) ? 1 : 0;
             1 == d && (c.h.speedX = 0 == e ? Math.max(g.migrateSpeed(0.1), -c.h.speedX / 3) : 0);
             1 == e && (c.h.speedX = 0 == d ? Math.min(-g.migrateSpeed(0.1), -c.h.speedX / 3) : 0);
             1 == f && (c.h.speedY = 0 == l ? Math.max(g.migrateSpeed(0.1), c.h.speedY / 3) : 0);
             1 == l && (c.h.speedY = 0 == f ? Math.min(-g.migrateSpeed(0.1), c.h.speedY / 3) : 0);
             null == q.get(b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y)), "liquidCollision")
               ? (--c.h.airTimer,
                 0 >= c.h.airTimer && ((c.h.airTimer = 60), --c.h.air),
                 0 > c.h.air && ((c.h.air = 0), m.Instance.game.getMob(a).hurtMob(a, 1, "drown")),
                 m.Instance.game.collision(c.h.x - 0.3333333333333333, c.h.y + 0.3333333333333333, 0.6666666666666666, 0.03333333333333333, 0.13333333333333333, !0) ? (c.h.speedY = 0) : (c.h.speedY -= g.migrateAcc(0.3, 0.97)),
                 (c.h.speedX *= g.migrateDampening(0.9)),
                 180 > w.modulus(c.h.actualRotation + 90, 360) ? (c.h.actualRotation = 0.8 * (w.modulus(c.h.actualRotation + 90, 360) - 90)) : (c.h.actualRotation = 0.8 * (w.modulus(c.h.actualRotation + 90, 360) - 90 - 180) + 180))
               : null == q.get(b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y + 0.6666666666666666)), "liquidCollision")
               ? ((c.h.airTimer = 60), (c.h.air = 11), (c.h.speedY -= g.migrateAcc(0.3, 0.97)))
               : ((c.h.airTimer = 60), (c.h.air = 11));
             d = Math.floor(c.h.x / 1);
             f = -Math.floor(c.h.y / 1);
             --c.h.hitCooldown;
             if (0 >= c.h.hitCooldown) {
               c.h.hitCooldown = 40;
               if ("la" == b.getFG(d, f + 1) || "la" == b.getFG(d, f + 2)) (c.h.health -= 5), m.Instance.game.getMob(a).hurtMob(a, Math.floor(2 * Math.random() + 1), "lava");
               if ("ad" == b.getFG(d, f + 1) || "ad" == b.getFG(d, f + 2)) (c.h.health -= 5), m.Instance.game.getMob(a).hurtMob(a, Math.floor(2 * Math.random() + 1), "acid");
             }
             c.h.rotationSpeed *= g.migrateDampening(0.97);
             c.h.actualRotation += (10 * c.h.rotationSpeed) / 2;
             c.h.actualRotation = w.modulus(c.h.actualRotation, 360);
             c.h.speedX *= g.migrateDampening(0.97);
             c.h.speedY *= g.migrateDampening(0.97);
             c.h.x -= c.h.speedX / 30;
             c.h.y -= c.h.speedY / 30;
             a = "blockX" + Math.floor(c.h.x / 1) + "Y" + (Math.floor(-c.h.y) + 1);
             null != b.water.h[a] && (b.water.h[a][0] > b.water.h[a][1] ? (c.h.speedX -= g.migrateAcc(1, 0.97) / 5) : b.water.h[a][0] < b.water.h[a][1] && (c.h.speedX += g.migrateAcc(1, 0.97) / 5));
             if ("web" == b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y) + 1) || "web" == b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y) + 2)) (c.h.speedX *= g.migrateDampening(0.2)), (c.h.speedY *= g.migrateDampening(0.2));
             if ("ssd" == b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y) - 1) || "slimeb" == b.getFG(Math.floor(c.h.x / 1), Math.floor(-c.h.y) - 1)) c.h.speedX *= g.migrateDampening(0.5);
           };
           c.h.squid = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Blaze";
           d.h.constructor = Bg;
           d.h.hostile = !0;
           d.h.passive = !1;
           f = new e();
           f.h.idle = ["blaze1", "blaze2", "blaze3", "blaze4", "blaze5"];
           f.h.hurt = ["blazehurt1", "blazehurt2", "blazehurt3"];
           f.h.death = ["blazedeath"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 3e3;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "blazer";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "cl2";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 3;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "yellowdust";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.1;
           k.h.lootingBonusChances = 0.4;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 3;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           d.h.drops = [l, C, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 15;
           d.h.takesFallDamage = !1;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !1;
           d.h.animations = null;
           d.h.percentageChanceToDoMovement = 0.02;
           d.h.percentageChanceToChangeDirection = 0.05;
           d.h.percentageChanceToStopMoving = 0.03333333333333333;
           d.h.percentageChanceToJump = 0.05;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.attackTripleCharge = !0;
           d.h.attackFrequency = 400;
           d.h.attackDamage = 3;
           d.h.ignoreCliffs = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           d.h["float"] = !0;
           d.h.followVertically = !0;
           d.h.specialFunction = function (a) {
             Math.random() < 1 / ((5 * m.Instance.get_fps()) / 25) && m.Instance.game.addParticles("smoke", 1, 0, new h(b.mobs.h[a].h.x, 0), new h(b.mobs.h[a].h.y - 1, 0));
             if (Math.random() < 1 / ((200 * m.Instance.get_fps()) / 25)) {
               var c = b.onFire;
               Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
             }
             Math.random() < 1 / ((100 * m.Instance.get_fps()) / 25) && (b.onFire.h[a] = !0);
           };
           c.h.blaze = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Zombie Pigman";
           d.h.constructor = Yc;
           d.h.hostile = !1;
           d.h.passive = !1;
           d.h.neutral = !0;
           d.h.sounds = new e();
           d.h.idleSoundFrequency = 800;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "rf";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "goldn";
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           C = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "gi";
           k = new e();
           k.h.randomNum = 0;
           k.h.lowerBound = 0;
           k.h.upperBound = 0.025;
           k.h.lootingBonusChances = 0.03;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 0;
           f.h.randomBonus = 2;
           f.h.lootBonus = 2;
           z = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "nw";
           k = new e();
           k.h.randomNum = 1;
           k.h.lowerBound = 0;
           k.h.upperBound = 0.2;
           k.h.lootingBonusChances = 0.6;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           f.h.isDimension = 2;
           d.h.drops = [l, C, z, g.makeDynamicMap(f)];
           d.h.health = 20;
           d.h.xp = 10;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !0;
           d.h.burnsOnFire = !1;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5, 6];
           k.h.frameDelay = 4;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.0125;
           d.h.walkSpeed = 1;
           d.h.canClimb = !0;
           d.h.attackContact = !0;
           d.h.attackFrequency = 70;
           d.h.attackDamage = 5;
           d.h.groupAttack = !0;
           d.h.groupAttackDistance = 5;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           c.h.zombiepigman = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Enderman";
           d.h.constructor = jb;
           d.h.hostile = !1;
           d.h.passive = !1;
           d.h.neutral = !0;
           f = new e();
           f.h.idle = ["endermanidle1", "endermanidle2", "endermanidle3", "endermanidle4", "endermanidle5"];
           d.h.sounds = g.makeDynamicMap(f);
           d.h.idleSoundFrequency = 800;
           d.h.despawnChance = 1e-4;
           f = new e();
           f.h.type = "ep";
           f.h.quantity = 0;
           f.h.randomBonus = 1;
           f.h.lootBonus = 2;
           l = g.makeDynamicMap(f);
           f = new e();
           f.h.type = "dm";
           k = new e();
           k.h.lowerBound = 0;
           k.h.upperBound = 0.005;
           k.h.lootingBonusChances = 0.002;
           f.h.rare = g.makeDynamicMap(k);
           f.h.quantity = 1;
           f.h.randomBonus = 0;
           f.h.lootBonus = 0;
           d.h.drops = [l, g.makeDynamicMap(f)];
           d.h.health = 40;
           d.h.xp = 15;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           f = new e();
           k = new e();
           k.h.frames = [2, 3, 4, 5, 6];
           k.h.frameDelay = 6;
           k.h.loop = !0;
           f.h.walk = g.makeDynamicMap(k);
           k = new e();
           k.h.frames = [1];
           k.h.frameDelay = 1;
           k.h.loop = !0;
           f.h.idle = g.makeDynamicMap(k);
           d.h.animations = g.makeDynamicMap(f);
           d.h.percentageChanceToDoMovement = 0.05;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 0.07142857142857142;
           d.h.percentageChanceToJump = 0.0125;
           d.h.walkSpeed = 1;
           d.h.teleports = !0;
           d.h.teleportOnDamageChance = 0.3333333333333333;
           d.h.teleportRandomChance = 5e-4;
           d.h.canClimb = !0;
           d.h.attackContact = !0;
           d.h.attackFrequency = 50;
           d.h.attackDamage = 4;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 4;
           l = new t(-0.4, -2.8, 0.8, 2.8);
           d.h.collisionBounds = l;
           d.h.specialFunction = function (c) {
             var d = b.mobs.h[c];
             (Math.random() < b.mobData.h[d.h.type].h.teleportRandomChance || 1 == q.get(b.getFG(Math.floor(d.h.x), -Math.floor(d.h.y)), "waterCollision")) && m.Instance.game.getMob(c).teleportMob();
             if (Math.random() < 1 / ((100 * m.Instance.get_fps()) / 25)) {
               for (var f = !0, l = 2; 31 > l; )
                 if ("air" != b.getFG(Math.floor(d.h.x), -Math.floor(d.h.y) + l++)) {
                   f = !1;
                   break;
                 }
               f && (0 != a.raining && 0.02 > Math.random() ? m.Instance.game.getMob(c).teleportMob() : 0.0033333333333333335 > Math.random() && m.Instance.game.getMob(c).teleportMob());
             }
             0 < d.h.aggressiveness
               ? ((d.h.aggressiveness = 10),
                 Math.random() < 1 / ((200 * m.Instance.get_fps()) / 25) &&
                   ("undefined" == d.h.target || d.h.target == a.player.id
                     ? m.Instance.game.getMob(c).teleportMob(new h(b.worldX, b.worldY))
                     : null != b.mobs.h[d.h.target] && ((f = b.mobs.h[d.h.target].h.x), (l = b.mobs.h[d.h.target].h.y), m.Instance.game.getMob(c).teleportMob(new h(f, l)))),
                 (l = b.mobTmpData.h[c]),
                 (f = (6 * Math.random() - 3) / 30 / 2),
                 (l.h.offsetX = f),
                 (l = b.mobTmpData.h[c]),
                 (f = (6 * Math.random() - 3) / 30 / 2),
                 (l.h.offsetY = f))
               : ((l = b.mobTmpData.h[c]),
                 (b.mobTmpData.h[c].h.offsetY = 0),
                 (l.h.offsetX = 0),
                 a.gamemode != U.gamemodes.h.CREATIVE &&
                   a.gamemode != U.gamemodes.h.SPECTATOR &&
                   1 != b.defeatedEnder &&
                   "pk" != b.armors[0][0] &&
                   "jl" != b.armors[0][0] &&
                   8 > Math.abs(d.h.x - b.worldX) &&
                   8 > Math.abs(d.h.y - b.worldY) &&
                   (g.angleBetweenVectors(new h(d.h.x - b.worldX, d.h.y - b.worldY), new h(m.Instance.game.mouseWorldPosition.x - b.worldX, m.Instance.game.mouseWorldPosition.y - b.worldY)) < 0.1111111111111111 * Math.PI
                     ? (null == b.mobTmpData.h[c].h.staring && Math.random() < 1 / ((5 * m.Instance.get_fps()) / 25) && (b.mobTmpData.h[c].h.staring = 1),
                       (g.makeDynamicMap(d.h.keys).h.left = !1),
                       (g.makeDynamicMap(d.h.keys).h.right = !1),
                       (g.makeDynamicMap(d.h.keys).h.up = !1),
                       (l = b.mobTmpData.h[c]),
                       (f = (6 * Math.random() - 3) / 30 / 2),
                       (l.h.offsetX = f),
                       (l = b.mobTmpData.h[c]),
                       (f = (6 * Math.random() - 3) / 30 / 2),
                       (l.h.offsetY = f))
                     : null != b.mobTmpData.h[c].h.staring && ((d.h.target = a.player.id), (d.h.aggressiveness = 10))));
             1 == m.Instance.game.getGameRule("mobgriefing") &&
               Math.random() < 1 / ((300 * m.Instance.get_fps()) / 25) &&
               ((c = Math.floor(d.h.x / 1) + ((3 * Math.random()) | 0) - 1),
               (f = Math.floor(-d.h.y) + ((5 * Math.random()) | 0)),
               m.Instance.game.isEmptyItem(d.h.handItems[0])
                 ? null != q.get(b.getFG(c, f), "endermenCanChange") && "air" != b.getFG(c, f) && ((d.h.handItems[0] = g.item(b.getFG(c, f), 1, 0, new e())), (d.h.handDropChances[0] = 1), m.Instance.game.requestRemove(c, f, !0, !1, !0))
                 : null == q.get(b.getFG(c, f), "replaceable") ||
                   (c == Math.floor(d.h.x / 1) && f != Math.floor(-d.h.y)) ||
                   ("air" == b.getFG(c, f - 1) && "air" == b.getFG(c, f + 1) && "air" == b.getFG(c - 1, f) && "air" == b.getFG(c + 1, f)) ||
                   (m.Instance.game.requestRemove(c, f, !0, !1), b.setFG(c, f, d.h.handItems[0][0]), (d.h.handItems[0] = g.emptyItem())));
           };
           c.h.enderman = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Spawn Skin";
           d.h.constructor = Cg;
           d.h.hostile = !1;
           d.h.passive = !0;
           d.h.sounds = new e();
           d.h.idleSoundFrequency = 400;
           d.h.despawnChance = 2.5e-5;
           d.h.drops = [];
           d.h.health = 20;
           d.h.xp = 0;
           d.h.burnsInLava = !0;
           d.h.burnsInAcid = !0;
           d.h.animations = null;
           d.h.percentageChanceToDoMovement = 0.025;
           d.h.percentageChanceToChangeDirection = 0.03333333333333333;
           d.h.percentageChanceToStopMoving = 0.1;
           d.h.percentageChanceToJump = 0.01;
           d.h.walkSpeed = 1.3;
           d.h.attackContact = !0;
           d.h.attackFrequency = 26;
           d.h.attackDamage = 2;
           d.h.canClimb = !0;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           d.h.specialInit = function (a) {
             null == b.mobs.h[a].h.skin && (b.mobs.h[a].h.skin = 1);
           };
           c.h.spawnskin = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.name = "Ender Dragon";
           d.h.constructor = Ja;
           d.h.hostile = !0;
           d.h.passive = !1;
           d.h.sounds = new e();
           d.h.idleSoundFrequency = 600;
           d.h.despawnChance = 0;
           d.h.alwaysActive = !0;
           d.h.minimumRenderDistance = 30;
           d.h.drops = [];
           d.h.health = 333;
           d.h.xp = 0;
           d.h.burnsInLava = !1;
           d.h.burnsInAcid = !1;
           d.h.cactusDamage = !1;
           d.h.animations = null;
           d.h.aiType = "custom";
           d.h.percentageChanceToDoMovement = 0.0125;
           d.h.percentageChanceToChangeDirection = 0.07142857142857142;
           d.h.percentageChanceToStopMoving = 1;
           d.h.percentageChanceToJump = 0;
           d.h.walkSpeed = 1;
           d.h.sprintMultiplier = 1.5;
           d.h.attackContact = !0;
           d.h.attackFrequency = 40;
           d.h.attackDamage = 5;
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-2, -2, 4, 4);
           d.h.collisionBounds = l;
           d.h.specialDeathAnimation = function (a) {
             var c = b.mobs.h[a],
               d = H.__cast(b.entities.h[a], Ja);
             m.Instance.game.ENDING = a;
             if (c.h.dead < (300 * m.Instance.get_fps()) / 25) {
               c.h.dead < (150 * m.Instance.get_fps()) / 25
                 ? (c.h.y -= g.migrateSpeed(5) / 30)
                 : c.h.dead < (170 * m.Instance.get_fps()) / 25
                 ? (c.h.y -= g.migrateSpeed(3) / 30)
                 : c.h.dead < (180 * m.Instance.get_fps()) / 25
                 ? (c.h.y -= g.migrateSpeed(1) / 30)
                 : Math.random() / 4 < c.h.dead / 1e3 && c.h.dead < (250 * m.Instance.get_fps()) / 25 && m.Instance.game.addParticles("raythings", 1, 0, new h(c.h.x + 5, 0), new h(c.h.y, 0), !0);
               if (Math.random() < 1 / ((20 * m.Instance.get_fps()) / 25)) {
                 a = m.Instance.game;
                 var f = Math.floor((Math.random() * c.h.dead) / 10),
                   l = new h(c.h.x - 3.3333333333333335, 20),
                   k = new h(c.h.y - 2, 2),
                   C = new e();
                 C.h.scale = 1 + c.h.dead / 300 + 0.5 * Math.random();
                 a.addParticles("shockwave", 0, f, l, k, !1, C);
               }
               Math.random() < 1 / ((12 * m.Instance.get_fps()) / 25) && (m.Instance.game.bgPlaying = !0);
               0 == c.h.dead % ((5 * m.Instance.get_fps()) / 25) && (m.Instance.game.addDrop("dscl", c.h.x + 20 * Math.random(), c.h.y - 1 + 2 * Math.random(), 1, null, null), m.Instance.game.dropXP(c.h.x, c.h.y, 20, 0, !0, !0));
               m.Instance.game.camera.set(c.h.x, c.h.y);
               c.h.speedX = 1;
               c.h.speedY = 0;
               null != d && ((d.alpha = w.clamp(0, 1, 2 - c.h.dead / 300)), (d.mobMovie.h.h.frame = 4), (d.mobMovie.h.h.playing = !1));
               Math.random() < 1 / ((3 * m.Instance.get_fps()) / 25) && m.Instance.game.addParticles("smoke2", 1, 0, new h(c.h.x - 3.3333333333333335, 20), new h(c.h.y));
             } else {
               Math.random() < 1 / ((3 * m.Instance.get_fps()) / 25) && m.Instance.game.addParticles("smoke2", 0, 20, new h(c.h.x - 3.3333333333333335, 20), new h(c.h.y));
               if (b.worldX / 1 <= b.worldWidth / 6) {
                 c = Math.round(b.worldX / 1 + 10);
                 for (C = 30; (null == b.scene[c] || "es" != b.getFG(c, b.scene[c].length - 1)) && 0 < C; ) --C, ++c;
                 d = b.scene[c].length;
                 for (C = 0; 7 > C; ) (f = C++), (b.states.h["blockX" + (c + f) + "Y" + d] = 2), b.setFG(c + f, d, "pf"), b.setFG(c + f, d + 1, "air"), b.setFG(c + f, d + 2, "air"), b.setFG(c + f, d + 3, "air");
                 b.setFG(c + 7, d, "chest");
                 b.chests.h["blockX" + (c + 7) + "Y" + d] = [];
                 for (C = 0; 27 > C; ) ++C, b.chests.h["blockX" + (c + 7) + "Y" + d].push(g.emptyItem());
                 b.chests.h["blockX" + (c + 7) + "Y" + d][11] = g.item("dm", 8, 0, new e());
                 b.chests.h["blockX" + (c + 7) + "Y" + d][13] = g.item("degg", 1);
                 b.chests.h["blockX" + (c + 7) + "Y" + d][15] = g.item("dm", 8);
               } else {
                 c = Math.round(b.worldX / 1 - 10);
                 for (C = 30; (null == b.scene[c] || "es" != b.getFG(c, b.scene[c].length - 1)) && 0 < C; ) --C, --c;
                 d = b.scene[c].length;
                 for (C = 0; 7 > C; ) (f = C++), (b.states.h["blockX" + (c - f) + "Y" + d] = 2), b.setFG(c - f, d, "pf"), b.setFG(c - f, d + 1, "air"), b.setFG(c - f, d + 2, "air"), b.setFG(c - f, d + 3, "air");
                 b.setFG(c - 7, d, "chest");
                 b.chests.h["blockX" + (c - 7) + "Y" + d] = [];
                 for (C = 0; 27 > C; ) ++C, b.chests.h["blockX" + (c - 7) + "Y" + d].push(g.emptyItem());
                 b.chests.h["blockX" + (c - 7) + "Y" + d][11] = g.item("dm", 8, 0, new e());
                 b.chests.h["blockX" + (c - 7) + "Y" + d][13] = g.item("degg", 1);
                 b.chests.h["blockX" + (c - 7) + "Y" + d][15] = g.item("dm", 8);
               }
               b.defeatedEnder = !0;
               m.Instance.game.getMob(a).removeMob(a);
             }
           };
           d.h.specialDeath = function (a) {
             var c = b.mobs.h[a];
             if (1 == c.h.official)
               (m.Instance.game.bossBarFrame = 1),
                 m.Instance.game.unlockAchieve(36),
                 m.Instance.game.requestSound("enderdragondeath", 0, 0),
                 (c.h.endingX = b.worldX),
                 (c.h.endingY = b.worldY),
                 (m.Instance.game.ENDING = a),
                 null != window.celebrate && window.celebrate(),
                 b.threadedSave();
             else {
               for (var d = 0; 15 > d; ) ++d, m.Instance.game.addDrop("dscl", c.h.x + 600 * Math.random(), c.h.y - 1 + 2 * Math.random(), 1, null, null), m.Instance.game.dropXP(c.h.x, c.h.y, 20, 0, !0, !0);
               m.Instance.game.getMob(a).removeMob(a);
             }
           };
           d.h.specialFunction = function (a) {
             var c = b.mobs.h[a],
               d = H.__cast(b.entities.h[a], Ja),
               f = Math.floor(c.h.x / 1),
               l = Math.floor(-c.h.y);
             1 == c.h.official && (m.Instance.game.bossBarFrame = Math.floor(w.clamp(1, 101, Math.round((c.h.health / 333) * 100 + 1))));
             for (var k = 1e4, C = null, z = Object.keys(b.enderCrystals.h), n = z.length, p = 0; p < n; ) {
               var A = z[p++],
                 t = Math.pow(c.h.x - b.enderCrystals.h[A][0], 2) + Math.pow(c.h.y - -b.enderCrystals.h[A][1], 2);
               t <= Math.pow(k, 2) && t <= Math.pow(30, 2) && ((k = Math.sqrt(t) | 0), (C = A));
             }
             1e4 != k &&
               (null != b.entities.h[C] &&
                 ((H.__cast(b.entities.h[C], Bc).hAlpha = 1),
                 (H.__cast(b.entities.h[C], Bc).hWidth = k),
                 (H.__cast(b.entities.h[C], Bc).hRotation = (180 * Math.atan2(c.h.y - -b.enderCrystals.h[C][1], c.h.x - b.enderCrystals.h[C][0])) / Math.PI)),
               0 == c.h.flyBob % ((80 * m.Instance.get_fps()) / 25) && (c.h.health = Math.min(c.h.health + 1, 333)));
             0.005 > Math.random() && (Object.prototype.hasOwnProperty.call(b.onFire.h, a) ? ((k = b.onFire), Object.prototype.hasOwnProperty.call(k.h, a) && delete k.h[a]) : (b.onFire.h[a] = !0));
             --c.h.hitCooldown;
             if (0 >= c.h.hitCooldown) {
               c.h.hitCooldown = 20;
               if ("la" == b.getFG(f, l + 1) || "la" == b.getFG(f, l + 2)) (c.h.health -= 5), m.Instance.game.getMob(a).hurtMob(a, Math.floor(2 * Math.random() + 1), "lava");
               if ("ad" == b.getFG(f, l + 1) || "ad" == b.getFG(f, l + 2)) (c.h.health -= 5), m.Instance.game.getMob(a).hurtMob(a, Math.floor(2 * Math.random() + 1), "acid");
             }
             for (k = -1; 2 > k; )
               for (C = k++, z = -1; 2 > z; )
                 (n = z++),
                   1 != q.get(b.getFG(f + C, l + n), "dragonDontBreak") &&
                     3 == b.sceneNum &&
                     (b.setFG(f + C, l + n, "air"), m.Instance.game.requestRemove(f + C, l + n, !0, !1), m.Instance.game.addParticles("shockwave", 1, 0, new h(c.h.x + C, 1), new h(c.h.y - n, 1)));
             c.h.flyBob = (c.h.flyBob + 5) % 360;
             (5 > Math.abs(c.h.nextSpotX - c.h.x) && 5 > Math.abs(c.h.nextSpotY - c.h.y)) || Math.random() < 1 / ((100 * m.Instance.get_fps()) / 25)
               ? 3 != b.sceneNum || 0.3333333333333333 > Math.random()
                 ? ((l = b.worldX), (f = 50 * Math.random() - 25), (c.h.nextSpotX = l + f * (1.5 - m.Instance.game.visibility)), (l = b.worldY), (f = 50 * Math.random() - 25), (c.h.nextSpotY = l + f * (1.5 - m.Instance.game.visibility) - 2))
                 : ((f = Math.random()), (c.h.nextSpotX = f * (b.worldWidth / 3 - 30) + 15), (f = 10 * -Math.random() - 65), (c.h.nextSpotY = f))
               : ((l = Math.atan2(c.h.nextSpotY - c.h.y, c.h.nextSpotX - c.h.x)),
                 (k = c.h.speedX),
                 (f = 3 * Math.cos(l) + (2 * Math.random() - 1) / 2),
                 (c.h.speedX = k - g.migrateAcc(f + Math.cos((c.h.flyBob / 180) * Math.PI) / 10, 0.98)),
                 (k = c.h.speedY),
                 (f = 3 * Math.sin(l) + (2 * Math.random() - 1) / 2),
                 (c.h.speedY = k - g.migrateAcc(f + Math.sin((c.h.flyBob / 180) * Math.PI) / 10, 0.98)),
                 (c.h.speedX *= g.migrateDampening(0.98)),
                 (c.h.speedY *= g.migrateDampening(0.98)));
             (3 < c.h.speedY || Math.random() < 1 / ((100 * m.Instance.get_fps()) / 25)) && null != d && (d.mobMovie.h.t4.playing = !0);
             Math.random() < 1 / ((200 * m.Instance.get_fps()) / 25) &&
               0 >= c.h.flameBallThread &&
               ((f = Math.floor(5 * Math.random()) + 5), (c.h.flameBallThread = f), (c.h.flameBallDelay = 3), null != d && ((d.mobMovie.h.h.frame = 0), (d.mobMovie.h.h.playing = !0)));
             0 < c.h.flameBallThread &&
               (0 >= c.h.flameBallDelay
                 ? (--c.h.flameBallThread,
                   (c.h.flameBallDelay = 2),
                   b.flameballNum++,
                   (f = b.flameballs),
                   (l = E.string(b.flameballNum)),
                   (k = new e()),
                   (k.h.x = c.h.x + 1.6666666666666667 * Math.cos(((null != d ? d.mobMovie.h.h.rotation : 0) / 180) * Math.PI)),
                   (k.h.y = c.h.y - 1.6666666666666667 * Math.sin(((null != d ? d.mobMovie.h.h.rotation : 0) / 180) * Math.PI)),
                   (k.h.speedX = Math.cos(((null != d ? d.mobMovie.h.h.rotation : 0) / 180) * Math.PI) * g.migrateSpeed(20)),
                   (k.h.speedY = -Math.sin(((null != d ? d.mobMovie.h.h.rotation : 0) / 180) * Math.PI) * g.migrateSpeed(20)),
                   (k.h.shotBy = a),
                   (k.h.rotation = null != d ? 180 - d.mobMovie.h.h.rotation : 0),
                   (f.h[l] = g.makeDynamicMap(k)),
                   null != d && ((d.mobMovie.h.h.frame = 6), (d.mobMovie.h.h.playing = !0)))
                 : --c.h.flameBallDelay);
             c.h.speedY = Math.max(-g.migrateSpeed(50), Math.min(c.h.speedY, g.migrateSpeed(50)));
             c.h.speedX = Math.max(-g.migrateSpeed(50), Math.min(c.h.speedX, g.migrateSpeed(50)));
             c.h.y -= Math.max(-8, Math.min(c.h.speedY, 8)) / 30;
             c.h.x -= Math.max(-8, Math.min(c.h.speedX, 8)) / 30;
             --c.h.attackCooldown;
             null != d &&
               b.gamemode != U.gamemodes.h.SPECTATOR &&
               ((a = b.player.get_hit()),
               (a = new h(a.get_centerX(), a.get_centerY())),
               (1 > d.get_headCenter().distanceTo(a) || 1 > d.getPointOnPart("hand", 0.5, 0.5).distanceTo(a) || 1 > d.getPointOnPart("foot", 0.5, 0.5).distanceTo(a)) &&
                 0 >= c.h.attackCooldown &&
                 ((c.h.attackCooldown = 20), (b.xSpeed = c.h.speedX / 2), m.Instance.game.ouch(1, -3, "attack"), (d.mobMovie.h.h.playing = !0)));
           };
           c.h.enderdragon = g.makeDynamicMap(d);
           c = this.mobData;
           d = new e();
           d.h.mobTmpData = new e();
           d.h.sizeCategory = 2;
           l = new t(-0.4, -1.9, 0.8, 1.9);
           d.h.collisionBounds = l;
           c.h.player = g.makeDynamicMap(d);
         },
         __class__: U,
       };
       var qh = function (b, a, c) {
         this.blockEventsMineArray = [];
         this.blockEventsMine = new oc();
         this.blockEventsFrameArray = [];
         this.blockEventsFrame = new oc();
         this.tiles = [];
         this.chunkX = b;
         this.chunkY = a;
         this.world = c;
         this.tiles[0] = [];
         this.createBlock(8 * b, 8 * a, !1);
         this.createBlock(8 * b, 8 * a + 1, !1);
         this.createBlock(8 * b, 8 * a + 2, !1);
         this.createBlock(8 * b, 8 * a + 3, !1);
         this.createBlock(8 * b, 8 * a + 4, !1);
         this.createBlock(8 * b, 8 * a + 5, !1);
         this.createBlock(8 * b, 8 * a + 6, !1);
         this.createBlock(8 * b, 8 * a + 7, !1);
         this.tiles[1] = [];
         this.createBlock(8 * b + 1, 8 * a, !1);
         this.createBlock(8 * b + 1, 8 * a + 1, !1);
         this.createBlock(8 * b + 1, 8 * a + 2, !1);
         this.createBlock(8 * b + 1, 8 * a + 3, !1);
         this.createBlock(8 * b + 1, 8 * a + 4, !1);
         this.createBlock(8 * b + 1, 8 * a + 5, !1);
         this.createBlock(8 * b + 1, 8 * a + 6, !1);
         this.createBlock(8 * b + 1, 8 * a + 7, !1);
         this.tiles[2] = [];
         this.createBlock(8 * b + 2, 8 * a, !1);
         this.createBlock(8 * b + 2, 8 * a + 1, !1);
         this.createBlock(8 * b + 2, 8 * a + 2, !1);
         this.createBlock(8 * b + 2, 8 * a + 3, !1);
         this.createBlock(8 * b + 2, 8 * a + 4, !1);
         this.createBlock(8 * b + 2, 8 * a + 5, !1);
         this.createBlock(8 * b + 2, 8 * a + 6, !1);
         this.createBlock(8 * b + 2, 8 * a + 7, !1);
         this.tiles[3] = [];
         this.createBlock(8 * b + 3, 8 * a, !1);
         this.createBlock(8 * b + 3, 8 * a + 1, !1);
         this.createBlock(8 * b + 3, 8 * a + 2, !1);
         this.createBlock(8 * b + 3, 8 * a + 3, !1);
         this.createBlock(8 * b + 3, 8 * a + 4, !1);
         this.createBlock(8 * b + 3, 8 * a + 5, !1);
         this.createBlock(8 * b + 3, 8 * a + 6, !1);
         this.createBlock(8 * b + 3, 8 * a + 7, !1);
         this.tiles[4] = [];
         this.createBlock(8 * b + 4, 8 * a, !1);
         this.createBlock(8 * b + 4, 8 * a + 1, !1);
         this.createBlock(8 * b + 4, 8 * a + 2, !1);
         this.createBlock(8 * b + 4, 8 * a + 3, !1);
         this.createBlock(8 * b + 4, 8 * a + 4, !1);
         this.createBlock(8 * b + 4, 8 * a + 5, !1);
         this.createBlock(8 * b + 4, 8 * a + 6, !1);
         this.createBlock(8 * b + 4, 8 * a + 7, !1);
         this.tiles[5] = [];
         this.createBlock(8 * b + 5, 8 * a, !1);
         this.createBlock(8 * b + 5, 8 * a + 1, !1);
         this.createBlock(8 * b + 5, 8 * a + 2, !1);
         this.createBlock(8 * b + 5, 8 * a + 3, !1);
         this.createBlock(8 * b + 5, 8 * a + 4, !1);
         this.createBlock(8 * b + 5, 8 * a + 5, !1);
         this.createBlock(8 * b + 5, 8 * a + 6, !1);
         this.createBlock(8 * b + 5, 8 * a + 7, !1);
         this.tiles[6] = [];
         this.createBlock(8 * b + 6, 8 * a, !1);
         this.createBlock(8 * b + 6, 8 * a + 1, !1);
         this.createBlock(8 * b + 6, 8 * a + 2, !1);
         this.createBlock(8 * b + 6, 8 * a + 3, !1);
         this.createBlock(8 * b + 6, 8 * a + 4, !1);
         this.createBlock(8 * b + 6, 8 * a + 5, !1);
         this.createBlock(8 * b + 6, 8 * a + 6, !1);
         this.createBlock(8 * b + 6, 8 * a + 7, !1);
         this.tiles[7] = [];
         this.createBlock(8 * b + 7, 8 * a, !1);
         this.createBlock(8 * b + 7, 8 * a + 1, !1);
         this.createBlock(8 * b + 7, 8 * a + 2, !1);
         this.createBlock(8 * b + 7, 8 * a + 3, !1);
         this.createBlock(8 * b + 7, 8 * a + 4, !1);
         this.createBlock(8 * b + 7, 8 * a + 5, !1);
         this.createBlock(8 * b + 7, 8 * a + 6, !1);
         this.createBlock(8 * b + 7, 8 * a + 7, !1);
       };
       r.WorldChunk = qh;
       qh.__name__ = "WorldChunk";
       qh.prototype = {
         createBlock: function (b, a, c) {
           null == c && (c = !0);
           var d = b - 8 * this.chunkX,
             f = a - 8 * this.chunkY;
           if (0 > d || 8 <= d || 0 > f || 8 <= f)
             Ia.trace("ERROR: Block (" + b + ", " + a + ") does not belong to chunk (" + this.chunkX + ", " + this.chunkY + ")", { fileName: "src/WorldChunk.hx", lineNumber: 34, className: "WorldChunk", methodName: "createBlock" });
           else {
             var e = q.get(this.world.getFG(b, a), "constructor");
             null == e && (e = S);
             null != this.tiles[d][f] && this.tiles[d][f].destroy();
             this.tiles[d][f] = Za.createInstance(e, [b, a, m.Instance.game, this.world, this]);
             c && m.Instance.game.renderBlock(b, a);
           }
         },
         registerBlockEventFrame: function (b) {
           null == this.blockEventsFrame.h.__keys__[b.__id__] && (this.blockEventsFrame.set(b, !0), this.blockEventsFrameArray.push(b));
         },
         unregisterBlockEventFrame: function (b) {
           this.blockEventsFrame.remove(b);
         },
         registerBlockEventMine: function (b) {
           null == this.blockEventsMine.h.__keys__[b.__id__] && (this.blockEventsMine.set(b, !0), this.blockEventsMineArray.push(b));
         },
         unregisterBlockEventMine: function (b) {
           this.blockEventsMine.remove(b);
         },
         runBlockEventsFrame: function () {
           for (var b = 0; b < this.blockEventsFrameArray.length; )
             null == this.blockEventsFrameArray[b] || null == this.blockEventsFrame.h.__keys__[this.blockEventsFrameArray[b].__id__] ? this.blockEventsFrameArray.splice(b, 1) : (this.blockEventsFrameArray[b].frameEvent(), ++b);
           for (b = 0; b < this.blockEventsMineArray.length; )
             null == this.blockEventsMineArray[b] || null == this.blockEventsMine.h.__keys__[this.blockEventsMineArray[b].__id__] ? this.blockEventsMineArray.splice(b, 1) : (this.blockEventsMineArray[b].onMining(), ++b);
         },
         __class__: qh,
       };
       var S = function (b, a, c, d, f) {
         this.mining = !1;
         this.miningCountdown = this.goingIn = -1;
         this.x = b;
         this.y = a;
         this.blockID = S.getID(b, a);
         this.game = c;
         this.world = d;
         this.worldChunk = f;
         this.blockState = Y.fromBlock(b, a, d);
         this.fg = d.getFG(b, a);
         this.init();
       };
       r["blocks.Block"] = S;
       S.__name__ = "blocks.Block";
       S.getID = function (b, a) {
         return "blockX" + b + "Y" + a;
       };
       S.prototype = {
         init: function () {},
         getBlockData: function (b) {
           return q.get(this.fg, b);
         },
         renderInit: function (b, a, c) {
           var d = this.getBlockData("renderer");
           null == d && (d = X);
           this.renderer = Za.createInstance(d, [b, a, c]).fromBlock(this.blockState);
         },
         render: function (b, a, c) {
           null == this.renderer && this.renderInit(c, b, a);
           "air" != this.fg && null != this.renderChunk && this.renderChunk.blocksRendering++;
           this.renderer.update();
           this.renderer.hasFrameEvent && this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           null != this.renderer && this.renderer.hasFrameEvent && this.renderer.update();
         },
         updateEvent: function () {},
         mouseOverEvent: function () {},
         mouseOutEvent: function () {},
         punchEvent: function () {},
         useEvent: function () {},
         destroy: function () {
           null != this.renderer && this.renderer.destroy();
           "air" != this.fg && null != this.renderChunk && this.renderChunk.blocksRendering--;
           this.worldChunk.unregisterBlockEventFrame(this);
         },
         reload: function () {
           this.worldChunk.createBlock(this.x, this.y);
         },
         gotoAndStop: function (b) {
           ("mining" != b && 2 != b) || this.worldChunk.registerBlockEventMine(this);
           1 == b && ((this.miningCountdown = -1), (this.mining = !1), (this.goingIn = -1), this.worldChunk.unregisterBlockEventMine(this));
         },
         onMining: function () {
           1 == this.world.tick % (0.52 * m.Instance.get_fps()) && this.game.blockSound(this.x, this.y, this.x - this.world.worldX, -this.y - this.world.worldY);
           this.punchEvent();
           this.mining = !0;
           this.game.currentlyMining = this.fg;
           if (1 == ((6 * Math.random()) | 0)) {
             var b = this.game,
               a = new h(this.x + 0.5, 0),
               c = new h(-this.y - 0.5, 0),
               d = new e(),
               f = this.game.getBlockColor(this.x, this.y);
             d.h.color = f;
             b.addParticles("mining", 0, 4, a, c, !1, d);
           }
           this.game.placeDelay = 0;
           1 != this.game.inventario.currentFrame ||
           0 == this.game.mouseD ||
           this.game.closestMinableBlock[0] != this.x ||
           this.game.closestMinableBlock[1] != this.y ||
           this.game.currentlyMiningBlock[0] != this.x ||
           this.game.currentlyMiningBlock[1] != this.y
             ? ((this.game.miningAnimation = !1), (this.game.currentlyMining = ""), (this.game.currentlyMiningBlock = [-1e4, -1e4]), this.gotoAndStop(1))
             : ((this.game.miningAnimation = !0),
               0 < this.miningCountdown
                 ? (this.miningCountdown--, this.game.renderCracks(this.x, this.y, 1 - this.miningCountdown / this.goingIn))
                 : (0 == Math.floor(this.miningCountdown)
                     ? ((this.goingIn = this.miningCountdown = -1), (this.game.miningAnimation = !1), this.game.updateAround(this.x, this.y, !1), this.game.mineBlock(this.x, this.y, !1, !1))
                     : (this.game.miningAnimation = !1),
                   this.gotoAndStop(1)));
         },
         addDrop: function (b, a, c, d) {
           null == c && (c = 0);
           null == a && (a = 1);
           null == b && (b = this.fg);
           this.game.addDrop(b, this.x + 0.5, -this.y + 0.5, a, c, d);
         },
         inter: function () {},
         updateSignal: function () {},
         abortSignalz: function () {},
         updateState: function () {},
         __class__: S,
       };
       var je = function (b, a, c, d, f) {
         this.thisTick = 1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Acid"] = je;
       je.__name__ = "blocks.Block_Acid";
       je.__super__ = S;
       je.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) || (this.world.water.h[this.blockID] = [10, 10]);
           this.thisTick = 1;
           this.inter();
           this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 == Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) && (this.world.water.h[this.blockID] = [10, 10]);
           this.thisTick = ++this.thisTick % Math.floor((12 * m.Instance.get_fps()) / 25);
           (0 == this.thisTick && 0 == this.ifWater()) || this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         ifWater: function () {
           null != this.renderer && H.__cast(this.renderer, Nc).setWater(this.world.water.h[this.blockID]);
           "ad" == this.world.getFG(this.x, this.y - 1) &&
             Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.x + "Y" + (this.y - 1)) &&
             (9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][0] || 9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][1]) &&
             (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]);
           if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "waterWalkThroughBlock") || 1 == q.get(this.world.getFG(this.x, this.y - 1), "acidBurn"))
             this.game.mineBlock(this.x, this.y - 1, !0, !1), (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]), this.world.setFG(this.x, this.y - 1, "ad");
           else {
             if (10 != this.world.water.h[this.blockID][0] || 10 != this.world.water.h[this.blockID][1])
               if (9 != this.world.water.h[this.blockID][0] || 9 != this.world.water.h[this.blockID][1])
                 if (this.world.water.h[this.blockID][0] > this.world.water.h[this.blockID][1]) {
                   if (
                     Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x - 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y][1] : -1, 9) !=
                     Math.min(this.world.water.h[this.blockID][0], 9)
                   ) {
                     var b = this.blockID,
                       a = this.world.water;
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
                     this.game.requestRemove(this.x, this.y, !0, null, !0);
                     return !1;
                   }
                 } else if (this.world.water.h[this.blockID][0] < this.world.water.h[this.blockID][1]) {
                   if (
                     Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x + 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y][0] : -1, 9) !=
                     Math.min(this.world.water.h[this.blockID][1], 9)
                   )
                     return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
                 } else return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
               else if ("ad" != this.world.getFG(this.x, this.y + 1))
                 return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
             1 != q.get(this.world.getFG(this.x, this.y - 1), "liquid") &&
               ((1 == q.get(this.world.getFG(this.x - 1, this.y), "waterWalkThroughBlock") ||
                 1 == q.get(this.world.getFG(this.x - 1, this.y), "acidBurn") ||
                 ("ad" == this.world.getFG(this.x - 1, this.y) && Math.min(this.game.getWater(this.x - 1, this.y)[0], 9) < Math.min(this.world.water.h[this.blockID][0], 9) - 1)) &&
                 5 <= this.world.water.h[this.blockID][0] - 1 &&
                 this.world.water.h[this.blockID][0] <= this.world.water.h[this.blockID][1] &&
                 (this.game.requestRemove(this.x - 1, this.y, !0, !1, !0),
                 (this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][0], 9) - 1), Math.floor(Math.min(this.world.water.h[this.blockID][0], 9))]),
                 this.world.setFG(this.x - 1, this.y, "ad")),
               (1 == q.get(this.world.getFG(this.x + 1, this.y), "waterWalkThroughBlock") ||
                 1 == q.get(this.world.getFG(this.x + 1, this.y), "acidBurn") ||
                 ("ad" == this.world.getFG(this.x + 1, this.y) && Math.min(this.game.getWater(this.x + 1, this.y)[1], 9) < Math.min(this.world.water.h[this.blockID][1], 9) - 1)) &&
                 5 <= this.world.water.h[this.blockID][1] - 1 &&
                 this.world.water.h[this.blockID][0] >= this.world.water.h[this.blockID][1] &&
                 (this.game.requestRemove(this.x + 1, this.y, !0, !1, !0),
                 (this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][1], 9)), Math.floor(Math.min(this.world.water.h[this.blockID][1], 9) - 1)]),
                 this.world.setFG(this.x + 1, this.y, "ad")));
           }
           return !0;
         },
         inter: function () {
           this.thisTick = 1;
         },
         __class__: je,
       });
       var bc = function (b, a, c, d, f) {
         this.thisTick = 14;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Sand"] = bc;
       bc.__name__ = "blocks.Block_Sand";
       bc.__super__ = S;
       bc.prototype = v(S.prototype, {
         init: function () {
           this.inter();
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 >= this.thisTick ? this.ifFall() : this.thisTick--;
         },
         ifFall: function () {
           if ("la" == this.world.getFG(this.x, this.y - 1) || "ad" == this.world.getFG(this.x, this.y - 1))
             this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, !1, !0);
           else if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "replaceable"))
             this.world.fallingBlockNum++,
               (this.world.fallingBlocks.h[E.string(this.world.fallingBlockNum)] = g.makeDynamicArray([this.world.fallingBlockNum, this.fg, this.x + 0.5, -this.y - 0.5, 0, 5, 10, !1])),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, null, !0);
         },
         inter: function () {
           this.thisTick = 2;
         },
         __class__: bc,
       });
       var $e = function (b, a, c, d, f) {
         bc.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Anvil"] = $e;
       $e.__name__ = "blocks.Block_Anvil";
       $e.__super__ = bc;
       $e.prototype = v(bc.prototype, {
         frameEvent: function () {
           3 < this.blockState.states1 ? (13 == this.game.inventario.currentFrame && this.game.inventario.requestClose(), this.game.requestRemove(this.x, this.y, !0, null, !0)) : bc.prototype.frameEvent.call(this);
         },
         ifFall: function () {
           if ("la" == this.world.getFG(this.x, this.y - 1) || "ad" == this.world.getFG(this.x, this.y - 1))
             this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, !1, !0);
           else if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "replaceable"))
             this.world.fallingBlockNum++,
               (this.world.fallingBlocks.h[E.string(this.world.fallingBlockNum)] = g.makeDynamicArray([this.world.fallingBlockNum, this.fg, this.x + 0.5, -this.y - 0.5, 0, 5, 10, !1, this.blockState.states1])),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, null, !0);
         },
         useEvent: function () {
           bc.prototype.useEvent.call(this);
           this.game.inventario.dispenseName = this.blockID;
           this.game.inventario.craftCoords = [this.x, this.y];
           this.game.inventario.gotoAndStop("anvil");
         },
         __class__: $e,
       });
       var Kb = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Attached"] = Kb;
       Kb.__name__ = "blocks.Block_Attached";
       Kb.__super__ = S;
       Kb.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           m.Instance.game.matchBlockDataPlaceOn(this.x, this.y, this.getBlockData("placeOn")) || m.Instance.game.requestRemove(this.x, this.y, !0, null, !0);
         },
         __class__: Kb,
       });
       var Sc = function (b, a, c, d, f) {
         this.firstTimes = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Bamboo"] = Sc;
       Sc.__name__ = "blocks.Block_Bamboo";
       Sc.__super__ = S;
       Sc.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         get_maxGrowth: function () {
           return 10;
         },
         updateEvent: function () {
           var b = H.__cast(H.__cast(q.get(this.blockState.type, "placeOn"), Array)[0], e),
             a = this.game.world.getFG(this.x, this.y - 1);
           1 != Object.prototype.hasOwnProperty.call(b.h, a) &&
             (this.game.world.getFG(this.x, this.y + 1) == this.blockState.type && null != this.game.world.getBlock(this.x, this.y + 1) && H.__cast(this.game.world.getBlock(this.x, this.y + 1), Sc).updateEvent(),
             this.firstTimes || (this.game.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop()),
             this.game.requestRemove(this.x, this.y, !0, !1, !0));
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 == ((1500 * Math.random() * (m.Instance.get_fps() / 25)) | 0) &&
             "air" == this.game.world.getFG(this.x, this.y + 1) &&
             this.game.world.getFG(this.x, this.y - (this.get_maxGrowth() - 1)) != this.blockState.type &&
             (this.game.world.setFG(this.x, this.y + 1, this.blockState.type), this.game.makeBlock(this.x, this.y + 1));
           1 == this.blockState.firstTimes ? ((this.blockState.firstTimes = !1), (this.firstTimes = !0)) : (this.firstTimes = !1);
           this.updateEvent();
         },
         __class__: Sc,
       });
       var Me = function (b, a, c, d, f) {
         this.visible = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Barrier"] = Me;
       Me.__name__ = "blocks.Block_Barrier";
       Me.__super__ = S;
       Me.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (null != this.renderer && this.visible != ("b" == this.world.get_selectedInventoryItemType())) {
             var b = this.world.get_selectedInventoryItemType();
             H.__cast(this.renderer, Qd).visible = this.visible = "b" == b;
             this.renderer.update();
           }
         },
         __class__: Me,
       });
       var ce = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Bed"] = ce;
       ce.__name__ = "blocks.Block_Bed";
       ce.__super__ = S;
       ce.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           this.game.useBed(this.x, this.y);
         },
         __class__: ce,
       });
       var Ye = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_BrewingStand"] = Ye;
       Ye.__name__ = "blocks.Block_BrewingStand";
       Ye.__super__ = S;
       Ye.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame &&
             ((this.game.inventario.brewer = this.blockID),
             (this.game.inventario.craftCoords = [this.x, this.y]),
             (this.game.inventario.newName = null != this.blockState.states1 ? this.blockState.states1 : ""),
             this.game.inventario.gotoAndStop(14));
         },
         init: function () {
           S.prototype.init.call(this);
           if (null == this.blockState.toBrew) {
             var b = new e();
             b.h.input = g.emptyItem();
             b.h.fuel = g.emptyItem();
             b.h.brewTimer = 0;
             b.h.fuelUsed = 0;
             b.h.output = g.makeDynamicArray([g.emptyItem(), g.emptyItem(), g.emptyItem()]);
             b = g.makeDynamicMap(b);
             this.world.toBrew.h[this.blockID] = b;
             this.blockState.toBrew = b;
           }
         },
         updateEvent: function () {
           null != this.renderer && ((this.blockState.states1 = this.world.states.h[this.blockID]), this.renderer.fromBlock(this.blockState), this.renderer.update());
         },
         __class__: Ye,
       });
       var of = function (b, a, c, d, f) {
         this.lastTimerState = !0;
         this.timer = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Button"] = of;
       of.__name__ = "blocks.Block_Button";
       of.__super__ = S;
       of.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null != this.world.states.h[this.blockID + "_2"] && (this.timer = this.world.states.h[this.blockID + "_2"]);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 && this.updateSignal();
         },
         updateSignal: function () {
           0 < this.timer
             ? (this.timer--, 0 == this.lastTimerState && null != this.renderer && ((this.blockState.states2 = this.timer), H.__cast(this.renderer, qc).fromBlock(this.blockState).update()), (this.lastTimerState = !0))
             : (1 == this.lastTimerState && null != this.renderer && ((this.blockState.states2 = this.timer), H.__cast(this.renderer, qc).fromBlock(this.blockState).update()), (this.lastTimerState = !1));
           this.world.states.h[this.blockID + "_2"] = this.timer;
           if (2 == this.world.states.h[this.blockID]) {
             if (1 == q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock")) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (3 == this.world.states.h[this.blockID]) {
             if (1 == q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock")) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (((this.world.states.h[this.blockID] = 1), 1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock"))) {
             this.game.mineBlock(this.x, this.y, !0, !1);
             return;
           }
           if (0 == this.timer) {
             this.timer = -1;
             if (2 == this.world.states.h[this.blockID]) {
               var b = "blockX" + this.x + "Y" + this.y,
                 a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               b = "blockX" + (this.x - 1) + "Y" + this.y;
               a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               "rsd" == this.world.getFG(this.x - 1, this.y + 1) && ((b = "blockX" + (this.x - 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
               b = "blockX" + (this.x - 2) + "Y" + this.y;
               a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               "rsd" == this.world.getFG(this.x - 2, this.y) &&
                 ((b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + (this.x - 3) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
               b = "blockX" + (this.x + 1) + "Y" + this.y;
               a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               "rsd" == this.world.getFG(this.x + 1, this.y) &&
                 ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
               b = "blockX" + this.x + "Y" + (this.y - 1);
               a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               "rsd" == this.world.getFG(this.x, this.y - 1) &&
                 ((b = "blockX" + this.x + "Y" + (this.y - 2)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
               b = "blockX" + (this.x - 1) + "Y" + (this.y - 1);
               a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               "rsd" == this.world.getFG(this.x - 1, this.y - 1) &&
                 ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + (this.x - 2) + "Y" + (this.y - 2)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             } else
               3 == this.world.states.h[this.blockID]
                 ? ((b = "blockX" + (this.x + 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + this.x + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y + 1) && ((b = "blockX" + (this.x + 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x - 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x - 1, this.y) &&
                     ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 2) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 2, this.y) &&
                     ((b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x + 3) + "Y" + (this.y - 1)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y - 1) &&
                     ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x + 2) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + this.x + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x, this.y - 1) &&
                     ((b = "blockX" + this.x + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]))
                 : ((b = "blockX" + this.x + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + this.x + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x - 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x - 1, this.y) && ((b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y) && ((b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x - 1, this.y - 1) &&
                     ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x - 2) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y - 1) &&
                     ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x + 2) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]));
             this.game.requestSound("off", this.x - this.world.worldX, -this.y - this.world.worldY);
           }
         },
         useEvent: function () {
           this.timer = 10;
           2 == this.world.states.h[this.blockID]
             ? ((this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, 0]),
               "rsd" == this.world.getFG(this.x - 1, this.y + 1) && (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)] = [16, 0]),
               (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + this.y] = [16, -1]),
               "rsd" == this.world.getFG(this.x - 2, this.y) && ((this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 3) + "Y" + (this.y - 1)] = [16, -1])),
               (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
               "rsd" == this.world.getFG(this.x + 1, this.y) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 1])),
               (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, 0]),
               "rsd" == this.world.getFG(this.x, this.y - 1) && ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 1])),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, 0]),
               "rsd" == this.world.getFG(this.x - 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 2)] = [16, -1])))
             : 3 == this.world.states.h[this.blockID]
             ? ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 0]),
               (this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
               "rsd" == this.world.getFG(this.x + 1, this.y + 1) && (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)] = [16, 0]),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
               "rsd" == this.world.getFG(this.x - 1, this.y) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, -1])),
               (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + this.y] = [16, 1]),
               "rsd" == this.world.getFG(this.x + 2, this.y) && ((this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 3) + "Y" + (this.y - 1)] = [16, 1])),
               (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 0]),
               "rsd" == this.world.getFG(this.x + 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 2)] = [16, 1])),
               (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, 0]),
               "rsd" == this.world.getFG(this.x, this.y - 1) && ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, -1])))
             : ((this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
               (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, -1]),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
               "rsd" == this.world.getFG(this.x - 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, -1]),
               (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
               "rsd" == this.world.getFG(this.x + 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 1]),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, -1]),
               "rsd" == this.world.getFG(this.x - 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 2)] = [16, -1])),
               (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 1]),
               "rsd" == this.world.getFG(this.x + 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 2)] = [16, 1])));
           this.game.requestSound("on", this.x - this.world.worldX, -this.y - this.world.worldY);
         },
         __class__: of,
       });
       var Se = function (b, a, c, d, f) {
         this.firstTimes = this.lastState = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Cactus"] = Se;
       Se.__name__ = "blocks.Block_Cactus";
       Se.__super__ = S;
       Se.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.lastState = "ct" != this.world.getFG(this.x, this.y + 1);
           this.blockState.firstTimes && ((this.firstTimes = !0), (this.blockState.firstTimes = !1), (this.world.firstTimes.h[this.blockID] = !1));
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           Math.random() < 1 / ((2500 * m.Instance.get_fps()) / 25) &&
             "air" == this.world.getFG(this.x, this.y + 1) &&
             "ct" != this.world.getFG(this.x, this.y - 2) &&
             1 == q.get(this.world.getFG(this.x - 1, this.y + 1), "waterWalkThroughBlock") &&
             1 == q.get(this.world.getFG(this.x + 1, this.y + 1), "waterWalkThroughBlock") &&
             this.world.setFG(this.x, this.y + 1, "ct");
           var b = "ct" != this.world.getFG(this.x, this.y + 1);
           null != this.renderer && this.lastState != b && ((this.lastState = b), H.__cast(this.renderer, Vd).fromBlock(this.blockState), this.renderer.update());
           if (
             ("sd" != this.world.getFG(this.x, this.y - 1) && "ct" != this.world.getFG(this.x, this.y - 1)) ||
             1 != q.get(this.world.getFG(this.x - 1, this.y), "waterWalkThroughBlock") ||
             1 != q.get(this.world.getFG(this.x + 1, this.y), "waterWalkThroughBlock")
           )
             0 == this.firstTimes && this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(), m.Instance.game.requestRemove(this.x, this.y, !0, !1, !0);
           this.firstTimes = !1;
         },
         __class__: Se,
       });
       var zd = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Cake"] = zd;
       zd.__name__ = "blocks.Block_Cake";
       zd.__super__ = S;
       zd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null == this.blockState.states1 && ((this.world.states.h[this.blockID] = 1), (this.blockState.states1 = 1));
         },
         eat: function () {
           this.world.food = Math.min(1e3, this.world.food + 200) | 0;
           this.world.health = Math.min(20, this.world.health + 1) | 0;
         },
         useEvent: function () {
           900 >= this.world.food &&
             (this.game.requestSound("eat" + (((4 * Math.random()) | 0) + 1), 0, 0),
             this.eat(),
             7 == this.blockState.states1 ? this.game.mineBlock(this.x, this.y, !1, !1) : ((this.world.states.h[this.blockID] = ++this.blockState.states1), null != this.renderer && this.renderer.fromBlock(this.blockState).update()));
         },
         __class__: zd,
       });
       var kf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Cake_Cactus"] = kf;
       kf.__name__ = "blocks.Block_Cake_Cactus";
       kf.__super__ = zd;
       kf.prototype = v(zd.prototype, {
         eat: function () {
           this.world.food = Math.min(1e3, this.world.food + 200) | 0;
           this.game.ouch(1, -2, "cactus");
           this.game.addEffect("regeneration", null, 4, 1);
         },
         __class__: kf,
       });
       var bf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Cauldron"] = bf;
       bf.__name__ = "blocks.Block_Cauldron";
       bf.__super__ = S;
       bf.prototype = v(S.prototype, {
         mouseOverEvent: function () {
           if (null != this.renderer) {
             if (Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID)) {
               var b = this.world.states.h[this.blockID].toString();
               H.__cast(this.renderer, Mc).state = E.parseInt(b);
             } else H.__cast(this.renderer, Mc).state = 0;
             H.__cast(this.renderer, Mc).exposed = !0;
             this.renderer.update();
           }
         },
         mouseOutEvent: function () {
           null != this.renderer && ((H.__cast(this.renderer, Mc).exposed = !1), this.renderer.update());
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID) || (this.world.states.h[this.blockID] = this.blockState.states1 = 0);
           if ("potion" == this.world.get_selectedInventoryItemType()) {
             if (0 < this.blockState.states1 && this.game.emptyPotion(this.world.get_selectedInventoryItemExtra().h.type)) {
               if (2 <= this.world.inventoryList[this.world.selectedInventoryItem][1]) {
                 var b = this.world.inventoryList[this.world.selectedInventoryItem];
                 b[1]--;
               } else this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem();
               b = new e();
               b.h.type = "water";
               this.game.addDrop("potion", this.world.worldX, this.world.worldY, 1, null, b);
               this.world.states.h[this.blockID] = --this.blockState.states1;
             }
           } else if ("bk" == this.world.get_selectedInventoryItemType())
             3 == this.blockState.states1 && (this.world.gamemode != U.gamemodes.h.CREATIVE && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "wbk"), (this.world.states.h[this.blockID] = this.blockState.states1 = 0));
           else if ("wbk" == this.world.get_selectedInventoryItemType())
             3 != this.blockState.states1 && (this.world.gamemode != U.gamemodes.h.CREATIVE && (this.world.inventoryList[this.world.selectedInventoryItem][0] = "bk"), (this.world.states.h[this.blockID] = this.blockState.states1 = 3));
           else if (
             "LeatherCap" == this.world.get_selectedInventoryItemType() ||
             "LeatherPants" == this.world.get_selectedInventoryItemType() ||
             "LeatherShirt" == this.world.get_selectedInventoryItemType() ||
             "LeatherShoes" == this.world.get_selectedInventoryItemType()
           ) {
             b = V.colors;
             var a = this.world.get_selectedInventoryItemExtra().h.type;
             Object.prototype.hasOwnProperty.call(b.h, a) &&
               0 < this.blockState.states1 &&
               ((b = H.__cast(this.world.inventoryList[this.world.selectedInventoryItem][3], e)), Object.prototype.hasOwnProperty.call(b.h, "type") && delete b.h.type, (this.world.states.h[this.blockID] = --this.blockState.states1));
           } else
             "bl" == this.world.get_selectedInventoryItemType()
               ? ((b = V.colors),
                 (a = this.world.get_selectedInventoryItemExtra().h.type),
                 Object.prototype.hasOwnProperty.call(b.h, a) &&
                   "white" != this.world.get_selectedInventoryItemExtra().h.type &&
                   0 < this.blockState.states1 &&
                   ((H.__cast(this.world.inventoryList[this.world.selectedInventoryItem][3], e).h.type = "white"), (this.world.states.h[this.blockID] = --this.blockState.states1)))
               : "bed" == this.world.get_selectedInventoryItemType() &&
                 "white" != this.world.get_selectedInventoryItemExtra().h.type &&
                 0 < this.blockState.states1 &&
                 ((H.__cast(this.world.inventoryList[this.world.selectedInventoryItem][3], e).h.type = "white"), (this.world.states.h[this.blockID] = --this.blockState.states1));
           null != this.renderer && ((b = this.world.states.h[this.blockID].toString()), (H.__cast(this.renderer, Mc).state = E.parseInt(b)), this.renderer.update());
           this.game.updateSelectedInventoryItemStuff();
         },
         __class__: bf,
       });
       var ef = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Chest"] = ef;
       ef.__name__ = "blocks.Block_Chest";
       ef.__super__ = S;
       ef.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame &&
             ((this.game.inventario.chest = this.blockID),
             (this.game.inventario.craftCoords = [this.x, this.y]),
             (this.game.inventario.newName = null != this.blockState.states1 ? this.blockState.states1 : ""),
             this.game.inventario.gotoAndStop(5));
         },
         init: function () {
           S.prototype.init.call(this);
           if (null == this.blockState.chests) {
             var b = [];
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             this.world.chests.h[this.blockID] = b;
             this.blockState.chests = b;
           }
         },
         __class__: ef,
       });
       var Tf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Chest_Ender"] = Tf;
       Tf.__name__ = "blocks.Block_Chest_Ender";
       Tf.__super__ = S;
       Tf.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame && ((this.game.inventario.chest = "ender"), (this.game.inventario.craftCoords = [this.x, this.y]), this.game.inventario.gotoAndStop(5));
         },
         init: function () {
           S.prototype.init.call(this);
           if (null == this.world.enderChests.h[this.world.player.id]) {
             var b = [];
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             b.push(g.emptyItem());
             this.world.enderChests.h[this.world.player.id] = b;
           }
         },
         __class__: Tf,
       });
       var Te = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_CraftingTable"] = Te;
       Te.__name__ = "blocks.Block_CraftingTable";
       Te.__super__ = S;
       Te.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame && ((this.game.inventario.craftCoords = [this.x, this.y]), this.game.inventario.gotoAndStop(3));
         },
         __class__: Te,
       });
       var jd = function (b, a, c, d, f) {
         this.lastWheat = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Crop"] = jd;
       jd.__name__ = "blocks.Block_Crop";
       jd.__super__ = S;
       jd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.lastWheat = this.blockState.wheat;
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           null == this.blockState.wheat && ((this.blockState.wheat = 1), (this.world.wheat.h[this.blockID] = 1));
           null != this.renderer &&
             this.lastWheat != this.world.wheat.h[this.blockID] &&
             ((this.blockState.wheat = this.world.wheat.h[this.blockID]), (this.lastWheat = this.world.wheat.h[this.blockID]), this.renderer.fromBlock(this.blockState).update());
           ("farm" != this.world.getFG(this.x, this.y - 1) || (m.Instance.game.ifDark(this.x, this.y) && 1 == this.world.sceneNum && 50 > this.world.tim && 0 == this.world.raining)) && m.Instance.game.mineBlock(this.x, this.y, !0, !1);
         },
         __class__: jd,
       });
       var qe = function (b, a, c, d, f) {
         this.lastHasAssociatedBlock = !1;
         this.lastWheat = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_CropStem"] = qe;
       qe.__name__ = "blocks.Block_CropStem";
       qe.__super__ = S;
       qe.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.lastWheat = this.blockState.wheat;
           this.lastState = this.blockState.states1;
           this.associatedCropBlock = this.getBlockData("associatedCropBlock");
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           null == this.blockState.wheat && ((this.blockState.wheat = 1), (this.world.wheat.h[this.blockID] = 1));
           this.hasAssociatedBlock = !1;
           -1 == this.blockState.states1
             ? 7 == this.blockState.wheat && this.world.getFG(this.x - 1, this.y) == this.associatedCropBlock && (this.hasAssociatedBlock = !0)
             : 1 == this.blockState.states1 && 7 == this.blockState.wheat && this.world.getFG(this.x + 1, this.y) == this.associatedCropBlock && (this.hasAssociatedBlock = !0);
           if (this.blockState.wheat != this.world.wheat.h[this.blockID] || this.blockState.states1 != this.world.states.h[this.blockID] || this.hasAssociatedBlock != this.lastHasAssociatedBlock)
             (this.blockState.wheat = this.lastWheat = this.world.wheat.h[this.blockID]),
               (this.blockState.states1 = this.lastState = this.world.states.h[this.blockID]),
               (this.lastHasAssociatedBlock = this.hasAssociatedBlock),
               null != this.renderer && this.renderer.fromBlock(this.blockState).update();
           ("farm" != this.world.getFG(this.x, this.y - 1) || (m.Instance.game.ifDark(this.x, this.y) && 1 == this.world.sceneNum && 50 > this.world.tim && 0 == this.world.raining)) && m.Instance.game.mineBlock(this.x, this.y, !0, !1);
         },
         __class__: qe,
       });
       var Hf = function (b, a, c, d, f) {
         this.lastWheat = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Crop_Netherwart"] = Hf;
       Hf.__name__ = "blocks.Block_Crop_Netherwart";
       Hf.__super__ = S;
       Hf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.lastWheat = this.blockState.wheat;
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           null == this.blockState.wheat && ((this.blockState.wheat = 1), (this.world.wheat.h[this.blockID] = 1));
           null != this.renderer &&
             this.lastWheat != this.world.wheat.h[this.blockID] &&
             ((this.blockState.wheat = this.world.wheat.h[this.blockID]), (this.lastWheat = this.world.wheat.h[this.blockID]), this.renderer.fromBlock(this.blockState).update());
           "ssd" != this.world.getFG(this.x, this.y - 1) && m.Instance.game.mineBlock(this.x, this.y, !0, !1);
         },
         __class__: Hf,
       });
       var Rd = function (b, a, c, d, f) {
         this.lastGoto = 2;
         this.now = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Dirt"] = Rd;
       Rd.__name__ = "blocks.Block_Dirt";
       Rd.__super__ = S;
       Rd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null == m.Instance.game.world.states.h[this.blockID] ? (this.now = !0) : (this.lastGoto = m.Instance.game.world.states.h[this.blockID]);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (1 == ((1e3 * Math.random() * (m.Instance.get_fps() / 25)) | 0) || this.now) {
             this.now = !1;
             var b = this.ifAbove(this.blockState.x, this.blockState.y) ? 1 : 2;
             null != this.renderer && b != this.lastGoto && ((m.Instance.game.world.states.h[this.blockID] = this.blockState.states1 = this.lastGoto = b), this.renderer.fromBlock(this.blockState), this.renderer.update());
           }
         },
         updateRenderer: function () {
           this.blockState.states1 = m.Instance.game.world.states.h[this.blockID];
           null != this.renderer && (this.renderer.fromBlock(this.blockState), this.renderer.update());
         },
         ifAbove: function (b, a) {
           return this.sunCanShineThrough(b, a + 1) && this.sunCanShineThrough(b, a + 2) && this.sunCanShineThrough(b, a + 3) && this.sunCanShineThrough(b, a + 4) && this.sunCanShineThrough(b, a + 5) ? !0 : !1;
         },
         sunCanShineThrough: function (b, a) {
           b = m.Instance.game.world.getFG(b, a);
           return 1 == q.get(b, "walkThroughBlockHit") || "b" == b ? !0 : !1;
         },
         __class__: Rd,
       });
       var Pf = function (b, a, c, d, f) {
         this.dropX = this.dropY = 0;
         this.changeOfSignal = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Dispenser"] = Pf;
       Pf.__name__ = "blocks.Block_Dispenser";
       Pf.__super__ = S;
       Pf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null == this.world.states.h[this.blockID] && (this.world.states.h[this.blockID] = 1);
           2 == this.world.states.h[this.blockID] ? (this.dropX = 20) : 3 == this.world.states.h[this.blockID] ? (this.dropY = -20) : 4 == this.world.states.h[this.blockID] ? (this.dropY = 20) : (this.dropX = -20);
           null == this.world.states.h[this.blockID + "_2"] &&
             ((this.world.states.h[this.blockID + "_2"] = []),
             (this.world.states.h[this.blockID + "_2"][0] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][1] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][2] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][3] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][4] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][5] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][6] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][7] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][8] = g.makeDynamicArray(["air", 0, 0, new e()])));
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (0 != this.world.getSignal(this.x, this.y) || 0 != this.world.getSignal(this.x, this.y - 1)) {
             if (this.changeOfSignal && ((this.changeOfSignal = !1), null != this.world.states.h[this.blockID + "_2"] && 9 == this.world.states.h[this.blockID + "_2"].length)) {
               var b = [];
               "air" != this.world.states.h[this.blockID + "_2"][0][0] && b.push(0);
               "air" != this.world.states.h[this.blockID + "_2"][1][0] && b.push(1);
               "air" != this.world.states.h[this.blockID + "_2"][2][0] && b.push(2);
               "air" != this.world.states.h[this.blockID + "_2"][3][0] && b.push(3);
               "air" != this.world.states.h[this.blockID + "_2"][4][0] && b.push(4);
               "air" != this.world.states.h[this.blockID + "_2"][5][0] && b.push(5);
               "air" != this.world.states.h[this.blockID + "_2"][6][0] && b.push(6);
               "air" != this.world.states.h[this.blockID + "_2"][7][0] && b.push(7);
               "air" != this.world.states.h[this.blockID + "_2"][8][0] && b.push(8);
               if (0 < b.length) {
                 var a = new Dd(this.x + 0.5 + this.dropX / 2 / 30, -this.y - 0.5 + this.dropY / 2 / 30, this.game, this.world);
                 a.xSpeed = g.migrateSpeed(this.dropX / 2 + 2 * Math.random() - 1);
                 a.ySpeed = g.migrateSpeed(this.dropY / 2 + 2 * Math.random() - 1);
                 b = b[(Math.random() * b.length) | 0];
                 a = this.world.states.h[this.blockID + "_2"][b];
                 if (null == a || null == a[0]) a = this.world.states.h[this.blockID + "_2"][b] = g.emptyItem();
                 var c = a[0],
                   d = !1;
                 if ("arrow" == c) {
                   var f = this.world.arrows,
                     l = this.game.uniqueID(this.world.arrows, "arrow"),
                     k = new e();
                   k.h.x = this.x + 0.5 + this.dropX / 30;
                   k.h.y = -this.y - 0.5 + this.dropY / 30;
                   k.h.speedX = g.migrateSpeed(this.dropX);
                   k.h.speedY = g.migrateSpeed(this.dropY);
                   k.h.rotation = 0;
                   k.h.shotBy = "dispenser" + this.blockID;
                   k.h.timer = 0;
                   k.h.cooldown = 1;
                   f.h[l] = g.makeDynamicMap(k);
                   this.removeFromInventory(b);
                 } else if ("spear" == c)
                   (f = this.world.spears),
                     (l = this.game.uniqueID(this.world.spears, "spear")),
                     (k = new e()),
                     (k.h.x = this.x + 0.5 + this.dropX / 30),
                     (k.h.y = -this.y - 0.5 + this.dropY / 30),
                     (k.h.speedX = g.migrateSpeed(this.dropX)),
                     (k.h.speedY = g.migrateSpeed(this.dropY)),
                     (k.h.rotation = 0),
                     (k.h.shotBy = "dispenser" + this.blockID),
                     (k.h.timer = 0),
                     (k.h.cooldown = 1),
                     (f.h[l] = g.makeDynamicMap(k)),
                     this.removeFromInventory(b);
                 else if ("bshur" == c)
                   (f = this.world.shurikens),
                     (l = this.game.uniqueID(this.world.shurikens, "shuriken")),
                     (k = new e()),
                     (k.h.x = this.x + 0.5 + this.dropX / 30),
                     (k.h.y = -this.y - 0.5 + this.dropY / 30),
                     (k.h.speedX = g.migrateSpeed(this.dropX)),
                     (k.h.speedY = g.migrateSpeed(1.5 * this.dropY)),
                     (k.h.rotation = 0),
                     (k.h.shotBy = "dispenser" + this.blockID),
                     (k.h.timer = 0),
                     (k.h.type = "bone"),
                     (k.h.cooldown = 1),
                     (f.h[l] = g.makeDynamicMap(k)),
                     this.removeFromInventory(b);
                 else if ("potion" == c) {
                   if ("splash" == g.makeDynamicMap(a[3]).h.category) {
                     var h = new e();
                     null != g.makeDynamicMap(a[3]).h.effects
                       ? (h = g.makeDynamicMap(a[3]).h.effects)
                       : null != this.game.potionData.h[g.makeDynamicMap(a[3]).h.type] && null != this.game.potionData.h[g.makeDynamicMap(a[3]).h.type].h.effects && (h = this.game.potionData.h[g.makeDynamicMap(a[3]).h.type].h.effects);
                     f = this.world.splashPotions;
                     l = this.game.uniqueID(this.world.splashPotions, "splashPotion");
                     k = new e();
                     k.h.x = this.x + 0.5 + this.dropX / 30;
                     k.h.y = -this.y - 0.5 + this.dropY / 30;
                     k.h.speedX = g.migrateSpeed(this.dropX);
                     k.h.speedY = g.migrateSpeed(1.5 * this.dropY);
                     k.h.rotation = 0;
                     k.h.timer = 0;
                     k.h.shotBy = "dispenser" + this.blockID;
                     k.h.cooldown = 1;
                     k.h.type = g.makeDynamicMap(a[3]).h.type;
                     k.h.effects = h;
                     k.h.showParticles = 0 != g.makeDynamicMap(a[3]).h.showParticles;
                     f.h[l] = g.makeDynamicMap(k);
                     this.removeFromInventory(b);
                   }
                 } else if ("raft" == c)
                   "wr" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                     ((f = (1e9 * Math.random()) | 0), (this.world.rafts.h["raft" + f] = g.makeDynamicArray(["raft" + f, this.x + 0.5 + this.dropX / 30, -this.y - 0.5 + (this.dropY - 10) / 30, 0, 0, ""])), this.removeFromInventory(b));
                 else if ("cart" == I.substr(c, 0, 4))
                   "rail" == I.substr(this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20), 0, 4)
                     ? ((f = this.game.uniqueID(this.world.carts, "cart")),
                       (k = new e()),
                       (k.h.id = f),
                       (k.h.x = this.x + 0.5 + ((this.dropX / 2) * 3) / 30),
                       (k.h.y = -this.y - 0.5 + ((this.dropY / 2) * 3 - 10) / 30),
                       (k.h.speedX = 0),
                       (k.h.speedY = 0),
                       (k.h.riddenBy = ""),
                       (k.h.onActivator = !1),
                       (k.h.type = I.substr(c, 4, null)),
                       (k.h.health = 3),
                       (k.h.tilt = 0),
                       (k.h.onRail = 0),
                       (this.world.carts.h[f] = g.makeDynamicMap(k)),
                       this.removeFromInventory(b))
                     : "rail" == I.substr(this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20 + 1), 0, 4) &&
                       ((f = this.game.uniqueID(this.world.carts, "cart")),
                       (k = new e()),
                       (k.h.id = f),
                       (k.h.x = this.x + 0.5 + ((this.dropX / 2) * 3) / 30),
                       (k.h.y = -this.y - 0.5 + ((this.dropY / 2) * 3 - 40) / 30),
                       (k.h.speedX = 0),
                       (k.h.speedY = 0),
                       (k.h.riddenBy = ""),
                       (k.h.onActivator = !1),
                       (k.h.type = I.substr(c, 4, null)),
                       (k.h.health = 3),
                       (k.h.tilt = 0),
                       (k.h.onRail = 0),
                       (this.world.carts.h[f] = g.makeDynamicMap(k)),
                       this.removeFromInventory(b));
                 else if ("bonem" == c)
                   (f = this.game.useBonemeal((this.x + this.dropX / 20) | 0, (this.y - this.dropY / 20) | 0)) || (f = this.game.useBonemeal((this.x + this.dropX / 20) | 0, (this.y - this.dropY / 20 + 1) | 0)),
                     f && this.removeFromInventory(b);
                 else if ("Hoe" == I.substr(c, -3, 3))
                   "dt" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                     (this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, "farm"), a[2]++, a[2] > q.get(c, "life") && (this.world.states.h[this.blockID + "_2"][b] = g.makeDynamicArray(["air", 0, 0, new e()])));
                 else if ("nw" == c || "seed" == c || "pseed" == c || "bseed" == c || "wseed" == c || "carrot" == c || "potato" == c)
                   "farm" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20 - 1)
                     ? "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) && (this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, c), this.removeFromInventory(b))
                     : "farm" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                       "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20 + 1) &&
                       (this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20 + 1, c), this.removeFromInventory(b));
                 else if ("sl" == c)
                   "dt" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20 - 1)
                     ? "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) && (this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, c), this.removeFromInventory(b))
                     : "dt" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                       "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20 + 1) &&
                       (this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20 + 1, c), this.removeFromInventory(b));
                 else if ("TNT" == c) {
                   if ("air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) || "wr" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20)) {
                     this.world.fallingBlockNum++;
                     f = this.world.fallingBlocks;
                     l = E.string(this.world.fallingBlockNum);
                     k = this.world.fallingBlockNum;
                     h = this.x + 0.5 + ((this.dropX / 2) * 3) / 30;
                     var m = -this.y - 0.5 + ((this.dropY / 2) * 3) / 30,
                       n = g.migrateSpeed(2 * Math.random() - 1);
                     f.h[l] = g.makeDynamicArray([k, c, h, m, n, g.migrateSpeed(-5), 10, !0]);
                     this.removeFromInventory(b);
                   }
                 } else if ("snowb" == c)
                   (f = this.world.snowballs),
                     (l = this.game.uniqueID(this.world.snowballs, "snowball")),
                     (k = new e()),
                     (k.h.x = this.x + 0.5 + this.dropX / 30),
                     (k.h.y = -this.y - 0.5 + this.dropY / 30),
                     (k.h.speedX = g.migrateSpeed(this.dropX)),
                     (k.h.speedY = g.migrateSpeed(this.dropY)),
                     (k.h.rotation = Math.PI),
                     (k.h.timer = 0),
                     (k.h.cooldown = 4),
                     (k.h.shotBy = "dispenser" + this.blockID),
                     (f.h[l] = g.makeDynamicMap(k)),
                     this.removeFromInventory(b);
                 else if ("bk" == c)
                   "wr" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) && 10 == this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)][0]
                     ? ((a[0] = "wbk"), this.game.requestRemove(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20), !0, !1, !0))
                     : "la" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) && 10 == this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)][0]
                     ? ((a[0] = "lbk"), this.game.requestRemove(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20), !0, !1, !0))
                     : "ad" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                       10 == this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)][0] &&
                       ((a[0] = "abk"), this.game.requestRemove(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20), !0, !1, !0));
                 else if ("wbk" == c)
                   "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                     ((a[0] = "bk"), (this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)] = [10, 10]), this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, "wr"));
                 else if ("lbk" == c)
                   "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                     ((a[0] = "bk"), (this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)] = [10, 10]), this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, "la"));
                 else if ("abk" == c)
                   "air" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                     ((a[0] = "bk"), (this.world.water.h["blockX" + (this.x + this.dropX / 20) + "Y" + (this.y - this.dropY / 20)] = [10, 10]), this.world.setFG(this.x + this.dropX / 20, this.y - this.dropY / 20, "ad"));
                 else if ("egg" == c)
                   (f = "egg" + Math.random()),
                     (l = new ve("egg", null, f, null, this.game, this.world)),
                     (this.world.entities.h[f] = l),
                     l.set_x(this.x + 0.5 + this.dropX / 30),
                     l.set_y(-this.y - 0.5 + this.dropY / 30),
                     (l.xSpeed = g.migrateSpeed(this.dropX)),
                     (l.ySpeed = g.migrateSpeed(this.dropY)),
                     this.removeFromInventory(b);
                 else if ("Cap" == I.substr(c, -3, 3) || "pk" == c || "mh" == c) {
                   if (
                     this.world.gamemode != U.gamemodes.h.SPECTATOR &&
                     1.1666666666666667 > Math.abs(this.world.worldX - (this.x + 0.5 + this.dropX / 30)) &&
                     1.1666666666666667 > Math.abs(this.world.worldY - (-this.y - 0.5 + this.dropY / 30)) &&
                     "air" == this.world.armors[0][0]
                   ) {
                     this.world.armors[0] = g.makeDynamicArray([c, a[2], new e()]);
                     f = Object.keys(g.makeDynamicMap(a[3]).h);
                     l = f.length;
                     for (k = 0; k < l; ) (h = f[k++]), (g.makeDynamicMap(this.world.armors[0][2]).h[h] = g.makeDynamicMap(a[3]).h[h]);
                     this.removeFromInventory(b);
                     this.game.updateArmorRenderers();
                   }
                 } else if ("Shirt" == I.substr(c, -5, 5)) {
                   if (
                     this.world.gamemode != U.gamemodes.h.SPECTATOR &&
                     1.1666666666666667 > Math.abs(this.world.worldX - (this.x + 0.5 + this.dropX / 30)) &&
                     1.1666666666666667 > Math.abs(this.world.worldY - (-this.y - 0.5 + this.dropY / 30)) &&
                     "air" == this.world.armors[1][0]
                   ) {
                     this.world.armors[1] = g.makeDynamicArray([c, a[2], new e()]);
                     f = Object.keys(g.makeDynamicMap(a[3]).h);
                     l = f.length;
                     for (k = 0; k < l; ) (h = f[k++]), (g.makeDynamicMap(this.world.armors[1][2]).h[h] = g.makeDynamicMap(a[3]).h[h]);
                     this.removeFromInventory(b);
                     this.game.updateArmorRenderers();
                   }
                 } else if ("Pants" == I.substr(c, -5, 5)) {
                   if (
                     this.world.gamemode != U.gamemodes.h.SPECTATOR &&
                     1.1666666666666667 > Math.abs(this.world.worldX - (this.x + 0.5 + this.dropX / 30)) &&
                     1.1666666666666667 > Math.abs(this.world.worldY - (-this.y - 0.5 + this.dropY / 30)) &&
                     "air" == this.world.armors[2][0]
                   ) {
                     this.world.armors[2] = g.makeDynamicArray([c, a[2], new e()]);
                     f = Object.keys(g.makeDynamicMap(a[3]).h);
                     l = f.length;
                     for (k = 0; k < l; ) (h = f[k++]), (g.makeDynamicMap(this.world.armors[2][2]).h[h] = g.makeDynamicMap(a[3]).h[h]);
                     this.removeFromInventory(b);
                     this.game.updateArmorRenderers();
                   }
                 } else if ("Shoes" == I.substr(c, -5, 5)) {
                   if (
                     this.world.gamemode != U.gamemodes.h.SPECTATOR &&
                     1.1666666666666667 > Math.abs(this.world.worldX - (this.x + 0.5 + this.dropX / 30)) &&
                     1.1666666666666667 > Math.abs(this.world.worldY - (-this.y - 0.5 + this.dropY / 30)) &&
                     "air" == this.world.armors[3][0]
                   ) {
                     this.world.armors[3] = g.makeDynamicArray([c, a[2], new e()]);
                     f = Object.keys(g.makeDynamicMap(a[3]).h);
                     l = f.length;
                     for (k = 0; k < l; ) (h = f[k++]), (g.makeDynamicMap(this.world.armors[3][2]).h[h] = g.makeDynamicMap(a[3]).h[h]);
                     this.removeFromInventory(b);
                     this.game.updateArmorRenderers();
                   }
                 } else if ("megg" == c) K.spawnMob(g.makeDynamicMap(a[3]).h.type, this.x + 0.5 + this.dropX / 30, -this.y - 0.5 + (0 < this.dropY ? 3 * this.dropY : this.dropY) / 30), this.removeFromInventory(b);
                 else if ("fireegg" == c)
                   (f = "egg" + Math.random()),
                     (l = new we("fireegg", null, f, null, this.game, this.world)),
                     (this.world.entities.h[f] = l),
                     l.set_x(this.x + 0.5 + this.dropX / 30),
                     l.set_y(-this.y - 0.5 + this.dropY / 30),
                     (l.xSpeed = g.migrateSpeed(this.dropX)),
                     (l.ySpeed = g.migrateSpeed(this.dropY)),
                     this.removeFromInventory(b);
                 else if ("fas" == c) {
                   f = !1;
                   l = Object.keys(this.world.mobs.h);
                   k = l.length;
                   for (h = 0; h < k; )
                     if (((m = l[h++]), 0.6666666666666666 > Math.abs(this.world.mobs.h[m].h.x - (this.x + 0.5)) && 0.6666666666666666 > Math.abs(this.world.mobs.h[m].h.y - (-this.y - 0.5)))) {
                       f = this.world.onFire.h[m] = !0;
                       a[2]++;
                       a[2] > q.get(c, "life") && (this.world.states.h[this.blockID + "_2"][b] = g.makeDynamicArray(["air", 0, 0, new e()]));
                       break;
                     }
                   f ||
                     ((f = !1),
                     this.game.canFireExistAt(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20))
                       ? "air" == this.world.getFG(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20)) &&
                         ((f = !0), this.world.setFG(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20), "fire"))
                       : this.game.canBeOnFire(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20)) &&
                         "air" == this.world.getFG(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20 + 1)) &&
                         ((f = !0), this.world.setFG(Math.floor(this.x + this.dropX / 20), Math.floor(this.y - this.dropY / 20 + 1), "fire")),
                     f && (a[2]++, a[2] > q.get(c, "life") && (this.world.states.h[this.blockID + "_2"][b] = g.makeDynamicArray(["air", 0, 0, new e()]))));
                 } else d = !0;
                 d &&
                   ((a = this.game.addDrop(c, this.x + 0.5 + this.dropX / 30, -this.y - 0.5 + this.dropY / 30, 1, a[2], a[3])),
                   0 != a &&
                     ((H.__cast(this.world.entities.h[H.__cast(a, String)], Pb).speedX = g.migrateSpeed((this.dropX + 10 * Math.random() - 5) / 3)),
                     (H.__cast(this.world.entities.h[H.__cast(a, String)], Pb).speedY = g.migrateSpeed((this.dropY + 10 * Math.random() - 5) / 3)),
                     this.removeFromInventory(b)));
               }
             }
           } else this.changeOfSignal = !0;
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           this.game.inventario.dispenseName = this.blockID;
           this.game.inventario.craftCoords = [this.x, this.y];
           this.game.inventario.newName = null != this.world.states.h[this.blockID + "_3"] ? this.world.states.h[this.blockID + "_3"] : "";
           this.game.inventario.dispenserType = "Dispenser";
           this.game.inventario.gotoAndStop("dispense");
         },
         removeFromInventory: function (b) {
           g.makeDynamicArray(this.world.states.h[this.blockID + "_2"][b])[1]--;
           0 >= this.world.states.h[this.blockID + "_2"][b][1] && (this.world.states.h[this.blockID + "_2"][b] = g.emptyItem());
         },
         __class__: Pf,
       });
       var Jb = function (b, a, c, d, f) {
         this.hasSignal = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Door"] = Jb;
       Jb.__name__ = "blocks.Block_Door";
       Jb.__super__ = S;
       Jb.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           0 != this.world.getSignal(this.x, this.y) || 0 != this.world.getSignal(this.x, this.y - 1) ? (this.hasSignal = !0) : (this.hasSignal = !1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if ("1" == I.substr(this.fg, -1, 1) || "3" == I.substr(this.fg, -1, 1))
             0 != this.world.getSignal(this.x, this.y) || 0 != this.world.getSignal(this.x, this.y - 1)
               ? 0 == this.hasSignal && (this.game.unlockAchieve(32), this.toggle())
               : 1 == this.hasSignal && (this.game.unlockAchieve(32), this.toggle());
         },
         toggle: function () {
           var b = I.substr(this.fg, 0, this.fg.length - 1);
           "1" == I.substr(this.fg, -1, 1)
             ? (this.game.requestSound("doorclose", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y, b + "3"), this.world.setFG(this.x, this.y + 1, b + "4"))
             : "2" == I.substr(this.fg, -1, 1)
             ? (this.game.requestSound("doorclose", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y - 1, b + "3"), this.world.setFG(this.x, this.y, b + "4"))
             : "3" == I.substr(this.fg, -1, 1)
             ? (this.game.requestSound("dooropen", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y, b + "1"), this.world.setFG(this.x, this.y + 1, b + "2"))
             : "4" == I.substr(this.fg, -1, 1) && (this.game.requestSound("dooropen", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y - 1, b + "1"), this.world.setFG(this.x, this.y, b + "2"));
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           "i" != I.substr(this.fg, 0, 1) && this.toggle();
         },
         __class__: Jb,
       });
       var Qf = function (b, a, c, d, f) {
         this.dropX = this.dropY = 0;
         this.changeOfSignal = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Dropper"] = Qf;
       Qf.__name__ = "blocks.Block_Dropper";
       Qf.__super__ = S;
       Qf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null == this.world.states.h[this.blockID] && (this.world.states.h[this.blockID] = 1);
           2 == this.world.states.h[this.blockID] ? (this.dropX = 20) : 3 == this.world.states.h[this.blockID] ? (this.dropY = -20) : 4 == this.world.states.h[this.blockID] ? (this.dropY = 20) : (this.dropX = -20);
           null == this.world.states.h[this.blockID + "_2"] &&
             ((this.world.states.h[this.blockID + "_2"] = []),
             (this.world.states.h[this.blockID + "_2"][0] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][1] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][2] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][3] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][4] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][5] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][6] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][7] = g.makeDynamicArray(["air", 0, 0, new e()])),
             (this.world.states.h[this.blockID + "_2"][8] = g.makeDynamicArray(["air", 0, 0, new e()])));
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (0 != this.world.getSignal(this.x, this.y) || 0 != this.world.getSignal(this.x, this.y - 1)) {
             if (this.changeOfSignal && ((this.changeOfSignal = !1), null != this.world.states.h[this.blockID + "_2"] && 9 == this.world.states.h[this.blockID + "_2"].length)) {
               var b = [];
               "air" != this.world.states.h[this.blockID + "_2"][0][0] && b.push(0);
               "air" != this.world.states.h[this.blockID + "_2"][1][0] && b.push(1);
               "air" != this.world.states.h[this.blockID + "_2"][2][0] && b.push(2);
               "air" != this.world.states.h[this.blockID + "_2"][3][0] && b.push(3);
               "air" != this.world.states.h[this.blockID + "_2"][4][0] && b.push(4);
               "air" != this.world.states.h[this.blockID + "_2"][5][0] && b.push(5);
               "air" != this.world.states.h[this.blockID + "_2"][6][0] && b.push(6);
               "air" != this.world.states.h[this.blockID + "_2"][7][0] && b.push(7);
               "air" != this.world.states.h[this.blockID + "_2"][8][0] && b.push(8);
               if (0 < b.length) {
                 var a = new Dd(this.x + 0.5 + this.dropX / 2 / 30, -this.y - 0.5 + this.dropY / 2 / 30, this.game, this.world);
                 a.xSpeed = g.migrateSpeed(this.dropX / 2 + 2 * Math.random() - 1);
                 a.ySpeed = g.migrateSpeed(this.dropY / 2 + 2 * Math.random() - 1);
                 b = b[(Math.random() * b.length) | 0];
                 a = this.world.states.h[this.blockID + "_2"][b];
                 var c = a[0],
                   d = !0;
                 "chest" == this.world.getFG(this.x + this.dropX / 20, this.y - this.dropY / 20) &&
                   0 ==
                     this.game.storeItem(
                       g.makeDynamicArray([this.world.states.h[this.blockID + "_2"][b][0], 1, this.world.states.h[this.blockID + "_2"][b][2], this.world.states.h[this.blockID + "_2"][b][3]]),
                       Math.floor(this.x + this.dropX / 20),
                       Math.floor(this.y - this.dropY / 20)
                     ) &&
                   ((d = !1), this.removeFromInventory(b));
                 d &&
                   ((a = this.game.addDrop(c, this.x + 0.5 + this.dropX / 30, -this.y - 0.5 + this.dropY / 30, 1, a[2], a[3])),
                   0 != a &&
                     ((H.__cast(this.world.entities.h[H.__cast(a, String)], Pb).speedX = g.migrateSpeed((this.dropX + 10 * Math.random() - 5) / 3)),
                     (H.__cast(this.world.entities.h[H.__cast(a, String)], Pb).speedY = g.migrateSpeed((this.dropY + 10 * Math.random() - 5) / 3)),
                     this.removeFromInventory(b)));
               }
             }
           } else this.changeOfSignal = !0;
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           this.game.inventario.dispenseName = this.blockID;
           this.game.inventario.craftCoords = [this.x, this.y];
           this.game.inventario.newName = null != this.world.states.h[this.blockID + "_3"] ? this.world.states.h[this.blockID + "_3"] : "";
           this.game.inventario.dispenserType = "Dropper";
           this.game.inventario.gotoAndStop("dispense");
         },
         removeFromInventory: function (b) {
           g.makeDynamicArray(this.world.states.h[this.blockID + "_2"][b])[1]--;
           0 >= this.world.states.h[this.blockID + "_2"][b][1] && (this.world.states.h[this.blockID + "_2"][b] = g.emptyItem());
         },
         __class__: Qf,
       });
       var Mf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_EnchantmentTable"] = Mf;
       Mf.__name__ = "blocks.Block_EnchantmentTable";
       Mf.__super__ = S;
       Mf.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame && ((this.game.inventario.craftCoords = [this.x, this.y]), this.game.inventario.gotoAndStop(3));
           for (var b = 0, a = -3; 4 > a; )
             for (var c = a++, d = 0; 4 > d; ) {
               var f = d++;
               ("books" != this.world.getFG(c + this.x, f + this.y) && "bdbooks" != this.world.getFG(c + this.x, f + this.y)) || ++b;
             }
           this.game.inventario.totalBooks = b;
           this.game.inventario.newName = null != this.world.states.h[this.blockID] ? this.world.states.h[this.blockID] : "";
           this.game.inventario.craftCoords = [this.x, this.y];
           this.game.inventario.gotoAndStop("enchant");
         },
         __class__: Mf,
       });
       var If = function (b, a, c, d, f) {
         bc.call(this, b, a, c, d, f);
       };
       r["blocks.Block_EnderDragonEgg"] = If;
       If.__name__ = "blocks.Block_EnderDragonEgg";
       If.__super__ = bc;
       If.prototype = v(bc.prototype, {
         useEvent: function () {
           for (var b = 0; 50 > b++; ) {
             var a = new h((20 * Math.random() - 10) | 0, (10 * Math.random() - 5) | 0);
             if ((0 != a.x || 0 != a.y) && "air" == this.world.getFG(this.x + a.x, this.y + a.y)) {
               this.world.setFG(this.x + a.x, this.y + a.y, "degg");
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter();
               this.game.requestRemove(this.x, this.y, !0, null, !0);
               break;
             }
           }
         },
         ifFall: function () {
           if ("la" == this.world.getFG(this.x, this.y - 1) || "ad" == this.world.getFG(this.x, this.y - 1))
             this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, !1, !0);
           else if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "replaceable"))
             this.world.fallingBlockNum++,
               (this.world.fallingBlocks.h[E.string(this.world.fallingBlockNum)] = g.makeDynamicArray([this.world.fallingBlockNum, this.fg, this.x + 0.5, -this.y - 0.5, 0, 5, 10, !1, this.blockState.states1])),
               null != this.world.getBlock(this.x, this.y + 1) && this.world.getBlock(this.x, this.y + 1).inter(),
               this.game.requestRemove(this.x, this.y, !0, null, !0);
         },
         __class__: If,
       });
       var Oe = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Farmland"] = Oe;
       Oe.__name__ = "blocks.Block_Farmland";
       Oe.__super__ = S;
       Oe.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           for (var b = !1, a = -3; 4 > a; ) for (var c = a++, d = -1; 1 > d; ) "wr" == this.world.getFG(this.x + c, this.y + d++) && (b = !0);
           !b && Math.random() < 1 / ((60 * m.Instance.get_fps()) / 25) && (this.world.setFG(this.x, this.y, "dt"), this.reload());
         },
         __class__: Oe,
       });
       var Lc = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Fence"] = Lc;
       Lc.__name__ = "blocks.Block_Fence";
       Lc.__super__ = S;
       Lc.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         updateEvent: function () {
           null != this.renderer && ((this.blockState.states1 = this.world.states.h[this.blockID]), this.renderer.fromBlock(this.blockState).update());
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.updateEvent();
         },
         __class__: Lc,
       });
       var Wd = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_FenceGate"] = Wd;
       Wd.__name__ = "blocks.Block_FenceGate";
       Wd.__super__ = Lc;
       Wd.prototype = v(Lc.prototype, {
         init: function () {
           Lc.prototype.init.call(this);
           1 != Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID) && (this.world.states.h[this.blockID] = !1);
         },
         useEvent: function () {
           this.world.states.h[this.blockID] = !this.world.states.h[this.blockID];
           this.world.states.h[this.blockID] ? this.game.requestSound("dooropen", this.x - this.world.worldX, -this.y - this.world.worldY) : this.game.requestSound("doorclose", this.x - this.world.worldX, -this.y - this.world.worldY);
         },
         __class__: Wd,
       });
       var kd = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Fire"] = kd;
       kd.__name__ = "blocks.Block_Fire";
       kd.__super__ = S;
       kd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.inter();
           this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         punchEvent: function () {
           this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY);
           this.game.mineBlock(this.x, this.y, !0, !1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (0 != this.game.getGameRule("dofiretick")) {
             Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID) || (this.world.states.h[this.blockID] = 15);
             var b = this.world.states.h[this.blockID],
               a = this.x,
               c = this.y,
               d = this.game.canBeOnFire(a, c - 1),
               f = this.game.canBeOnFire(a - 1, c),
               e = this.game.canBeOnFire(a + 1, c),
               k = this.game.canBeOnFire(a, c + 1);
             null != this.renderer && H.__cast(this.renderer, Ac).setLit(d, f, e, k);
             if (0.05 > Math.random()) {
               if ("n" != this.world.getFG(a, c - 1) && "magma" != this.world.getFG(a, c - 1)) {
                 --b;
                 this.world.states.h[this.blockID] = b;
                 var g = !1;
                 if (d && ((g = !0), Math.random() < q.get(this.world.getFG(a, c - 1), "flamRate") && q.get(this.world.getFG(a, c - 1), "flammable") && this.game.mineBlock(a, c - 1, !0, !1), "TNT" == this.world.getFG(a, c - 1))) {
                   this.game.igniteTNT(a, c - 1);
                   return;
                 }
                 if (f && ((g = !0), Math.random() < q.get(this.world.getFG(a - 1, c), "flamRate") && q.get(this.world.getFG(a - 1, c), "flammable") && this.game.mineBlock(a - 1, c, !0, !1), "TNT" == this.world.getFG(a - 1, c))) {
                   this.game.igniteTNT(a - 1, c);
                   return;
                 }
                 if (k && ((g = !0), Math.random() < q.get(this.world.getFG(a, c + 1), "flamRate") && q.get(this.world.getFG(a, c + 1), "flammable") && this.game.mineBlock(a, c + 1, !0, !1), "TNT" == this.world.getFG(a, c + 1))) {
                   this.game.igniteTNT(a, c + 1);
                   return;
                 }
                 if (e && ((g = !0), Math.random() < q.get(this.world.getFG(a + 1, c), "flamRate") && q.get(this.world.getFG(a + 1, c), "flammable") && this.game.mineBlock(a + 1, c, !0, !1), "TNT" == this.world.getFG(a + 1, c))) {
                   this.game.igniteTNT(a + 1, c);
                   return;
                 }
                 if (!g) {
                   this.game.requestRemove(a, c, !0, !1, !0);
                   return;
                 }
               }
               d = Math.floor(4 * Math.random() - 1);
               f = Math.floor(3 * Math.random() - 1);
               "undefined" == this.world.getFG(a + f, c + d) &&
                 (((0 != f - 1 || -1 != d) && this.game.canCatchOnFire(a + f - 1, c + d)) ||
                   ((0 != f + 1 || -1 != d) && this.game.canCatchOnFire(a + f + 1, c + d)) ||
                   ((0 != f || -1 != d - 1) && this.game.canCatchOnFire(a + f, c + d - 1)) ||
                   ((0 != f || -1 != d + 1) && this.game.canCatchOnFire(a + f, c + d + 1))) &&
                 (this.world.setFG(a + f, c + d, "fire"), this.game.makeBlock(a + f, c + d), (this.world.states.h["blockX" + (a + f) + "Y" + (c + d)] = b + 1));
               if (0 >= b) {
                 this.game.requestRemove(a, c, !0, !1, !0);
                 return;
               }
             }
             this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
             if (Math.random() < 1 / ((20 * m.Instance.get_fps()) / 25))
               for (
                 0.1 > Math.random() &&
                   5 < this.world.tick - kd.lastPlayedFireSound &&
                   ((kd.lastPlayedFireSound = this.world.tick), this.game.requestSound("fire" + (Math.floor(5 * Math.random()) + 1), a - this.world.worldX, -c - this.world.worldY)),
                   1 < J.particles && this.game.addParticles("smoke", 1, 0, new h(a, Math.random()), new h(c, Math.random())),
                   new t(a, -c, 1, 1).intersects(this.world.player.get_hit()) && this.game.ouch(1, -1, "fire"),
                   b = Object.keys(this.world.mobs.h),
                   d = b.length,
                   f = 0;
                 f < d;
 
               )
                 (e = b[f++]), null != this.game.getMob(e) && this.game.getMob(e).mobCollisionRectangle(e, new t(a, -c, 1, 1)) && (this.world.onFire.h[e] = !0);
           }
         },
         __class__: kd,
       });
       var gf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_FrostedIce"] = gf;
       gf.__name__ = "blocks.Block_FrostedIce";
       gf.__super__ = S;
       gf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID) || (this.world.states.h[this.blockID] = 0);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (1 == this.world.tick % ((20 * m.Instance.get_fps()) / 25) && !this.game.ifDark(this.x, this.y)) {
             var b = "fice" == this.world.getFG(this.x - 1, this.y + 1) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x - 1, this.y) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x - 1, this.y - 1) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x, this.y + 1) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x, this.y - 1) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x + 1, this.y + 1) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x + 1, this.y) ? 1 : 0;
             b += "fice" == this.world.getFG(this.x + 1, this.y - 1) ? 1 : 0;
             if (2 > b || 0.3333333333333333 > Math.random())
               (b = this.blockID),
                 (this.world.states.h[b] += 1),
                 null != this.renderer && H.__cast(this.renderer, gd).state != this.world.states.h[this.blockID] && ((H.__cast(this.renderer, gd).state = this.world.states.h[this.blockID]), H.__cast(this.renderer, gd).update());
           }
           if (4 < this.world.states.h[this.blockID]) {
             b = this.blockID;
             var a = this.world.states;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             this.world.water.h["blockX" + this.x + "Y" + this.y] = [10, 10];
             this.world.setFG(this.x, this.y, "wr");
             this.reload();
           }
         },
         __class__: gf,
       });
       var We = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Furnace"] = We;
       We.__name__ = "blocks.Block_Furnace";
       We.__super__ = S;
       We.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame &&
             ((this.game.inventario.smelter = this.blockID),
             (this.game.inventario.craftCoords = [this.x, this.y]),
             (this.game.inventario.newName = null != this.blockState.states1 ? this.blockState.states1 : ""),
             this.game.inventario.gotoAndStop(4));
         },
         init: function () {
           S.prototype.init.call(this);
           if (null == this.blockState.toSmelt) {
             var b = new e();
             b.h.input = g.emptyItem();
             b.h.fuel = g.emptyItem();
             b.h.fuelTimer = 0;
             b.h.fuelTimerTotal = 0;
             b.h.smeltTimer = 0;
             b.h.output = g.emptyItem();
             b = g.makeDynamicMap(b);
             this.world.toSmelt.h[this.blockID] = b;
             this.blockState.toSmelt = b;
           }
         },
         updateEvent: function () {
           null != this.renderer && ((this.blockState.states1 = this.world.states.h[this.blockID]), this.renderer.fromBlock(this.blockState), this.renderer.update());
         },
         __class__: We,
       });
       var be = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Glowstone"] = be;
       be.__name__ = "blocks.Block_Glowstone";
       be.__super__ = S;
       be.prototype = v(S.prototype, {
         init: function () {
           this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         __class__: be,
       });
       var Jf = function (b, a, c, d, f) {
         this.ticky = this.alpha = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_HealingCrystal"] = Jf;
       Jf.__name__ = "blocks.Block_HealingCrystal";
       Jf.__super__ = S;
       Jf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.ticky = (this.ticky + 1) % 500;
           m.Instance.game.world.gamemode != U.gamemodes.h.SPECTATOR && 4 > Math.sqrt(Math.pow(this.x + 0.5 - m.Instance.game.world.worldX, 2) + Math.pow(this.y + 0.5 + m.Instance.game.world.worldY - 1, 2))
             ? (null != this.renderer &&
                 ((this.alpha = 1),
                 (H.__cast(this.renderer, zc).alpha = 1),
                 (H.__cast(this.renderer, zc).rotation = (180 * Math.atan2(m.Instance.game.world.worldY - 1 + (this.y + 0.5), m.Instance.game.world.worldX - (this.x + 0.5))) / Math.PI),
                 (H.__cast(this.renderer, zc).width = Math.sqrt(Math.pow(this.x + 0.5 - m.Instance.game.world.worldX, 2) + Math.pow(this.y + 0.5 + m.Instance.game.world.worldY - 1, 2))),
                 H.__cast(this.renderer, zc).update()),
               0 == this.ticky % ((50 * m.Instance.get_fps()) / 25) && ((m.Instance.game.world.health = Math.min(20, m.Instance.game.world.health + 1) | 0), (m.Instance.game.world.food = Math.min(1e3, m.Instance.game.world.food + 2) | 0)))
             : 0 != this.alpha && null != this.renderer && ((this.alpha = 0), (H.__cast(this.renderer, zc).alpha = 0), H.__cast(this.renderer, zc).update());
         },
         __class__: Jf,
       });
       var xf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_J"] = xf;
       xf.__name__ = "blocks.Block_J";
       xf.__super__ = S;
       xf.prototype = v(S.prototype, {
         useEvent: function () {
           S.prototype.useEvent.call(this);
           1 == this.game.inventario.currentFrame && this.game.inventario.gotoAndStop(7);
         },
         __class__: xf,
       });
       var ie = function (b, a, c, d, f) {
         this.thisTick = 1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Lava"] = ie;
       ie.__name__ = "blocks.Block_Lava";
       ie.__super__ = S;
       ie.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) || (this.world.water.h[this.blockID] = [10, 10]);
           this.thisTick = 1;
           this.inter();
           this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 == Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) && (this.world.water.h[this.blockID] = [10, 10]);
           this.thisTick = ++this.thisTick % Math.floor((12 * m.Instance.get_fps()) / 25);
           if (0 != this.thisTick || 0 != this.ifWater()) {
             this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
             if (1 == this.game.getGameRule("dofiretick") && Math.random() < 1 / ((70 * m.Instance.get_fps()) / 25)) {
               var b = Math.floor(4 * Math.random() - 1),
                 a = Math.floor(3 * Math.random() - 1);
               "air" == this.world.getFG(this.x + a, this.y + b) &&
                 (this.game.canCatchOnFire(this.x + a - 1, this.y + b) ||
                   this.game.canCatchOnFire(this.x + a + 1, this.y + b) ||
                   this.game.canCatchOnFire(this.x + a, this.y + b - 1) ||
                   this.game.canCatchOnFire(this.x + a, this.y + b + 1)) &&
                 (this.world.setFG(this.x + a, this.y + b, "fire"), (this.world.states.h["blockX" + (this.x + a) + "Y" + (this.y + b)] = 15));
             }
             Math.random() < 1 / ((160 * m.Instance.get_fps()) / 25) &&
               1 < J.particles &&
               1 == q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlockHit") &&
               1 != q.get(this.world.getFG(this.x, this.y + 1), "liquid") &&
               this.game.addParticles("lavabubble", 1, 0, new h(this.x + 0.5, 0), new h(-this.y - 1, 0), !0);
           }
         },
         ifWater: function () {
           null != this.renderer && H.__cast(this.renderer, Nc).setWater(this.world.water.h[this.blockID]);
           "la" == this.world.getFG(this.x, this.y - 1) &&
             Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.x + "Y" + (this.y - 1)) &&
             (9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][0] || 9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][1]) &&
             (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]);
           if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "waterWalkThroughBlock"))
             this.game.mineBlock(this.x, this.y - 1, !0, !1), (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]), this.world.setFG(this.x, this.y - 1, "la");
           else {
             if (10 != this.world.water.h[this.blockID][0] || 10 != this.world.water.h[this.blockID][1])
               if (9 != this.world.water.h[this.blockID][0] || 9 != this.world.water.h[this.blockID][1])
                 if (this.world.water.h[this.blockID][0] > this.world.water.h[this.blockID][1]) {
                   if (
                     Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x - 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y][1] : -1, 9) !=
                     Math.min(this.world.water.h[this.blockID][0], 9)
                   ) {
                     var b = this.blockID,
                       a = this.world.water;
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
                     this.game.requestRemove(this.x, this.y, !0, null, !0);
                     return !1;
                   }
                 } else if (this.world.water.h[this.blockID][0] < this.world.water.h[this.blockID][1]) {
                   if (
                     Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x + 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y][0] : -1, 9) !=
                     Math.min(this.world.water.h[this.blockID][1], 9)
                   )
                     return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
                 } else return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
               else if ("la" != this.world.getFG(this.x, this.y + 1))
                 return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
             1 != q.get(this.world.getFG(this.x, this.y - 1), "liquid") &&
               ((1 == q.get(this.world.getFG(this.x - 1, this.y), "waterWalkThroughBlock") ||
                 ("la" == this.world.getFG(this.x - 1, this.y) && Math.min(this.game.getWater(this.x - 1, this.y)[0], 9) < Math.min(this.world.water.h[this.blockID][0], 9) - 1)) &&
                 5 <= this.world.water.h[this.blockID][0] - 1 &&
                 this.world.water.h[this.blockID][0] <= this.world.water.h[this.blockID][1] &&
                 (this.game.requestRemove(this.x - 1, this.y, !0, !1, !0),
                 (this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][0], 9) - 1), Math.floor(Math.min(this.world.water.h[this.blockID][0], 9))]),
                 this.world.setFG(this.x - 1, this.y, "la")),
               (1 == q.get(this.world.getFG(this.x + 1, this.y), "waterWalkThroughBlock") ||
                 ("la" == this.world.getFG(this.x + 1, this.y) && Math.min(this.game.getWater(this.x + 1, this.y)[1], 9) < Math.min(this.world.water.h[this.blockID][1], 9) - 1)) &&
                 5 <= this.world.water.h[this.blockID][1] - 1 &&
                 this.world.water.h[this.blockID][0] >= this.world.water.h[this.blockID][1] &&
                 (this.game.requestRemove(this.x + 1, this.y, !0, !1, !0),
                 (this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][1], 9)), Math.floor(Math.min(this.world.water.h[this.blockID][1], 9) - 1)]),
                 this.world.setFG(this.x + 1, this.y, "la")));
           }
           return !0;
         },
         inter: function () {
           this.thisTick = 1;
         },
         __class__: ie,
       });
       var jc = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Leaves"] = jc;
       jc.__name__ = "blocks.Block_Leaves";
       jc.__super__ = S;
       jc.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (Math.random() < 1 / ((500 * m.Instance.get_fps()) / 25)) {
             for (var b = !0, a = 0, c = jc.toCheck.length; a < c; ) {
               var d = a++;
               if ("wd1" == this.world.getFG(this.x + jc.toCheck[d][0], this.y + jc.toCheck[d][1])) {
                 b = !1;
                 break;
               }
             }
             1 == b &&
               (null != this.getBlockData("dropDifferent")
                 ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(this.getBlockData("dropDifferent"))
                 : 0.1 > Math.random() && this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop("sl"),
               this.game.requestRemove(this.x, this.y, !0, !1, !0));
           }
         },
         __class__: jc,
       });
       var pf = function (b, a, c, d, f) {
         this.state1 = this.lastLeverState = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Lever"] = pf;
       pf.__name__ = "blocks.Block_Lever";
       pf.__super__ = S;
       pf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           null != this.world.states.h[this.blockID + "_2"] && (this.state1 = this.world.states.h[this.blockID + "_2"]);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 && this.updateSignal();
         },
         updateSignal: function () {
           this.lastLeverState != this.state1 && null != this.renderer && ((this.blockState.states2 = this.state1), H.__cast(this.renderer, qc).fromBlock(this.blockState).update());
           this.lastLeverState = this.state1;
           this.world.states.h[this.blockID + "_2"] = this.state1;
           if (2 == this.world.states.h[this.blockID]) {
             if (1 == q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock")) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (3 == this.world.states.h[this.blockID]) {
             if (1 == q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock")) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (((this.world.states.h[this.blockID] = 1), 1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock"))) {
             this.game.mineBlock(this.x, this.y, !0, !1);
             return;
           }
           if (1 == this.state1)
             2 == this.world.states.h[this.blockID]
               ? ((this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, 0]),
                 "rsd" == this.world.getFG(this.x - 1, this.y + 1) && (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + this.y] = [16, -1]),
                 "rsd" == this.world.getFG(this.x - 2, this.y) && ((this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 3) + "Y" + (this.y - 1)] = [16, -1])),
                 (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
                 "rsd" == this.world.getFG(this.x + 1, this.y) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 1])),
                 (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, 0]),
                 "rsd" == this.world.getFG(this.x, this.y - 1) && ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 1])),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, 0]),
                 "rsd" == this.world.getFG(this.x - 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 2)] = [16, -1])))
               : 3 == this.world.states.h[this.blockID]
               ? ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
                 "rsd" == this.world.getFG(this.x + 1, this.y + 1) && (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
                 "rsd" == this.world.getFG(this.x - 1, this.y) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, -1])),
                 (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + this.y] = [16, 1]),
                 "rsd" == this.world.getFG(this.x + 2, this.y) && ((this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 3) + "Y" + (this.y - 1)] = [16, 1])),
                 (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 0]),
                 "rsd" == this.world.getFG(this.x + 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 2)] = [16, 1])),
                 (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, 0]),
                 "rsd" == this.world.getFG(this.x, this.y - 1) && ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, -1])))
               : ((this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, -1]),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
                 "rsd" == this.world.getFG(this.x - 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, -1]),
                 (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
                 "rsd" == this.world.getFG(this.x + 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 1]),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, -1]),
                 "rsd" == this.world.getFG(this.x - 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 2)] = [16, -1])),
                 (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 1]),
                 "rsd" == this.world.getFG(this.x + 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 2)] = [16, 1])));
           else if (2 == this.world.states.h[this.blockID]) {
             var b = "blockX" + this.x + "Y" + this.y,
               a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             b = "blockX" + (this.x - 1) + "Y" + this.y;
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             "rsd" == this.world.getFG(this.x - 1, this.y + 1) && ((b = "blockX" + (this.x - 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             b = "blockX" + (this.x - 2) + "Y" + this.y;
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             "rsd" == this.world.getFG(this.x - 2, this.y) &&
               ((b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
               (b = "blockX" + (this.x - 3) + "Y" + (this.y - 1)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             b = "blockX" + (this.x + 1) + "Y" + this.y;
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             "rsd" == this.world.getFG(this.x + 1, this.y) &&
               ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
               (b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             b = "blockX" + this.x + "Y" + (this.y - 1);
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             "rsd" == this.world.getFG(this.x, this.y - 1) &&
               ((b = "blockX" + this.x + "Y" + (this.y - 2)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
               (b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             b = "blockX" + (this.x - 1) + "Y" + (this.y - 1);
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             "rsd" == this.world.getFG(this.x - 1, this.y - 1) &&
               ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
               (b = "blockX" + (this.x - 2) + "Y" + (this.y - 2)),
               (a = this.world.hasSignal),
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
           } else
             3 == this.world.states.h[this.blockID]
               ? ((b = "blockX" + (this.x + 1) + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + this.x + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x + 1, this.y + 1) && ((b = "blockX" + (this.x + 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x - 1) + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x - 1, this.y) &&
                   ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x + 2) + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x + 2, this.y) &&
                   ((b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x + 3) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x + 1, this.y - 1) &&
                   ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x + 2) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + this.x + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x, this.y - 1) &&
                   ((b = "blockX" + this.x + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]))
               : ((b = "blockX" + this.x + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + this.x + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 (b = "blockX" + (this.x - 1) + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x - 1, this.y) && ((b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x + 1) + "Y" + this.y),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x + 1, this.y) && ((b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x - 1, this.y - 1) &&
                   ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x - 2) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                 (b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                 (a = this.world.hasSignal),
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                 "rsd" == this.world.getFG(this.x + 1, this.y - 1) &&
                   ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x + 2) + "Y" + (this.y - 2)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]));
         },
         useEvent: function () {
           1 == this.state1
             ? ((this.state1 = 0), this.game.requestSound("on", this.x - this.world.worldX, -this.y - this.world.worldY))
             : ((this.state1 = 1), this.game.requestSound("off", this.x - this.world.worldX, -this.y - this.world.worldY));
         },
         __class__: pf,
       });
       var Kf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_LilyPad"] = Kf;
       Kf.__name__ = "blocks.Block_LilyPad";
       Kf.__super__ = S;
       Kf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           ("wr" == this.world.getFG(this.x, this.y - 1) &&
             null != this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] &&
             10 == this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][0] &&
             10 == this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][1]) ||
             m.Instance.game.requestRemove(this.x, this.y, !0, null, !0);
         },
         __class__: Kf,
       });
       var qf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_MobSpawner"] = qf;
       qf.__name__ = "blocks.Block_MobSpawner";
       qf.__super__ = S;
       qf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5);
           if (0.0025 > Math.random()) {
             if (null == this.blockState.states1 || "Array" != O.getQualifiedClassName(this.blockState.states1)) this.blockState.states1 = [];
             for (var b = this.blockState.states1, a = 0, c = b.length; a < c; ) {
               var d = a++;
               null == this.world.mobs.h[b[d]] && b.splice(d, 1);
             }
             3 > b.length &&
               (0.3333333333333333 > Math.random()
                 ? ((b = K.findSpawnArea("dark", 2, !1, null, this.x, -this.y, 0, 3)), null != b && K.spawnMob("zombie", b[0] + 0.5, -b[1]))
                 : 0.3333333333333333 > Math.random()
                 ? ((b = K.findSpawnArea("dark", 2, !1, null, this.x, -this.y, 0, 3)), null != b && K.spawnMob("skeleton", b[0] + 0.5, -b[1]))
                 : 0.3333333333333333 > Math.random() && ((b = K.findSpawnArea("dark", 2, !1, null, this.x, -this.y, 0, 3)), null != b && K.spawnMob("spider", b[0] + 0.5, -b[1])));
           }
         },
         __class__: qf,
       });
       var Pe = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Mycelium"] = Pe;
       Pe.__name__ = "blocks.Block_Mycelium";
       Pe.__super__ = S;
       Pe.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (Math.random() < 1 / ((50 * m.Instance.get_fps()) / 25) && 1 < J.particles) {
             var b = new h(this.x, 0),
               a = new h(this.y, 0),
               c = new e();
             c.h.mycelium = !0;
             this.game.addParticles("mining", 1, 0, b, a, !1, c);
           }
           Math.random() < 1 / ((1e4 * m.Instance.get_fps()) / 25) && "air" == this.world.getFG(this.x, this.y + 1) && (this.world.setFG(this.x, this.y + 1, "ms" + (0.5 > Math.random() ? 1 : 2)), this.game.makeBlock(this.x, this.y + 1));
         },
         __class__: Pe,
       });
       var vf = function (b, a, c, d, f) {
         this.hasSignal = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_NoteBlock"] = vf;
       vf.__name__ = "blocks.Block_NoteBlock";
       vf.__super__ = S;
       vf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           Object.prototype.hasOwnProperty.call(this.world.states.h, this.blockID) || (this.world.states.h[this.blockID] = 1);
           0 != this.world.getSignal(this.x, this.y) ? (this.hasSignal = !0) : (this.hasSignal = !1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 != this.world.getSignal(this.x, this.y) ? 0 == this.hasSignal && ((this.hasSignal = !0), this.useEvent2(!1)) : (this.hasSignal = !1);
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           this.useEvent2(!0);
         },
         punchEvent: function () {
           S.prototype.useEvent.call(this);
           this.mining || this.useEvent2(!1);
         },
         useEvent2: function (b) {
           null == b && (b = !1);
           b && ((b = this.blockID), (this.world.states.h[b] += 1), 25 < this.world.states.h[this.blockID] && (this.world.states.h[this.blockID] = 1));
           1 == q.get(this.world.getFG(this.x, this.y - 1), "isStone")
             ? this.game.requestSound("kick", this.x - this.world.worldX, -this.y - this.world.worldY)
             : 1 == q.get(this.world.getFG(this.x, this.y - 1), "isWood")
             ? this.game.requestSound("bass" + E.string(this.world.states.h[this.blockID]), this.x - this.world.worldX, -this.y - this.world.worldY)
             : 1 == q.get(this.world.getFG(this.x, this.y - 1), "isMush")
             ? this.game.requestSound("snare", this.x - this.world.worldX, -this.y - this.world.worldY)
             : this.game.requestSound("piano" + E.string(this.world.states.h[this.blockID]), this.x - this.world.worldX, -this.y - this.world.worldY);
         },
         __class__: vf,
       });
       var me = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_PistonArm"] = me;
       me.__name__ = "blocks.Block_PistonArm";
       me.__super__ = S;
       me.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.fgNoNumber = I.substr(this.fg, 0, this.fg.length - 1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 &&
             (1 == this.blockState.states1
               ? this.world.getFG(this.x, this.y - 1) != this.fgNoNumber + "1" && this.game.requestRemove(this.x, this.y, !0, !1, !0)
               : 2 == this.blockState.states1
               ? this.world.getFG(this.x - 1, this.y) != this.fgNoNumber + "1" && this.game.requestRemove(this.x, this.y, !0, !1, !0)
               : 3 == this.blockState.states1
               ? this.world.getFG(this.x, this.y + 1) != this.fgNoNumber + "1" && this.game.requestRemove(this.x, this.y, !0, !1, !0)
               : 3 == this.blockState.states1 && this.world.getFG(this.x + 1, this.y) != this.fgNoNumber + "1" && this.game.requestRemove(this.x, this.y, !0, !1, !0));
         },
         __class__: me,
       });
       var le = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_PistonBase"] = le;
       le.__name__ = "blocks.Block_PistonBase";
       le.__super__ = S;
       le.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.fgNoNumber = I.substr(this.fg, 0, this.fg.length - 1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 == this.world.tick % 2 || (null != this.world.hasSignal.h[this.blockID] && 1 <= this.world.hasSignal.h[this.blockID][0]) || (this.game.updateAround(this.x, this.y, !1), this.cloes());
         },
         cloes: function () {
           this.game.requestSound("Piston in", this.x - this.world.worldX, -this.y - this.world.worldY);
           1 == this.world.states.h[this.blockID]
             ? (this.world.setFG(this.x, this.y, this.fgNoNumber), this.game.requestRemove(this.x, this.y + 1, !1, !1, !0), "spiston1" == this.fg && this.game.pushBlock(this.x, this.y + 2, 0, -1, this.x, this.y, 12))
             : 2 == this.world.states.h[this.blockID]
             ? (this.world.setFG(this.x, this.y, this.fgNoNumber), this.game.requestRemove(this.x + 1, this.y, !1, !1, !0), "spiston1" == this.fg && this.game.pushBlock(this.x + 2, this.y, -1, 0, this.x, this.y, 12))
             : 3 == this.world.states.h[this.blockID]
             ? (this.world.setFG(this.x, this.y, this.fgNoNumber), this.game.requestRemove(this.x, this.y - 1, !1, !1, !0), "spiston1" == this.fg && this.game.pushBlock(this.x, this.y - 2, 0, 1, this.x, this.y, 12))
             : 4 == this.world.states.h[this.blockID] &&
               (this.world.setFG(this.x, this.y, this.fgNoNumber), this.game.requestRemove(this.x - 1, this.y, !1, !1, !0), "spiston1" == this.fg && this.game.pushBlock(this.x - 2, this.y, 1, 0, this.x, this.y, 12));
         },
         __class__: le,
       });
       var ke = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_PistonRetracted"] = ke;
       ke.__name__ = "blocks.Block_PistonRetracted";
       ke.__super__ = S;
       ke.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 && null != this.world.hasSignal.h[this.blockID] && 1 <= this.world.hasSignal.h[this.blockID][0] && (this.game.updateAround(this.x, this.y, !1), this.opne());
         },
         opne: function () {
           1 == this.world.states.h[this.blockID]
             ? this.game.pushBlock(this.x, this.y + 1, 0, 1, this.x, this.y, 12, !0) &&
               (this.game.requestSound("Piston out", this.x - this.world.worldX, -this.y - this.world.worldY),
               this.game.mineBlock(this.x, this.y + 1, !0, !1),
               (this.world.states.h["blockX" + this.x + "Y" + (this.y + 1)] = 1),
               this.world.setFG(this.x, this.y + 1, this.fg + "2"),
               this.world.setFG(this.x, this.y, this.fg + "1"))
             : 2 == this.world.states.h[this.blockID]
             ? this.game.pushBlock(this.x + 1, this.y, 1, 0, this.x, this.y, 12, !0) &&
               (this.game.requestSound("Piston out", this.x - this.world.worldX, -this.y - this.world.worldY),
               this.game.mineBlock(this.x + 1, this.y, !0, !1),
               (this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y] = 2),
               this.world.setFG(this.x + 1, this.y, this.fg + "2"),
               this.world.setFG(this.x, this.y, this.fg + "1"))
             : 3 == this.world.states.h[this.blockID]
             ? this.game.pushBlock(this.x, this.y - 1, 0, -1, this.x, this.y, 12, !0) &&
               (this.game.requestSound("Piston out", this.x - this.world.worldX, -this.y - this.world.worldY),
               this.game.mineBlock(this.x, this.y - 1, !0, !1),
               (this.world.states.h["blockX" + this.x + "Y" + (this.y - 1)] = 3),
               this.world.setFG(this.x, this.y - 1, this.fg + "2"),
               this.world.setFG(this.x, this.y, this.fg + "1"))
             : 4 == this.world.states.h[this.blockID] &&
               this.game.pushBlock(this.x - 1, this.y, -1, 0, this.x, this.y, 12, !0) &&
               (this.game.requestSound("Piston out", this.x - this.world.worldX, -this.y - this.world.worldY),
               this.game.mineBlock(this.x - 1, this.y, !0, !1),
               (this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y] = 4),
               this.world.setFG(this.x - 1, this.y, this.fg + "2"),
               this.world.setFG(this.x, this.y, this.fg + "1"));
         },
         __class__: ke,
       });
       var tf = function (b, a, c, d, f) {
         this.startedOutHitting = !1;
         this.giveItASecond = 10;
         this.q = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Portal"] = tf;
       tf.__name__ = "blocks.Block_Portal";
       tf.__super__ = S;
       tf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 < J.particles && 0 == (G.toFloat(m.Instance.tick) % G.toFloat(2) | 0) && m.Instance.game.addParticles("portal", 1, 0, new h(this.x + 0.5, 0), new h(-this.y - 0.5, 0));
           Math.random() < 1 / ((2e3 * m.Instance.get_fps()) / 25) && (this.mostRecentSound = this.game.requestSound("Portal" + ((5 * Math.random() + 1) | 0), this.x - this.world.worldX, -this.y - this.world.worldY));
           null != this.mostRecentSound &&
             (this.mostRecentSound.set_volume(this.game.getVolumeToPlayer(this.x - this.world.worldX, -this.y - this.world.worldY)), this.mostRecentSound.set_pan(this.game.getPanToPlayer(this.x - this.world.worldX)));
           0 < this.giveItASecond
             ? (this.giveItASecond--,
               (Math.floor(this.world.worldX - 0.5) != this.x && Math.floor(this.world.worldX + 0.5) != this.x) ||
                 (Math.floor(-this.world.worldY + 0.1) != this.y && Math.floor(-this.world.worldY + 0.1) + 1 != this.y) ||
                 (this.startedOutHitting = !0))
             : (Math.floor(this.world.worldX - 0.5) != this.x && Math.floor(this.world.worldX + 0.5) != this.x) || (Math.floor(-this.world.worldY + 0.1) != this.y && Math.floor(-this.world.worldY + 0.1) + 1 != this.y)
             ? ((this.startedOutHitting = !1), (this.q = 0))
             : 1 != this.startedOutHitting && (this.q++, 100 <= this.q && m.Instance.game.usePortalNether());
         },
         __class__: tf,
       });
       var Ff = function (b, a, c, d, f) {
         this.portalQuad = -1;
         this.currentFrame = 1;
         this.cd = 0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_PortalFrame"] = Ff;
       Ff.__name__ = "blocks.Block_PortalFrame";
       Ff.__super__ = S;
       Ff.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         destroy: function () {
           this.destroyPortal();
           S.prototype.destroy.call(this);
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           "eoe" == this.world.get_selectedInventoryItemType() && 2 != this.blockState.states1
             ? (this.world.gamemode != U.gamemodes.h.CREATIVE &&
                 (this.world.inventoryList[this.world.selectedInventoryItem][1]--, 0 == this.world.inventoryList[this.world.selectedInventoryItem][1] && (this.world.inventoryList[this.world.selectedInventoryItem] = g.emptyItem())),
               (this.world.states.h[this.blockID] = this.blockState.states1 = 2))
             : (this.game.isShiftClickAndContinue = !0);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (2 == this.blockState.states1) {
             var b = !1;
             "pf" == this.world.getFG(this.x - 1, this.y) &&
               2 == this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y] &&
               "pf" == this.world.getFG(this.x - 2, this.y) &&
               2 == this.world.states.h["blockX" + (this.x - 2) + "Y" + this.y] &&
               "pf" == this.world.getFG(this.x - 3, this.y) &&
               2 == this.world.states.h["blockX" + (this.x - 3) + "Y" + this.y] &&
               "pf" == this.world.getFG(this.x + 1, this.y) &&
               2 == this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y] &&
               "pf" == this.world.getFG(this.x + 2, this.y) &&
               2 == this.world.states.h["blockX" + (this.x + 2) + "Y" + this.y] &&
               "pf" == this.world.getFG(this.x + 3, this.y) &&
               2 == this.world.states.h["blockX" + (this.x + 3) + "Y" + this.y] &&
               (3 != this.currentFrame && (this.game.unlockAchieve(35), (this.currentFrame = 3), null != this.renderer && this.renderer.fromBlock(this.blockState).update(), this.generatePortal()),
               (b = !0),
               this.world.worldX > this.x - 3 && this.world.worldX < this.x + 4 && -this.world.worldY < this.y + 4 && -this.world.worldY >= this.y ? (this.cd++, 100 <= this.cd && this.game.usePortalEnd()) : (this.cd = 0));
             b || 2 == this.currentFrame || ((this.currentFrame = 2), null != this.renderer && this.renderer.fromBlock(this.blockState).update(), this.destroyPortal());
           } else 1 != this.currentFrame && ((this.currentFrame = 1), null != this.renderer && this.renderer.fromBlock(this.blockState).update(), this.destroyPortal());
           -1 != this.portalQuad && this.updatePortal();
         },
         generatePortal: function () {
           if (null == this.entity)
             if (null == this.game.entityPools.h.endportals) {
               var b = this.game.entityPools,
                 a = P.getImage("end_portal"),
                 c = mc.getShader(xa.NORMAL),
                 d = new e(),
                 f = w.repeatArray([0], 6);
               d.h.texBlend = f;
               f = w.repeatArray([1], 24);
               d.h.color = f;
               f = w.repeatArray([0], 24);
               d.h.colorOffset = f;
               d = new Ca("endportals", new ja(a, null, c, d), 1);
               b.h.endportals = d;
               this.entity = this.game.entityPools.h.endportals.entity;
               this.entity.isTransparent = !0;
               this.entity.layer = 0;
               this.entity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
               this.entity.setTextureBuffer("texture2", P.getImage("ender_bg"));
               this.entity.setUniform("texSize2", [P.getImage("ender_bg").width, P.getImage("ender_bg").height]);
             } else this.entity = this.game.entityPools.h.endportals.entity;
           this.portalQuad = this.entity.nearestConsecutiveEmpty(4);
           b = this.entity;
           a = this.portalQuad;
           c = new M(this.x - 3, -(this.y + 4));
           var l = new h(),
             k = new h(G.toFloat(P.getImage("ender_bg").width), G.toFloat(P.getImage("ender_bg").height)),
             g = new h(7, 3);
           d = new e();
           f = w.repeatArray([1], 6);
           d.h.texBlend = f;
           b.updateQuad(a, c, l, k, g, null, [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], d);
         },
         updatePortal: function () {
           var b = this.entity,
             a = this.portalQuad + 1,
             c = new M(this.x - 3, -(this.y + 4)),
             d = new h(0, G.toFloat(2 * P.getImage("end_portal").height) / G.toFloat(3)),
             f = new h(G.toFloat(P.getImage("end_portal").width), G.toFloat(P.getImage("end_portal").height) / G.toFloat(3)),
             l = new h(7, 3),
             k = [
               -this.world.tick / 500,
               0,
               -this.world.tick / 500,
               4,
               -this.world.tick / 500 + 2.1538461538461537,
               0,
               -this.world.tick / 500 + 2.1538461538461537,
               0,
               -this.world.tick / 500,
               4,
               -this.world.tick / 500 + 2.1538461538461537,
               4,
             ],
             g = new e(),
             m = w.repeatArray([0], 6);
           g.h.texBlend = m;
           b.updateQuad(a, c, d, f, l, null, k, g);
           b = this.entity;
           a = this.portalQuad + 2;
           c = new M(this.x - 3, -(this.y + 4));
           d = new h(0, G.toFloat(P.getImage("end_portal").height) / G.toFloat(3));
           f = new h(G.toFloat(P.getImage("end_portal").width), G.toFloat(P.getImage("end_portal").height) / G.toFloat(3));
           l = new h(7, 3);
           k = [-this.world.tick / 500, 0, -this.world.tick / 500, 2, -this.world.tick / 500 + 1.0769230769230769, 0, -this.world.tick / 500 + 1.0769230769230769, 0, -this.world.tick / 500, 2, -this.world.tick / 500 + 1.0769230769230769, 2];
           g = new e();
           m = w.repeatArray([0], 6);
           g.h.texBlend = m;
           b.updateQuad(a, c, d, f, l, null, k, g);
           b = this.entity;
           a = this.portalQuad + 3;
           c = new M(this.x - 3, -(this.y + 4));
           d = new h(0, 0);
           f = new h(G.toFloat(P.getImage("end_portal").width), G.toFloat(P.getImage("end_portal").height) / G.toFloat(3));
           l = new h(7, 3);
           k = [-this.world.tick / 500, 0, -this.world.tick / 500, 1, -this.world.tick / 500 + 0.5384615384615384, 0, -this.world.tick / 500 + 0.5384615384615384, 0, -this.world.tick / 500, 1, -this.world.tick / 500 + 0.5384615384615384, 1];
           g = new e();
           m = w.repeatArray([0], 6);
           g.h.texBlend = m;
           b.updateQuad(a, c, d, f, l, null, k, g);
         },
         destroyPortal: function () {
           -1 != this.portalQuad && (this.entity.removeQuad(this.portalQuad), this.entity.removeQuad(this.portalQuad + 1), this.entity.removeQuad(this.portalQuad + 2), this.entity.removeQuad(this.portalQuad + 3), (this.portalQuad = -1));
         },
         __class__: Ff,
       });
       var he = function (b, a, c, d, f) {
         this.lastFoundHit = this.foundHit = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_PressurePlate"] = he;
       he.__name__ = "blocks.Block_PressurePlate";
       he.__super__ = S;
       he.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock")) this.game.mineBlock(this.x, this.y, !0, !1);
           else if (1 != this.world.tick % 2) {
             this.lastFoundHit = this.foundHit;
             this.foundHit = !1;
             this.world.gamemode == U.gamemodes.h.SPECTATOR || (Math.floor(this.world.worldX - 0.4) != this.x && Math.floor(this.world.worldX + 0.4) != this.x) || Math.floor(-this.world.worldY) != this.y - 1 || (this.foundHit = !0);
             if (0 == this.foundHit)
               for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
                 var d = b[c++];
                 (Math.floor(this.world.mobs.h[d].h.x - 0.4) != this.x && Math.floor(this.world.mobs.h[d].h.x + 0.4) != this.x) || Math.floor(-this.world.mobs.h[d].h.y) != this.y - 1 || (this.foundHit = !0);
               }
             if ("wpp" == this.blockState.type) {
               if (0 == this.foundHit)
                 for (b = Object.keys(this.world.arrows.h), a = b.length, c = 0; c < a; )
                   if (
                     ((d = b[c++]),
                     new t(this.x, -this.y, 1, 1).intersects(
                       new t(g.makeDynamicMap(this.world.arrows.h[d]).h.x - 0.3333333333333333, g.makeDynamicMap(this.world.arrows.h[d]).h.y - 0.3333333333333333, 0.6666666666666666, 0.6666666666666666)
                     ))
                   ) {
                     this.foundHit = !0;
                     break;
                   }
               if (0 == this.foundHit)
                 for (b = Object.keys(this.world.spears.h), a = b.length, c = 0; c < a; )
                   if (
                     ((d = b[c++]),
                     new t(this.x, -this.y, 1, 1).intersects(
                       new t(g.makeDynamicMap(this.world.spears.h[d]).h.x - 0.3333333333333333, g.makeDynamicMap(this.world.spears.h[d]).h.y - 0.3333333333333333, 0.6666666666666666, 0.6666666666666666)
                     ))
                   ) {
                     this.foundHit = !0;
                     break;
                   }
               if (0 == this.foundHit)
                 for (b = Object.keys(this.world.shurikens.h), a = b.length, c = 0; c < a; )
                   if (
                     ((d = b[c++]),
                     new t(this.x, -this.y, 1, 1).intersects(
                       new t(g.makeDynamicMap(this.world.shurikens.h[d]).h.x - 0.3333333333333333, g.makeDynamicMap(this.world.shurikens.h[d]).h.y - 0.3333333333333333, 0.6666666666666666, 0.6666666666666666)
                     ))
                   ) {
                     this.foundHit = !0;
                     break;
                   }
               if (0 == this.foundHit)
                 for (b = Object.keys(this.world.drops.h), a = b.length, c = 0; c < a; )
                   if (
                     ((d = b[c++]),
                     new t(this.x, -this.y, 1, 1).intersects(
                       new t(g.makeDynamicArray(this.world.drops.h[d])[0] - 0.3333333333333333, g.makeDynamicArray(this.world.drops.h[d])[1] - 0.3333333333333333, 0.6666666666666666, 0.6666666666666666)
                     ))
                   ) {
                     this.foundHit = !0;
                     break;
                   }
             }
             this.lastFoundHit != this.foundHit &&
               (null != this.renderer && ((this.blockState.states2 = this.foundHit ? 1 : 0), H.__cast(this.renderer, qc).fromBlock(this.blockState).update()),
               this.foundHit
                 ? (this.game.requestSound("on", this.x - this.world.worldX, -this.y - this.world.worldY),
                   (this.world.hasSignal.h["blockX" + this.x + "Y" + this.y] = [16, 0]),
                   (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, -1]),
                   (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
                   "rsd" == this.world.getFG(this.x - 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 1)] = [16, -1]),
                   (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
                   "rsd" == this.world.getFG(this.x + 1, this.y) && (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 1)] = [16, 1]),
                   (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, -1]),
                   "rsd" == this.world.getFG(this.x - 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x - 2) + "Y" + (this.y - 2)] = [16, -1])),
                   (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 1]),
                   "rsd" == this.world.getFG(this.x + 1, this.y - 1) && ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 2)] = [16, 0]), (this.world.hasSignal.h["blockX" + (this.x + 2) + "Y" + (this.y - 2)] = [16, 1])))
                 : (this.game.requestSound("off", this.x - this.world.worldX, -this.y - this.world.worldY),
                   (b = "blockX" + this.x + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + this.x + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   (b = "blockX" + (this.x - 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x - 1, this.y) && ((b = "blockX" + (this.x - 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 1) + "Y" + this.y),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y) && ((b = "blockX" + (this.x + 2) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x - 1, this.y - 1) &&
                     ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x - 2) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
                   (b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)),
                   (a = this.world.hasSignal),
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                   "rsd" == this.world.getFG(this.x + 1, this.y - 1) &&
                     ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b],
                     (b = "blockX" + (this.x + 2) + "Y" + (this.y - 2)),
                     (a = this.world.hasSignal),
                     Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b])));
           }
         },
         __class__: he,
       });
       var df = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Pumpkin"] = df;
       df.__name__ = "blocks.Block_Pumpkin";
       df.__super__ = S;
       df.prototype = v(S.prototype, {
         init: function () {
           if ("snowblock" == this.world.getFG(this.x, this.y - 1) && "snowblock" == this.world.getFG(this.x, this.y - 2))
             K.spawnMob("snowgolem", this.x + 0.5, -this.y + 1.5), this.game.requestRemove(this.x, this.y - 2, !1, !1, !0), this.game.requestRemove(this.x, this.y - 1, !1, !1, !0), this.game.requestRemove(this.x, this.y, !1, !1, !0);
           else if (null == this.blockState.states1) {
             var b = 0.1 > Math.random() ? 2 : 1;
             this.world.states.h[this.blockID] = b;
             this.blockState.states1 = b;
           }
         },
         useEvent: function () {
           if ("Shear" == this.world.get_selectedInventoryItemType()) {
             var b = (this.world.states.h[this.blockID] % 11) + 1;
             this.world.states.h[this.blockID] = b;
             this.blockState.states1 = b;
             null != this.renderer && this.renderer.fromBlock(this.blockState).update();
           }
         },
         __class__: df,
       });
       var yc = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Rail"] = yc;
       yc.__name__ = "blocks.Block_Rail";
       yc.__super__ = S;
       yc.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           if (null == this.world.states.h[this.blockID] || "Array" != O.getQualifiedClassName(this.world.states.h[this.blockID])) this.world.states.h[this.blockID] = g.makeDynamicArray([null, [0, 0]]);
           null == this.world.states.h[this.blockID][0] &&
             1 != q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock") &&
             ("rail" != I.substr(this.world.getFG(this.x - 1, this.y - 1), 0, 4) ||
               (this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] && 1 != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0]) ||
               (null == this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] && (this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = g.makeDynamicArray([3, [0, 0]])),
               (this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0] = 3),
               null != this.world.getBlock(this.x - 1, this.y - 1, !1) && this.world.getBlock(this.x - 1, this.y - 1).updateState()),
             "rail" != I.substr(this.world.getFG(this.x + 1, this.y - 1), 0, 4) ||
               (this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] && 1 != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0]) ||
               (null == this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] && (this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = g.makeDynamicArray([2, [0, 0]])),
               (this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0] = 2),
               null != this.world.getBlock(this.x + 1, this.y - 1, !1) && this.world.getBlock(this.x + 1, this.y - 1).updateState()),
             "rail" == I.substr(this.world.getFG(this.x - 1, this.y + 1), 0, 4)
               ? (this.world.states.h[this.blockID][0] = 2)
               : "rail" == I.substr(this.world.getFG(this.x + 1, this.y + 1), 0, 4)
               ? (this.world.states.h[this.blockID][0] = 3)
               : (this.world.states.h[this.blockID][0] = 1));
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock")) this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(), this.game.requestRemove(this.x, this.y, !0, null, !0);
           else {
             if (null == this.world.states.h[this.blockID] || "Array" != O.getQualifiedClassName(this.world.states.h[this.blockID])) this.world.states.h[this.blockID] = g.makeDynamicArray([1, [0, 0]]);
             2 == this.world.states.h[this.blockID][0] && 1 == q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock") && (this.world.states.h[this.blockID][0] = 1);
             3 == this.world.states.h[this.blockID][0] && 1 == q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock") && (this.world.states.h[this.blockID][0] = 1);
             "rail" == this.fg && (this.world.states.h[this.blockID][1] = [0, 0]);
             this.updateState();
           }
         },
         updateState: function () {
           null != this.renderer && ((this.blockState.hasSignal = this.world.hasSignal.h[this.blockID]), (this.blockState.states1 = this.world.states.h[this.blockID]), this.renderer.fromBlock(this.blockState).update());
         },
         updateSignal: function () {
           -1 != this.world.states.h[this.blockID][1][1] &&
             (1 == this.world.states.h[this.blockID][0]
               ? (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y]) &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1] &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1][0] &&
                     this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)]) &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(1, 0, 1),
                 this.changeRedstone(1, -1, 1))
               : 2 == this.world.states.h[this.blockID][0]
               ? (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)]) &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(1, 0, 1),
                 this.changeRedstone(1, -1, 1))
               : (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)]) &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y]) &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1] &&
                     null != this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1][0] &&
                     this.world.states.h["blockX" + (this.x - 1) + "Y" + this.y][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(1, 1, 1)));
           1 != this.world.states.h[this.blockID][1][1] &&
             (1 == this.world.states.h[this.blockID][0]
               ? (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(-1, 0, -1),
                 this.changeRedstone(-1, -1, -1))
               : 2 == this.world.states.h[this.blockID][0]
               ? (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + this.y][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(-1, 1, -1))
               : (16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 16 == this.world.states.h[this.blockID][1][0] ||
                   ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)]) &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1] &&
                     null != this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1][0] &&
                     this.world.states.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][1][0] == this.world.states.h[this.blockID][1][0] + 1) ||
                   (this.world.states.h[this.blockID][1] = [0, 0]),
                 this.changeRedstone(-1, 0, -1),
                 this.changeRedstone(-1, -1, -1)));
         },
         changeRedstone: function (b, a, c) {
           if ("rail" == I.substr(this.world.getFG(this.x + b, this.y + a), 0, 4)) {
             if ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)]) && "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1])) {
               var d = this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][0];
               d = isNaN(d);
             } else d = !0;
             if (d || this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][0] < Math.max(0, this.world.states.h[this.blockID][1][0] - 1))
               "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)]) && "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1])
                 ? ((d = this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][0]), (d = isNaN(d)))
                 : (d = !0),
                 d || this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][0] < this.world.states.h[this.blockID][1][0] - 1
                   ? (null == this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] && (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = g.makeDynamicArray([null, [0, 0]])),
                     (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1] = [Math.max(0, this.world.states.h[this.blockID][1][0] - 1), c]),
                     null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a, !1).updateSignal())
                   : (1 != c ||
                       ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)]) &&
                         "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1]) &&
                         -1 == this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][1]) ||
                       (null == this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] && (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = g.makeDynamicArray([null, [0, 0]])),
                       (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1] = [Math.max(0, this.world.states.h[this.blockID][1][0] - 1), c]),
                       null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a, !1).updateSignal()),
                     -1 != c ||
                       ("Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)]) &&
                         "Array" == O.getQualifiedClassName(this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1]) &&
                         1 == this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1][1]) ||
                       (null == this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] && (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = g.makeDynamicArray([null, [0, 0]])),
                       (this.world.states.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1] = [Math.max(0, this.world.states.h[this.blockID][1][0] - 1), c]),
                       null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a, !1).updateSignal()));
           }
         },
         __class__: yc,
       });
       var Ad = function (b, a, c, d, f) {
         this.cartHere = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_RailDetector"] = Ad;
       Ad.__name__ = "blocks.Block_RailDetector";
       Ad.__super__ = yc;
       Ad.prototype = v(yc.prototype, {
         updateState: function () {
           var b = !1;
           16 == this.world.states.h[this.blockID][1][0] && (b = !0);
           this.world.states.h[this.blockID][1] = this.cartHere ? [16, 0] : [0, 0];
           if (16 == this.world.states.h[this.blockID][1][0])
             (this.world.hasSignal.h[this.blockID] = [16, 0]),
               (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 0]),
               (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, 0]),
               (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y - 1)] = [16, 0]);
           else if (b) {
             b = this.blockID;
             var a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             b = "blockX" + (this.x + 1) + "Y" + this.y;
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             b = "blockX" + (this.x - 1) + "Y" + this.y;
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             b = "blockX" + this.x + "Y" + (this.y - 1);
             a = this.world.hasSignal;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
           }
           this.updateSignal();
           yc.prototype.updateState.call(this);
           this.cartHere = !1;
         },
         __class__: Ad,
       });
       var ne = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_RailPowered"] = ne;
       ne.__name__ = "blocks.Block_RailPowered";
       ne.__super__ = yc;
       ne.prototype = v(yc.prototype, {
         updateState: function () {
           Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, this.blockID) && null != this.world.hasSignal.h[this.blockID][0] && !isNaN(this.world.hasSignal.h[this.blockID][0]) && 1 <= this.world.hasSignal.h[this.blockID][0]
             ? (this.world.states.h[this.blockID][1] = [16, 0])
             : this.world.states.h[this.blockID][1] && 16 == this.world.states.h[this.blockID][1][0] && (this.world.states.h[this.blockID][1] = [0, 0]);
           this.updateSignal();
           yc.prototype.updateState.call(this);
         },
         __class__: ne,
       });
       var Qe = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Redstone"] = Qe;
       Qe.__name__ = "blocks.Block_Redstone";
       Qe.__super__ = S;
       Qe.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock") ? this.game.mineBlock(this.x, this.y, !0, !1) : 1 != this.world.tick % 2 && this.updateSignal();
         },
         updateSignal: function () {
           if (null == this.world.hasSignal.h[this.blockID] || "Array" != O.getQualifiedClassName(this.world.hasSignal.h[this.blockID])) this.world.hasSignal.h[this.blockID] = [0, 0];
           -1 != this.world.hasSignal.h[this.blockID][1] &&
             (1 != q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock")
               ? (this.changeRedstone(1, 0, 1), this.changeRedstone(1, 1, 1))
               : 1 != q.get(this.world.getFG(this.x + 1, this.y - 1), "walkThroughBlock")
               ? (this.changeRedstone(1, 0, 1),
                 "rsd" == this.world.getFG(this.x + 1, this.y)
                   ? this.changeRedstone(1, -1, 1)
                   : Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y - 1)) && (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0] = 0))
               : "air" != this.world.getFG(this.x + 1, this.y - 1) && (this.changeRedstone(1, -1, 1), "rsd" == this.world.getFG(this.x + 1, this.y - 1) && this.changeRedstone(1, -2, 1)));
           if (null == this.world.hasSignal.h[this.blockID] || "Array" != O.getQualifiedClassName(this.world.hasSignal.h[this.blockID])) this.world.hasSignal.h[this.blockID] = [0, 0];
           1 != this.world.hasSignal.h[this.blockID][1] &&
             (1 != q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock")
               ? (this.changeRedstone(-1, 0, -1), this.changeRedstone(-1, 1, -1))
               : 1 != q.get(this.world.getFG(this.x - 1, this.y - 1), "walkThroughBlock")
               ? (this.changeRedstone(-1, 0, -1),
                 "rsd" == this.world.getFG(this.x - 1, this.y)
                   ? this.changeRedstone(-1, -1, -1)
                   : Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + (this.y - 1)) && (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0] = 0))
               : "air" != this.world.getFG(this.x - 1, this.y - 1) && (this.changeRedstone(-1, -1, -1), "rsd" == this.world.getFG(this.x - 1, this.y - 1) && this.changeRedstone(-1, -2, -1)));
           null != this.renderer && ((this.blockState.hasSignal = this.world.hasSignal.h[this.blockID]), this.renderer.fromBlock(this.blockState).update());
         },
         changeRedstone: function (b, a, c) {
           if (null == this.world.hasSignal.h[this.blockID] || "Array" != O.getQualifiedClassName(this.world.hasSignal.h[this.blockID])) this.world.hasSignal.h[this.blockID] = [0, 0];
           (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + b) + "Y" + (this.y + a)) &&
             this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][0] == Math.max(0, this.world.hasSignal.h[this.blockID][0] - 1)) ||
             ((Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + b) + "Y" + (this.y + a)) && null != this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][0]
               ? isNaN(this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][0])
               : 1) || this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][0] < this.world.hasSignal.h[this.blockID][0] - 1
               ? ((this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = [Math.max(0, this.world.hasSignal.h[this.blockID][0] - 1), c]),
                 null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a).updateSignal())
               : 1 == c && 1 == this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1]
               ? ((this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = [Math.max(0, this.world.hasSignal.h[this.blockID][0] - 1), c]),
                 null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a).updateSignal())
               : -1 == c &&
                 -1 == this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)][1] &&
                 ((this.world.hasSignal.h["blockX" + (this.x + b) + "Y" + (this.y + a)] = [Math.max(0, this.world.hasSignal.h[this.blockID][0] - 1), c]),
                 null != this.world.getBlock(this.x + b, this.y + a, !1) && this.world.getBlock(this.x + b, this.y + a).updateSignal()));
         },
         __class__: Qe,
       });
       var Af = function (b, a, c, d, f) {
         this.lit = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_RedstoneLamp"] = Af;
       Af.__name__ = "blocks.Block_RedstoneLamp";
       Af.__super__ = S;
       Af.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 &&
             this.lit != (0 != this.world.getSignal(this.x, this.y)) &&
             ((this.lit = 0 != this.world.getSignal(this.x, this.y)),
             (this.blockState.hasSignal = this.world.hasSignal.h[this.blockID]),
             null != this.renderer && this.renderer.fromBlock(this.blockState).update(),
             this.lit ? this.game.lighting.addLight(this.blockID, Va.TORCH, this.blockState.x + 0.5, this.blockState.y + 0.5) : this.game.lighting.removeLight(this.blockID));
         },
         __class__: Af,
       });
       var ee = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Rope"] = ee;
       ee.__name__ = "blocks.Block_Rope";
       ee.__super__ = S;
       ee.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         updateEvent: function () {
           if (
             1 == q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlock") &&
             "rp" != this.world.getFG(this.x, this.y + 1) &&
             1 == q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock") &&
             1 == q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock")
           )
             m.Instance.game.world.getFG(this.x, this.y - 1) == this.blockState.type && null != m.Instance.game.world.getBlock(this.x, this.y - 1) && H.__cast(m.Instance.game.world.getBlock(this.x, this.y - 1), ee).updateEvent(),
               this.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop(),
               m.Instance.game.requestRemove(this.x, this.y, !0, !1, !0);
           else if (null != this.renderer) {
             var b = H.__cast(this.renderer, yd).state;
             this.renderer.fromBlock(this.blockState);
             H.__cast(this.renderer, yd).state != b && this.renderer.update();
           }
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.updateEvent();
         },
         __class__: ee,
       });
       var Ud = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Sapling"] = Ud;
       Ud.__name__ = "blocks.Block_Sapling";
       Ud.__super__ = Kb;
       Ud.prototype = v(Kb.prototype, {
         init: function () {
           this.world.toGrow.h[this.blockID] = !0;
           Kb.prototype.init.call(this);
         },
         __class__: Ud,
       });
       var cf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Seaweed"] = cf;
       cf.__name__ = "blocks.Block_Seaweed";
       cf.__super__ = S;
       cf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           var b = 1 == this.blockState.firstTimes;
           if (this.blockState.firstTimes) {
             var a = this.blockID,
               c = this.world.firstTimes;
             Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
             this.blockState.firstTimes = !1;
           }
           1 == ((Math.random() * ((2500 * m.Instance.get_fps()) / 25)) | 0) &&
             "wr" == this.world.getFG(this.x, this.y + 1) &&
             null != this.world.water.h["blockX" + this.x + "Y" + (this.y + 1)] &&
             10 == this.world.water.h["blockX" + this.x + "Y" + (this.y + 1)][0] &&
             10 == this.world.water.h["blockX" + this.x + "Y" + (this.y + 1)][1] &&
             "sw" != this.world.getFG(this.x, this.y - 6) &&
             (this.world.setFG(this.x, this.y + 1, "sw"), m.Instance.game.requestRemove(this.x, this.y + 1, !1, !0));
           if (
             ("sd" != this.world.getFG(this.x, this.y - 1) && "dt" != this.world.getFG(this.x, this.y - 1) && "sw" != this.world.getFG(this.x, this.y - 1)) ||
             1 == q.get(this.world.getFG(this.x - 1, this.y), "waterWalkThroughBlock") ||
             1 == q.get(this.world.getFG(this.x + 1, this.y), "waterWalkThroughBlock")
           )
             0 == b ? m.Instance.game.world.gamemode != U.gamemodes.h.CREATIVE && this.addDrop() : (this.world.firstTimes.h["blockX" + this.x + "Y" + (this.y + 1)] = !0),
               this.world.setFG(this.x, this.y, "wr"),
               m.Instance.game.requestRemove(this.x, this.y, !0, !0, !1);
         },
         __class__: cf,
       });
       var zf = function (b, a, c, d, f) {
         this.overSign = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Sign"] = zf;
       zf.__name__ = "blocks.Block_Sign";
       zf.__super__ = S;
       zf.prototype = v(S.prototype, {
         init: function () {
           S.prototype.init.call(this);
           this.worldChunk.registerBlockEventFrame(this);
         },
         mouseOverEvent: function () {
           S.prototype.mouseOverEvent.call(this);
           this.overSign = !0;
           null == this.world.signs.h[this.blockID] && (this.world.signs.h[this.blockID] = "");
         },
         mouseOutEvent: function () {
           S.prototype.mouseOutEvent.call(this);
           this.overSign = !1;
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           this.game.inventario.sign = this.blockID;
           this.game.inventario.gotoAndStop("sign");
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.overSign && 1 == this.game.inventario.currentFrame && this.game.showSign(this.world.signs.h[this.blockID]);
         },
         __class__: zf,
       });
       var ff = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Snow"] = ff;
       ff.__name__ = "blocks.Block_Snow";
       ff.__super__ = S;
       ff.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           (1 != q.get(m.Instance.game.world.getFG(this.x, this.y - 1), "walkThroughBlock") && "lp" != m.Instance.game.world.getFG(this.x, this.y - 1)) || m.Instance.game.requestRemove(this.x, this.y, null, null, !0);
         },
         __class__: ff,
       });
       var jf = function (b, a, c, d, f) {
         Sc.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Sugarcane"] = jf;
       jf.__name__ = "blocks.Block_Sugarcane";
       jf.__super__ = Sc;
       jf.prototype = v(Sc.prototype, {
         get_maxGrowth: function () {
           return 4;
         },
         __class__: jf,
       });
       var xd = function (b, a, c, d, f) {
         this.setPlayingTNT = -1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_TNT"] = xd;
       xd.__name__ = "blocks.Block_TNT";
       xd.__super__ = S;
       xd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 < this.world.getSignal(this.x, this.y) && this.explode();
         },
         explode: function () {
           -1 != this.setPlayingTNT && (this.world.playingTNT.h["fallingBlock" + ++this.world.fallingBlockNum] = this.setPlayingTNT);
           this.game.igniteTNT(this.x, this.y);
         },
         __class__: xd,
       });
       var Yd = function (b, a, c, d, f) {
         this.firstRun = !0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Torch"] = Yd;
       Yd.__name__ = "blocks.Block_Torch";
       Yd.__super__ = S;
       Yd.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.game.lighting.addLight(this.blockID, Va.TORCH, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           Math.random() < 1 / ((50 * m.Instance.get_fps()) / 25) && this.game.addParticles("smoke", 1, 0, new h(this.x + 0.5, 0), new h(-(this.y + 0.5) - 0.16666666666666666, 0));
           "th" != this.blockState.type ||
             Object.prototype.hasOwnProperty.call(this.game.particles.h, "particle," + this.x + "," + this.y) ||
             this.game.addParticles("torchtip", 1, 0, new h(this.x + 0.5, 0), new h(-(this.y + 0.5) - 0.06666666666666667, 0));
           this.firstRun = !1;
           2 == this.blockState.states1
             ? (1 != q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x - 1, this.y), "liquid") && "air" != this.world.getFG(this.x - 1, this.y)) ||
               this.game.mineBlock(this.x, this.y, !0, !1)
             : 3 == this.blockState.states1
             ? (1 != q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x + 1, this.y), "liquid") && "air" != this.world.getFG(this.x + 1, this.y)) ||
               this.game.mineBlock(this.x, this.y, !0, !1)
             : (1 != q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x, this.y - 1), "liquid") && "air" != this.world.getFG(this.x, this.y - 1)) ||
               this.game.mineBlock(this.x, this.y, !0, !1);
         },
         __class__: Yd,
       });
       var rf = function (b, a, c, d, f) {
         this.firstRun = !0;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_TorchOdd"] = rf;
       rf.__name__ = "blocks.Block_TorchOdd";
       rf.__super__ = S;
       rf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           this.game.lighting.addLight(this.blockID, Va.DARK, this.blockState.x + 0.5, this.blockState.y + 0.5);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           this.firstRun = !1;
           2 == this.blockState.states1
             ? (1 != q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x - 1, this.y), "liquid") && "air" != this.world.getFG(this.x - 1, this.y)) ||
               this.game.mineBlock(this.x, this.y, !0, !1)
             : 3 == this.blockState.states1
             ? (1 != q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x + 1, this.y), "liquid") && "air" != this.world.getFG(this.x + 1, this.y)) ||
               this.game.mineBlock(this.x, this.y, !0, !1)
             : (1 != q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock") && 1 != q.get(this.world.getFG(this.x, this.y - 1), "liquid") && "air" != this.world.getFG(this.x, this.y - 1)) ||
               this.game.mineBlock(this.x, this.y, !0, !1);
         },
         __class__: rf,
       });
       var nf = function (b, a, c, d, f) {
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_TorchRedstone"] = nf;
       nf.__name__ = "blocks.Block_TorchRedstone";
       nf.__super__ = S;
       nf.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           1 != this.world.tick % 2 && this.updateSignal();
         },
         updateSignal: function () {
           var b = !1;
           if (2 == this.world.states.h[this.blockID]) {
             if (0 != this.world.getSignal(this.x - 1, this.y)) b = !0;
             else {
               this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1];
               if ("rsd" == this.world.getFG(this.x + 1, this.y)) this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 1];
               else if (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y - 1))) {
                 var a = "blockX" + (this.x + 1) + "Y" + (this.y - 1),
                   c = this.world.hasSignal;
                 Object.prototype.hasOwnProperty.call(c.h, a) && delete c.h[a];
               }
               1 != q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlock") &&
                 ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 1)] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 2)] = [16, 0]),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)] = [16, -1]),
                 (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)] = [16, 1]));
             }
             if (1 == q.get(this.world.getFG(this.x - 1, this.y), "walkThroughBlock")) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (3 == this.world.states.h[this.blockID]) {
             if (
               (0 != this.world.getSignal(this.x + 1, this.y)
                 ? (b = !0)
                 : ((this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
                   "rsd" == this.world.getFG(this.x - 1, this.y)
                     ? (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, -1])
                     : Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + (this.y - 1)) && (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0] = 0),
                   1 != q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlock") &&
                     ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 1)] = [16, 0]),
                     (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 2)] = [16, 0]),
                     (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)] = [16, -1]),
                     (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)] = [16, 1]))),
               1 == q.get(this.world.getFG(this.x + 1, this.y), "walkThroughBlock"))
             ) {
               this.game.mineBlock(this.x, this.y, !0, !1);
               return;
             }
           } else if (
             (0 != this.world.getSignal(this.x, this.y - 1)
               ? (b = !0)
               : ((this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y] = [16, 1]),
                 "rsd" == this.world.getFG(this.x + 1, this.y)
                   ? (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)] = [16, 1])
                   : Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y - 1)) && (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0] = 0),
                 (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y] = [16, -1]),
                 "rsd" == this.world.getFG(this.x - 1, this.y)
                   ? (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)] = [16, 1])
                   : Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + (this.y - 1)) && (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0] = 0),
                 1 != q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlock") &&
                   ((this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 1)] = [16, 0]),
                   (this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 2)] = [16, 0]),
                   (this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)] = [16, 1]),
                   (this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)] = [16, -1]))),
             1 == q.get(this.world.getFG(this.x, this.y - 1), "walkThroughBlock"))
           ) {
             this.game.mineBlock(this.x, this.y, !0, !1);
             return;
           }
           b && this.abortSignalz();
           null != this.renderer &&
             ((b = H.__cast(this.renderer, hd).powered),
             (this.blockState.hasSignal = this.world.hasSignal.h[this.blockID]),
             this.renderer.fromBlock(this.blockState),
             b != H.__cast(this.renderer, hd).powered && this.renderer.update(),
             H.__cast(this.renderer, hd).powered ? this.game.lighting.addLight(this.blockID, Va.BLOCK, this.blockState.x + 0.5, this.blockState.y + 0.5) : this.game.lighting.removeLight(this.blockID));
         },
         abortSignalz: function () {
           if (2 == this.world.states.h[this.blockID]) {
             if (
               Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y - 1)) &&
               16 == this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0] &&
               "rsd" == this.world.getFG(this.x + 1, this.y)
             ) {
               var b = "blockX" + (this.x + 1) + "Y" + (this.y - 1),
                 a = this.world.hasSignal;
               Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             }
             Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + this.y) &&
               16 == this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y][0] &&
               ((b = "blockX" + (this.x + 1) + "Y" + this.y), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
           } else
             3 != this.world.states.h[this.blockID] &&
               (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y - 1)) &&
                 16 == this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y - 1)][0] &&
                 "rsd" == this.world.getFG(this.x + 1, this.y) &&
                 ((b = "blockX" + (this.x + 1) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
               Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + this.y) &&
                 16 == this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + this.y][0] &&
                 ((b = "blockX" + (this.x + 1) + "Y" + this.y), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b])),
               Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + (this.y - 1)) &&
                 16 == this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y - 1)][0] &&
                 "rsd" == this.world.getFG(this.x + 1, this.y) &&
                 ((b = "blockX" + (this.x - 1) + "Y" + (this.y - 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
               Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + this.y) &&
                 16 == this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + this.y][0] &&
                 ((b = "blockX" + (this.x - 1) + "Y" + this.y), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
           1 != q.get(this.world.getFG(this.x, this.y + 1), "walkThroughBlock") &&
             (Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + this.x + "Y" + (this.y + 1)) &&
               16 == this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 1)][0] &&
               ((b = "blockX" + this.x + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
             Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + this.x + "Y" + (this.y + 2)) &&
               16 == this.world.hasSignal.h["blockX" + this.x + "Y" + (this.y + 2)][0] &&
               ((b = "blockX" + this.x + "Y" + (this.y + 2)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
             Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x - 1) + "Y" + (this.y + 1)) &&
               16 == this.world.hasSignal.h["blockX" + (this.x - 1) + "Y" + (this.y + 1)][0] &&
               ((b = "blockX" + (this.x - 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]),
             Object.prototype.hasOwnProperty.call(this.world.hasSignal.h, "blockX" + (this.x + 1) + "Y" + (this.y + 1)) &&
               16 == this.world.hasSignal.h["blockX" + (this.x + 1) + "Y" + (this.y + 1)][0] &&
               ((b = "blockX" + (this.x + 1) + "Y" + (this.y + 1)), (a = this.world.hasSignal), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]));
         },
         __class__: nf,
       });
       var $d = function (b, a, c, d, f) {
         this.hasSignal = !1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_TrapDoor"] = $d;
       $d.__name__ = "blocks.Block_TrapDoor";
       $d.__super__ = S;
       $d.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           0 != this.world.getSignal(this.x, this.y) ? (this.hasSignal = !0) : (this.hasSignal = !1);
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           0 != this.world.getSignal(this.x, this.y) ? 0 == this.hasSignal && this.useEvent() : 1 == this.hasSignal && this.useEvent();
         },
         useEvent: function () {
           S.prototype.useEvent.call(this);
           "td2" == this.fg
             ? (this.game.requestSound("dooropen", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y, "td1"))
             : (this.game.requestSound("doorclose", this.x - this.world.worldX, -this.y - this.world.worldY), this.world.setFG(this.x, this.y, "td2"));
         },
         __class__: $d,
       });
       var Tc = function (b, a, c, d, f) {
         this.thisTick = 1;
         S.call(this, b, a, c, d, f);
       };
       r["blocks.Block_Water"] = Tc;
       Tc.__name__ = "blocks.Block_Water";
       Tc.__super__ = S;
       Tc.prototype = v(S.prototype, {
         init: function () {
           this.worldChunk.registerBlockEventFrame(this);
           Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) || (this.world.water.h[this.blockID] = [10, 10]);
           this.thisTick = 1;
           this.inter();
         },
         frameEvent: function () {
           S.prototype.frameEvent.call(this);
           if (null != this.blockState.firstTimes) {
             this.blockState.firstTimes = !1;
             var b = this.blockID,
               a = this.world.firstTimes;
             Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
             if (
               this.game.isFullWater(this.x, this.y) &&
               1 == q.get(this.world.getFG(this.x, this.y + 1), "waterWalkThroughBlock") &&
               null != q.get(this.world.getFG(this.x, this.y + 2), "waterWalkThroughBlock") &&
               null != q.get(this.world.getFG(this.x, this.y + 3), "waterWalkThroughBlock") &&
               null != q.get(this.world.getFG(this.x, this.y + 4), "waterWalkThroughBlock") &&
               1 == this.world.snowRegions.h[this.x]
             ) {
               this.world.setFG(this.x, this.y, "ice");
               this.game.requestRemove(this.x, this.y, !0, !0);
               return;
             }
           }
           if (2 == this.world.sceneNum) this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY), this.game.requestRemove(this.x, this.y, !0, !1, !0);
           else if (
             (0 == Object.prototype.hasOwnProperty.call(this.world.water.h, this.blockID) && (this.world.water.h[this.blockID] = [10, 10]),
             0.001 > Math.random() && 10 < this.world.tick - Tc.lastPlayedWaterSound && ((Tc.lastPlayedWaterSound = this.world.tick), this.game.requestSound("water", this.x - this.world.worldX, -this.y - this.world.worldY)),
             (this.thisTick = ++this.thisTick % Math.floor((12 * m.Instance.get_fps()) / 25)),
             0 != this.thisTick || 0 != this.ifWater())
           ) {
             if (this.game.isFullWater(this.x, this.y))
               if ("magma" == this.world.getFG(this.x, this.y - 1) || ("wr" == this.world.getFG(this.x, this.y - 1) && -1 == this.world.states.h["blockX" + this.x + "Y" + (this.y - 1)])) {
                 if (((this.world.states.h["blockX" + this.x + "Y" + this.y] = -1), 0.2 > Math.random())) {
                   b = new h(this.x + 0.25, 0.5);
                   a = new h(-this.y - 0.5, 1);
                   var c = new e();
                   c.h.bubble = "down";
                   this.game.addParticles("water", 1, 0, b, a, !0, c);
                 }
               } else
                 "ssd" == this.world.getFG(this.x, this.y - 1) || ("wr" == this.world.getFG(this.x, this.y - 1) && 1 == this.world.states.h["blockX" + this.x + "Y" + (this.y - 1)])
                   ? ((this.world.states.h["blockX" + this.x + "Y" + this.y] = 1),
                     0.2 > Math.random() && ((b = new h(this.x + 0.25, 0.5)), (a = new h(-this.y - 0.5, 1)), (c = new e()), (c.h.bubble = "up"), this.game.addParticles("water", 1, 0, b, a, !0, c)))
                   : 1 == Object.prototype.hasOwnProperty.call(this.world.states.h, "blockX" + this.x + "Y" + this.y) &&
                     ((b = "blockX" + this.x + "Y" + this.y), (a = this.world.states), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
             if ("la" == this.world.getFG(this.x - 1, this.y) || "ad" == this.world.getFG(this.x - 1, this.y))
               this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
                 "la" == this.world.getFG(this.x - 1, this.y) && this.game.isFullWater(this.x - 1, this.y)
                   ? (this.game.requestRemove(this.x - 1, this.y, !0, !1), this.world.setFG(this.x - 1, this.y, "ob"))
                   : (this.game.requestRemove(this.x - 1, this.y, !0, !1), this.world.setFG(this.x - 1, this.y, "cs"));
             if ("la" == this.world.getFG(this.x + 1, this.y) || "ad" == this.world.getFG(this.x + 1, this.y))
               this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
                 "la" == this.world.getFG(this.x + 1, this.y) && this.game.isFullWater(this.x + 1, this.y)
                   ? (this.game.requestRemove(this.x + 1, this.y, !0, !1), this.world.setFG(this.x + 1, this.y, "ob"))
                   : (this.game.requestRemove(this.x + 1, this.y, !0, !1), this.world.setFG(this.x + 1, this.y, "cs"));
             if ("la" == this.world.getFG(this.x, this.y + 1) || "ad" == this.world.getFG(this.x, this.y + 1))
               this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
                 "la" == this.world.getFG(this.x, this.y + 1) && this.game.isFullWater(this.x, this.y + 1)
                   ? (this.game.requestRemove(this.x, this.y + 1, !0, !1), this.world.setFG(this.x, this.y + 1, "ob"))
                   : (this.game.requestRemove(this.x, this.y + 1, !0, !1), this.world.setFG(this.x, this.y + 1, "cs"));
             if ("la" == this.world.getFG(this.x, this.y - 1) || "ad" == this.world.getFG(this.x, this.y - 1))
               this.game.requestSound("sizzle", this.x - this.world.worldX, -this.y - this.world.worldY),
                 "la" == this.world.getFG(this.x, this.y - 1) && this.game.isFullWater(this.x, this.y - 1)
                   ? (this.game.requestRemove(this.x, this.y - 1, !0, !1), this.world.setFG(this.x, this.y - 1, "ob"))
                   : (this.game.requestRemove(this.x, this.y - 1, !0, !1), this.world.setFG(this.x, this.y - 1, "cs"));
           }
         },
         ifWater: function () {
           null != this.renderer && H.__cast(this.renderer, Nc).setWater(this.world.water.h[this.blockID]);
           "wr" == this.world.getFG(this.x, this.y - 1) &&
             Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + this.x + "Y" + (this.y - 1)) &&
             (9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][0] || 9 > this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)][1]) &&
             (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]);
           if ("air" == this.world.getFG(this.x, this.y - 1) || 1 == q.get(this.world.getFG(this.x, this.y - 1), "waterWalkThroughBlock"))
             this.game.mineBlock(this.x, this.y - 1, !0, !1), (this.world.water.h["blockX" + this.x + "Y" + (this.y - 1)] = [9, 9]), this.world.setFG(this.x, this.y - 1, "wr");
           else if (10 != this.world.water.h[this.blockID][0] || 10 != this.world.water.h[this.blockID][1])
             if (9 != this.world.water.h[this.blockID][0] || 9 != this.world.water.h[this.blockID][1])
               if (this.world.water.h[this.blockID][0] > this.world.water.h[this.blockID][1]) {
                 if (
                   Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x - 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y][1] : -1, 9) !=
                   Math.min(this.world.water.h[this.blockID][0], 9)
                 ) {
                   var b = this.blockID,
                     a = this.world.water;
                   Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
                   this.game.requestRemove(this.x, this.y, !0, null, !0);
                   return !1;
                 }
               } else if (this.world.water.h[this.blockID][0] < this.world.water.h[this.blockID][1]) {
                 if (
                   Math.min(Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x + 1) + "Y" + this.y) ? this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y][0] : -1, 9) !=
                   Math.min(this.world.water.h[this.blockID][1], 9)
                 )
                   return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
               } else return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
             else {
               if ("wr" != this.world.getFG(this.x, this.y + 1)) return (b = this.blockID), (a = this.world.water), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b], this.game.requestRemove(this.x, this.y, !0, null, !0), !1;
             }
           else
             ("air" == this.world.getFG(this.x - 1, this.y) || ("wr" == this.world.getFG(this.x - 1, this.y) && !this.game.isFullWater(this.x - 1, this.y))) &&
               "wr" == this.world.getFG(this.x - 2, this.y) &&
               Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x - 2) + "Y" + this.y) &&
               10 == this.world.water.h["blockX" + (this.x - 2) + "Y" + this.y][0] &&
               ((this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y] = [10, 10]), this.world.setFG(this.x - 1, this.y, "wr")),
               ("air" == this.world.getFG(this.x + 1, this.y) || ("wr" == this.world.getFG(this.x + 1, this.y) && !this.game.isFullWater(this.x + 1, this.y))) &&
                 "wr" == this.world.getFG(this.x + 2, this.y) &&
                 Object.prototype.hasOwnProperty.call(this.world.water.h, "blockX" + (this.x + 2) + "Y" + this.y) &&
                 10 == this.world.water.h["blockX" + (this.x + 2) + "Y" + this.y][0] &&
                 ((this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y] = [10, 10]), this.world.setFG(this.x + 1, this.y, "wr"));
           1 != q.get(this.world.getFG(this.x, this.y - 1), "liquid") &&
             ((1 == q.get(this.world.getFG(this.x - 1, this.y), "waterWalkThroughBlock") ||
               ("wr" == this.world.getFG(this.x - 1, this.y) && Math.min(this.game.getWater(this.x - 1, this.y)[0], 9) < Math.min(this.world.water.h[this.blockID][0], 9) - 1)) &&
               3 <= this.world.water.h[this.blockID][0] - 1 &&
               this.world.water.h[this.blockID][0] <= this.world.water.h[this.blockID][1] &&
               (this.game.mineBlock(this.x - 1, this.y, !0, !1),
               (this.world.water.h["blockX" + (this.x - 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][0], 9) - 1), Math.floor(Math.min(this.world.water.h[this.blockID][0], 9))]),
               this.world.setFG(this.x - 1, this.y, "wr")),
             (1 == q.get(this.world.getFG(this.x + 1, this.y), "waterWalkThroughBlock") ||
               ("wr" == this.world.getFG(this.x + 1, this.y) && Math.min(this.game.getWater(this.x + 1, this.y)[1], 9) < Math.min(this.world.water.h[this.blockID][1], 9) - 1)) &&
               3 <= this.world.water.h[this.blockID][1] - 1 &&
               this.world.water.h[this.blockID][0] >= this.world.water.h[this.blockID][1] &&
               (this.game.mineBlock(this.x + 1, this.y, !0, !1),
               (this.world.water.h["blockX" + (this.x + 1) + "Y" + this.y] = [Math.floor(Math.min(this.world.water.h[this.blockID][1], 9)), Math.floor(Math.min(this.world.water.h[this.blockID][1], 9) - 1)]),
               this.world.setFG(this.x + 1, this.y, "wr")));
           return !0;
         },
         inter: function () {
           this.thisTick = 1;
         },
         __class__: Tc,
       });
       var pa = function (b, a, c, d, f, e) {
         this.quadPositions = [];
         this.entityPoolID = this.entityType = b;
         this.containerObject = a;
         this.id = c;
         this.data = d;
         this.game = f;
         this.world = e;
         this.init();
       };
       r["entities.Entity_Base"] = pa;
       pa.__name__ = "entities.Entity_Base";
       pa.prototype = {
         init: function () {},
         run: function () {},
         render: function (b) {
           null == b && (b = 0);
           if (null == this.entity) {
             if (null == this.game.entityPools.h[this.entityPoolID]) {
               var a = this.game.entityPools,
                 c = this.entityPoolID,
                 d = this.entityPoolID,
                 f = y.blockTextures,
                 l = Fa.getShader(xa.NORMAL),
                 k = new e(),
                 g = w.repeatArray([1], 24);
               k.h.color = g;
               g = w.repeatArray([0], 24);
               k.h.colorOffset = g;
               k = new Ca(d, new da(f, null, l, k), this.getEntityScale());
               a.h[c] = k;
               this.game.entityPools.h[this.entityPoolID].entity.isTransparent = !0;
               this.game.entityPools.h[this.entityPoolID].entity.layer = 0;
             }
             this.entity = this.game.entityPools.h[this.entityPoolID].entity;
           }
           if (0 == this.quadPositions.length && 0 < b)
             for (a = this.game.entityPools.h[this.entityPoolID].entity.nearestConsecutiveEmpty(b), k = 0; k < b; ) (c = k++), this.quadPositions.push(a + c), this.entity.updateQuad(a + c, null, null, new h());
         },
         destroy: function () {
           if (null != this.game.entityPools.h[this.entityPoolID]) {
             for (var b = 0, a = this.quadPositions; b < a.length; ) this.game.entityPools.h[this.entityPoolID].entity.removeQuad(a[b++]);
             this.quadPositions = [];
           }
         },
         remove: function () {
           var b = this.id,
             a = this.world.onFire;
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
           this.destroy();
           null != this.containerObject && ((b = this.id), (a = this.containerObject), Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b]);
           b = this.id;
           a = this.world.entities;
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
         },
         onScreen: function (b, a) {
           null == b && (b = 2);
           b *= 1;
           return !(
             (this.get_x() - this.game.camera.x + b) * this.game.zoom < -this.game.scene.get_width() / 2 ||
             (this.get_x() - this.game.camera.x - b) * this.game.zoom > this.game.scene.get_width() / 2 ||
             (this.get_y() - this.game.camera.y + b) * this.game.zoom < -this.game.scene.get_height() / 2 ||
             (this.get_y() - this.game.camera.y - b) * this.game.zoom > this.game.scene.get_height() / 2
           );
         },
         getEntityScale: function () {
           return 1;
         },
         get_x: function () {
           return 0;
         },
         get_y: function () {
           return 0;
         },
         __class__: pa,
       };
       var kg = function (b, a, c, d, f, e) {
         this.balloonMatrix = new T();
         this.entityMatrix = new T();
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Balloon"] = kg;
       kg.__name__ = "entities.Entity_Balloon";
       kg.__super__ = pa;
       kg.prototype = v(pa.prototype, {
         init: function () {
           if (null != this.get_type() && "ghast" != this.get_type()) {
             var b = V.colors,
               a = this.get_type();
             if (Object.prototype.hasOwnProperty.call(b.h, a)) {
               var c = new F();
               b = V.colors;
               a = this.get_type();
               var d = b.h[a].h.r;
               b = V.colors;
               a = this.get_type();
               var f = b.h[a].h.g;
               b = V.colors;
               a = this.get_type();
               this.color = c.fromRGB(d, f, b.h[a].h.b);
             }
           }
         },
         run: function () {
           this.onScreen(5);
           if (null != this.get_inventory()) {
             if (this.get_inventory().h.slot != this.world.selectedInventoryItem || "bl" != this.world.get_selectedInventoryItemType() || q.get("bl", "life") - this.world.inventoryList[this.get_inventory().h.slot][2] < this.get_life())
               var b = !0;
             else {
               var a = this.get_type(),
                 c = this.world.get_selectedInventoryItemExtra();
               b = a != (Object.prototype.hasOwnProperty.call(c.h, "type") ? this.world.get_selectedInventoryItemExtra().h.type : "white");
             }
             if (b) {
               this.remove();
               return;
             }
           }
           a = new h(0, 0);
           if (null != this.get_attached() && "Object" == O.getQualifiedClassName(this.get_attached())) {
             if (this.get_attached().h.id == this.world.player.id) this.set_stringX(this.world.worldX - 0.26666666666666666 * this.game.characterXScale), this.set_stringY(this.world.worldY - 0.8666666666666667);
             else if ("mob" == this.get_attached().h.type) {
               c = this.world.mobs;
               var d = this.get_attached().h.id;
               if (null != c.h[d]) {
                 c = this.world.mobs;
                 d = this.get_attached().h.id;
                 b = H.__cast(H.__cast(c.h[d], e).h.x, pg);
                 c = this.world.mobs;
                 d = this.get_attached().h.id;
                 var f = H.__cast(H.__cast(c.h[d], e).h.speedX, pg);
                 c = this.world.mobs;
                 d = this.get_attached().h.id;
                 this.set_stringX(b + (f + (0 < H.__cast(H.__cast(c.h[d], e).h.direction, bi) ? 10 : -10)) / 30);
                 c = this.world.mobs;
                 d = this.get_attached().h.id;
                 b = H.__cast(H.__cast(c.h[d], e).h.y, pg);
                 c = this.world.mobs;
                 d = this.get_attached().h.id;
                 this.set_stringY(b + H.__cast(H.__cast(c.h[d], e).h.speedY, pg) / 30 - 1);
               } else this.set_attached(null);
             } else
               "block" == this.get_attached().h.type &&
                 ("fnc" == this.world.getFG(this.get_attached().h.x, this.get_attached().h.y) || "nfnc" == this.world.getFG(this.get_attached().h.x, this.get_attached().h.y)
                   ? (this.set_stringX((30 * this.get_attached().h.x + 15) / 30), this.set_stringY((30 * -this.get_attached().h.y - 30) / 30))
                   : this.set_attached(null));
             this.set_flightTimer(0);
             c = Math.atan2(this.get_y() - this.get_stringY(), this.get_x() - this.get_stringX());
             b = Math.sqrt(Math.pow(this.get_x() - this.get_stringX(), 2) + Math.pow(this.get_y() - this.get_stringY(), 2));
             4 < b &&
               (this.set_speedX(this.get_speedX() + g.migrateAcc((this.get_stringX() + 4 * Math.cos(c) - this.get_x()) / 0.5, 0.9)),
               this.set_speedY(this.get_speedY() + g.migrateAcc((this.get_stringY() + 4 * Math.sin(c) - this.get_y()) / 0.5, 0.9)),
               (a.x += (this.get_stringX() + 4 * Math.cos(c) - this.get_x()) / 0.06666666666666667),
               (a.y += (this.get_stringY() + 4 * Math.sin(c) - this.get_y()) / 0.06666666666666667));
             if (8 < b) {
               null != this.get_inventory() && this.get_inventory().h.of == this.world.player.id && (this.world.inventoryList[this.get_inventory().h.slot] = g.emptyItem());
               this.set_attached(null);
               this.set_inventory(null);
               c = this.world.balloons;
               a = this.game.uniqueID(this.world.balloons, "balloon");
               c.h[a] = this.data;
               this.remove();
               return;
             }
           } else
             this.set_stringX(this.get_stringX() + (this.get_x() - this.get_stringX() + (4 * Math.sin(this.get_x() / (3 % Math.PI) + this.world.tick / ((10 * m.Instance.get_fps()) / 25))) / 30) / 20),
               this.set_stringY(this.get_stringY() + (this.get_y() + 3.5 - this.get_stringY()) / 5);
           this.set_speedX(this.get_speedX() * g.migrateDampening(0.9));
           this.set_speedY(this.get_speedY() * g.migrateDampening(0.9));
           this.set_speedY(this.get_speedY() - g.migrateAcc(0.4, 0.9));
           this.set_rotation(Math.atan2(this.get_y() + this.get_speedY() / 30 - (this.get_stringY() + 0.6666666666666666), this.get_x() + this.get_speedX() / 30 - this.get_stringX()));
           c = (Math.max(Math.abs(this.get_speedX() + a.x) / 5, Math.abs(this.get_speedY() + a.y) / 5) | 0) + 1;
           b = 0;
           for (d = !1; b < c; )
             this.game.collision(this.get_x() - 0.3333333333333333, this.get_y() - 0.23333333333333334, 0, 0.4666666666666667, 0.3333333333333333, !0, !0) && (0 > this.get_speedX() && this.set_speedX(0), 0 > a.x && (a.x = 0)),
               this.game.collision(this.get_x() + 0.3333333333333333, this.get_y() - 0.23333333333333334, 0, 0.4666666666666667, 0.3333333333333333, !0, !0) && (0 < this.get_speedX() && this.set_speedX(0), 0 < a.x && (a.x = 0)),
               this.game.collision(this.get_x() - 0.23333333333333334, this.get_y() - 0.3333333333333333, 0.4666666666666667, 0, 0.3333333333333333, !0, !0)
                 ? (this.set_flightTimer(0), 0 > this.get_speedY() && this.set_speedY(0), 0 > a.y && (a.y = 0))
                 : (d = !0),
               this.game.collision(this.get_x() - 0.23333333333333334, this.get_y() + 0.3333333333333333, 0.4666666666666667, 0, 0.3333333333333333, !0, !0) && (0 < this.get_speedY() && this.set_speedY(0), 0 < a.y && (a.y = 0)),
               this.set_x(this.get_x() + this.get_speedX() / c / 30),
               this.set_y(this.get_y() + this.get_speedY() / c / 30),
               this.set_x(this.get_x() + a.x / c / 30),
               this.set_y(this.get_y() + a.y / c / 30),
               ++b;
           d && this.set_flightTimer(this.get_flightTimer() + 1);
           null != this.get_inventory() && (this.world.inventoryList[this.get_inventory().h.slot][2] = q.get("bl", "life") - this.get_life());
           if (0 >= this.get_life() || (null != this.get_flightTimer() ? this.get_flightTimer() : 0) > 30 * m.Instance.get_fps()) {
             this.game.requestSound("balloon" + ((4 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
             null != this.get_inventory() && (this.world.inventoryList[this.get_inventory().h.slot] = g.emptyItem());
             if ("ghast" == this.get_type()) {
               b = this.game;
               a = new h(this.get_x() - 0.3333333333333333, 0.6666666666666666);
               var l = new h(this.get_y() - 0.3333333333333333, 0.6666666666666666),
                 k = new e();
               k.h.color = [V.colors.h.white.h.r, V.colors.h.white.h.g, V.colors.h.white.h.b];
             } else {
               b = this.game;
               a = new h(this.get_x() - 0.3333333333333333, 0.6666666666666666);
               l = new h(this.get_y() - 0.3333333333333333, 0.6666666666666666);
               k = new e();
               c = V.colors;
               d = this.get_type();
               f = c.h[d].h.r;
               c = V.colors;
               d = this.get_type();
               var C = c.h[d].h.g;
               c = V.colors;
               d = this.get_type();
               k.h.color = [f, C, c.h[d].h.b];
             }
             b.addParticles("mining", 0, 5, a, l, !1, k);
             this.remove();
           } else this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 5);
           this.entityMatrix
             .reset()
             .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
             .translate(Math.floor(this.get_x() * this.game.zoom) / this.game.zoom, Math.floor(this.get_y() * this.game.zoom) / this.game.zoom)
             .scale(this.game.zoom, this.game.zoom, this.game.zoom)
             .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
           if ("ghast" == this.get_type()) {
             for (b = 0; 4 > b; ) {
               var a = b++;
               this.balloonMatrix
                 .reset()
                 .translate(-0.03333333333333333, -0.03333333333333333)
                 .scale(2.88, 2.88)
                 .rotate(-(this.get_rotation() + Math.PI / 2) + ((10 * Math.sin(this.world.tick / ((15 * m.Instance.get_fps()) / 25) + (a + 1))) / 180) * Math.PI, new M(0, 0, -1))
                 .translate((-10.25 + 9.683333333333334 * a) / 30, 0.6166666666666667)
                 .rotate(this.get_rotation() + Math.PI / 2, new M(0, 0, -1))
                 .translate(this.get_x(), this.get_y());
               this.entity.updateQuad(
                 this.quadPositions[a],
                 null,
                 new h(y.getTexture("entity_balloon", "ghast_arm").x, y.getTexture("entity_balloon", "ghast_arm").y),
                 new h(y.getTexture("entity_balloon", "ghast_arm").width, y.getTexture("entity_balloon", "ghast_arm").height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, y.getTexture("entity_balloon", "ghast_arm").width / 30, y.getTexture("entity_balloon", "ghast_arm").height / 30), this.balloonMatrix)
               );
             }
             this.balloonMatrix
               .reset()
               .scale(2.687225, 2.687225)
               .translate(-0.575, -0.6266666666666667)
               .rotate(this.get_rotation() + Math.PI / 2, new M(0, 0, -1))
               .translate(this.get_x(), this.get_y());
             this.entity.updateQuad(
               this.quadPositions[4],
               null,
               new h(y.getTexture("entity_balloon", "ghast").x, y.getTexture("entity_balloon", "ghast").y),
               new h(y.getTexture("entity_balloon", "ghast").width, y.getTexture("entity_balloon", "ghast").height),
               null,
               ba.quadMatrixHelper(new t(0, 0, y.getTexture("entity_balloon", "ghast").width / 30, y.getTexture("entity_balloon", "ghast").height / 30), this.balloonMatrix)
             );
           } else {
             this.balloonMatrix
               .reset()
               .scale(2.4, 2.4)
               .translate(-0.56, -0.7200000000000001)
               .rotate(this.get_rotation() + Math.PI / 2, new M(0, 0, -1))
               .translate(this.get_x(), this.get_y());
             a = this.entity;
             var c = this.quadPositions[0],
               d = new h(y.getTexture("entity_balloon").x, y.getTexture("entity_balloon").y),
               f = new h(y.getTexture("entity_balloon").width, y.getTexture("entity_balloon").height),
               l = ba.quadMatrixHelper(new t(0, 0, y.getTexture("entity_balloon").width / 30, y.getTexture("entity_balloon").height / 30), this.balloonMatrix);
             b = new e();
             var k = w.repeatArray([G.toFloat(this.color.r) / G.toFloat(255), G.toFloat(this.color.g) / G.toFloat(255), G.toFloat(this.color.b) / G.toFloat(255), 1], 6);
             b.h.color = k;
             a.updateQuad(c, null, d, f, null, l, null, b);
           }
           b = this.entityMatrix.apply(new M());
           a = this.entityMatrix.apply(new M((this.get_stringX() - this.get_x()) / 2, this.get_stringY() + (this.get_y() - this.get_stringY()) / 4 - this.get_y(), 0));
           c = this.entityMatrix.apply(new M(this.get_stringX() - this.get_x(), this.get_stringY() - this.get_y(), 0));
           this.game.vectorRenderer.beginPath();
           this.game.vectorRenderer.lineStyle((this.game.zoom / 30) * 2, F.white);
           this.game.vectorRenderer.moveTo(b.x, b.y);
           this.game.vectorRenderer.curveTo(a.x, a.y, c.x, c.y);
           this.game.vectorRenderer.stroke();
           this.game.vectorRenderer.endPath();
         },
         getData: function (b) {
           return H.__cast(this.data, e).h[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, e).h[b] = a);
         },
         get_x: function () {
           return this.getData("x");
         },
         set_x: function (b) {
           return this.setData("x", b);
         },
         get_y: function () {
           return this.getData("y");
         },
         set_y: function (b) {
           return this.setData("y", b);
         },
         get_stringX: function () {
           return this.getData("stringX");
         },
         set_stringX: function (b) {
           return this.setData("stringX", b);
         },
         get_stringY: function () {
           return this.getData("stringY");
         },
         set_stringY: function (b) {
           return this.setData("stringY", b);
         },
         get_speedX: function () {
           return this.getData("speedX");
         },
         set_speedX: function (b) {
           return this.setData("speedX", b);
         },
         get_speedY: function () {
           return this.getData("speedY");
         },
         set_speedY: function (b) {
           return this.setData("speedY", b);
         },
         get_life: function () {
           return this.getData("life");
         },
         get_type: function () {
           return this.getData("type");
         },
         get_flightTimer: function () {
           return this.getData("flightTimer");
         },
         set_flightTimer: function (b) {
           return this.setData("flightTimer", b);
         },
         get_rotation: function () {
           return null != this.getData("rotation") ? this.getData("rotation") : 0;
         },
         set_rotation: function (b) {
           return this.setData("rotation", b);
         },
         get_attached: function () {
           return this.getData("attached");
         },
         set_attached: function (b) {
           return this.setData("attached", b);
         },
         get_inventory: function () {
           return this.getData("inventory");
         },
         set_inventory: function (b) {
           return this.setData("inventory", b);
         },
         __class__: kg,
       });
       var ue = function (b, a, c, d, f, l) {
         this._x = this._y = 0;
         this.bobberQuad = -1;
         this.entityMatrix = new T();
         this.handX = this.handY = 0;
         var k = new e();
         k.h.ty = "";
         k.h.count = 1;
         k.h.damage = 0;
         k.h.extras = new e();
         this.pickedItem = k;
         this.middleThing2 = new h(0, 0);
         this.middleThing = new h(0, 0);
         this.fishingCountdown = 0;
         this.fishing = !1;
         this.trackingPositiveScale = !0;
         this.trackingPos = new h(0, 0);
         this.tracking = "";
         this.reeling = !1;
         this.xSpeed = this.ySpeed = 0;
         this.throwSpeed = 15;
         this.visible = this.itemVisible = !1;
         pa.call(this, b, a, c, d, f, l);
       };
       r["entities.Entity_Bobber"] = ue;
       ue.__name__ = "entities.Entity_Bobber";
       ue.__super__ = pa;
       ue.prototype = v(pa.prototype, {
         init: function () {},
         throwIt: function () {
           if (this.visible) {
             if (!this.reeling)
               if (((this.reeling = !0), this.fishing && 0 >= this.fishingCountdown && -100 <= this.fishingCountdown)) {
                 this.game.damageTool();
                 var b = (100 * Math.random()) | 0,
                   a = 0,
                   c = this.world.get_selectedInventoryItemExtra();
                 Object.prototype.hasOwnProperty.call(c.h, "lure1")
                   ? (a = 1)
                   : ((c = this.world.get_selectedInventoryItemExtra()),
                     Object.prototype.hasOwnProperty.call(c.h, "lure2") ? (a = 2) : ((c = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(c.h, "lure3") && (a = 3)));
                 var d = 0;
                 c = this.world.get_selectedInventoryItemExtra();
                 Object.prototype.hasOwnProperty.call(c.h, "luckOfTheSea1")
                   ? (d = 1)
                   : ((c = this.world.get_selectedInventoryItemExtra()),
                     Object.prototype.hasOwnProperty.call(c.h, "luckOfTheSea2") ? (d = 2) : ((c = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(c.h, "luckOfTheSea3") && (d = 3)));
                 this.pickedItem.h.extras = new e();
                 this.pickedItem.h.damage = 0;
                 this.pickedItem.h.count = 1;
                 b < 85 - 3 * d + 2 * a
                   ? ((c = (100 * Math.random()) | 0),
                     60 > c ? (this.pickedItem.h.ty = "fi") : 85 > c ? (this.pickedItem.h.ty = "salmon") : 97 > c ? (this.pickedItem.h.ty = "puff") : 100 >= c && (this.pickedItem.h.ty = "clown"),
                     this.game.unlockAchieve(39))
                   : b < 95 - 2 * d + 0.5 * a
                   ? ((c = Math.floor(70 * Math.random())),
                     5 > c
                       ? (this.pickedItem.h.ty = "bowl")
                       : 10 > c
                       ? (this.pickedItem.h.ty = "leather")
                       : 15 > c
                       ? (this.pickedItem.h.ty = "LeatherShoes")
                       : 20 > c
                       ? (this.pickedItem.h.ty = "rf")
                       : 25 > c
                       ? (this.pickedItem.h.ty = "st")
                       : 30 > c
                       ? (this.pickedItem.h.ty = "fiber")
                       : 35 > c
                       ? ((this.pickedItem.h.ty = "potion"), (g.makeDynamicMap(this.pickedItem.h.extras).h.type = "water"))
                       : 40 > c
                       ? (this.pickedItem.h.ty = "bone")
                       : 43 > c
                       ? ((this.pickedItem.h.ty = "fr"), (c = this.pickedItem), (b = (q.get("fr", "life") * (0.4 * Math.random() + 0.5)) | 0), (c.h.damage = b))
                       : 47 > c
                       ? (this.pickedItem.h.ty = "dt")
                       : 52 > c
                       ? ((this.pickedItem.h.ty = "sw"), (c = this.pickedItem), (b = (3 * Math.random() + 1) | 0), (c.h.count = b))
                       : 56 > c
                       ? ((this.pickedItem.h.ty = "coral"), (this.pickedItem.h.count = 1))
                       : 61 > c
                       ? ((this.pickedItem.h.ty = "ink"), (this.pickedItem.h.count = 1))
                       : 66 > c
                       ? ((this.pickedItem.h.ty = "cy"), (this.pickedItem.h.count = 1))
                       : 70 > c && (this.pickedItem.h.ty = "sd"))
                   : 100 >= b &&
                     ((c = (10 * Math.random()) | 0),
                     2 > c
                       ? ((this.pickedItem.h.ty = "bow"),
                         (c = this.pickedItem),
                         (b = (q.get("bow", "life") * (0.5 * Math.random() + 0.4)) | 0),
                         (c.h.damage = b),
                         this.game.enchant("bow", this.pickedItem.h.extras, (10 * Math.random() + 20) | 0))
                       : 4 > c
                       ? ((this.pickedItem.h.ty = "fr"),
                         (c = this.pickedItem),
                         (b = (q.get("fr", "life") * (0.5 * Math.random() + 0.4)) | 0),
                         (c.h.damage = b),
                         this.game.enchant("fr", this.pickedItem.h.extras, (10 * Math.random() + 20) | 0))
                       : 5 > c
                       ? ((this.pickedItem.h.ty = "ebook"), this.game.enchant("ebook", this.pickedItem.h.extras, (10 * Math.random() + 20) | 0))
                       : 7 > c
                       ? (this.pickedItem.h.ty = "tag")
                       : 8 > c
                       ? (this.pickedItem.h.ty = "saddle")
                       : 10 >= c && (this.pickedItem.h.ty = "lp"));
                 this.game.dropXP(this.world.worldX, this.world.worldY, 3, 2);
                 this.itemVisible = !0;
               } else
                 "" != this.tracking &&
                   null != this.world.mobs.h[this.tracking] &&
                   ((c = Math.atan2(-(this.get_y() - (this.world.worldY - 1.5)), this.get_x() - this.world.worldX)),
                   (this.world.mobs.h[this.tracking].h.speedX = -g.migrateSpeed(30 * Math.cos(c))),
                   (this.world.mobs.h[this.tracking].h.speedY = -g.migrateSpeed(30 * Math.sin(c))),
                   (c = this.world.mobs.h[this.tracking]),
                   (c.h.y -= 0.16666666666666666));
           } else
             this.set_x(this.world.worldX),
               this.set_y(this.world.worldY - 1.5),
               (this.middleThing.x = this.middleThing2.x = 0),
               (this.middleThing.y = this.middleThing2.y = 0),
               (c = Math.atan2(this.game.mouseWorldPosition.y - (this.world.worldY - 1.5), this.game.mouseWorldPosition.x - this.world.worldX)),
               (this.xSpeed = g.migrateSpeed(Math.cos(c) * this.throwSpeed)),
               (this.ySpeed = g.migrateSpeed(Math.sin(c) * this.throwSpeed)),
               (this.reeling = !1),
               (this.tracking = ""),
               (this.fishing = !1),
               (this.visible = !0),
               (this.itemVisible = !1);
         },
         run: function () {
           this.onScreen(5);
           if ("fr" != this.world.get_selectedInventoryItemType()) (this.visible = !1), this.remove();
           else {
             if (this.reeling) {
               this.handX = this.world.worldX - this.get_x() + (8 * (0 > this.game.characterXScale ? 1 : -1)) / 30;
               this.handY = this.world.worldY - this.get_y() - 1.1;
               var b = Math.atan2(this.handY, this.handX),
                 a = g.migrateSpeed(Math.max(0.6666666666666666, Math.sqrt(this.handX * this.handX + this.handY * this.handY) / 3));
               this.set_x(this.get_x() + Math.cos(b) * a);
               this.set_y(this.get_y() + Math.sin(b) * a);
               this.handX = this.world.worldX - this.get_x() + (8 * (0 > this.game.characterXScale ? 1 : -1)) / 30;
               this.handY = this.world.worldY - this.get_y() - 1.1;
               "" != this.tracking &&
                 null != this.world.mobs.h[this.tracking] &&
                 1.5 > Math.abs(this.world.mobs.h[this.tracking].h.x - this.get_x()) &&
                 1.5 > Math.abs(this.world.mobs.h[this.tracking].h.y - 1.1 - this.get_y()) &&
                 ((this.world.mobs.h[this.tracking].h.speedX = g.migrateSpeed(15 * this.handX)), (this.world.mobs.h[this.tracking].h.speedY = -g.migrateSpeed(15 * this.handY)));
               if (3.3333333333333335 > this.handX * this.handX + this.handY * this.handY) {
                 this.itemVisible &&
                   ((b = this.game.addDrop(this.pickedItem.h.ty, this.get_x(), this.get_y(), this.pickedItem.h.count, this.pickedItem.h.damage, this.pickedItem.h.extras)),
                   null != this.world.entities.h[b] && ((H.__cast(this.world.entities.h[b], Pb).speedX = (this.handX / 8) * 30), (H.__cast(this.world.entities.h[b], Pb).speedY = (this.handY / 8) * 30)),
                   (this.itemVisible = !1));
                 this.visible = !1;
                 this.remove();
                 return;
               }
             } else if ("" != this.tracking && null != this.world.mobs.h[this.tracking])
               this.set_x(this.world.mobs.h[this.tracking].h.x - (this.trackingPositiveScale != 0 < this.world.mobs.h[this.tracking].h.direction ? -1 : 1) * this.trackingPos.x),
                 this.set_y(this.world.mobs.h[this.tracking].h.y - this.trackingPos.y);
             else {
               this.tracking = "";
               if (!this.fishing) {
                 b = Object.keys(this.world.mobs.h);
                 a = b.length;
                 for (var c = 0; c < a; ) {
                   var d = b[c++];
                   if (1 > Math.abs(this.world.mobs.h[d].h.x - this.get_x()) && 1 > Math.abs(this.world.mobs.h[d].h.y - 1 - this.get_y())) {
                     this.tracking = d;
                     this.trackingPositiveScale = 0 < this.world.mobs.h[d].h.direction;
                     var f = this.world.mobs.h[d].h.x,
                       e = this.get_x();
                     this.trackingPos.x = f - e;
                     d = this.world.mobs.h[d].h.y;
                     f = this.get_y();
                     this.trackingPos.y = d - f;
                   }
                 }
               }
               this.game.collision(this.get_x(), this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333)
                 ? (this.ySpeed = this.xSpeed = 0)
                 : (0 > this.world.xSpeed == 0 > this.xSpeed && (this.xSpeed -= this.world.xSpeed / 5),
                   q.get(this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y())), "liquid") || "sw" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))
                     ? ((this.ySpeed -= g.migrateAcc(0.5, 0.582)), (this.xSpeed *= g.migrateDampening(0.5)), (this.ySpeed *= g.migrateDampening(0.6)))
                     : (this.ySpeed += g.migrateAcc(0.5, 0.97)),
                   (this.xSpeed *= g.migrateDampening(0.99)),
                   (this.ySpeed *= g.migrateDampening(0.97)),
                   this.set_x(this.get_x() + this.xSpeed / 30),
                   this.set_y(this.get_y() + this.ySpeed / 30));
               "wr" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-(this.get_y() + 0.5))) || "sw" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-(this.get_y() + 0.5)))
                 ? this.fishing
                   ? (this.fishingCountdown--,
                     0 == this.fishingCountdown &&
                       (this.game.requestSound("splash", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY),
                       this.set_y(this.get_y() + 0.16666666666666666),
                       (this.ySpeed = g.migrateSpeed(-7)),
                       this.game.addParticles("water", 0, 5, new h(this.get_x(), 0), new h(this.get_y(), 0))))
                   : ((this.fishing = !0),
                     (b = 0),
                     (a = this.world.get_selectedInventoryItemExtra()),
                     Object.prototype.hasOwnProperty.call(a.h, "lure1")
                       ? (b = 1)
                       : ((a = this.world.get_selectedInventoryItemExtra()),
                         Object.prototype.hasOwnProperty.call(a.h, "lure2") ? (b = 2) : ((a = this.world.get_selectedInventoryItemExtra()), Object.prototype.hasOwnProperty.call(a.h, "lure3") && (b = 3))),
                     (this.fishingCountdown = ((4 + Math.random() * (20 - 4 * b)) * (0 < this.world.raining ? 0.8 : 1) * 50) | 0))
                 : 0 < this.fishingCountdown && (this.fishing = !1);
             }
             this.handX = this.world.worldX - this.get_x() + ((0 > this.game.characterXScale ? 1 : -1) * (3 == this.game.animate ? 40 : 8)) / 30;
             this.handY = this.world.worldY - this.get_y() - 1.1;
             400 < this.handX * this.handX + this.handY * this.handY
               ? ((this.visible = !1), this.remove())
               : ((this.middleThing2.x -= g.migrateSpeed(0.2 * (this.middleThing.x - 0.7 * this.handX))),
                 (this.middleThing2.y -= g.migrateSpeed(0.2 * (this.middleThing.y - Math.max(0.2 * this.handY, 0.8 * this.handY)))),
                 (this.middleThing2.x *= g.migrateDampening(0.9)),
                 (this.middleThing2.y *= g.migrateDampening(0.9)),
                 (this.middleThing.x += this.middleThing2.x),
                 (this.middleThing.y += this.middleThing2.y),
                 this.render());
           }
         },
         render: function (b) {
           if (null == this.game.entityPools.h[this.entityPoolID]) {
             b = this.game.entityPools;
             var a = this.entityPoolID,
               c = this.entityPoolID,
               d = y.blockTextures,
               f = Fa.getShader(),
               l = new e(),
               k = w.repeatArray([1], 24);
             l.h.color = k;
             k = w.repeatArray([0], 24);
             l.h.colorOffset = k;
             c = new Ca(c, new ja(d, null, f, l), this.getEntityScale());
             b.h[a] = c;
             this.game.entityPools.h[this.entityPoolID].entity.isTransparent = !0;
             this.game.entityPools.h[this.entityPoolID].entity.layer = 0;
           }
           pa.prototype.render.call(this);
           this.itemVisible
             ? (null == this.item &&
                 (-1 != this.bobberQuad && (this.entity.removeQuad(this.bobberQuad), (this.bobberQuad = -1)),
                 (this.item = new bb(this.entity, 0, 0, this.game, this.world, [this.pickedItem.h.ty, this.pickedItem.h.count, this.pickedItem.h.damage, this.pickedItem.h.extras]))),
               H.__cast(this.entity, ja)
                 .currentMatrix.reset()
                 .translate(-0.5, -0.5)
                 .scale2D(13.5 / this.game.zoom)
                 .translate(0, 0.3783333333333333)
                 .translate(this.get_x(), this.get_y()),
               this.item.render(),
               H.__cast(this.entity, ja).currentMatrix.reset())
             : null != this.item && null != this.item.renderer && 0 < this.item.renderer.quadPositions.length && this.item.destroy();
           -1 == this.bobberQuad &&
             ((this.bobberQuad = this.itemVisible
               ? this.entity.nearestConsecutiveEmpty(1, Math.max(this.item.enchantmentGlintQuad, this.item.renderer.quadPositions[this.item.renderer.quadPositions.length - 1]) | 0)
               : this.entity.nearestConsecutiveEmpty(1)),
             this.quadPositions.push(this.bobberQuad));
           this.entityMatrix.reset().translate(-0.06666666666666667, -0.16666666666666666).scale2D(1.5).translate(0, 0.14666666666666667).translate(this.get_x(), this.get_y());
           this.entity.updateQuad(
             this.bobberQuad,
             null,
             new h(y.getTexture("bobber").x, y.getTexture("bobber").y),
             new h(y.getTexture("bobber").width, y.getTexture("bobber").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, y.getTexture("bobber").width / 30, y.getTexture("bobber").height / 30), this.entityMatrix)
           );
           this.entityMatrix
             .reset()
             .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
             .translate(Math.floor(this.get_x() * this.game.zoom) / this.game.zoom, Math.floor(this.get_y() * this.game.zoom) / this.game.zoom)
             .scale(this.game.zoom, this.game.zoom, this.game.zoom)
             .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2);
           b = this.entityMatrix.apply(new M(this.handX, this.handY));
           a = this.entityMatrix.apply(new M(0, 0, 0));
           c = this.entityMatrix.apply(new M(this.middleThing.x, this.middleThing.y, 0));
           this.game.vectorRenderer.beginPath();
           this.game.vectorRenderer.lineStyle(this.game.zoom / 30, new F(-1));
           this.game.vectorRenderer.moveTo(b.x, b.y);
           this.game.vectorRenderer.curveTo(c.x, c.y, a.x, a.y);
           this.game.vectorRenderer.stroke();
           this.game.vectorRenderer.endPath();
         },
         destroy: function () {
           null != this.item && this.item.destroy();
           pa.prototype.destroy.call(this);
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: ue,
       });
       var ib = function (b, a, c, d, f, e) {
         this.entityMatrix = new T();
         this.currentFrame = 1;
         this.rotation = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Cart"] = ib;
       ib.__name__ = "entities.Entity_Cart";
       ib.__super__ = pa;
       ib.prototype = v(pa.prototype, {
         init: function () {
           pa.prototype.init.call(this);
         },
         run: function () {
           if (this.onScreen(5))
             if (
               (0 == this.world.tick % ((60 * m.Instance.get_fps()) / 25) && this.set_health(Math.min(this.get_health() + 1, 3) | 0),
               this.set_tilt(this.get_tilt() + g.migrateAcc(-this.rotation / 10, 0.93)),
               this.set_tilt(this.get_tilt() * g.migrateDampening(0.93)),
               (this.rotation += g.migrateSpeed(this.get_tilt())),
               0 != this.world.tick % 10 ||
                 ("la" != this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y())) &&
                   "ad" != this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y())) &&
                   "ct" != this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))) ||
                 this.set_health(0),
               0 >= this.get_health())
             ) {
               this.world.gamemode != U.gamemodes.h.CREATIVE && this.game.addDrop("cart" + this.get_type(), this.get_x(), this.get_y(), 1, null, null);
               if ("chest" == this.get_type() && null != this.world.chests.h[this.id]) {
                 for (var b = 0; 27 > b; ) {
                   var a = b++;
                   this.game.addDrop(this.world.chests.h[this.id][a][0], this.get_x(), this.get_y(), this.world.chests.h[this.id][a][1], this.world.chests.h[this.id][a][2], this.world.chests.h[this.id][a][3]);
                 }
                 b = this.id;
                 a = this.world.chests;
                 Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
               }
               this.remove();
             } else {
               b = this.cartRailAt(this.get_x(), this.get_y());
               this.set_onRail(b.h.direction);
               "railp" == b.h.type &&
                 (0 < this.world.states.h["blockX" + E.string(b.h.blockX) + "Y" + E.string(b.h.blockY)][1][0]
                   ? (this.set_speedX(Math.min(ib.maxCartSpeed, Math.max(-ib.maxCartSpeed, this.get_speedX() * g.migrateDampening(1.05)))),
                     this.set_speedY(Math.min(ib.maxCartSpeed, Math.max(-ib.maxCartSpeed, this.get_speedY() * g.migrateDampening(1.05)))))
                   : (this.set_speedX(this.get_speedX() * g.migrateDampening(0.7)),
                     this.set_speedY(this.get_speedY() * g.migrateDampening(0.7)),
                     Math.abs(this.get_speedX()) < g.migrateSpeed(0.13) && Math.abs(this.get_speedY()) < g.migrateSpeed(0.13) && this.set_speedX(this.set_speedY(0))));
               "raild" == b.h.type &&
                 null != this.world.getBlock(b.h.blockX, b.h.blockY, !1) &&
                 ((H.__cast(this.world.getBlock(b.h.blockX, b.h.blockY, !1), Ad).cartHere = !0), H.__cast(this.world.getBlock(b.h.blockX, b.h.blockY, !1), Ad).updateState());
               "raila" == b.h.type
                 ? 0 < this.world.states.h["blockX" + E.string(b.h.blockX) + "Y" + E.string(b.h.blockY)][1][0] &&
                   (0 == this.get_onActivator() &&
                     ("" == this.get_type()
                       ? this.world.riding == this.id && ((this.world.riding = ""), this.set_riddenBy(""), this.set_tilt(g.migrateSpeed(10)))
                       : "TNT" == this.get_type() && (this.set_fuse(4 * m.Instance.get_fps()), this.game.requestSound("fuse", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY))),
                   this.set_onActivator(!0))
                 : this.set_onActivator(!1);
               if ("TNT" == this.get_type() && null != this.get_fuse() && (this.set_fuse(this.get_fuse() - 1), 0 >= this.get_fuse())) {
                 this.game.explode(Math.floor(this.get_x()), Math.floor(-this.get_y()), 5, !1);
                 this.remove();
                 return;
               }
               if (0 == this.get_onRail())
                 if (this.game.collision(this.get_x() - 0.3333333333333333, this.get_y(), 0.6666666666666666, 0.03333333333333333, 0.16666666666666666, !1)) this.set_speedY(0), this.set_speedX(this.get_speedX() * g.migrateDampening(0.93));
                 else {
                   b = !1;
                   a = Object.keys(this.world.carts.h);
                   for (var c = a.length, d = 0; d < c; ) {
                     var f = a[d++];
                     if (
                       f != this.id &&
                       0.9333333333333333 > Math.abs(this.world.carts.h[f].h.x - this.get_x()) &&
                       Math.abs(this.world.carts.h[f].h.y - (g.migrateSpeed(30) + this.get_speedY()) / 30 - this.get_y()) < (g.migrateSpeed(5) + this.get_speedY()) / 30
                     ) {
                       this.set_y(this.world.carts.h[f].h.y - 0.8666666666666667);
                       this.set_speedX(this.get_speedX() * g.migrateDampening(0.8));
                       this.set_speedY(0);
                       b = !0;
                       break;
                     }
                   }
                   b || this.set_speedY(Math.min(2 * ib.maxCartSpeed, this.get_speedY() + g.migrateAcc(0.5, 0.99)));
                 }
               this.cartMove(this.id);
               this.set_speedX(this.get_speedX() * g.migrateDampening(0.99));
               this.set_speedY(this.get_speedY() * g.migrateDampening(0.99));
               "" == this.get_type() && this.get_riddenBy() == this.world.player.id
                 ? this.world.riding != this.id
                   ? this.set_riddenBy("")
                   : ((this.world.worldX = this.get_x()),
                     (b = this.get_y()),
                     (this.world.worldY = b + 0.3333333333333333),
                     this.game.resetCamera(),
                     this.game.rightKey && this.set_speedX(Math.min(ib.maxCartSpeed, this.get_speedX() + g.migrateAcc(0.07, 0.99))),
                     this.game.leftKey && this.set_speedX(Math.max(-ib.maxCartSpeed, this.get_speedX() - g.migrateAcc(0.07, 0.99))),
                     this.game.upKey && ((this.world.ySpeed = this.get_speedY()), (b = this.get_speedX()), (this.world.xSpeed = 0.7 * b), (this.world.riding = ""), this.set_riddenBy("")))
                 : (null != this.get_fuel() &&
                     (0 >= this.get_fuel() || null == this.get_direction()
                       ? null == this.get_direction() && this.set_direction(0 < this.get_speedX() ? 1 : -1)
                       : Math.abs(this.get_speedX()) < g.migrateSpeed(3) &&
                         (0.2 > Math.random() && this.game.addParticles("smoke", 1, 0, new h(this.get_x(), 0), new h(this.get_y() - 0.8333333333333334, 0)),
                         this.set_speedX(this.get_speedX() + g.migrateAcc(0.4 * this.get_direction(), 0.99)),
                         0 == this.world.tick % (3 * m.Instance.get_fps()) && this.set_fuel(this.get_fuel() - 1))),
                   this.world.gamemode != U.gamemodes.h.SPECTATOR &&
                     0.6666666666666666 > Math.abs(this.world.worldX - this.get_x()) &&
                     0.6666666666666666 > Math.abs(this.world.worldY - this.get_y()) &&
                     0 != this.world.worldX - this.get_x() &&
                     0 == this.game.sneaking &&
                     (this.set_speedX(Math.min(ib.maxCartSpeed, Math.max(-ib.maxCartSpeed, this.get_speedX() - g.migrateAcc(Math.min(2, Math.max(-2, 0.03333333333333333 / (this.world.worldX - this.get_x()))), 0.99)))),
                     this.set_direction(0 < this.get_speedX() ? 1 : -1)),
                   this.world.riding == this.id && (this.world.riding = ""));
               this.render();
             }
         },
         cartMove: function (b) {
           var a = Math.ceil(Math.max(1, Math.abs(this.get_speedX() / 3)));
           if (0 == a) {
             var c = this.cartRailAt(this.get_x(), this.get_y());
             1 == this.get_onRail()
               ? (this.set_y(-c.h.blockY - 0.1), this.set_speedY(0))
               : 2 == this.get_onRail()
               ? (this.set_y(-c.h.blockY - (1 - w.modulus(this.get_x(), 1)) - 0.1), this.set_speedX(Math.min(ib.maxCartSpeed, this.get_speedX() + g.migrateAcc(0.1, 0.99))), this.set_speedY(this.get_speedX()))
               : 3 == this.get_onRail()
               ? (this.set_y(-c.h.blockY - w.modulus(this.get_x(), 1) - 0.1), this.set_speedX(Math.max(-ib.maxCartSpeed, this.get_speedX() - g.migrateAcc(0.1, 0.99))), this.set_speedY(-this.get_speedX()))
               : this.set_y(this.get_y() + this.get_speedY());
           } else {
             for (var d = this.get_speedX() / a, f = 0; f < a; ) {
               ++f;
               this.set_x(this.get_x() + d / 30);
               c = this.cartRailAt(this.get_x(), this.get_y());
               this.set_onRail(c.h.direction);
               if (0 > this.get_speedX() && this.game.collision(this.get_x() - 0.4666666666666667, this.get_y() - 0.6, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)) {
                 this.set_x(this.get_x() - d / 30);
                 this.set_speedX(-0.6 * this.get_speedX());
                 break;
               } else if (0 < this.get_speedX() && this.game.collision(this.get_x() + 0.4666666666666667, this.get_y() - 0.6, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)) {
                 this.set_x(this.get_x() - d / 30);
                 this.set_speedX(-0.6 * this.get_speedX());
                 break;
               }
               if (0 != c.h.direction) {
                 var e = this.cartCollision(b);
                 if ("" != e) {
                   this.set_x(this.get_x() - d / 30);
                   b = this.get_speedX();
                   a = this.world.carts.h[e].h.speedX;
                   this.set_speedX(0.8 * a + 0.2 * b);
                   this.world.carts.h[e].h.speedX = 0.8 * b + 0.2 * a;
                   c = this.cartRailAt(this.get_x(), this.get_y());
                   this.set_onRail(c.h.direction);
                   1 == this.get_onRail()
                     ? (this.set_y(-c.h.blockY - 0.1), this.set_speedY(0))
                     : 2 == this.get_onRail()
                     ? (this.set_y(-c.h.blockY - (1 - w.modulus(this.get_x(), 1)) - 0.1), this.set_speedY(this.get_speedX()))
                     : 3 == this.get_onRail() && (this.set_y(-c.h.blockY - w.modulus(this.get_x(), 1) - 0.1), this.set_speedY(-this.get_speedX()));
                   break;
                 }
               }
               1 == this.get_onRail()
                 ? (this.set_y(-c.h.blockY - 0.1), this.set_speedY(0))
                 : 2 == this.get_onRail()
                 ? (this.set_y(-c.h.blockY - (1 - w.modulus(this.get_x(), 1)) - 0.1), this.set_speedY(this.get_speedX()))
                 : 3 == this.get_onRail()
                 ? (this.set_y(-c.h.blockY - w.modulus(this.get_x(), 1) - 0.1), this.set_speedY(-this.get_speedX()))
                 : this.set_y(this.get_y() + this.get_speedY() / 30 / a);
             }
             2 == this.get_onRail()
               ? (this.set_speedX(Math.min(ib.maxCartSpeed, this.get_speedX() + g.migrateAcc(0.1, 0.99))), this.set_speedY(this.get_speedX()))
               : 3 == this.get_onRail() && (this.set_speedX(Math.max(-ib.maxCartSpeed, this.get_speedX() - g.migrateAcc(0.1, 0.99))), this.set_speedY(-this.get_speedX()));
           }
         },
         cartCollision: function (b) {
           for (var a = Object.keys(this.world.carts.h), c = a.length, d = 0; d < c; ) {
             var f = a[d++];
             if (f != b) {
               var e = this.world.carts.h[f];
               if (
                 1.0666666666666667 > Math.abs(e.h.x - this.get_x()) &&
                 Math.abs(e.h.y - this.get_y()) < (24 - (1 == this.get_onRail() ? 8 : 0)) / 30 &&
                 0 < e.h.x - this.get_x() == 0 < this.get_speedX() - e.h.speedX &&
                 0 < this.get_speedX() == this.get_x() < e.h.x
               )
                 return f;
             }
           }
           return "";
         },
         cartRailAt: function (b, a) {
           a += 0.1;
           var c = 0,
             d = "";
           b = Math.floor(b);
           for (var f = 0, l = 0; 3 > l; )
             if (((f = Math.floor(-(a + (6 * (l++ - 1)) / 30))), (d = this.world.getFG(b, f)), "rail" == I.substr(d, 0, 4))) {
               c = this.world.states.h["blockX" + b + "Y" + f][0];
               break;
             }
           l = new e();
           l.h.direction = c;
           l.h.type = d;
           l.h.blockX = b;
           l.h.blockY = f;
           return l;
         },
         render: function (b) {
           pa.prototype.render.call(this, 2);
           0 == this.get_onRail()
             ? (this.currentFrame = 1)
             : 1 <= this.get_onRail() &&
               3 >= this.get_onRail() &&
               (1 == this.currentFrame || this.get_speedX() * this.get_speedX() + this.get_speedY() * this.get_speedY() > g.migrateSpeed(0.22) * g.migrateSpeed(0.22) || 0 == this.world.tick % m.Instance.get_fps()) &&
               (this.currentFrame = this.get_onRail());
           "TNT" == this.get_type() || "chest" == this.get_type() || "oven" == this.get_type()
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale2D(1.818916875)
                 .translate(0, -0.38999999999999996)
                 .rotate2D((-(this.rotation + (1 == this.currentFrame ? 0 : 2 == this.currentFrame ? 45 : -45)) / 180) * Math.PI)
                 .translate((1 == this.currentFrame ? 0 : 2 == this.currentFrame ? 6.4 : -6.4) / 30, -0.42)
                 .translate(Math.floor(this.get_x() * this.game.zoom) / this.game.zoom, Math.floor(this.get_y() * this.game.zoom) / this.game.zoom),
               (b = y.getTexture(q.get("cart" + this.get_type(), "secondaryTextureID"))),
               this.entity.updateQuad(this.quadPositions[0], null, new h(b.x, b.y), new h(b.width, b.height), null, ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)))
             : this.entity.updateQuad(this.quadPositions[0], null, new h(), new h());
           this.entityMatrix
             .reset()
             .translate(-0.5333333333333333, -0.3333333333333333)
             .scale2D(1.821747)
             .rotate2D((-(this.rotation + (1 == this.currentFrame ? 0 : 2 == this.currentFrame ? 45 : -45)) / 180) * Math.PI)
             .translate((1 == this.currentFrame ? 0 : 2 == this.currentFrame ? 6.4 : -6.4) / 30, -0.42)
             .translate(Math.floor(this.get_x() * this.game.zoom) / this.game.zoom, Math.floor(this.get_y() * this.game.zoom) / this.game.zoom);
           b = y.getTexture("minecart");
           this.entity.updateQuad(this.quadPositions[1], null, new h(b.x, b.y), new h(b.width, b.height), null, ba.quadMatrixHelper(new t(0, 0, 1.0666666666666667, 0.5333333333333333), this.entityMatrix));
         },
         getData: function (b) {
           return H.__cast(this.data, e).h[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, e).h[b] = a);
         },
         get_x: function () {
           return this.getData("x");
         },
         set_x: function (b) {
           return this.setData("x", b);
         },
         get_y: function () {
           return this.getData("y");
         },
         set_y: function (b) {
           return this.setData("y", b);
         },
         get_speedX: function () {
           return this.getData("speedX");
         },
         set_speedX: function (b) {
           return this.setData("speedX", b);
         },
         get_speedY: function () {
           return this.getData("speedY");
         },
         set_speedY: function (b) {
           return this.setData("speedY", b);
         },
         get_riddenBy: function () {
           return this.getData("riddenBy");
         },
         set_riddenBy: function (b) {
           return this.setData("riddenBy", b);
         },
         get_onActivator: function () {
           return this.getData("onActivator");
         },
         set_onActivator: function (b) {
           return this.setData("onActivator", b);
         },
         get_type: function () {
           return this.getData("type");
         },
         get_health: function () {
           return this.getData("health");
         },
         set_health: function (b) {
           return this.setData("health", b);
         },
         get_tilt: function () {
           return this.getData("tilt");
         },
         set_tilt: function (b) {
           return this.setData("tilt", b);
         },
         get_onRail: function () {
           return this.getData("onRail");
         },
         set_onRail: function (b) {
           return this.setData("onRail", b);
         },
         get_fuse: function () {
           return this.getData("fuse");
         },
         set_fuse: function (b) {
           return this.setData("fuse", b);
         },
         get_fuel: function () {
           return this.getData("fuel");
         },
         set_fuel: function (b) {
           return this.setData("fuel", b);
         },
         get_direction: function () {
           return this.getData("direction");
         },
         set_direction: function (b) {
           return this.setData("direction", b);
         },
         __class__: ib,
       });
       var Pb = function (b, a, c, d, f, e) {
         this.wasOnScreen = !1;
         this.firstFrame = !0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Drop"] = Pb;
       Pb.__name__ = "entities.Entity_Drop";
       Pb.__super__ = pa;
       Pb.prototype = v(pa.prototype, {
         init: function () {
           this.bobTick = Math.floor(100 * Math.random());
         },
         run: function () {
           if (this.onScreen(1)) this.render(), (this.wasOnScreen = !0);
           else if ((this.wasOnScreen && ((this.wasOnScreen = !1), this.item.destroy()), !this.onScreen(20))) return;
           if (0 == w.modulus(this.world.tick, m.Instance.get_fps()) && (this.set_life(this.get_life() + 1), 300 < this.get_life())) {
             this.remove();
             return;
           }
           this.firstFrame && (this.firstFrame = !1);
           this.bobTick++;
           var b = this.speedY;
           isNaN(b) ? (b = !0) : ((b = this.speedX), (b = isNaN(b)));
           b && (this.speedX = this.speedY = 0);
           this.set_x(this.get_x() + this.speedX / 30);
           this.set_y(this.get_y() + this.speedY / 30);
           this.speedX *= g.migrateDampening(0.8);
           this.speedY *= g.migrateDampening(0.9);
           b = Math.floor(this.get_x());
           var a = Math.floor(-this.get_y());
           if (null == this.get_ty()) this.remove();
           else if ("Dragon" == I.substr(this.get_ty(), 0, 6) || "degg" == this.get_ty() || ("la" != this.world.getFG(b, a) && "ad" != this.world.getFG(b, a) && "fire" != this.world.getFG(b, a))) {
             var c = !1;
             1 == q.get(this.world.getFG(b, Math.floor(-this.get_y() - 0.16666666666666666)), "walkThroughBlockHit")
               ? ((c = !0), (this.speedY += g.migrateAcc(1, 0.9)))
               : 4 < this.speedY && "slimeb" == this.world.getFG(b, Math.floor(-this.get_y() - 0.16666666666666666))
               ? (this.speedY = -this.speedY)
               : (this.speedX = this.speedY = 0);
             var d = "blockX" + b + "Y" + a;
             Object.prototype.hasOwnProperty.call(this.world.water.h, d) &&
               (this.world.water.h[d][0] > this.world.water.h[d][1] ? (this.speedX += g.migrateAcc(1, 0.8)) : this.world.water.h[d][0] < this.world.water.h[d][1] && (this.speedX -= g.migrateAcc(1, 0.8)),
               1 == this.world.states.h[d] ? (this.speedY -= g.migrateAcc(3, 0.9)) : -1 == this.world.states.h[d] && c && (this.speedY += g.migrateAcc(1, 0.9)));
             if (1 != q.get(this.world.getFG(b, a), "walkThroughBlockHit")) {
               b = 0;
               a = !1;
               for (c = 5; 300 > c; ) {
                 for (b = 0; b < 2 * Math.PI; ) {
                   if (1 == q.get(this.world.getFG(Math.floor(this.get_x() + (Math.cos(b + Math.PI / 2) * c) / 30), Math.floor(-this.get_y() - (Math.sin(b + Math.PI / 2) * c) / 30)), "walkThroughBlockHit")) {
                     a = !0;
                     break;
                   }
                   b += Math.PI / 8;
                 }
                 if (a) break;
                 c += Math.floor(5 * (1 + c / 30));
               }
               a && (this.set_x(this.get_x() + (5 * Math.cos(b + Math.PI / 2)) / 30), this.set_y(this.get_y() + (5 * Math.sin(b + Math.PI / 2)) / 30));
             }
             this.world.gamemode != U.gamemodes.h.SPECTATOR &&
               1.5 > Math.abs(this.world.worldX - this.get_x()) &&
               1.5 > Math.abs(this.world.worldY - 1 - this.get_y()) &&
               ((b = this.game.addToInventory(this.get_ty(), this.get_quantity(), this.get_damage(), this.get_extra())),
               0 < b && (this.game.requestSound("pop", 0, 0), this.set_quantity(this.get_quantity() - b)),
               0 == this.get_quantity() && this.remove());
           } else this.game.requestSound("sizzle", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.remove();
         },
         getEntityScale: function () {
           return Pb.DROP_SCALE;
         },
         render: function (b) {
           pa.prototype.render.call(this, 0);
           null == this.item && (this.item = new bb(this.entity, this.get_x(), this.get_y(), this.game, this.world, [this.get_ty(), this.get_quantity(), this.get_damage(), this.get_extra()]));
           this.item.set_x(this.get_x() / Pb.DROP_SCALE - 0.5);
           this.item.set_y((this.get_y() - (4 * Math.sin(this.bobTick / ((10 * m.Instance.get_fps()) / 25)) + 9) / 30) / Pb.DROP_SCALE - 0.5);
           this.item.render();
         },
         remove: function () {
           null != this.item && this.item.destroy();
           pa.prototype.remove.call(this);
         },
         getData: function (b) {
           return H.__cast(this.data, Array)[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, Array)[b] = a);
         },
         get_x: function () {
           return this.getData(0);
         },
         set_x: function (b) {
           return this.setData(0, b);
         },
         get_y: function () {
           return this.getData(1);
         },
         set_y: function (b) {
           return this.setData(1, b);
         },
         get_ty: function () {
           return this.getData(2);
         },
         get_life: function () {
           return this.getData(3);
         },
         set_life: function (b) {
           return this.setData(3, b);
         },
         get_damage: function () {
           return this.getData(4);
         },
         get_quantity: function () {
           return this.getData(5);
         },
         set_quantity: function (b) {
           return this.setData(5, b);
         },
         get_extra: function () {
           return this.getData(6);
         },
         __class__: Pb,
       });
       var Bc = function (b, a, c, d, f, e) {
         this.randomFireTexture = "1";
         this.entityMatrix = new T();
         this.hVisible = !1;
         this.hAlpha = this.hWidth = this.hRotation = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_EHC"] = Bc;
       Bc.__name__ = "entities.Entity_EHC";
       Bc.__super__ = pa;
       Bc.prototype = v(pa.prototype, {
         run: function () {
           this.onScreen(2);
           0 < this.hAlpha ? ((this.hAlpha -= 0.05), (this.hVisible = !0)) : (this.hVisible = !1);
           this.onScreen(2) && Math.random() < 1 / ((10 * m.Instance.get_fps()) / 25) && this.game.addParticles("smoke", 1, 0, new h(this.get_x() + Math.random(), 0), new h(-this.get_y() - Math.random(), 0));
           this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 7);
           0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random())));
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.8)
             .scale2D(this.game.zoom / 16)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPositions[0],
             null,
             new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y),
             new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
           this.entityMatrix
             .reset()
             .translate(0, -0.26666666666666666)
             .scale((this.hWidth * this.game.zoom) / 16, -1.5)
             .rotate2D((-this.hRotation / 180) * Math.PI)
             .translate(0, -0.4)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[1],
             c = new h(y.getTexture("ehc_beam").x, y.getTexture("ehc_beam").y),
             d = new h(y.getTexture("ehc_beam").width, y.getTexture("ehc_beam").height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix),
             l = [
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               0,
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               1,
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.hWidth * this.game.zoom) / 256,
               0,
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.hWidth * this.game.zoom) / 256,
               0,
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               1,
               -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.hWidth * this.game.zoom) / 256,
               1,
             ],
             k = new e(),
             g = w.repeatArray([1, 1, 1, 0.5 * this.hAlpha], 6);
           k.h.color = g;
           b.updateQuad(a, null, c, d, null, f, l, k);
           this.entityMatrix
             .reset()
             .translate(0, -0.26666666666666666)
             .scale((this.hWidth * this.game.zoom) / 16, 1.5)
             .rotate2D((-this.hRotation / 180) * Math.PI)
             .translate(0, -0.4)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           b = this.entity;
           a = this.quadPositions[2];
           c = new h(y.getTexture("ehc_beam").x, y.getTexture("ehc_beam").y);
           d = new h(y.getTexture("ehc_beam").width, y.getTexture("ehc_beam").height);
           f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix);
           l = [
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25),
             0,
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25),
             1,
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.hWidth * this.game.zoom) / 256,
             0,
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.hWidth * this.game.zoom) / 256,
             0,
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25),
             1,
             -this.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.hWidth * this.game.zoom) / 256,
             1,
           ];
           k = new e();
           g = w.repeatArray([1, 1, 1, this.hAlpha], 6);
           k.h.color = g;
           b.updateQuad(a, null, c, d, null, f, l, k);
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.5333333333333333)
             .scale2D(this.game.zoom / 16)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPositions[3],
             null,
             new h(y.getTexture("healing_crystal").x, y.getTexture("healing_crystal").y),
             new h(y.getTexture("healing_crystal").width, y.getTexture("healing_crystal").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .scale(1.5, 0.5)
             .translate(0, 0.13333333333333333)
             .scale2D(this.game.zoom / 16)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPositions[4],
             null,
             new h(y.getTexture("bedrock").x, y.getTexture("bedrock").y),
             new h(y.getTexture("bedrock").width, y.getTexture("bedrock").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .scale2D(0.86)
             .rotate2D(((-1.5 * this.world.tick) / 180) * Math.PI)
             .translate(0, (5 * Math.sin(((1.5 * this.world.tick) / 180) * Math.PI) - 28) / 30)
             .scale2D(this.game.zoom / 16)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPositions[5],
             null,
             new h(y.getTexture("ehc_box").x, y.getTexture("ehc_box").y),
             new h(y.getTexture("ehc_box").width, y.getTexture("ehc_box").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .scale2D(1.04)
             .rotate2D(((1.5 * this.world.tick) / 180) * Math.PI)
             .translate(0, (5 * Math.sin(((1.5 * this.world.tick) / 180) * Math.PI) - 28) / 30)
             .scale2D(this.game.zoom / 16)
             .translate((((this.get_x() + 0.5) * this.game.zoom) | 0) / this.game.zoom, (((-this.get_y() - 0.5) * this.game.zoom) | 0) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPositions[6],
             null,
             new h(y.getTexture("ehc_box").x, y.getTexture("ehc_box").y),
             new h(y.getTexture("ehc_box").width, y.getTexture("ehc_box").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
         },
         explod: function () {
           this.world.setFG(Math.floor(this.get_x()), Math.floor(this.get_y()), "br");
           this.game.explode(this.get_x() + 0.5, this.get_y() + 1, 8, !1, !0);
           this.remove();
         },
         getData: function (b) {
           return H.__cast(this.data, Array)[b];
         },
         get_x: function () {
           return this.getData(0);
         },
         get_y: function () {
           return this.getData(1);
         },
         __class__: Bc,
       });
       var ve = function (b, a, c, d, f, e) {
         this._x = this._y = 0;
         this.entityMatrix = new T();
         this.xSpeed = this.ySpeed = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Egg"] = ve;
       ve.__name__ = "entities.Entity_Egg";
       ve.__super__ = pa;
       ve.prototype = v(pa.prototype, {
         init: function () {
           this.entityPoolID = "projectile";
         },
         run: function () {
           this.onScreen(1);
           for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             if (Math.round((this.world.mobs.h[d].h.x / 80) * 30) == Math.round((this.get_x() / 80) * 30) && Math.round((this.world.mobs.h[d].h.y / 80) * 30) == Math.round((this.get_y() / 80) * 30)) {
               1 > 5 * Math.random() && ((b = this.world.mobs), (a = K.spawnMob("chicken", this.get_x(), this.get_y() + 0.16666666666666666)), (b = b.h[a]), (a = 1200 * m.Instance.get_fps()), (b.h.babyTimer = a));
               null != this.game.getMob(d) && this.game.getMob(d).hurtMob(d, 1, "projectile");
               this.game.addParticles("snowball", 1, 5, new h(this.get_x(), 0), new h(this.get_y(), 0));
               this.remove();
               return;
             }
           }
           this.game.collision(this.get_x(), this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) ||
           this.game.collision(this.get_x() + this.xSpeed / 2 / 30, this.get_y() + this.ySpeed / 2 / 30, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
             ? (1 > 5 * Math.random() && ((b = this.world.mobs), (a = K.spawnMob("chicken", this.get_x(), this.get_y() + 0.16666666666666666)), (b = b.h[a]), (a = 1200 * m.Instance.get_fps()), (b.h.babyTimer = a)),
               this.game.addParticles("snowball", 1, 5, new h(this.get_x(), 0), new h(this.get_y(), 0)),
               this.remove())
             : ((this.ySpeed += g.migrateAcc(0.5, 1)), this.set_x(this.get_x() + this.xSpeed / 30), this.set_y(this.get_y() + this.ySpeed / 30), this.render());
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30);
           this.entity.updateQuad(
             this.quadPositions[0],
             null,
             new h(y.getTexture("egg").x, y.getTexture("egg").y),
             new h(y.getTexture("egg").width, y.getTexture("egg").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: ve,
       });
       var we = function (b, a, c, d, f, e) {
         this._x = this._y = 0;
         this.entityMatrix = new T();
         this.xSpeed = this.ySpeed = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Egg_Fire"] = we;
       we.__name__ = "entities.Entity_Egg_Fire";
       we.__super__ = pa;
       we.prototype = v(pa.prototype, {
         init: function () {
           this.entityPoolID = "projectile";
         },
         run: function () {
           this.onScreen(1);
           for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             if (null != this.game.getMob(d) && this.game.getMob(d).mobCollisionPoint(d, new h(this.get_x(), this.get_y()))) {
               1 > 5 * Math.random() && ((b = this.world.mobs), (a = K.spawnMob("chicken", this.get_x(), this.get_y() + 0.16666666666666666)), (b = b.h[a]), (a = 1200 * m.Instance.get_fps()), (b.h.babyTimer = a));
               this.world.onFire.h[d] = !0;
               this.game.addParticles("chicken", 1, 5, new h(this.get_x(), 0), new h(this.get_y(), 0));
               for (d = 9; 11 > d; )
                 ++d,
                   (b = Math.floor(this.get_x() + ((3 * Math.random() - 1) | 0))),
                   (a = Math.floor(-this.get_y() + ((3 * Math.random() - 1) | 0))),
                   "air" != this.world.getFG(b, a) && q.get(this.world.getFG(b, a), "flammable") && "air" == this.world.getFG(b, a + 1) && this.world.setFG(b, a + 1, "fire");
               this.remove();
               return;
             }
           }
           this.game.addParticles("chicken", 1, 0, new h(this.get_x(), 0), new h(this.get_y(), 0));
           if (
             this.game.collision(this.get_x(), this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) ||
             this.game.collision(this.get_x() + this.xSpeed / 2 / 30, this.get_y() + this.ySpeed / 2 / 30, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
           ) {
             1 > 5 * Math.random() && ((b = this.world.mobs), (a = K.spawnMob("chicken", this.get_x(), this.get_y() + 0.16666666666666666)), (b = b.h[a]), (a = 1200 * m.Instance.get_fps()), (b.h.babyTimer = a));
             this.game.addParticles("chicken", 1, 5, new h(this.get_x(), 0), new h(this.get_y(), 0));
             for (d = 9; 11 > d; )
               ++d,
                 (b = Math.floor(this.get_x() + ((3 * Math.random() - 1) | 0))),
                 (a = Math.floor(-this.get_y() + ((3 * Math.random() - 1) | 0))),
                 "air" != this.world.getFG(b, a) && q.get(this.world.getFG(b, a), "flammable") && "air" == this.world.getFG(b, a + 1) && this.world.setFG(b, a + 1, "fire");
             this.remove();
           } else (this.ySpeed += g.migrateAcc(0.5, 1)), this.set_x(this.get_x() + this.xSpeed / 30), this.set_y(this.get_y() + this.ySpeed / 30), this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30);
           this.entity.updateQuad(
             this.quadPositions[0],
             null,
             new h(y.getTexture("egg_fire").x, y.getTexture("egg_fire").y),
             new h(y.getTexture("egg_fire").width, y.getTexture("egg_fire").height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
           );
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: we,
       });
       var Wb = function (b, a, c, d, f, e) {
         this._x = this._y = 0;
         this.entityMatrix = new T();
         this.doLogic = !0;
         this.playing = !1;
         this.frame = 1;
         this.rotation = 0;
         this.henry = !1;
         this.xSpeed = this.ySpeed = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Enderpearl"] = Wb;
       Wb.__name__ = "entities.Entity_Enderpearl";
       Wb.__super__ = pa;
       Wb.prototype = v(pa.prototype, {
         gotoAndStop: function (b) {
           this.frame = 2 * (b - 1) + 1;
         },
         init: function () {
           this.entityPoolID = "projectile";
         },
         run: function () {
           this.onScreen(1);
           if (this.henry && this.playing && (this.frame++, 6 == this.frame && this.game.requestSound("teleporter", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.frame > Wb.frameNums.length)) {
             if (!Object.prototype.hasOwnProperty.call(this.world.entities.h, "henry_" + this.world.player.id)) {
               var b = this.world.entities,
                 a = "henry_" + this.world.player.id,
                 c = new xe("henry", new e(), "henry_" + this.world.player.id, [], this.game, this.world);
               b.h[a] = c;
             }
             H.__cast(this.world.entities.h["henry_" + this.world.player.id], xe).play();
             this.remove();
             return;
           }
           if (this.doLogic) {
             1 == this.henry && (this.gotoAndStop(2), (this.rotation += (0.05555555555555555 * Math.PI) / 2));
             b = Object.keys(this.world.mobs.h);
             a = b.length;
             for (c = 0; c < a; ) {
               var d = b[c++];
               if (Math.round((this.world.mobs.h[d].h.x / 80) * 30) == Math.round((this.get_x() / 80) * 30) && Math.round((this.world.mobs.h[d].h.y / 80) * 30) == Math.round((this.get_y() / 80) * 30)) {
                 null != this.game.getMob(d) && this.game.getMob(d).hurtMob(d, 1, "enderpearl");
                 b = 0;
                 null != this.world.armors[3][2] &&
                   (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling1") && (b = 2),
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling2") && (b += 3),
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling3") && (b += 4));
                 this.world.health -= 5 - b;
                 this.game.unlockAchieve(34);
                 this.world.worldX = this.get_x();
                 this.world.worldY = this.get_y();
                 this.world.riding = "";
                 this.game.addParticles("ender", 1, 5, new h(this.get_x(), 0), new h(this.get_y() - 1.5, 1));
                 1 == this.henry ? ((this.rotation = 0), (this.playing = !0), (this.doLogic = !1)) : this.remove();
                 return;
               }
             }
             "air" != this.world.getFG(Math.round(this.get_x()), Math.round(-this.get_y() - 1)) && null == q.get(this.world.getFG(Math.round(this.get_x()), Math.round(-this.get_y() - 1)), "walkThroughBlockHit")
               ? ((b = 0),
                 null != this.world.armors[3][2] &&
                   (Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling1") && (b = 2),
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling2") && (b += 3),
                   Object.prototype.hasOwnProperty.call(g.makeDynamicMap(this.world.armors[3][2]).h, "protectionFalling3") && (b += 4)),
                 (this.world.health -= 5 - b),
                 this.game.unlockAchieve(34),
                 (this.world.worldX = this.get_x()),
                 (this.world.worldY = this.get_y()),
                 (this.world.riding = ""),
                 this.game.addParticles("ender", 1, 5, new h(this.get_x(), 0), new h(this.get_y() - 1.5, 1)),
                 1 == this.henry ? ((this.rotation = 0), (this.playing = !0), (this.doLogic = !1)) : this.remove())
               : ((this.ySpeed += g.migrateAcc(0.5, 1)), this.set_x(this.get_x() + this.xSpeed / 30), this.set_y(this.get_y() + this.ySpeed / 30), this.render());
           } else this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 2);
           2 >= this.frame
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .rotate(this.rotation, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture("ender_pearl").x, y.getTexture("ender_pearl").y),
                 new h(y.getTexture("ender_pearl").width, y.getTexture("ender_pearl").height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ),
               this.entity.updateQuad(this.quadPositions[1], null, new h(), new h()))
             : 4 >= this.frame
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.23333333333333334)
                 .scale2D(1.439987)
                 .rotate(this.rotation, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture("teleporter").x, y.getTexture("teleporter").y),
                 new h(y.getTexture("teleporter").width, y.getTexture("teleporter").height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ),
               this.entity.updateQuad(this.quadPositions[1], null, new h(), new h()))
             : this.frame < Wb.frameNums.length &&
               ((b = 10 + Wb.frames[Wb.frameNums[this.frame]].y),
               this.entityMatrix
                 .reset()
                 .translate(-0.4, -(b / 30))
                 .scale2D(1.583954)
                 .rotate(this.rotation, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               Wb.frames[Wb.frameNums[this.frame]].tV
                 ? this.entity.updateQuad(
                     this.quadPositions[0],
                     null,
                     new h(y.getTexture("teleporter_broken").x, y.getTexture("teleporter_broken").y),
                     new h(y.getTexture("teleporter_broken").width, y.getTexture("teleporter_broken").height),
                     null,
                     ba.quadMatrixHelper(new t(0, 0, 0.8, 0.5333333333333333), this.entityMatrix)
                   )
                 : this.entity.updateQuad(this.quadPositions[0], null, new h(), new h()),
               Wb.frames[Wb.frameNums[this.frame]].sV
                 ? this.entity.updateQuad(
                     this.quadPositions[1],
                     null,
                     new h(y.getTexture("teleporter_sparks").x, y.getTexture("teleporter_sparks").y),
                     new h(y.getTexture("teleporter_sparks").width, y.getTexture("teleporter_sparks").height),
                     null,
                     ba.quadMatrixHelper(new t(0, 0, 0.8, 0.5333333333333333), this.entityMatrix)
                   )
                 : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h()));
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: Wb,
       });
       var ig = function (b, a, c, d, f, e) {
         this._x = this._y = 0;
         this.entityMatrix = new T();
         this.timer = 100;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_EyeOfEnder"] = ig;
       ig.__name__ = "entities.Entity_EyeOfEnder";
       ig.__super__ = pa;
       ig.prototype = v(pa.prototype, {
         run: function () {
           100 == this.timer &&
             ((this.xSpeed = g.migrateSpeed(5 * Math.cos(Math.atan2(-this.world.endPortal.y - this.get_y(), this.world.endPortal.x - this.get_x())))),
             (this.ySpeed = g.migrateSpeed(5 * Math.sin(Math.atan2(-this.world.endPortal.y - this.get_y(), this.world.endPortal.x - this.get_x())))));
           1 != J.particles && 0.2 > Math.random() && this.game.addParticles("ender", 1, 0, new h(this.get_x(), 0), new h(this.get_y(), 0));
           this.timer--;
           if (20 <= this.timer && (1.6666666666666667 < Math.abs(this.world.endPortal.x - this.get_x()) || 1.6666666666666667 < Math.abs(-this.world.endPortal.y - this.get_y())))
             this.set_x(this.get_x() + this.xSpeed / 30), this.set_y(this.get_y() + this.ySpeed / 30);
           else if (0 > this.timer) {
             0 < ((7 * Math.random()) | 0) && this.game.addDrop("eoe", this.get_x(), this.get_y(), 1, null, null);
             this.game.addParticles("ender", 0, 10, new h(this.get_x(), 0), new h(this.get_y(), 0));
             this.remove();
             return;
           }
           this.onScreen(1) && this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix.reset().translate(-0.26666666666666666, -0.26666666666666666).translate(this.get_x(), this.get_y());
           b = y.getTexture("eye_of_ender");
           this.entity.updateQuad(this.quadPositions[0], null, new h(b.x, b.y), new h(b.width, b.height), null, ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix));
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: ig,
       });
       var jg = function (b, a, c, d, f, l) {
         this.isFrame1 = !0;
         this.dontHurt = new e();
         pa.call(this, b, a, c, d, f, l);
       };
       r["entities.Entity_FallingBlock"] = jg;
       jg.__name__ = "entities.Entity_FallingBlock";
       jg.__super__ = pa;
       jg.prototype = v(pa.prototype, {
         init: function () {
           this.fallingBlockNum = I.substr(this.id, 12, 10);
         },
         run: function () {
           this.isFrame1 && (this.isFrame1 = !1);
           if (this.get_isTnt())
             if (Object.prototype.hasOwnProperty.call(this.world.playingTNT.h, this.id)) {
               if (
                 ((this.world.playingTNT.h[this.id] += 1), 4 == this.world.playingTNT.h[this.id] && this.game.requestSound("fuse", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), 200 <= this.world.playingTNT.h[this.id])
               ) {
                 this.game.explode(this.get_x() | 0, -this.get_y() | 0, 6);
                 this.remove();
                 return;
               }
             } else this.world.playingTNT.h[this.id] = 1;
           this.set_speedY(Math.min(g.migrateSpeed(14), Math.max(g.migrateSpeed(-30), this.get_speedY() + 0.5)));
           this.set_speedX(Math.min(g.migrateSpeed(50), Math.max(g.migrateSpeed(-50), this.get_speedX() * g.migrateDampening(0.98))));
           this.game.collision(this.get_x() + (-14 + this.get_speedX() / g.migrateSpeed(1)) / 30, this.get_y() - 0.43333333333333335, 0.03333333333333333, 0.8666666666666667, 0.16666666666666666, !0, !1) &&
             (this.set_x(Math.round(this.get_x() - 0.5) + 0.5), this.set_speedX(Math.abs(this.get_speedX()) / 2));
           this.game.collision(this.get_x() + (14 + this.get_speedX() / g.migrateSpeed(1)) / 30, this.get_y() - 0.43333333333333335, 0.03333333333333333, 0.8666666666666667, 0.16666666666666666, !0, !1) &&
             (this.set_x(Math.round(this.get_x() - 0.5) + 0.5), this.set_speedX(-Math.abs(this.get_speedX()) / 2));
           var b = !1;
           if ("anvil" == this.get_ty() && 0 < this.get_speedY()) {
             for (var a = Object.keys(this.world.mobs.h), c = a.length, d = 0; d < c; ) {
               var f = a[d++];
               null == this.dontHurt.h[f] &&
                 0.6666666666666666 > Math.abs(this.world.mobs.h[f].h.x - this.get_x()) &&
                 1 > Math.abs(this.world.mobs.h[f].h.y - 2 - this.get_y()) &&
                 (null != this.game.getMob(f) && this.game.getMob(f).hurtMob(f, 2 * this.get_speedY(), "anvil"), (this.dontHurt.h[f] = !0));
             }
             !Object.prototype.hasOwnProperty.call(this.dontHurt.h, this.world.player.id) &&
               0.6666666666666666 > Math.abs(this.world.worldX - this.get_x()) &&
               1 > Math.abs(this.world.worldY - 2 - this.get_y()) &&
               (this.game.ouch(5 < this.get_speedY() / g.migrateSpeed(1) ? 2 : 1, -this.get_speedY() | 0, "anvil"), (this.dontHurt.h[this.world.player.id] = !0));
           }
           this.game.collision(this.get_x() + (-5 + this.get_speedX() / g.migrateSpeed(1)) / 30, this.get_y() + (-15 + this.get_speedY() / g.migrateSpeed(1)) / 30, 0.3333333333333333, 0.03333333333333333, 0.16666666666666666, !0, !1) &&
             (this.set_speedY(0), this.set_speedX(0.5 * this.get_speedX()), this.set_y(Math.ceil(this.get_y()) - 0.5));
           if (
             this.game.collision(this.get_x() + (-5 + this.get_speedX() / g.migrateSpeed(1)) / 30, this.get_y() + (15 + this.get_speedY() / g.migrateSpeed(1)) / 30, 0.03333333333333333, 0.03333333333333333, 0.16666666666666666, !0, !1) ||
             this.game.collision(this.get_x() + (5 + this.get_speedX() / g.migrateSpeed(1)) / 30, this.get_y() + (15 + this.get_speedY() / g.migrateSpeed(1)) / 30, 0.03333333333333333, 0.03333333333333333, 0.16666666666666666, !0, !1)
           )
             (b = !0), this.set_speedY(0), this.set_speedX(0.8 * this.get_speedX()), this.set_y(Math.ceil(this.get_y()) - 0.5);
           this.set_y(this.get_y() + this.get_speedY() / 30);
           this.set_x(this.get_x() + this.get_speedX() / 30);
           if (this.get_isTnt() || 0 != Math.round(this.get_speedX()) || 1 != b) 1 <= this.get_y() ? this.remove() : this.render();
           else {
             if (1 != q.get(this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y())), "replaceable")) {
               if (this.world.gamemode != U.gamemodes.h.CREATIVE)
                 if ("anvil" == this.get_ty() && null != this.get_extraInfo()) {
                   b = this.game;
                   a = this.get_ty();
                   c = this.get_x();
                   d = this.get_y();
                   f = new e();
                   var l = this.get_extraInfo();
                   f.h.damage = l;
                   b.addDrop(a, c, d, 1, null, f);
                 } else this.game.addDrop(this.get_ty(), this.get_x(), this.get_y(), 1);
             } else
               this.game.requestRemove(Math.floor(this.get_x()), Math.floor(-this.get_y()), !0, !1, !0),
                 "anvil" == this.get_ty() &&
                   (null != this.get_extraInfo()
                     ? ((b = this.world.states), (a = "blockX" + Math.floor(this.get_x()) + "Y" + Math.floor(-this.get_y())), (c = (0.12 > Math.random() ? 1 : 0) + this.get_extraInfo()), (b.h[a] = c))
                     : ((b = this.world.states), (a = "blockX" + Math.floor(this.get_x()) + "Y" + Math.floor(-this.get_y())), (c = 0.12 > Math.random() ? 1 : 0), (b.h[a] = c + 1))),
                 this.world.setFG(Math.floor(this.get_x()), Math.floor(-this.get_y()), this.get_ty()),
                 "anvil" == this.get_ty() && this.game.requestSound("anvilsound", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
             this.remove();
           }
         },
         render: function (b) {
           pa.prototype.render.call(this, 0);
           if (null == this.item)
             if ("anvil" == this.get_ty()) {
               b = this.entity;
               var a = this.get_x(),
                 c = this.get_y(),
                 d = this.game,
                 f = this.world,
                 l = this.get_ty(),
                 k = new e(),
                 h = this.get_extraInfo();
               k.h.damage = h;
               this.item = new bb(b, a, c, d, f, [l, 1, 0, k]);
             } else this.item = new bb(this.entity, this.get_x(), this.get_y(), this.game, this.world, [this.get_ty(), 1, 0, this.get_extraInfo()]);
           this.get_isTnt() && ((H.__cast(this.item.renderer, de).fusePercentage = this.world.playingTNT.h[this.id] / 100 / 2), this.item.renderer.update());
           this.item.set_x(this.get_x() - 0.5);
           this.item.set_y(this.get_y() - 0.5);
           this.item.render();
         },
         remove: function () {
           null != this.item && this.item.destroy();
           var b = this.id,
             a = this.world.playingTNT;
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
           pa.prototype.remove.call(this);
         },
         getData: function (b) {
           return H.__cast(this.data, Array)[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, Array)[b] = a);
         },
         get_x: function () {
           return this.getData(2);
         },
         set_x: function (b) {
           return this.setData(2, b);
         },
         get_y: function () {
           return this.getData(3);
         },
         set_y: function (b) {
           return this.setData(3, b);
         },
         get_ty: function () {
           return this.getData(1);
         },
         get_speedX: function () {
           return this.getData(4);
         },
         set_speedX: function (b) {
           return this.setData(4, b);
         },
         get_speedY: function () {
           return this.getData(5);
         },
         set_speedY: function (b) {
           return this.setData(5, b);
         },
         get_isTnt: function () {
           return this.getData(7);
         },
         get_extraInfo: function () {
           return this.getData(8);
         },
         __class__: jg,
       });
       var ng = function (b, a, c, d, f, e) {
         this.entityMatrix = new T();
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Flameball"] = ng;
       ng.__name__ = "entities.Entity_Flameball";
       ng.__super__ = pa;
       ng.prototype = v(pa.prototype, {
         init: function () {
           this.entityPoolID = "projectile";
         },
         run: function () {
           this.onScreen(1);
           if (12 < this.get_timer()) {
             if (this.world.gamemode != U.gamemodes.h.SPECTATOR && this.world.player.get_hit().contains(this.get_x(), this.get_y())) {
               this.explodee();
               return;
             }
             for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               if (this.get_shotBy() != d && "enderdragon" != this.world.mobs.h[d].h.type && "enderman" != this.world.mobs.h[d].h.type && this.game.getMob(d).mobCollisionPoint(d, new h(this.get_x(), this.get_y()))) {
                 this.explodee();
                 return;
               }
             }
           }
           1 != J.particles && 0.05 > Math.random() && this.game.addParticles("smoke2", 1, 0, new h(this.get_x() + (10 * Math.random() - 5) / 30, 0), new h(this.get_y() + (10 * Math.random() - 5) / 30, 0));
           null == q.get(this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y())), "waterWalkThroughBlock")
             ? 12 < this.get_timer()
               ? this.explodee()
               : this.remove()
             : (this.set_x(this.get_x() + this.get_speedX() / 30),
               this.set_y(this.get_y() + this.get_speedY() / 30),
               null == this.get_timer() && this.set_timer(0),
               this.set_timer(this.get_timer() + 1) > 60 * m.Instance.get_fps() ? this.remove() : this.render());
         },
         explodee: function () {
           if (1 == this.world.sceneNum) {
             this.game.requestSound("boom", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
             this.world.gamemode != U.gamemodes.h.SPECTATOR && 3.5 > Math.abs(this.get_x() - this.world.worldX) && 3.5 > Math.abs(this.get_y() - this.world.worldY) && this.game.ouch(1, -1, "explosion");
             for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               this.get_shotBy() != d &&
                 "enderdragon" != this.world.mobs.h[d].h.type &&
                 "enderman" != this.world.mobs.h[d].h.type &&
                 3.5 > Math.abs(this.get_x() - this.world.mobs.h[d].h.x) &&
                 3.5 > Math.abs(this.get_y() - this.world.mobs.h[d].h.x) &&
                 null != this.game.getMob(d) &&
                 this.game.getMob(d).hurtMob(d, 1, "fire", this.get_shotBy());
             }
           } else
             for (
               this.game.requestSound("boom", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY),
                 this.world.gamemode != U.gamemodes.h.SPECTATOR && 3.5 > Math.abs(this.get_x() - this.world.worldX) && 3.5 > Math.abs(this.get_y() - this.world.worldY) && this.game.ouch(1, -3, "explosion"),
                 b = Object.keys(this.world.mobs.h),
                 a = b.length,
                 c = 0;
               c < a;
 
             )
               (d = b[c++]),
                 this.get_shotBy() != d &&
                   "enderdragon" != this.world.mobs.h[d].h.type &&
                   "enderman" != this.world.mobs.h[d].h.type &&
                   3.5 > Math.abs(this.get_x() - this.world.mobs.h[d].h.x) &&
                   3.5 > Math.abs(this.get_y() - this.world.mobs.h[d].h.x) &&
                   null != this.game.getMob(d) &&
                   this.game.getMob(d).hurtMob(d, 1, "fire", this.get_shotBy());
           this.game.addParticles("smoke2", 1, 3, new h(this.get_x(), 0), new h(this.get_y(), 0));
           this.game.addParticles("shockwave", 1, 3, new h(this.get_x() + (50 * Math.random() - 25) / 30, 0), new h(this.get_y() + (50 * Math.random() - 25) / 30, 0));
           this.remove();
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix
             .reset()
             .translate(0, -0.26666666666666666)
             .scale2D(1 + 2 * Math.min(1, this.get_timer() / 80))
             .rotate2D((-this.get_rotation() / 180) * Math.PI)
             .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(y.getTexture("flameball").x, y.getTexture("flameball").y),
             d = new h(y.getTexture("flameball").width, y.getTexture("flameball").height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix),
             l = new e(),
             k = w.repeatArray([Math.min(1, this.get_timer() / 80), 0.5 + 0.5 * Math.min(1, this.get_timer() / 80), 0.5 + 0.5 * Math.min(1, this.get_timer() / 80), 1], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         getData: function (b) {
           return H.__cast(this.data, e).h[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, e).h[b] = a);
         },
         get_x: function () {
           return this.getData("x");
         },
         set_x: function (b) {
           return this.setData("x", b);
         },
         get_y: function () {
           return this.getData("y");
         },
         set_y: function (b) {
           return this.setData("y", b);
         },
         get_speedX: function () {
           return this.getData("speedX");
         },
         get_speedY: function () {
           return this.getData("speedY");
         },
         get_rotation: function () {
           return this.getData("rotation");
         },
         get_shotBy: function () {
           return this.getData("shotBy");
         },
         get_timer: function () {
           return this.getData("timer");
         },
         set_timer: function (b) {
           return this.setData("timer", b);
         },
         __class__: ng,
       });
       var xe = function (b, a, c, d, f, e) {
         this._x = this._y = 0;
         this.entityMatrix = new T();
         this.playing = !1;
         this.frame = 1;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Henry"] = xe;
       xe.__name__ = "entities.Entity_Henry";
       xe.__super__ = pa;
       xe.prototype = v(pa.prototype, {
         play: function () {
           this.playing = !0;
           if (1 == this.frame)
             for (var b = 0; 100 > b++; ) {
               var a = new h(Math.floor(this.world.worldX + 18 * Math.random() - 9), Math.floor(-this.world.worldY + 10 * Math.random() - 5));
               if ("air" == this.world.getFG(a.x, a.y) && 1 != q.get(this.world.getFG(a.x, a.y - 1), "walkThroughBlock")) {
                 this.set_x(a.x);
                 this.set_y(-a.y);
                 this.game.requestSound("htele", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
                 break;
               }
             }
         },
         run: function () {
           this.onScreen(2);
           if (this.playing && (this.frame++, 32 < this.frame)) {
             this.frame = 0;
             this.playing = !1;
             this.remove();
             return;
           }
           this.render();
         },
         render: function (b) {
           if (null == this.game.entityPools.h[this.entityPoolID]) {
             b = this.game.entityPools;
             var a = this.entityPoolID,
               c = this.entityPoolID,
               d = P.getImage("teleporter"),
               f = Fa.getShader(),
               l = new e(),
               k = w.repeatArray([1], 24);
             l.h.color = k;
             k = w.repeatArray([0], 24);
             l.h.colorOffset = k;
             c = new Ca(c, new ja(d, null, f, l), this.getEntityScale());
             b.h[a] = c;
             this.game.entityPools.h[this.entityPoolID].entity.isTransparent = !0;
             this.game.entityPools.h[this.entityPoolID].entity.layer = 0;
           }
           pa.prototype.render.call(this, 2);
           b = Math.floor((this.frame + 1) / 2);
           2 == b || 16 == b
             ? (this.entityMatrix.reset().translate(-1.0666666666666667, -1.0666666666666667).scale(0.84053, 0.458923).translate(0.12000000000000001, -0.4766666666666667).translate(this.get_x(), this.get_y()),
               this.entity.updateQuad(this.quadPositions[0], null, new h(0, 32), new h(64, 64), null, ba.quadMatrixHelper(new t(0, 0, 2.1333333333333333, 2.1333333333333333), this.entityMatrix)))
             : 2 < b && 16 > b
             ? (this.entityMatrix.reset().translate(-1.0666666666666667, -1.0666666666666667).scale2D(0.634369).translate(0.12000000000000001, -0.4766666666666667).translate(this.get_x(), this.get_y()),
               this.entity.updateQuad(this.quadPositions[0], null, new h(0, 32), new h(64, 64), null, ba.quadMatrixHelper(new t(0, 0, 2.1333333333333333, 2.1333333333333333), this.entityMatrix)))
             : this.entity.updateQuad(this.quadPositions[0], null, new h(), new h());
           2 == b || 15 <= b
             ? (this.entityMatrix.reset().translate(-2.05, -1.0666666666666667).scale2D(1.0517315091919623).translate(0.36666666666666664, -0.03333333333333333).translate(this.get_x(), this.get_y()),
               this.entity.updateQuad(this.quadPositions[1], null, new h(64, 0), new h(123, 32), null, ba.quadMatrixHelper(new t(0, 0, 4.1, 1.0666666666666667), this.entityMatrix)))
             : 3 == b || 4 == b || 13 <= b
             ? (this.entityMatrix.reset().translate(-2.05, -1.0666666666666667).scale2D(1.0517315091919623).translate(0.36666666666666664, -0.03333333333333333).translate(this.get_x(), this.get_y()),
               this.entity.updateQuad(this.quadPositions[1], null, new h(64, 32), new h(123, 32), null, ba.quadMatrixHelper(new t(0, 0, 4.1, 1.0666666666666667), this.entityMatrix)))
             : 5 == b || 6 == b
             ? (this.entityMatrix.reset().translate(-2.05, -1.0666666666666667).scale2D(1.0517315091919623).translate(0.36666666666666664, -0.03333333333333333).translate(this.get_x(), this.get_y()),
               this.entity.updateQuad(this.quadPositions[1], null, new h(64, 64), new h(123, 32), null, ba.quadMatrixHelper(new t(0, 0, 4.1, 1.0666666666666667), this.entityMatrix)))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         get_x: function () {
           return this._x;
         },
         set_x: function (b) {
           return (this._x = b);
         },
         get_y: function () {
           return this._y;
         },
         set_y: function (b) {
           return (this._y = b);
         },
         __class__: xe,
       });
       var Wf = function (b, a, c, d, f, e) {
         this.graphicOps = [];
         this.playing = !1;
         this.currentFrame = 1;
         this.explicitPosition = !1;
         this.startX = this.startY = this.endX = this.endY = 0;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Lightning"] = Wf;
       Wf.__name__ = "entities.Entity_Lightning";
       Wf.__super__ = pa;
       Wf.prototype = v(pa.prototype, {
         init: function () {},
         doAt: function (b, a) {
           this.explicitPosition = !0;
           this.startX = b;
           this.startY = Math.max(a + 10, Math.floor(-this.game.clouds.y + 2)) | 0;
           this.endX = b;
           this.endY = a - 1;
           this.gotoAndPlay(2);
         },
         gotoAndPlay: function (b) {
           this.currentFrame = 2 * b - 1;
           this.playing = !0;
         },
         play: function () {
           this.playing = !0;
         },
         randomizeLightningPosition: function () {
           this.startX = this.game.blockX + (((20 * Math.random()) | 0) - 9);
           this.startY = Math.floor(-this.game.clouds.y + 2);
           this.endX = this.startX;
           this.endY = this.startY;
           for (var b = 4, a = 0; 40 >= a; ) {
             --this.endY;
             if (1 != q.get(this.world.getFG(this.endX, this.endY), "walkThroughBlock")) return !0;
             if (10 > this.endY || 40 == a)
               if ((--b, 0 >= b)) break;
               else {
                 this.endX = this.startX = this.game.blockX + (((20 * Math.random()) | 0) - 9);
                 this.endY = this.startY;
                 a = 0;
                 continue;
               }
             ++a;
           }
           return !1;
         },
         makeBolt: function () {
           this.graphicOps.push({ move: !0, x: this.startX, y: -this.startY });
           for (var b = 0; 50 > b; ) {
             var a = b++,
               c = (30 * (this.startX + ((this.endX - this.startX) * a) / 50) + (Math.random() - 0.5) * (this.endY - this.startY) * 2) / 30;
             a = (30 * -(this.startY + ((this.endY - this.startY) * a) / 50) + (Math.random() - 0.5) * (this.endY - this.startY)) / 30;
             this.graphicOps.push({ move: !1, x: c, y: a });
             0.2 > Math.random() && this.strag(c, a, Math.random() - 0.5, Math.random() / 2, 15);
           }
         },
         strag: function (b, a, c, d, f) {
           var e = b,
             k = a;
           Math.random();
           for (var h = (Math.random() * f + f / 2) | 0; 0 <= h; )
             (c += 0.1 * Math.random() - 0.05),
               (d += 0.1 * Math.random() - 0.05),
               (e += (5 * c) / 30),
               (k += (5 * d) / 30),
               this.graphicOps.push({ move: !1, x: e, y: k }),
               0.1 > Math.random() && this.strag(e, k, c + 0.3 * Math.random() - 0.15, d + 0.3 * Math.random() - 0.15, f / 2),
               --h;
           this.graphicOps.push({ move: !0, x: b, y: a });
         },
         run: function () {
           if (3 == this.currentFrame) {
             -this.world.worldY < this.startY && this.game.requestSound("closeThunder" + (((4 * Math.random()) | 0) + 1), 0, 0);
             if (!this.explicitPosition && !this.randomizeLightningPosition()) {
               this.remove();
               return;
             }
             this.game.requestSound("boom", this.endX - this.world.worldX, -this.endY - this.world.worldY);
             this.world.gamemode != U.gamemodes.h.SPECTATOR &&
               2 > Math.abs(this.world.worldX - this.endX) &&
               2 > Math.abs(this.world.worldY + this.endY + 1) &&
               (this.world.worldX < this.endX ? (this.world.xSpeed += g.migrateSpeed(20)) : this.world.worldX > this.endX && (this.world.xSpeed -= g.migrateSpeed(20)),
               (this.world.worldY -= 0.3333333333333333),
               (this.world.ySpeed = g.migrateSpeed(20)),
               this.game.ouch(2, -5, "lightning"),
               this.game.addParticles("smoke2", 0, 5, new h(this.world.worldX - 0.16666666666666666, 0.3333333333333333 * Math.random()), new h(this.world.worldY - 0.16666666666666666, 0.3333333333333333 * Math.random())));
             for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               2 > Math.abs(this.world.mobs.h[d].h.x - this.endX) &&
                 2 > Math.abs(this.world.mobs.h[d].h.y + this.endY + 1) &&
                 ("pig" == this.world.mobs.h[d].h.type || "creeper" == this.world.mobs.h[d].h.type
                   ? (this.game.transformMobs.h[d] = !0)
                   : (null != this.game.getMob(d) && this.game.getMob(d).hurtMob(d, 5, "lightning"),
                     this.game.addParticles(
                       "smoke2",
                       0,
                       5,
                       new h(this.world.mobs.h[d].h.x - 0.16666666666666666, 0.3333333333333333 * Math.random()),
                       new h(this.world.mobs.h[d].h.y - 0.16666666666666666, 0.3333333333333333 * Math.random())
                     )));
             }
             this.makeBolt();
           }
           5 == this.currentFrame && (this.graphicOps = []);
           7 == this.currentFrame && this.makeBolt();
           11 == this.currentFrame && ((this.graphicOps = []), this.makeBolt());
           13 == this.currentFrame && (this.graphicOps = []);
           14 < this.currentFrame ? this.remove() : (this.render(), this.playing && this.currentFrame++);
         },
         render: function (b) {
           this.game.vectorRenderer.beginPath();
           this.game.vectorRenderer.lineStyle((this.game.zoom / 30) * 3, new F(2009923413));
           b = 0;
           for (var a = this.graphicOps; b < a.length; ) {
             var c = a[b];
             ++b;
             1 == c.move
               ? this.game.vectorRenderer.moveTo((c.x - this.game.camera.x) * this.game.zoom + this.game.scene.get_width() / 2, (c.y - this.game.camera.y) * this.game.zoom + this.game.scene.get_height() / 2)
               : this.game.vectorRenderer.lineTo((c.x - this.game.camera.x) * this.game.zoom + this.game.scene.get_width() / 2, (c.y - this.game.camera.y) * this.game.zoom + this.game.scene.get_height() / 2);
           }
           this.game.vectorRenderer.stroke();
           this.game.vectorRenderer.endPath();
         },
         __class__: Wf,
       });
       var w = function () {};
       r["lemongine.Mathz"] = w;
       w.__name__ = "lemongine.Mathz";
       w.modulus = function (b, a) {
         b %= a;
         return 0 > b ? b + a : b;
       };
       w.clamp = function (b, a, c) {
         return Math.max(b, Math.min(a, c));
       };
       w.distance = function (b, a) {
         return Math.sqrt(b * b + a * a);
       };
       w.sign = function (b) {
         return 0 <= b ? 1 : -1;
       };
       w.MAX_INT = function () {
         return Number.MAX_SAFE_INTEGER || 9007199254740991;
       };
       w.interpolateSine = function (b) {
         return 0.5 - 0.5 * Math.cos(b * Math.PI);
       };
       w.pointInTriangle = function (b, a, c, d, f) {
         null == f && (f = !1);
         var e = (c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x);
         c = (d.x - c.x) * (b.y - c.y) - (d.y - c.y) * (b.x - c.x);
         b = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x);
         return f ? (0 <= e == 0 <= c ? 0 <= c == 0 <= b : !1) : 0 < e == 0 < c ? 0 < c == 0 < b : !1;
       };
       w.pointInQuad = function (b, a, c, d, f) {
         return w.pointInTriangle(b, a, c, f, !0) ? !0 : w.pointInTriangle(b, c, d, f);
       };
       w.pointInTransformedRectangle = function (b, a, c) {
         var d = c.apply(new M(a.x, a.y)),
           f = c.apply(new M(a.get_right(), a.y)),
           e = c.apply(new M(a.get_right(), a.get_bottom()));
         a = c.apply(new M(a.x, a.get_bottom()));
         return w.pointInQuad(b, new h(d.x, d.y), new h(f.x, f.y), new h(e.x, e.y), new h(a.x, a.y));
       };
       w.repeatArray = function (b, a, c) {
         null == c && (c = !0);
         null == a && (a = 1);
         if (!c) {
           var d = [];
           c = 0;
           for (a *= b.length; c < a; ) d.push(b[c++ % b.length]);
           return d;
         }
         if (0 >= a) return b.splice(0, b.length), b;
         d = b.length;
         c = 0;
         for (a = (a - 1) * d; c < a; ) b.push(b[c++ % d]);
         return b;
       };
       w.pushAll = function (b, a) {
         for (var c = 0; c < a.length; ) b.push(a[c++]);
         return b;
       };
       w.insertAll = function (b, a, c) {
         for (var d = 0; d < c.length; ) b.splice(a, 0, c[d++]), ++a;
         return b;
       };
       w.spliceInsert = function (b, a, c, d) {
         if (c == d.length) for (var f = 0; f < c; ) (b[f + a] = d[f]), ++f;
         else b.splice(a, c), w.insertAll(b, a, d);
         return b;
       };
       var K = function (b, a, c) {
         this.randomFireTexture = "1";
         this.hasRendered = !1;
         this.entityMatrix = new T();
         this.alpha = 1;
         this.showNametag = this.fire = !1;
         this.nametagText = "";
         this.rotation = 0;
         this.colorTransform = [1, 1, 1, 1, 0, 0, 0, 0];
         this.movieX = this.movieY = 0;
         this.scaleX = this.scaleY = 1;
         this.currentFrame = 0;
         this.hasInit = !1;
         pa.call(this, "mob", c.mobs, b, c.mobs.h[b], a, c);
       };
       r["entities.Entity_Mob"] = K;
       K.__name__ = "entities.Entity_Mob";
       K.mobIsFencedIn = function (b) {
         var a = m.Instance.game.world;
         b = a.mobs.h[b];
         var c = a.getFG(Math.floor(b.h.x / 1), Math.floor(-b.h.y + 1));
         if ("fnc" == I.substr(c, -3, 3) || "fncg" == I.substr(c, -4, 4) || "ibar" == c) return !0;
         c = a.getFG(Math.floor(b.h.x / 1), Math.floor(-b.h.y));
         if ("fnc" == I.substr(c, -3, 3) || "fncg" == I.substr(c, -4, 4) || "ibar" == c) return !0;
         if (1 == b.h.falling) {
           c = a.getFG(Math.floor(b.h.x / 1), Math.floor(-b.h.y) - 1);
           if ("fnc" == I.substr(c, -3, 3) || "fncg" == I.substr(c, -4, 4) || "ibar" == c) return !0;
           c = a.getFG(Math.floor(b.h.x / 1), Math.floor(-b.h.y) - 2);
           if ("fnc" == I.substr(c, -3, 3) || "fncg" == I.substr(c, -4, 4) || "ibar" == c) return !0;
         }
         return !1;
       };
       K.findSpawnArea = function (b, a, c, d, f, e, k, h, g) {
         null == g && (g = -1);
         d = m.Instance.game.world;
         for (var l = 0; 21 > l; ) {
           ++l;
           var C = 6.283 * Math.random(),
             z = Math.random() * (h - k) + k,
             n = Math.round(f / 1 + Math.sin(C) * z);
           C = Math.round(-e + Math.cos(C) * z) + 1;
           for (z = 0; ; ) {
             var p = !0;
             if (6 == a) {
               var t = 0,
                 r = 0;
               if ("wr" == d.getFG(n, C) || "sw" == d.getFG(n, C)) {
                 for (var w = 1; 5 > w; ) {
                   var y = w++;
                   if ("wr" == d.getFG(n, C + y) || "sw" == d.getFG(n, C + y)) ++t;
                   else break;
                 }
                 for (w = 1; 5 > w; )
                   if (((y = w++), "wr" == d.getFG(n, C - y) || "sw" == d.getFG(n, C - y))) ++t;
                   else break;
                 for (w = 1; 5 > w; )
                   if (((y = w++), "wr" == d.getFG(n + y, C) || "sw" == d.getFG(n + y, C))) ++r;
                   else break;
                 for (w = 1; 5 > w; )
                   if (((y = w++), "wr" == d.getFG(n - y, C) || "sw" == d.getFG(n - y, C))) ++r;
                   else break;
               }
               if (4 <= t && 4 <= r) {
                 "dark" == b ? 1 != m.Instance.game.ifDark(n, C) && (p = !1) : "light" == b && 1 == m.Instance.game.ifDark(n, C) && (p = !1);
                 if (p) return [n, C];
                 break;
               } else if ((--C, ++z, !(5 >= z))) break;
             } else if (
               (0 != c && "dt" != d.getFG(n, C - 1) && "cdt" != d.getFG(n, C - 1) && "myc" != d.getFG(n, C - 1)) ||
               "lv" == I.substr(d.getFG(n, C - 1), 0, 2) ||
               null == q.get(d.getFG(n, C), "walkThroughBlockHit") ||
               1 == q.get(d.getFG(n, C), "liquid") ||
               null != q.get(d.getFG(n, C - 1), "walkThroughBlockHit")
             ) {
               if ((--C, ++z, !(5 >= z))) break;
             } else {
               "dark" == b ? 1 != m.Instance.game.ifDark(n, C) && (p = !1) : "light" == b && 1 == m.Instance.game.ifDark(n, C) && (p = !1);
               if (p && -1 != g) {
                 for (z = 1; 20 > z && null == q.get(d.getFG(n, C + z++), "walkThroughBlockHit"); );
                 p = 0 == g;
               }
               if (p)
                 if (((p = !1), 2 == a)) {
                   if ("air" == d.getFG(n, C + 1) || null != q.get(d.getFG(n, C + 1), "walkThroughBlockHit")) p = !0;
                 } else if (3 == a)
                   if ("air" == d.getFG(n + 1, C) || null != q.get(d.getFG(n + 1, C), "walkThroughBlockHit")) p = !0;
                   else {
                     if ("air" == d.getFG(n - 1, C) || null != q.get(d.getFG(n - 1, C), "walkThroughBlockHit")) --n, (p = !0);
                   }
                 else if (4 == a) {
                   if ("air" == d.getFG(n, C + 1) || null != q.get(d.getFG(n, C + 1), "walkThroughBlockHit")) if ("air" == d.getFG(n, C + 2) || null != q.get(d.getFG(n, C + 2), "walkThroughBlockHit")) p = !0;
                 } else
                   5 != a ||
                     ("air" != d.getFG(n + 1, C) && null == q.get(d.getFG(n + 1, C), "walkThroughBlockHit")) ||
                     ("air" != d.getFG(n + 2, C) && null == q.get(d.getFG(n + 2, C), "walkThroughBlockHit")) ||
                     ("air" != d.getFG(n + 1, C + 1) && null == q.get(d.getFG(n + 1, C + 1), "walkThroughBlockHit")) ||
                     ("air" != d.getFG(n + 2, C + 1) && null == q.get(d.getFG(n + 2, C + 1), "walkThroughBlockHit")) ||
                     ("air" != d.getFG(n + 1, C + 2) && null == q.get(d.getFG(n + 1, C + 2), "walkThroughBlockHit")) ||
                     ("air" != d.getFG(n + 2, C + 2) && null == q.get(d.getFG(n + 2, C + 2), "walkThroughBlockHit")) ||
                     (p = !0);
               if (1 == p) return [n, C];
               break;
             }
           }
         }
         return null;
       };
       K.nextMobID = function () {
         for (var b = m.Instance.game.world, a; (a = "mob" + ++b.mobNum), null != b.mobs.h[a]; );
         return a;
       };
       K.spawnMob = function (b, a, c, d) {
         var f = m.Instance.game.world,
           l = f.mobs;
         switch (b) {
           case "bat":
             f.batNum++;
             var k = K.nextMobID();
             a = K.prepareMobData("bat", k, a, c, 6, null != d ? d : "");
             l.h[k] = a;
             break;
           case "blaze":
             f.blazeNum++;
             k = K.nextMobID();
             a = K.prepareMobData("blaze", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "chicken":
             f.chickenNum++;
             k = K.nextMobID();
             a = K.prepareMobData("chicken", k, a, c, 4, null != d ? d : "");
             l.h[k] = a;
             0.01 > Math.random() && ((l.h[k].h.armor[0] = g.makeDynamicArray(["ShadesCap", 1, 0, new e()])), (l.h[k].h.armorDropChances[0] = 1));
             break;
           case "cow":
           case "cowctus":
           case "mooshroom":
             f.cowNum++;
             k = K.nextMobID();
             a = K.prepareMobData("cow", k, a, c, 10, null != d ? d : "");
             l.h[k] = a;
             l.h[k].h.variant = "cow" == b ? "" : b;
             break;
           case "creeper":
             f.creeperNum++;
             k = K.nextMobID();
             a = K.prepareMobData("creeper", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "enderdragon":
             f.enderdragonNum++;
             k = K.nextMobID();
             a = K.prepareMobData("enderdragon", k, a, c, 333, null != d ? d : "");
             l.h[k] = a;
             break;
           case "enderman":
             f.endermanNum++;
             k = K.nextMobID();
             a = K.prepareMobData("enderman", k, a, c, 40, null != d ? d : "");
             l.h[k] = a;
             break;
           case "ghast":
             f.ghastNum++;
             k = K.nextMobID();
             a = K.prepareMobData("ghast", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "magmacube":
             f.magmacubeNum++;
             k = K.nextMobID();
             a = K.prepareMobData("magmacube", k, a, c, 4, null != d ? d : "");
             l.h[k] = a;
             break;
           case "nethereye":
           case "netherwalker":
             f.nethereyeNum++;
             k = K.nextMobID();
             a = K.prepareMobData("nethereye", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "pig":
             f.pigNum++;
             k = K.nextMobID();
             a = K.prepareMobData("pig", k, a, c, 10, null != d ? d : "");
             l.h[k] = a;
             break;
           case "rabbit":
             f.rabbitNum++;
             k = K.nextMobID();
             a = K.prepareMobData("rabbit", k, a, c, 3, null != d ? d : "");
             l.h[k] = a;
             l = l.h[k];
             a = (6 * Math.random() + 1) | 0;
             l.h.rabbitType = a;
             break;
           case "sheep":
             f.sheepNum++;
             k = K.nextMobID();
             a = K.prepareMobData("sheep", k, a, c, 8, null != d ? d : "");
             l.h[k] = a;
             f = Math.random();
             l.h[k].h.color = 0.005 > f ? "gray" : 0.01 > f ? "lightgray" : 0.015 > f ? "black" : 0.018 > f ? "brown" : 0.018164 > f ? "pink" : 0.018328 > f ? "blue" : "white";
             0.005 > Math.random() && ((l.h[k].h.armor[0] = g.makeDynamicArray(["MustacheCap", 1, 0, new e()])), (l.h[k].h.armorDropChances[0] = 0));
             break;
           case "skeleton":
             f.skeletonNum++;
             k = K.nextMobID();
             a = K.prepareMobData("skeleton", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "slime":
             f.slimeNum++;
             k = K.nextMobID();
             a = K.prepareMobData("slime", k, a, c, 4, null != d ? d : "");
             l.h[k] = a;
             break;
           case "snowgolem":
             f.snowgolemNum++;
             k = K.nextMobID();
             a = K.prepareMobData("snowgolem", k, a, c, 4, null != d ? d : "");
             l.h[k] = a;
             break;
           case "spawnskin":
             f.spawnskinNum++;
             k = K.nextMobID();
             a = K.prepareMobData("spawnskin", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "spider":
             f.spiderNum++;
             k = K.nextMobID();
             a = K.prepareMobData("spider", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "squid":
             f.squidNum++;
             k = K.nextMobID();
             a = K.prepareMobData("squid", k, a, c, 10, null != d ? d : "");
             l.h[k] = a;
             break;
           case "wolf":
             f.wolfNum++;
             k = K.nextMobID();
             a = K.prepareMobData("wolf", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             break;
           case "zombie":
             f.zombieNum++;
             k = K.nextMobID();
             a = K.prepareMobData("zombie", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             if ("easy" != f.difficulty && Math.random() < ("hard" == f.difficulty ? 0.08 : 0.04)) {
               b = [null, null, null, null];
               Math.random();
               a = 0.4873 > Math.random() ? "Gold" : 0.5 > Math.random() ? "Iron" : 0.5004 > Math.random() ? "Diamond" : "Leather";
               Math.random();
               for (d = 0; 4 > d; ) {
                 var h = d++;
                 var n = 0 == h ? a + "Cap" : 1 == h ? a + "Shirt" : 2 == h ? a + "Pants" : a + "Shoes";
                 c = Math.floor(q.get(n, "life") * (0.92 - 0.08 * Math.random()));
                 b[h] = g.makeDynamicArray([n, 1, c, new e()]);
                 if (Math.random() < ("hard" == f.difficulty ? 0.1 : 0.25)) break;
               }
               l.h[k].h.armor = b;
               l.h[k].h.armorDropChances = [0.085, 0.085, 0.085, 0.085];
             }
             0.001 > Math.random() && (null == l.h[k].h.armor[0] || 0 == l.h[k].h.armor[0][1]) && ((l.h[k].h.armor[0] = g.makeDynamicArray(["AfroCap", 1, 0, new e()])), (l.h[k].h.armorDropChances[0] = 1));
             break;
           case "zombiepigman":
             f.zombiepigmanNum++;
             k = K.nextMobID();
             a = K.prepareMobData("zombiepigman", k, a, c, 20, null != d ? d : "");
             l.h[k] = a;
             l.h[k].h.handItems[0] = g.makeDynamicArray(["GoldSword", 1, Math.floor(20 * Math.random() + 5), new e()]);
             break;
           default:
             return Ia.trace("Mob " + b + " not identified", { fileName: "src/entities/Entity_Mob.hx", lineNumber: 2225, className: "entities.Entity_Mob", methodName: "spawnMob" }), "undefined";
         }
         return k;
       };
       K.prepareMobData = function (b, a, c, d, f, l) {
         null == l && (l = "");
         null == f && (f = 20);
         var k = m.Instance.game.world,
           h = new e();
         h.h.type = b;
         h.h.id = a;
         h.h.scene = k.sceneNum;
         h.h.name = l;
         h.h.variant = "";
         h.h.babyTimer = 0;
         h.h.breedTimer = 0;
         h.h.x = c;
         h.h.y = d;
         h.h.speedX = 0;
         h.h.speedY = 0;
         h.h.direction = 1;
         h.h.health = f;
         a = new e();
         a.h.left = !1;
         a.h.right = !1;
         a.h.up = !1;
         h.h.keys = a;
         h.h.target = null;
         h.h.focus = null;
         h.h.riddenBy = null;
         h.h.riding = null;
         h.h.leash = null;
         h.h.inventory = [];
         h.h.handItems = [];
         h.h.armor = [];
         h.h.defaultDrops = !0;
         h.h.handDropChances = [0.085, 0.085];
         h.h.armorDropChances = [0.085, 0.085, 0.085, 0.085];
         h.h.persists = !1;
         h.h.air = 0;
         h.h.airTimer = 0;
         h.h.startUnderwaterTimer = 0;
         h.h.animationType = "idle";
         h.h.animationFrame = 0;
         h.h.attackCooldown = 0;
         h.h.hitCooldown = 0;
         h.h.lastDamageType = "";
         h.h.lastDamageID = "";
         h.h.ticksSinceLastDamageID = 0;
         h.h.falling = !1;
         h.h.wasFalling = !1;
         h.h.wasFallingSpeed = 0;
         h.h.effects = new e();
         h = g.makeDynamicMap(h);
         switch (b) {
           case "bat":
             h.h.hanging = !1;
             break;
           case "cow":
             h.h.variant = "";
             break;
           case "creeper":
             h.h.fuse = -1;
             h.h.charged = !1;
             break;
           case "enderdragon":
             h.h.nextSpotX = c;
             h.h.nextSpotY = d;
             h.h.official = !1;
             h.h.endTimer = !1;
             h.h.endingX = null;
             h.h.endingY = null;
             h.h.flyBob = 0;
             h.h.flameBallThread = 0;
             h.h.flameBallDelay = 0;
             break;
           case "enderman":
             h.h.teleportDistance = 10;
             break;
           case "pig":
             h.h.saddleItem = g.makeDynamicArray(["air", 1, 0, new e()]);
             break;
           case "rabbit":
             h.h.rabbitType = 1;
             break;
           case "sheep":
             h.h.color = "white";
             h.h.sheared = !1;
             h.h.eating = !1;
             break;
           case "skeleton":
             h.h.handItems[0] = g.makeDynamicArray(["bow", 1, (100 * Math.random() + 220) | 0, new e()]);
             break;
           case "magmacube":
           case "slime":
             h.h.size = Math.floor(3 * Math.random() + 1);
             h.h.health = Math.pow(4, h.h.size - 1);
             break;
           case "spawnskin":
             h.h.skin = 1;
             break;
           case "squid":
             h.h.actualRotation = 0;
             h.h.rotationDirection = 0;
             h.h.cooldownSpeed = 1;
             h.h.actualSpeed = 2;
             h.h.movementCooldown = 0;
             h.h.rotationSpeed = 0;
             break;
           case "wolf":
             h.h.tameable = !0;
             h.h.tamed = !1;
             h.h.tamedBy = h.h.tamed ? k.player.id : null;
             h.h.sitting = !1;
             h.h.collarColor = "red";
             break;
           case "zombiepigman":
             (h.h.handItems[0] = g.makeDynamicArray(["GoldSword", 1, (20 * Math.random() + 10) | 0, new e()])), (h.h.aggressiveness = 0);
         }
         return h;
       };
       K.recalculateMobCount = function () {
         K.resetMobCount();
         for (var b = Object.keys(m.Instance.game.world.mobs.h), a = b.length, c = 0; c < a; ) {
           var d = b[c++];
           K.canDespawn(d) && m.Instance.game.world.setMobNum(m.Instance.game.world.mobs.h[d].h.type.toLowerCase(), 1);
         }
       };
       K.canDespawn = function (b) {
         var a = m.Instance.game.world,
           c = a.mobs.h[b];
         a = a.mobData.h[c.h.type];
         return null == a ? !1 : null != K.getMobNameTag(b) || (1 == a.h.tameable && 1 == c.h.tamed) || 0 == a.h.despawnChance || K.mobIsFencedIn(b) ? !1 : !0;
       };
       K.resetMobCount = function () {
         for (var b = m.Instance.game.world, a = Object.keys(b.mobData.h), c = a.length, d = 0; d < c; ) b.setMobNum(a[d++], 0, !0);
       };
       K.matchMobID = function (b) {
         b = b.toLowerCase().replace(/[ ]+/, "");
         switch (b) {
           case "bunny":
             return "rabbit";
           case "cow":
           case "cowctus":
           case "mooshroom":
             return "cow";
           case "dog":
             return "wolf";
           case "netherwalker":
             return "nethereye";
           case "octopus":
             return "squid";
           case "pigman":
             return "zombiepigman";
           case "bat":
           case "blaze":
           case "chicken":
           case "creeper":
           case "enderdragon":
           case "enderman":
           case "ghast":
           case "magmacube":
           case "nethereye":
           case "pig":
           case "rabbit":
           case "sheep":
           case "skeleton":
           case "slime":
           case "snowgolem":
           case "spider":
           case "squid":
           case "wolf":
           case "zombie":
           case "zombiepigman":
             return b;
           case "spawnskin":
             return "spawnskin";
           default:
             return null;
         }
       };
       K.matchMobVariant = function (b) {
         var a = m.Instance.game.world;
         b = b.toLowerCase().replace(/[ ]+/, "");
         if (null != K.matchMobID(b)) {
           var c = a.mobData;
           var d = K.matchMobID(b);
           null != c.h[d] ? ((c = a.mobData), (d = K.matchMobID(b)), (c = null != c.h[d].h.variants)) : (c = !1);
           c ? ((c = a.mobData), (d = K.matchMobID(b)), (a = null != g.makeDynamicMap(c.h[d].h.variants).h[b])) : (a = !1);
           return a ? b : K.matchMobID(b);
         }
         return null;
       };
       K.getMobName = function (b) {
         var a = m.Instance.game.world;
         b = b.toLowerCase().replace(/[ ]+/, "");
         if (null != K.matchMobID(b)) {
           var c = a.mobData;
           var d = K.matchMobID(b);
           c = null != c.h[d];
         } else c = !1;
         if (c) {
           c = a.mobData;
           d = K.matchMobID(b);
           c.h[d].h.variants ? ((c = a.mobData), (d = K.matchMobID(b)), (c = null != g.makeDynamicMap(c.h[d].h.variants).h[b])) : (c = !1);
           if (c) return (c = a.mobData), (d = K.matchMobID(b)), g.makeDynamicMap(c.h[d].h.variants).h[b];
           c = a.mobData;
           d = K.matchMobID(b);
           return c.h[d].h.name;
         }
         return null;
       };
       K.getMobNameTag = function (b) {
         var a = m.Instance.game.world;
         return null == a.mobs.h[b] || null == a.mobs.h[b].h.name || "" == a.mobs.h[b].h.name ? null : a.mobs.h[b].h.name;
       };
       K.__super__ = pa;
       K.prototype = v(pa.prototype, {
         run: function () {
           var b = this.world.mobs,
             a = this.world.mobData,
             c = this.world.mobs.h[this.id];
           if (null == this.world.mobData.h[c.h.type]) this.remove();
           else if ("Object" != O.getQualifiedClassName(c)) this.removeMob(this.id);
           else {
             a = a.h[c.h.type];
             null == this.world.mobTmpData.h[this.id] && this.setMobTmpData(this.id);
             var d = this.world.mobTmpData.h[this.id];
             if (!this.hasInit) {
               if (null != a.h.specialInit && (a.h.specialInit(this.id), null == this.world.mobs.h[this.id])) return;
               this.hasInit = !0;
             }
             if (1 != a.h.alwaysActive) {
               if (
                 ((("hostile" == this.mobGetAlignment(this.id) || "neutral" == this.mobGetAlignment(this.id)) && "peaceful" == this.world.difficulty) ||
                   ("passive" == this.mobGetAlignment(this.id) && 0 == this.game.getGameRule("passivemobs"))) &&
                 null == K.getMobNameTag(this.id) &&
                 (1 != a.h.tameable || 1 != c.h.tamed)
               ) {
                 this.removeMob(this.id);
                 return;
               }
               if (this.onScreen(30, !0)) d.h.onScreen = !0;
               else {
                 1 == d.h.onScreen && ((d.h.onScreen = !1), this.hideRendering());
                 K.canDespawn(this.id) && Math.random() < a.h.despawnChance && this.removeMob(this.id);
                 return;
               }
             }
             null == c.h.ticksSinceLastDamageID && (c.h.ticksSinceLastDamageID = 0);
             c.h.ticksSinceLastDamageID += 1;
             c.h.ticksSinceLastDamageID >= 20 * m.Instance.get_fps() && (c.h.lastDamageID = "");
             if (0 < c.h.dead) {
               c.h.dead += 1;
               if (null != a.h.specialDeathAnimation) {
                 if ((a.h.specialDeathAnimation(this.id), null == this.world.mobs.h[this.id])) return;
               } else if (1 <= c.h.dead && ((this.colorTransform = [1, 0.3, 0.3, 1, 20, 0, 0, 0]), (this.rotation = (1 == c.h.direction ? 1 : -1) * Math.sqrt(Math.min(1, c.h.dead / 40)) * 90), 60 < c.h.dead)) {
                 this.game.addParticles("smoke", 0, 5, new h(c.h.x - (20 + 10 * (1 == c.h.direction ? 1 : -1)) / 30, 1.3333333333333333), new h(c.h.y - 0.6666666666666666, 1));
                 this.removeMob(this.id);
                 return;
               }
               this.mobOnScreen() && (this.updateAlpha(), (this.movieX = c.h.x), (this.movieY = c.h.y - 0.16666666666666666), this.render());
             } else if (0 >= c.h.health) this.killMob(this.id);
             else {
               this.game.manageEffects(this.id);
               1 >= Math.random() * (null != a.h.idleSoundFrequency ? a.h.idleSoundFrequency : 200) &&
                 null != this.get_sounds().h.idle &&
                 (null != this.get_sounds().h.aggroIdle && c.h.target == this.world.player.id
                   ? this.game.requestSound(this.get_sounds().h.aggroIdle[(Math.random() * this.get_sounds().h.aggroIdle.length) | 0], c.h.x - this.world.worldX, c.h.y - this.world.worldY)
                   : this.game.requestSound(this.get_sounds().h.idle[(Math.random() * this.get_sounds().h.idle.length) | 0], c.h.x - this.world.worldX, c.h.y - this.world.worldY));
               var f = Math.floor(c.h.x / 1),
                 e = Math.floor(-c.h.y);
               if (a.h.burnsInSun && 48 > this.world.tim && 2 < this.world.tim && !Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id) && 0 == this.world.raining && "wr" != this.world.getFG(f, e))
                 if (null != this.get_armor() && null != this.get_armor()[0] && "" != this.get_armor()[0][0])
                   0 == this.world.tick % 600 && 1 == q.get(this.get_armor()[0][0], "tool") && (this.get_armor()[0][2] += 1) >= q.get(this.get_armor()[0][0], "life") && (this.get_armor()[0][0] = "air");
                 else if (0.005 > Math.random()) {
                   for (var k = !0, C = 2; 21 > C; )
                     if ("air" != this.world.getFG(f, e + C++)) {
                       k = !1;
                       break;
                     }
                   k && (this.world.onFire.h[this.id] = !0);
                 }
               1 == a.h.burnsInDesert && Math.random() < 1 / m.Instance.get_fps() && null != this.world.biomeList[f] && "desert" == this.world.biomeList[f] && this.hurtMob(this.id, 1, "heat");
               if (0 >= c.h.hitCooldown) {
                 c.h.hitCooldown = 40;
                 if (Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id) && 0.025 > Math.random()) {
                   var n = this.id;
                   C = this.world.onFire;
                   Object.prototype.hasOwnProperty.call(C.h, n) && delete C.h[n];
                 }
                 1 != a.h.burnsInLava || ("la" != this.world.getFG(f, e) && "la" != this.world.getFG(f, e + 1))
                   ? 1 != a.h.burnsInAcid || ("ad" != this.world.getFG(f, e) && "ad" != this.world.getFG(f, e + 1))
                     ? "magma" == this.world.getFG(f, e) && 1 != q.get(this.world.getFG(f, e + 1), "waterCollision")
                       ? this.hurtMob(this.id, 2, "lava")
                       : Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id) && 0 != a.h.burnsOnFire
                       ? this.hurtMob(this.id, 2, "fire")
                       : ("wolf" == c.h.type && 1 == c.h.tamed) ||
                         ("cow" == c.h.type && "cowctus" == c.h.variant) ||
                         0 == a.h.cactusDamage ||
                         ("ct" != this.world.getFG(f, e) && "ct" != this.world.getFG(f, e + 1)) ||
                         this.hurtMob(this.id, 1, "cactus")
                     : this.hurtMob(this.id, 5, "acid")
                   : ((this.world.onFire.h[this.id] = !0), this.hurtMob(this.id, 5, "lava"));
               } else --c.h.hitCooldown;
               this.mobCalculateTarget(this.id);
               if ("custom" != a.h.aiType) {
                 null != d.h.overrideMovement
                   ? (d.h.overrideMovement = !1)
                   : 1 != a.h.hops || 0 == c.h.falling
                   ? (Math.random() < a.h.percentageChanceToDoMovement * (1 == d.h.isFrightened ? 3 : 1) &&
                       (Math.random() < a.h.percentageChanceToStopMoving * (1 == d.h.isFrightened ? 0.5 : 1) && (1 == a.h.hops && (this.get_keys().h.up = !1), (this.get_keys().h.left = !1), (this.get_keys().h.right = !1)),
                       (k = Math.random()),
                       k < a.h.percentageChanceToChangeDirection * (1 == d.h.isFrightened ? 4 : 1)
                         ? (1 == a.h.hops && (this.get_keys().h.up = !0), (this.get_keys().h.left = !0), (this.get_keys().h.right = !1))
                         : k < 2 * a.h.percentageChanceToChangeDirection * (1 == d.h.isFrightened ? 4 : 1) && (1 == a.h.hops && (this.get_keys().h.up = !0), (this.get_keys().h.left = !1), (this.get_keys().h.right = !0)),
                       Math.random() < a.h.percentageChanceToJump * (1 == d.h.isFrightened ? 3 : 1) ? (this.get_keys().h.up = !0) : 1 != a.h.hops && (this.get_keys().h.up = !1)),
                     1 == a.h.jumpAttack && 1 == d.h.following && 3 > Math.abs(c.h.x - d.h.followPoint.x) && 3 <= d.h.followMaxDistance && Math.random() < 2 / m.Instance.get_fps() && (this.get_keys().h.up = !0),
                     1 == d.h.following &&
                       0 == d.h.isFrightened &&
                       (Math.abs(c.h.y - d.h.followPoint.y) < d.h.followMaxDistance / 2
                         ? (Math.abs(c.h.x - d.h.followPoint.x) <= d.h.followMaxDistance
                             ? Math.abs(c.h.x - d.h.followPoint.x) >= d.h.followMinDistance &&
                               Math.random() < (null != a.h.percentageChanceToUpdatePursuit ? a.h.percentageChanceToUpdatePursuit : 0.2) &&
                               (0 < c.h.x - d.h.followPoint.x
                                 ? (1 == a.h.hops && (this.get_keys().h.up = !0), (this.get_keys().h.left = !0), (this.get_keys().h.right = !1))
                                 : (1 == a.h.hops && (this.get_keys().h.up = !0), (this.get_keys().h.right = !0), (this.get_keys().h.left = !1)))
                             : 0 < c.h.aggressiveness && --c.h.aggressiveness,
                           1 == a.h.followVertically &&
                             (c.h.y - d.h.followPoint.y < -d.h.followMaxDistance / 2 && 0 < c.h.y - d.h.followPoint.y
                               ? (this.get_keys().h.up = !0)
                               : c.h.y - d.h.followPoint.y > -d.h.followMaxDistance / 2 && 0 > c.h.y - d.h.followPoint.y && (this.get_keys().h.up = !1)))
                         : 0 < c.h.aggressiveness && --c.h.aggressiveness,
                       0 < d.h.teleportWhenAway &&
                         !c.h.sitting &&
                         Math.pow(c.h.y - d.h.followPoint.y, 2) + Math.pow(c.h.x - d.h.followPoint.x, 2) > d.h.teleportWhenAway * d.h.teleportWhenAway &&
                         this.teleportMob(this.mobPosition(this.world.player.id), 4, 2, !1)))
                   : 1 == a.h.hops && (this.get_keys().h.up = !1);
                 if (0 < c.h.breedTimer) {
                   if (
                     ((c.h.breedTimer = Math.max(0, c.h.breedTimer - 1)),
                     Math.random() < 1 / m.Instance.get_fps() && this.game.addParticles("heart", 1, 0, new h(c.h.x, 0), new h(c.h.y - 2, 0), !0),
                     0 >= c.h.breedTimer && ((c.h.breedTimer = 0), "" != c.h.breedTarget && null != b.h[c.h.breedTarget]))
                   )
                     if (6.25 > Math.pow(b.h[c.h.breedTarget].h.x - c.h.x, 2) + Math.pow(b.h[c.h.breedTarget].h.y - c.h.y, 2)) {
                       n = K.spawnMob(c.h.type, (b.h[c.h.breedTarget].h.x + c.h.x) / 2, (b.h[c.h.breedTarget].h.y + c.h.y) / 2);
                       k = b.h[n];
                       k.h.parents = [this.id, c.h.breedTarget];
                       k.h.variant = c.h.variant;
                       var p = 1200 * m.Instance.get_fps();
                       k.h.babyTimer = p;
                       "wolf" == c.h.type && ((k.h.tamed = !0), (p = 0.5 > Math.random() ? c.h.tamedBy : b.h[c.h.breedTarget].h.tamedBy), (k.h.tamedBy = p));
                       if ("sheep" == c.h.type || "wolf" == c.h.type) (p = this.game.pickCombinedColor(c.h.color, b.h[c.h.breedTarget].h.color)), (k.h.color = p);
                       this.game.dropXP(k.h.x, k.h.y, 3);
                       this.game.unlockAchieve(44);
                       n = b.h[c.h.breedTarget];
                       p = 300 * -m.Instance.get_fps();
                       n.h.breedTimer = p;
                       c.h.breedTimer = p;
                     } else b.h[c.h.breedTarget].h.breedTimer = 0;
                 } else 0 > c.h.breedTimer && (c.h.breedTimer = Math.min(0, c.h.breedTimer + 1));
                 0 < c.h.babyTimer && (c.h.babyTimer = Math.max(0, c.h.babyTimer - 1));
                 1 != a.h.ignoreCliffs &&
                   ((k = (this.get_keys().h.right ? 0.5 : 0) + (this.get_keys().h.left ? -0.5 : 0)),
                   this.game.collision(c.h.x + k, c.h.y, 0, 3 + (null != this.get_effects().h.jumpboost ? g.makeDynamicMap(this.get_effects().h.jumpboost).h.level : 0), 0.5, !0, !0, !0) ||
                     (0 < k ? (this.get_keys().h.right = !1) : 0 > k && (this.get_keys().h.left = !1), 1 == a.h.hops && 0 != k && (this.get_keys().h.up = !0)));
                 k = 0;
                 null != this.get_armor()[3] && (this.getArmorExtras(3).h.depthStrider1 ? (k = 0.4) : this.getArmorExtras(3).h.depthStrider2 ? (k = 0.7) : this.getArmorExtras(3).h.depthStrider3 && (k = 1));
                 null != this.world.water.h["blockX" + f + "Y" + (e + 1)] &&
                   (this.world.water.h["blockX" + f + "Y" + (e + 1)][0] > this.world.water.h["blockX" + f + "Y" + (e + 1)][1]
                     ? this.set_speedX(this.get_speedX() + g.migrateAcc(1 - k, 0.7))
                     : this.world.water.h["blockX" + f + "Y" + (e + 1)][0] < this.world.water.h["blockX" + f + "Y" + (e + 1)][1] && this.set_speedX(this.get_speedX() - g.migrateAcc(1 - k, 0.7)),
                   1 == this.world.states.h["blockX" + f + "Y" + (e + 1)]
                     ? this.set_speedY(this.get_speedY() + g.migrateAcc(3, 0.6))
                     : -1 == this.world.states.h["blockX" + f + "Y" + (e + 1)] && c.h.falling && this.set_speedY(this.get_speedY() - g.migrateAcc(2, 0.6)));
                 null != this.world.water.h["blockX" + f + "Y" + (e + 2)] &&
                   (this.world.water.h["blockX" + f + "Y" + (e + 2)][0] > this.world.water.h["blockX" + f + "Y" + (e + 2)][1]
                     ? this.set_speedX(this.get_speedX() + g.migrateAcc(1 - k, 0.7))
                     : this.world.water.h["blockX" + f + "Y" + (e + 2)][0] < this.world.water.h["blockX" + f + "Y" + (e + 2)][1] && this.set_speedX(this.get_speedX() - g.migrateAcc(1 - k, 0.7)),
                   1 == this.world.states.h["blockX" + f + "Y" + (e + 2)]
                     ? this.set_speedY(this.get_speedY() + g.migrateAcc(3, 0.6))
                     : -1 == this.world.states.h["blockX" + f + "Y" + (e + 2)] && c.h.falling && this.set_speedY(this.get_speedY() - g.migrateAcc(2, 0.6)));
                 null == q.get(this.world.getFG(f, e + 1), "walkThroughBlockHit") &&
                   (1 == q.get(this.world.getFG(f - 1, e + 1), "walkThroughBlockHit")
                     ? this.set_speedX(this.get_speedX() - g.migrateAcc(1, 0.7))
                     : 1 == q.get(this.world.getFG(f + 1, e + 1), "walkThroughBlockHit")
                     ? this.set_speedX(this.get_speedX() + g.migrateAcc(1, 0.7))
                     : (c.h.falling = !0));
                 1 == a.h.ignoreWeb ||
                   ("web" != this.world.getFG(f, e + 1) && "web" != this.world.getFG(f, e + 2)) ||
                   (this.set_speedX(this.get_speedX() * g.migrateDampening(0.2)), this.set_speedY(this.get_speedY() * g.migrateDampening(0.2)));
                 ("ssd" != this.world.getFG(f, e) && "slimeb" != this.world.getFG(f, e)) || this.set_speedX(this.get_speedX() * g.migrateDampening(0.5));
                 this.game.collision(c.h.x + 0.7 * this.mobCollisionBounds(this.id).get_left(), c.h.y - 0.3333333333333333, 0.7 * this.mobCollisionBounds(this.id).width, 0, 0.13333333333333333, !1) &&
                   !this.game.collision(c.h.x + 0.7 * this.mobCollisionBounds(this.id).get_left(), c.h.y - 1.5, 0.7 * this.mobCollisionBounds(this.id).width, 0, 0.13333333333333333, !1) &&
                   (c.h.y -= 0.5);
                 c.h.wasFalling = 1 == c.h.falling;
                 k = c.h.falling = !0;
                 d.h.rightable = !0;
                 d.h.leftable = !0;
                 var A = !1,
                   t = !1,
                   r = c.h.x,
                   w = c.h.y,
                   y = Math.max(1, Math.ceil(Math.sqrt(this.get_speedX() * this.get_speedX() + this.get_speedY() * this.get_speedY()))) | 0;
                 for (C = 0; C < y; )
                   if (
                     ((n = C++),
                     t || (r = c.h.x + (this.get_speedX() * (n + 1)) / y / 30),
                     A ||
                       ((w = c.h.y - (this.get_speedY() * (n + 1)) / y / 30),
                       this.game.collision(r + 0.7 * this.mobCollisionBounds(this.id).get_left(), w + 0.03333333333333333, 0.7 * this.mobCollisionBounds(this.id).width, 0, 0.13333333333333333, !1) &&
                         ((A = !0), (c.h.falling = !1), c.h.wasFalling && ((p = -this.get_speedY()), (c.h.wasFallingSpeed = p)), this.set_speedY(0)),
                       this.game.collision(r + 0.7 * this.mobCollisionBounds(this.id).get_left(), w + this.mobCollisionBounds(this.id).get_top(), 0.7 * this.mobCollisionBounds(this.id).width, 0, 0.13333333333333333, !1) &&
                         ((k = !1), 0 < this.get_speedY() && ((A = !0), this.set_speedY(-Math.abs(this.get_speedY() / 2))))),
                     !t &&
                       (this.game.collision(r + this.mobCollisionBounds(this.id).get_left(), w + this.mobCollisionBounds(this.id).get_top(), 0, Math.max(0, this.mobCollisionBounds(this.id).height - 0.6), 0.13333333333333333) &&
                         ((d.h.leftable = !1),
                         1 == a.h.climbsWalls
                           ? 0.016666666666666666 > Math.random() && ((n = this.get_keys()), (p = !this.get_keys().h.up), (n.h.up = p))
                           : (0.1 >= Math.random() && ((this.get_keys().h.up = !0), (this.get_keys().h.left = !0)), 0.1 >= Math.random() && ((this.get_keys().h.up = !1), (this.get_keys().h.left = !1))),
                         0 > this.get_speedX() && ((t = !0), this.set_speedX(0))),
                       this.game.collision(r + this.mobCollisionBounds(this.id).get_right(), w + this.mobCollisionBounds(this.id).get_top(), 0, Math.max(0, this.mobCollisionBounds(this.id).height - 0.6), 0.13333333333333333)))
                   ) {
                     d.h.rightable = !1;
                     if (1 == a.h.climbsWalls) {
                       if (0.016666666666666666 > Math.random()) {
                         var x = this.get_keys();
                         n = !this.get_keys().h.up;
                         x.h.up = n;
                       }
                     } else 0.1 >= Math.random() && ((this.get_keys().h.up = !0), (this.get_keys().h.right = !0)), 0.1 >= Math.random() && ((this.get_keys().h.up = !1), (this.get_keys().h.right = !1));
                     0 < this.get_speedX() && ((t = !0), this.set_speedX(0));
                   }
                 1 == d.h.following &&
                   1 != d.h.isFrightened &&
                   Math.abs(c.h.x - d.h.followPoint.x) >= d.h.followMinDistance &&
                   Math.abs(r - d.h.followPoint.x) < d.h.followMinDistance &&
                   ((this.get_keys().h.left = !1), (this.get_keys().h.right = !1));
                 c.h.x = r;
                 c.h.y = w;
                 if (1 == c.h.wasFalling && 0 == c.h.falling) {
                   0 >= d.h.wasFallingAndNotFalling &&
                     ("slimeb" == this.world.getFG(Math.floor(c.h.x / 1), Math.floor(-(c.h.y + 0.03333333333333333)))
                       ? (this.game.addParticles("slime", 0, 5, new h(c.h.x, 0), new h(c.h.y, 0)), this.game.requestSound("slimeblockland", c.h.x - this.world.worldX, c.h.y - this.world.worldY))
                       : this.game.blockSound(f, e, c.h.x - this.world.worldX, c.h.y - this.world.worldY),
                     null != this.get_armor()[3]
                       ? ((n = this.getArmorExtras(3)), Object.prototype.hasOwnProperty.call(n.h, "frostWalker1") ? (C = !0) : ((n = this.getArmorExtras(3)), (C = Object.prototype.hasOwnProperty.call(n.h, "frostWalker2"))))
                       : (C = !1),
                     C && ((C = this.game), (A = Math.floor(c.h.x / 1)), (t = Math.floor(-c.h.y)), (n = this.getArmorExtras(3)), C.doFrostWalker(A, t, Object.prototype.hasOwnProperty.call(n.h, "frostWalker2") ? 3 : 2)));
                   d.h.wasFallingAndNotFalling = 6;
                   "bed" == I.substr(this.world.getFG(Math.floor(c.h.x / 1), Math.floor(-(c.h.y + 1))), 0, 3)
                     ? (c.h.wasFallingSpeed *= g.migrateDampening(0.6))
                     : "slimeb" == this.world.getFG(Math.floor(c.h.x / 1), Math.floor(-(c.h.y + 1))) &&
                       (c.h.wasFallingSpeed > g.migrateSpeed(6)
                         ? (this.set_speedY(0.78 * Math.max(0, c.h.wasFallingSpeed - g.migrateSpeed(5))), (c.h.wasFallingSpeed = 0), (p = c.h.y - this.get_speedY() / 2 / 30), (c.h.y = p))
                         : this.set_speedY(0));
                   if (0 != a.h.takesFallDamage && c.h.wasFallingSpeed > g.migrateSpeed(23)) {
                     c.h.wasFallingSpeed -= g.migrateSpeed(14);
                     for (C = n = 0; 0 <= c.h.wasFallingSpeed; ) (n += 2), ++C, (c.h.wasFallingSpeed -= g.migrateSpeed(Math.max(11 - n, 1)));
                     null != this.get_effects().h.jumpboost && (C -= Math.ceil(1.75 * g.makeDynamicMap(this.get_effects().h.jumpboost).h.level));
                     0 < C && this.hurtMob(this.id, C, "fall");
                   }
                   0 >= this.get_speedY() && (c.h.y = 0.5 * Math.round(c.h.y / 0.5) + 0.16666666666666666);
                 } else --d.h.wasFallingAndNotFalling;
                 p = d.h.distanceX + Math.abs(this.get_speedX()) / 30;
                 d.h.distanceX = p;
                 1 < d.h.distanceX &&
                   ((d.h.distanceX = 0),
                   1 != a.h["float"] && this.game.blockSound(f, e, c.h.x - this.world.worldX, c.h.y - this.world.worldY),
                   null != this.get_armor() && null != this.get_armor()[3]
                     ? ((n = this.getArmorExtras(3)), Object.prototype.hasOwnProperty.call(n.h, "frostWalker1") ? (C = !0) : ((n = this.getArmorExtras(3)), (C = Object.prototype.hasOwnProperty.call(n.h, "frostWalker2"))))
                     : (C = !1),
                   C && ((C = this.game), (A = Math.floor(c.h.x / 1)), (t = Math.floor(-c.h.y)), (n = this.getArmorExtras(3)), C.doFrostWalker(A, t, Object.prototype.hasOwnProperty.call(n.h, "frostWalker2") ? 3 : 2)));
                 this.game.collisionWithLiquid(
                   c.h.x + 0.7 * this.mobCollisionBounds(this.id).get_left(),
                   c.h.y - this.mobCollisionBounds(this.id).get_top(),
                   0.7 * this.mobCollisionBounds(this.id).width,
                   this.mobCollisionBounds(this.id).height,
                   0.5,
                   !1
                 ) && (this.get_keys().h.up = !0);
                 n = this.world.getFG(f, Math.floor(e + 0.8 * this.mobCollisionBounds(this.id).height));
                 q.get(n, "liquidCollision")
                   ? (null != this.get_effects().h.waterbreathing ? ((c.h.airTimer = 60), (c.h.air = 11)) : --c.h.airTimer,
                     (c.h.startUnderwaterTimer = 5),
                     0 >= c.h.airTimer && ((c.h.airTimer = 60), 0 >= c.h.air ? this.hurtMob(this.id, 1, "drown") : --c.h.air),
                     "wr" == n &&
                       (0.1 > Math.random() && this.game.addParticles("water", 1, 0, new h(c.h.x, 0), new h(c.h.y - 2, 0)), 0 == d.h.inWater && this.game.addParticles("water", 0, 5, new h(c.h.x, 0), new h(c.h.y - 2, 0)), (d.h.inWater = !0)))
                   : ((c.h.air = 11),
                     (c.h.airTimer = 60),
                     0 >= c.h.startUnderwaterTimer
                       ? (1 == d.h.inWater && (this.game.addParticles("water", 0, 10, new h(c.h.x - 0.5, 1), new h(c.h.y - 0.5, 0)), this.game.requestSound("splash", c.h.x - this.world.worldX, c.h.y - this.world.worldY)), (d.h.inWater = !1))
                       : --c.h.startUnderwaterTimer);
                 if (q.get(this.world.getFG(f, e), "waterCollision") || q.get(this.world.getFG(f, e + 1), "waterCollision")) (n = this.id), (C = this.world.onFire), Object.prototype.hasOwnProperty.call(C.h, n) && delete C.h[n];
                 null != a.h.specialGravityFunction
                   ? a.h.specialGravityFunction(this.id)
                   : 1 == c.h.falling
                   ? (1 == q.get(this.world.getFG(f, e + 1), "liquidCollision") ? this.set_speedX(this.get_speedX() * g.migrateDampening(0.55)) : this.set_speedX(this.get_speedX() * g.migrateDampening(0.65)),
                     this.set_speedY(this.get_speedY() - g.migrateAcc(null != a.h.fallSpeed ? a.h.fallSpeed : 2, 0.97)))
                   : "ice" == this.world.getFG(f, e) || "fice" == this.world.getFG(f, e)
                   ? this.set_speedX(this.get_speedX() * g.migrateDampening(0.9))
                   : this.set_speedX(this.get_speedX() * g.migrateDampening(0.7));
                 1 == q.get(this.world.getFG(f, e + 1), "climbable") && this.set_speedY(this.get_speedY() * g.migrateDampening(0.6));
                 1 == a.h["float"] && this.set_speedY(Math.max(g.migrateSpeed(-(null != a.h.floatMaxSpeed ? a.h.floatMaxSpeed : 3)), Math.min(g.migrateSpeed(null != a.h.floatMaxSpeed ? a.h.floatMaxSpeed : 3), this.get_speedY())));
                 n = a.h.walkSpeed;
                 if ("slime" == c.h.type || "magmacube" == c.h.type) n = 0.6 * c.h.size + 0.3;
                 null != c.h.riddenBy && (n = a.h.walkSpeedWhenRidden);
                 C =
                   n *
                   (1 +
                     (null != this.get_effects().h.speed ? (g.makeDynamicMap(this.get_effects().h.speed).h.level * g.makeDynamicMap(this.game.effectData.h.speed).h.perLevel) / 100 : 0) +
                     (null != this.get_effects().h.slowness ? (g.makeDynamicMap(this.get_effects().h.slowness).h.level * g.makeDynamicMap(this.game.effectData.h.slowness).h.perLevel) / 100 : 0));
                 d.h.forceSpeedMultiplier ? ((C += n * (d.h.forceSpeedMultiplier - 1)), (d.h.forceSpeedMultiplier = null)) : d.h.isFrightened && (C += n * (a.h.sprintMultiplier - 1));
                 0 < c.h.babyTimer && (C *= 1.2);
                 1 == d.h.immobile && ((n = this.get_keys()), (x = this.get_keys()), (p = this.get_keys().h.up = !1), (x.h.left = p), (n.h.right = p), (d.h.immobile = !1));
                 1 == this.get_keys().h.left && 1 == d.h.leftable && ((1 == a.h.hops && 1 != c.h.falling) || this.set_speedX(this.get_speedX() - g.migrateAcc(C, 0.97)), (c.h.direction = 0));
                 1 == this.get_keys().h.right && 1 == d.h.rightable && ((1 == a.h.hops && 1 != c.h.falling) || this.set_speedX(this.get_speedX() + g.migrateAcc(C, 0.97)), (c.h.direction = 1));
                 if (1 == a.h.attackExplode)
                   if (null != c.h.target || Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id))
                     if (0 == c.h.fuse) this.mobCollision(this.id, c.h.target) && (this.game.requestSound("fuse", c.h.x - this.world.worldX, c.h.y - this.world.worldY), (c.h.fuse = 1));
                     else if (((n = this.mobPosition(c.h.target)), 25 <= Math.pow(n.x - c.h.x, 2) + Math.pow(n.y - c.h.y, 2) && !Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id))) 0 < c.h.fuse && --c.h.fuse;
                     else if (c.h.fuse < a.h.fuseLength) c.h.fuse += 1;
                     else {
                       1 == c.h.charged ? this.game.explode(c.h.x / 1, -c.h.y, 8, !1, this.game.getGameRule("mobgriefing"), this.id) : this.game.explode(c.h.x / 1, -c.h.y, 4, !1, this.game.getGameRule("mobgriefing"), this.id);
                       c.h.health = 0;
                       this.removeMob(this.id);
                       return;
                     }
                   else 0 < c.h.fuse && --c.h.fuse;
                 else 0 >= c.h.attackCooldown ? this.mobAttack(this.id) : --c.h.attackCooldown;
                 1 == a.h.climbsWalls &&
                   ((1 == c.h.falling &&
                     this.game.collision(c.h.x + this.mobCollisionBounds(this.id).get_left() - 0.16666666666666666, c.h.y + this.mobCollisionBounds(this.id).get_top(), 0, Math.max(0, this.mobCollisionBounds(this.id).height + 0.3), 0.2)) ||
                   this.game.collision(c.h.x + this.mobCollisionBounds(this.id).get_right() + 0.16666666666666666, c.h.y + this.mobCollisionBounds(this.id).get_top(), 0, Math.max(0, this.mobCollisionBounds(this.id).height + 0.3), 0.2)
                     ? (this.set_speedY(this.get_speedY() * g.migrateDampening(0.7)), 1 == this.get_keys().h.up && this.set_speedY(this.get_speedY() + g.migrateAcc(3, 0.97)))
                     : 0.05 > Math.random() && (this.get_keys().h.up = !1));
                 if (1 == this.get_keys().h.up)
                   if (((n = 0), 1 == a.h["float"]))
                     k && (n = 1 == a.h.ignoreWeb || ("web" != this.world.getFG(f, e) && "web" != this.world.getFG(f, e + 1)) ? n + (null != a.h.floatJump ? a.h.floatJump : 2) : n + (null != a.h.floatJump ? a.h.floatJump : 2) / 2),
                       this.set_speedY(this.get_speedY() + g.migrateAcc(n, 0.97)),
                       (c.h.y -= n / 2 / 30);
                   else if (
                     (1 == q.get(this.world.getFG(f, e), "climbable") && 1 != q.get(this.world.getFG(f, e + 1), "climbable") && 1 != q.get(this.world.getFG(f, e + 2), "climbable") && 1 != q.get(this.world.getFG(f, e + 3), "climbable")) ||
                     (1 == q.get(this.world.getFG(f, e + 1), "climbable") && 1 == q.get(this.world.getFG(f, e + 2), "walkThroughBlockHit"))
                   )
                     k && ((n = 3 * (null != a.h.jumpSpeedMultiplier ? a.h.jumpSpeedMultiplier : 1)), this.set_speedY(this.get_speedY() + g.migrateAcc(n, 0.7)), 0 == c.h.falling && (c.h.y -= n / 2 / 30));
                   else if (
                     k &&
                     ("bed" != I.substr(this.world.getFG(f, e), 0, 3) || c.h.falling ? (1 == a.h.ignoreWeb || ("web" != this.world.getFG(f, e) && "web" != this.world.getFG(f, e + 1)) ? c.h.falling || (n = 15) : (n = 2)) : (n = 17),
                     "slimeb" != this.world.getFG(f, e) || c.h.falling || this.game.requestSound("slimeblockjump", c.h.x - this.world.worldX, c.h.y - this.world.worldY),
                     0 < n)
                   ) {
                     n *= null != a.h.jumpSpeedMultiplier ? a.h.jumpSpeedMultiplier : 1;
                     0 != n && null != this.get_effects().h.jumpboost && (n += 3.5 * g.makeDynamicMap(this.get_effects().h.jumpboost).h.level);
                     if ("slime" == c.h.type || "magmacube" == c.h.type) n *= 0.2 * c.h.size + 0.6;
                     n > this.get_speedY() && (this.set_speedY(g.migrateSpeed(n)), (c.h.y -= n / 2 / 30));
                   }
               }
               this.mobRiding(this.id);
               if (null != a.h.specialFunction && (a.h.specialFunction(this.id), null == b.h[this.id])) return;
               this.renderMob(this.id);
               d.h.loot = 0;
               0 < d.h.hurtAnimation && (--d.h.hurtAnimation, (this.colorTransform = 0 < d.h.hurtAnimation ? [1, 0.6, 0.6, 1, 20, 0, 0, 0] : [1, 1, 1, 1, 0, 0, 0, 0]));
             }
           }
         },
         mobOnScreen: function () {
           var b = this.world.mobData.h[this.world.mobs.h[this.id].h.type];
           return pa.prototype.onScreen.call(this, null != b.h.minimumRenderDistance ? b.h.minimumRenderDistance : 5, !0);
         },
         updateAlpha: function () {
           null != this.get_effects().h.invisibility ? 0 != this.alpha && (this.alpha = 0) : 1 != this.alpha && (this.alpha = 1);
         },
         renderMob: function (b) {
           var a = this.world.mobs.h[b],
             c = this.world.mobData.h[a.h.type];
           if (this.mobOnScreen()) {
             var d = this.world.mobTmpData.h[b];
             this.updateAlpha();
             if (null != c.h.animations) {
               var f = this.get_keys().h.left || this.get_keys().h.right;
               a.h.animationFrame += 1;
               null != d.h.animationOverride && "" != d.h.animationOverride
                 ? (null == this.get_animations().h[d.h.animationOverride] &&
                     (Ia.trace("Couldn't find animation '" + E.string(d.h.animationOverride) + "' for " + E.string(a.h.type), {
                       fileName: "src/entities/Entity_Mob.hx",
                       lineNumber: 803,
                       className: "entities.Entity_Mob",
                       methodName: "renderMob",
                     }),
                     (d.h.animationOverride = null)),
                   a.h.animationType != d.h.animationOverride && ((a.h.animationFrame = 0), (a.h.animationType = d.h.animationOverride)))
                 : a.h.eating && null != this.get_animations().h.eating
                 ? "eating" != a.h.animationType && ((a.h.animationFrame = 0), (a.h.animationType = "eating"))
                 : a.h.sitting && null != this.get_animations().h.sitting
                 ? "sitting" != a.h.animationType && ((a.h.animationFrame = 0), (a.h.animationType = "sitting"))
                 : a.h.falling && null != this.get_animations().h.falling
                 ? "falling" != a.h.animationType && ((a.h.animationFrame = 0), (a.h.animationType = "falling"))
                 : f && Math.abs(this.get_speedX()) > g.migrateSpeed(2)
                 ? "walk" != a.h.animationType && ((a.h.animationFrame = 0), (a.h.animationType = "walk"))
                 : "idle" != a.h.animationType && ((a.h.animationFrame = 0), (a.h.animationType = "idle"));
               var l = this.get_animations().h[a.h.animationType];
               f = null == l ? 1 : l.h.frames[(a.h.animationFrame / l.h.frameDelay) % l.h.frames.length | 0];
               "" != a.h.variant && null != l.h.variants && null != H.__cast(l.h.variants, e).h[a.h.variant] && (f += g.makeDynamicMap(H.__cast(l.h.variants, e).h[a.h.variant]).h.offset);
               this.currentFrame != f + (null != d.h.animationOffset ? d.h.animationOffset : 0) && this.gotoAndStop(f + (null != d.h.animationOffset ? d.h.animationOffset : 0));
             }
             this.movieX = a.h.x;
             this.movieY = a.h.y - 0.16666666666666666;
             this.scaleX = (a.h.direction ? -1 : 1) * (0 < a.h.babyTimer ? 0.7 : 1);
             this.scaleY = 0 < a.h.babyTimer ? 0.7 : 1;
             this.fire = Object.prototype.hasOwnProperty.call(this.world.onFire.h, b);
             null != K.getMobNameTag(b) &&
             2 > Math.abs(this.game.mouseWorldPosition.x - a.h.x) &&
             2 > Math.abs(this.game.mouseWorldPosition.y - a.h.y) &&
             4 > Math.abs(this.game.mouseWorldPosition.x - this.world.worldX) &&
             4 > Math.abs(this.game.mouseWorldPosition.y - this.world.worldY)
               ? ((this.showNametag = !0), (this.nametagText = a.h.name))
               : (this.showNametag = !1);
             null != c.h.specialRendering && c.h.specialRendering(b);
             this.render();
           } else this.hasRendered && 0 != this.alpha && ((this.alpha = 0), this.render());
         },
         gotoAndStop: function (b) {
           this.currentFrame = b;
         },
         render: function (b) {
           null == b && (b = 0);
           this.initMobEntity();
           pa.prototype.render.call(this, b);
           this.showNametag &&
             ((b = R.get("nametag" + this.id + "shadow", this.nametagText, new h(), x.get_volter(), new F(-16777216), 1.375, Q.CENTER, 1)),
             b.transform
               .reset()
               .scale2D(1.375 / this.game.zoom)
               .translate(
                 Math.floor(this.get_x() * this.game.zoom) / this.game.zoom,
                 Math.floor((this.get_y() - 1 + H.__cast(this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.collisionBounds, t).get_top()) * this.game.zoom) / this.game.zoom
               )
               .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
               .scale2D(this.game.zoom)
               .translate(this.game.scene.get_width() / 2 + 1, this.game.scene.get_height() / 2 + 1),
             (b.layer = 1),
             this.game.scene.draw(b),
             (b = R.get("nametag" + this.id, this.nametagText, new h(), x.get_volter(), new F(-1), 1.25, Q.CENTER, 1)),
             b.transform
               .reset()
               .scale2D(1.375 / this.game.zoom)
               .translate(
                 Math.floor(this.get_x() * this.game.zoom) / this.game.zoom,
                 Math.floor((this.get_y() - 1 + H.__cast(this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.collisionBounds, t).get_top()) * this.game.zoom) / this.game.zoom
               )
               .translate(Math.floor(-this.game.camera.x * this.game.zoom) / this.game.zoom, Math.floor(-this.game.camera.y * this.game.zoom) / this.game.zoom)
               .scale2D(this.game.zoom)
               .translate(this.game.scene.get_width() / 2, this.game.scene.get_height() / 2),
             (b.layer = 1),
             this.game.scene.draw(b));
           this.hasRendered = !0;
         },
         hideRendering: function () {
           for (var b = 0, a = this.quadPositions; b < a.length; ) this.entity.updateQuad(a[b++], null, null, null, new h());
         },
         initMobEntity: function () {
           if (null == this.entity) {
             if (null == this.game.entityPools.h[this.entityPoolID]) {
               var b = this.game.entityPools,
                 a = this.entityPoolID,
                 c = this.entityPoolID,
                 d = y.blockTextures,
                 f = mc.getShader(xa.NORMAL),
                 l = new e(),
                 k = w.repeatArray([1], 6);
               l.h.texBlend = k;
               k = w.repeatArray([1], 24);
               l.h.color = k;
               k = w.repeatArray([0], 24);
               l.h.colorOffset = k;
               c = new Ca(c, new ja(d, null, f, l), this.getEntityScale());
               b.h[a] = c;
               this.game.entityPools.h[this.entityPoolID].entity.isTransparent = !0;
               this.game.entityPools.h[this.entityPoolID].entity.layer = 0;
             }
             this.entity = this.game.entityPools.h[this.entityPoolID].entity;
             this.entity.forceNoCulling = !0;
             this.entity.setTextureBuffer("texture2", P.getImage("mobs"));
             this.entity.setUniform("texSize2", [P.getImage("mobs").width, P.getImage("mobs").height]);
           }
         },
         mobCanBreed: function (b, a) {
           null == a && (a = "");
           return !this.world.mobData.h[this.world.mobs.h[b].h.type].h.canBreed ||
             (null != this.world.mobs.h[b].h.breedTimer && 0 != this.world.mobs.h[b].h.breedTimer) ||
             (null != this.world.mobs.h[b].h.babyTimer && 0 < this.world.mobs.h[b].h.babyTimer) ||
             (1 == this.world.mobData.h[this.world.mobs.h[b].h.type].h.tameable && (!this.world.mobs.h[b].h.tamed || this.world.mobs.h[b].h.tamedBy != a || this.world.mobs.h[b].h.health < this.mobMaxHealth(b)))
             ? !1
             : !0;
         },
         mobGetAlignment: function (b) {
           return null != this.world.mobs.h[b].h.aggro
             ? this.world.mobs.h[b].h.aggro
             : this.world.mobData.h[this.world.mobs.h[b].h.type].h.hostile
             ? "hostile"
             : this.world.mobData.h[this.world.mobs.h[b].h.type].h.neutral
             ? "neutral"
             : "passive";
         },
         mobCalculateTarget: function (b) {
           var a = this.world.mobs.h[b],
             c = this.world.mobData.h[a.h.type],
             d = this.world.mobTmpData.h[b];
           "passive" == this.mobGetAlignment(b) && !this.mobIsAggro(b) && (1 != c.h.doFrightenedRunning || Math.random() < 1 / (30 * m.Instance.get_fps())) && ((a.h.target = null), (a.h.focus = null));
           if (a.h.target == this.world.player.id) 0 < this.world.dead && ((a.h.target = null), (a.h.aggressiveness = 0));
           else if (null == this.world.mobs.h[a.h.target] || 0 < this.world.mobs.h[a.h.target].h.dead) (a.h.target = null), (a.h.aggressiveness = 0);
           null != a.h.tamed && a.h.target == a.h.tamedBy && ((a.h.target = null), (a.h.aggressiveness = 0));
           this.world.gamemode == U.gamemodes.h.SPECTATOR && (a.h.target == this.world.player.id && ((a.h.target = null), (a.h.aggressiveness = 0)), a.h.focus == this.world.player.id && (a.h.focus = null));
           if (!(null == c.h.randomlyHostileTowards || (c.h.tameable && a.h.tamed)))
             if (null == a.h.target) {
               if (Math.random() < c.h.randomlyHostileChance) {
                 for (var f = "", l = 1e3, k = Object.keys(this.world.mobs.h), C = k.length, n = 0; n < C; ) {
                   var p = k[n++];
                   1 == H.__cast(c.h.randomlyHostileTowards, e).h[this.world.mobs.h[p].h.type] &&
                     Math.pow(this.world.mobs.h[p].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[p].h.y - a.h.y, 2) < l &&
                     ((l = Math.pow(this.world.mobs.h[p].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[p].h.y - a.h.y, 2)), (f = p));
                 }
                 "" != f && l < Math.pow(8, 2) && (a.h.target = f);
               }
             } else Math.random() < c.h.randomlyForgetHostility && a.h.target != this.world.player.id && H.__cast(c.h.randomlyHostileTowards, e).h[this.world.mobs.h[a.h.target].h.type] && (a.h.target = null);
           d.h.isFrightened = 1 == c.h.doFrightenedRunning && null != a.h.target;
           d.h.followMinDistance = 0.5;
           d.h.followMaxDistance = 12;
           d.h.followPoint = new h(0, 0);
           d.h.following = !1;
           d.h.teleportWhenAway = 0;
           f = !0;
           l = !1;
           if (this.mobIsAggro(b))
             null == a.h.target ? this.world.gamemode != U.gamemodes.h.CREATIVE && this.world.gamemode != U.gamemodes.h.SPECTATOR && ((C = this.world.player.id), (a.h.focus = C), (a.h.target = C)) : (a.h.focus = a.h.target);
           else {
             if (0 < a.h.breedTimer) {
               if (
                 null == this.world.mobs.h[a.h.breedTarget] ||
                 this.world.mobs.h[a.h.breedTarget].h.type != a.h.type ||
                 0 == this.world.mobs.h[a.h.breedTarget].h.breedTimer ||
                 this.world.mobs.h[a.h.breedTarget].h.variant != a.h.variant ||
                 0 < this.world.mobs.h[a.h.breedTarget].h.babyTimer ||
                 (this.world.mobs.h[a.h.breedTarget].h.breedTarget != b && "" != this.world.mobs.h[a.h.breedTarget].h.breedTarget)
               )
                 for (a.h.breedTarget = "", C = Object.keys(this.world.mobs.h), n = C.length, p = 0; p < n; )
                   if (
                     ((k = C[p++]),
                     k != b &&
                       this.world.mobs.h[k].h.type == a.h.type &&
                       0 != this.world.mobs.h[k].h.breedTimer &&
                       this.world.mobs.h[k].h.variant == a.h.variant &&
                       !(
                         0 < this.world.mobs.h[k].h.babyTimer ||
                         (this.world.mobs.h[k].h.breedTarget != b && "" != this.world.mobs.h[k].h.breedTarget) ||
                         25 < Math.pow(this.world.mobs.h[k].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[k].h.y - a.h.y, 2)
                       ))
                   ) {
                     n = this.world.mobs.h[k];
                     C = 5 * m.Instance.get_fps();
                     n.h.breedTimer = C;
                     C = 5 * m.Instance.get_fps();
                     a.h.breedTimer = C;
                     this.world.mobs.h[k].h.breedTarget = b;
                     a.h.breedTarget = k;
                     break;
                   }
               "" != a.h.breedTarget && ((a.h.focus = a.h.breedTarget), (l = !0));
             }
             l ||
               null == c.h.followItems ||
               ((n = g.makeDynamicMap(c.h.followItems)),
               (k = this.world.get_selectedInventoryItemType()),
               null != n.h[k] && this.world.gamemode != U.gamemodes.h.SPECTATOR && 49 > Math.pow(this.world.worldX - a.h.x, 2) + Math.pow(this.world.worldY - a.h.y, 2) && ((a.h.focus = this.world.player.id), (l = !0)));
             if (!l && 0 < a.h.babyTimer && ((l = !0), null != a.h.parents))
               if (2 == a.h.parents.length)
                 if (null == this.world.mobs.h[a.h.parents[0]]) a.h.parents.shift();
                 else if (null == this.world.mobs.h[a.h.parents[1]]) a.h.parents.pop();
                 else if (
                   ((k = Math.pow(this.world.mobs.h[a.h.parents[0]].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[a.h.parents[0]].h.y - a.h.y, 2)),
                   (C = Math.pow(this.world.mobs.h[a.h.parents[1]].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[a.h.parents[1]].h.y - a.h.y, 2)),
                   k < C && ("wolf" != a.h.type || 0 == this.world.mobs.h[a.h.parents[0]].h.sitting))
                 )
                   (l = !0), 64 > k && (a.h.focus = a.h.parents[0]);
                 else {
                   if ("wolf" != a.h.type || 0 == this.world.mobs.h[a.h.parents[1]].h.sitting) (l = !0), 64 > C && (a.h.focus = a.h.parents[1]);
                 }
               else if (1 == a.h.parents.length)
                 if (null == this.world.mobs.h[a.h.parents[0]]) a.h.parents.pop();
                 else {
                   if ("wolf" != a.h.type || 0 == this.world.mobs.h[a.h.parents[0]].h.sitting)
                     (l = !0), 64 > Math.pow(this.world.mobs.h[a.h.parents[0]].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[a.h.parents[0]].h.y - a.h.y, 2) && (a.h.focus = a.h.parents[0]);
                 }
               else if (0.02 > Math.random())
                 for (C = Object.keys(this.world.mobs.h), n = C.length, p = 0; p < n; )
                   if (
                     ((k = C[p++]), k != b && this.world.mobs.h[k].h.type == a.h.type && this.world.mobs.h[k].h.variant == a.h.variant && !(25 < Math.pow(this.world.mobs.h[k].h.x - a.h.x, 2) + Math.pow(this.world.mobs.h[k].h.y - a.h.y, 2)))
                   ) {
                     a.h.parents.push(k);
                     break;
                   }
           }
           l ||
             (1 == c.h.tameable && 1 == a.h.tamed
               ? null == a.h.target && ((a.h.focus = a.h.tamedBy), (f = !1), (d.h.followMinDistance = 4), (d.h.followMaxDistance = 20), a.h.sitting || (d.h.teleportWhenAway = 20))
               : "hostile" != this.mobGetAlignment(b) && 0 >= a.h.aggressiveness && (a.h.focus = null));
           a.h.focus == this.world.player.id
             ? (f && ((d.h.followMinDistance *= this.game.visibility), (d.h.followMaxDistance *= this.game.visibility)),
               (b = this.world.worldX),
               (c = (this.mobCollisionBounds(this.world.player.id).get_left() + this.mobCollisionBounds(this.world.player.id).get_right()) / 2),
               (d.h.followPoint.x = b + c),
               (b = this.world.worldY),
               (c = (this.mobCollisionBounds(this.world.player.id).get_top() + this.mobCollisionBounds(this.world.player.id).get_bottom()) / 2),
               (d.h.followPoint.y = b + c),
               (d.h.following = !0))
             : null != a.h.focus &&
               null != this.world.mobs.h[a.h.focus] &&
               (f &&
                 ((b = d.h.followMinDistance),
                 (C = null != this.game.getMob(a.h.focus).get_effects().h.invisibility ? 0 : 1),
                 (d.h.followMinDistance = b * C),
                 (b = d.h.followMaxDistance),
                 (C = null != this.game.getMob(a.h.focus).get_effects().h.invisibility ? 0 : 1),
                 (d.h.followMaxDistance = b * C)),
               (b = this.world.mobs.h[a.h.focus].h.x),
               (c = (this.mobCollisionBounds(a.h.focus).get_left() + this.mobCollisionBounds(a.h.focus).get_right()) / 2),
               (d.h.followPoint.x = b + c),
               (b = this.world.mobs.h[a.h.focus].h.y),
               (c = (this.mobCollisionBounds(a.h.focus).get_top() + this.mobCollisionBounds(a.h.focus).get_bottom()) / 2),
               (d.h.followPoint.y = b + c),
               (d.h.following = !0));
         },
         mobIsAggro: function (b) {
           if (null == this.world.mobs.h[b]) return !1;
           var a = this.world.mobs.h[b],
             c = this.world.mobData.h[a.h.type];
           return "hostile" == this.mobGetAlignment(b) ||
             0 < a.h.aggressiveness ||
             (1 == c.h.hostileOnFire && Object.prototype.hasOwnProperty.call(this.world.onFire.h, b)) ||
             (null != c.h.randomlyHostileTowards && null != this.world.mobs.h[a.h.target] && 1 == H.__cast(c.h.randomlyHostileTowards, e).h[this.world.mobs.h[a.h.target].h.type])
             ? !0
             : !1;
         },
         mobCollision: function (b, a) {
           return this.mobBounds(b).intersects(this.mobBounds(a));
         },
         mobCollisionPoint: function (b, a) {
           return this.mobBounds(b).containsPoint(a);
         },
         mobCollisionRectangle: function (b, a) {
           return this.mobBounds(b).intersects(a);
         },
         mobBounds: function (b) {
           if ((null == this.world.mobs.h[b] || null == this.world.mobData.h[this.world.mobs.h[b].h.type]) && b != this.world.player.id) return new t();
           if (b == this.world.player.id) {
             var a = H.__cast(this.world.mobData.h.player.h.collisionBounds, t).clone();
             a.translate(this.world.worldX, this.world.worldY);
           } else (a = H.__cast(this.world.mobData.h[this.world.mobs.h[b].h.type].h.collisionBounds, t).clone()), a.translate(this.world.mobs.h[b].h.x, this.world.mobs.h[b].h.y);
           return a;
         },
         mobCollisionBounds: function (b) {
           if ((null == this.world.mobs.h[b] || null == this.world.mobData.h[this.world.mobs.h[b].h.type]) && b != this.world.player.id) return new t();
           if (b == this.world.player.id) var a = H.__cast(this.world.mobData.h.player.h.collisionBounds, t).clone();
           else (a = H.__cast(this.world.mobData.h[this.world.mobs.h[b].h.type].h.collisionBounds, t).clone()), 0 < this.world.mobs.h[b].h.babyTimer && a.set(0.7 * a.x, 0.7 * a.y, 0.7 * a.width, 0.7 * a.height);
           return a;
         },
         mobPosition: function (b) {
           return b == this.world.player.id ? new h(this.world.worldX, this.world.worldY) : null != this.world.mobs.h[b] ? new h(this.world.mobs.h[b].h.x, this.world.mobs.h[b].h.y) : new h(0, 0);
         },
         mobMaxHealth: function (b) {
           return null != this.world.mobData.h[this.world.mobs.h[b].h.type].h.healthFunction ? this.world.mobData.h[this.world.mobs.h[b].h.type].h.healthFunction(b) : this.world.mobData.h[this.world.mobs.h[b].h.type].h.health;
         },
         mobAttack: function (b) {
           var a = this.world.mobs.h[b],
             c = this.world.mobData.h[a.h.type],
             d = new h(0, -1e4),
             f = !1;
           if (this.mobIsAggro(b) && (!a.h.tamed || !a.h.sitting)) {
             if (((null == a.h.target && this.world.gamemode != U.gamemodes.h.CREATIVE) || a.h.target == this.world.player.id) && this.world.gamemode != U.gamemodes.h.SPECTATOR) {
               if (1 == c.h.attackContact && this.mobCollision(b, this.world.player.id) && ("slime" != a.h.type || 1 < a.h.size))
                 if (
                   ((a.h.attackCooldown = c.h.attackFrequency),
                   (this.world.mobTmpData.h[b].h.miningAnimation = !0),
                   (this.world.mobTmpData.h[b].h.stopMiningAnimation = !0),
                   0 < this.game.visibility &&
                     ((f = null != a.h.attackDamage ? a.h.attackDamage : null != c.h.attackDamage ? c.h.attackDamage : 2),
                     (f += null != this.game.getMob(b).get_effects().h.strength ? g.makeDynamicMap(this.game.getMob(b).get_effects().h.strength).h.level * g.makeDynamicMap(this.game.effectData.h.strength).h.perLevel : 0),
                     (f += null != this.game.getMob(b).get_effects().h.weakness ? g.makeDynamicMap(this.game.getMob(b).get_effects().h.weakness).h.level * g.makeDynamicMap(this.game.effectData.h.weakness).h.perLevel : 0),
                     this.game.ouch(1, -Math.max(1, f), "attack")),
                   null != g.makeDynamicMap(this.world.armorsAsItem(1)[3]).h.thorns1)
                 ) {
                   this.game.getMob(b).hurtMob(b, 2, "attack", this.world.player.id);
                   var l = a.h.speedX + g.migrateSpeed(11 * Math.random() - 5);
                   a.h.speedX = l;
                   this.get_keys().h.up = !0;
                   a.h.target = this.world.player.id;
                 } else
                   null != g.makeDynamicMap(this.world.armorsAsItem(1)[3]).h.thorns2
                     ? (this.game.getMob(b).hurtMob(b, 4, "attack", this.world.player.id), (l = a.h.speedX + g.migrateSpeed(19 * Math.random() - 9)), (a.h.speedX = l), (this.get_keys().h.up = !0), (a.h.target = this.world.player.id))
                     : null != g.makeDynamicMap(this.world.armorsAsItem(1)[3]).h.thorns3 &&
                       (this.game.getMob(b).hurtMob(b, 6, "attack", this.world.player.id), (l = a.h.speedX + g.migrateSpeed(27 * Math.random() - 13)), (a.h.speedX = l), (this.get_keys().h.up = !0), (a.h.target = this.world.player.id));
               f = !0;
               d.x = this.world.worldX;
               d.y = this.world.worldY;
             } else
               null != a.h.target &&
                 null != this.world.mobs.h[a.h.target] &&
                 (1 == c.h.attackContact &&
                   this.mobCollision(b, a.h.target) &&
                   ((a.h.attackCooldown = this.world.mobData.h[a.h.type].h.attackFrequency),
                   (f = null != a.h.attackDamage ? a.h.attackDamage : null != c.h.attackDamage ? c.h.attackDamage : 2),
                   (f += null != this.game.getMob(b).get_effects().h.strength ? g.makeDynamicMap(this.game.getMob(b).get_effects().h.strength).h.level * g.makeDynamicMap(this.game.effectData.h.strength).h.perLevel : 0),
                   (f += null != this.game.getMob(b).get_effects().h.weakness ? g.makeDynamicMap(this.game.getMob(b).get_effects().h.weakness).h.level * g.makeDynamicMap(this.game.effectData.h.weakness).h.perLevel : 0),
                   this.game.getMob(a.h.target).hurtMob(a.h.target, f, "attack", b)),
                 (f = !0),
                 (d.x = this.world.mobs.h[a.h.target].h.x),
                 (d.y = this.world.mobs.h[a.h.target].h.y));
             var k = Math.sqrt(Math.pow(d.x - a.h.x, 2) + Math.pow(d.y - a.h.y, 2));
             if (1 == c.h.attackBow)
               if (f && 10 > k) {
                 var m = Math.atan2(d.y - Math.abs(d.x - a.h.x) / 5 - a.h.y, d.x - a.h.x) + (2 * Math.random() - 1) / 20;
                 l = this.world.arrows;
                 var n = this.game.uniqueID(this.world.arrows, "arrow"),
                   p = new e();
                 p.h.x = a.h.x;
                 p.h.y = a.h.y - 1.5;
                 p.h.speedX = g.migrateSpeed(20 * Math.cos(m));
                 p.h.speedY = g.migrateSpeed(20 * Math.sin(m));
                 p.h.rotation = Math.PI;
                 p.h.timer = 0;
                 p.h.cooldown = 10;
                 p.h.shotBy = b;
                 l.h[n] = g.makeDynamicMap(p);
                 this.game.requestSound("bowsfx", a.h.x - this.world.worldX, a.h.y - this.world.worldY);
                 a.h.attackCooldown = this.world.mobData.h[a.h.type].h.attackFrequency;
               } else a.h.attackCooldown = -30;
             1 == c.h.attackSnowball &&
               (f && 10 > k
                 ? ((m = Math.atan2(d.y - Math.abs(d.x - a.h.x) / 5 - a.h.y, d.x - a.h.x) + (2 * Math.random() - 1) / 20),
                   (l = this.world.snowballs),
                   (n = this.game.uniqueID(this.world.snowballs, "snowball")),
                   (p = new e()),
                   (p.h.x = a.h.x),
                   (p.h.y = a.h.y - 1.5),
                   (p.h.speedX = g.migrateSpeed(20 * Math.cos(m))),
                   (p.h.speedY = g.migrateSpeed(20 * Math.sin(m))),
                   (p.h.rotation = Math.PI),
                   (p.h.timer = 0),
                   (p.h.cooldown = 10),
                   (p.h.shotBy = b),
                   (l.h[n] = g.makeDynamicMap(p)),
                   this.game.requestSound("throwsfx", a.h.x - this.world.worldX, a.h.y - this.world.worldY),
                   (a.h.attackCooldown = this.world.mobData.h[a.h.type].h.attackFrequency))
                 : (a.h.attackCooldown = -30));
             1 == c.h.attackTripleCharge &&
               (f && 10 > k
                 ? (-30 != a.h.attackCooldown &&
                     Object.prototype.hasOwnProperty.call(this.world.onFire.h, b) &&
                     0 == -a.h.attackCooldown % 20 &&
                     ((m = Math.atan2(d.y - a.h.y, d.x - a.h.x) + ((15 * Math.random()) / 180) * Math.PI),
                     (l = this.world.fireballs),
                     (n = this.game.uniqueID(this.world.fireballs, "fireball")),
                     (p = new e()),
                     (p.h.x = a.h.x + Math.cos(m)),
                     (p.h.y = a.h.y - 1 + Math.sin(m)),
                     (p.h.speedX = g.migrateSpeed(9 * Math.cos(m))),
                     (p.h.speedY = g.migrateSpeed(9 * Math.sin(m))),
                     (p.h.shotBy = b),
                     (p.h.flame = !0),
                     (p.h.cooldown = 10),
                     (l.h[n] = g.makeDynamicMap(p)),
                     this.game.requestSound("firethrow", a.h.x - this.world.worldX, a.h.y - this.world.worldY)),
                   -30 >= a.h.attackCooldown ? ((l = (this.world.mobData.h[a.h.type].h.attackFrequency * (Math.random() - 0.5)) | 0), (a.h.attackCooldown = l)) : --a.h.attackCooldown)
                 : (a.h.attackCooldown = -30));
             1 == c.h.attackCharge &&
               (f && 10 > k
                 ? (-30 != a.h.attackCooldown &&
                     ((m = Math.atan2(d.y - a.h.y, d.x - a.h.x) + ((5 * Math.random()) / 180) * Math.PI),
                     (l = this.world.fireballs),
                     (n = this.game.uniqueID(this.world.fireballs, "fireball")),
                     (p = new e()),
                     (p.h.x = a.h.x + 3 * Math.cos(m)),
                     (p.h.y = a.h.y - 2 + 3 * Math.sin(m)),
                     (p.h.speedX = g.migrateSpeed(9 * Math.cos(m))),
                     (p.h.speedY = g.migrateSpeed(9 * Math.sin(m))),
                     (p.h.shotBy = b),
                     (p.h.flame = !0),
                     (p.h.cooldown = 10),
                     (l.h[n] = g.makeDynamicMap(p)),
                     this.game.requestSound("firethrow", a.h.x - this.world.worldX, a.h.y - this.world.worldY)),
                   (a.h.attackCooldown = this.world.mobData.h[a.h.type].h.attackFrequency))
                 : (a.h.attackCooldown = -30));
           }
         },
         shearMob: function (b) {
           if (null == this.world.mobs.h[b]) return !1;
           var a = this.world.mobs.h[b];
           if (0 < a.h.dead) return !1;
           if ("sheep" == a.h.type) {
             if (0 < a.h.babyTimer) return !1;
             null != this.get_armor()[0] &&
               "MustacheCap" == this.get_armor()[0][0] &&
               1 <= this.get_armor()[0][1] &&
               (this.game.addDrop("MustacheCap", a.h.x, a.h.y, 1, null, null),
               this.game.addParticles("shockwave", 1, 5, new h(a.h.x - Math.random() / 2, 1), new h(a.h.y - Math.random() / 2, 1)),
               (this.get_armor()[0] = g.makeDynamicArray(["air", 0, 0, new e()])));
             a.h.sheared = !0;
             b = this.game;
             var c = a.h.x,
               d = a.h.y,
               f = (2 * Math.random() + 1) | 0,
               l = new e();
             l.h.type = a.h.color;
             b.addDrop("cloth", c, d, f, null, g.makeDynamicMap(l));
             return !0;
           }
           if ("cow" == a.h.type) {
             if (0 < a.h.babyTimer) return !1;
             "mooshroom" == a.h.variant
               ? (this.game.addDrop("ms1", a.h.x, a.h.y, (3 * Math.random() + 1) | 0, null, null),
                 this.game.addDrop("ms2", a.h.x, a.h.y, (2 * Math.random() + 2 + Math.random() * (this.world.mobTmpData.h[b].h.loot + 1)) | 0, null, null),
                 this.game.addParticles("shockwave", 1, 5, new h(a.h.x - Math.random() / 2, 1), new h(a.h.y - Math.random() / 2, 1)),
                 (a.h.variant = ""))
               : "cowctus" == a.h.variant &&
                 (this.game.addDrop("ct", a.h.x, a.h.y, (3 * Math.random() + 2 + Math.random() * (this.world.mobTmpData.h[b].h.loot + 1)) | 0, null, null),
                 this.game.addParticles("shockwave", 1, 5, new h(a.h.x - Math.random() / 2, 1), new h(a.h.y - Math.random() / 2, 1)),
                 (a.h.variant = ""));
             return !0;
           }
           return !1;
         },
         hurtMob: function (b, a, c, d) {
           null == d && (d = "");
           null == c && (c = "");
           var f = this.world.mobData.h[this.world.mobs.h[b].h.type],
             l = this.world.mobs.h[b];
           if (!(0 < l.h.dead)) {
             if (isNaN(l.h.health)) {
               var k = this.mobMaxHealth(b);
               l.h.health = k;
             }
             if (null == f || null == f.h.specialOnHit || 0 != f.h.specialOnHit(b, a, c, d)) {
               if ("anvil" == c || "fall" == c || "lava" == c || "acid" == c || "explosion" == c || "fire" == c || "lightning" == c || "attack" == c || "arrow" == c || "cactus" == c) {
                 if (("fire" == c || "lava" == c || "lightning" == c) && null != this.game.getMob(b).get_effects().h.fireresistance) return;
                 k = 0;
                 for (var h, n = 0, p = this.get_armor().length; n < p; ) {
                   h = n++;
                   var t = 0;
                   if (null != this.get_armor()[h]) {
                     if ("anvil" == c && 0 == h)
                       "Leather" == this.get_armor()[h][0].substr(0, 7)
                         ? (a *= 0.8)
                         : "Gold" == this.get_armor()[h][0].substr(0, 4)
                         ? (a *= 0.6)
                         : "Iron" == this.get_armor()[h][0].substr(0, 4)
                         ? (a *= 0.4)
                         : "Diamond" == this.get_armor()[h][0].substr(0, 7)
                         ? (a *= 0.3)
                         : "Dragon" == this.get_armor()[h][0].substr(0, 6) && (a *= 0.2);
                     else if ("hunger" != c && "void" != c) {
                       this.getArmorExtras(h).h.protection1 ? (t = 0.02) : this.getArmorExtras(h).h.protection2 ? (t = 0.035) : this.getArmorExtras(h).h.protection3 ? (t = 0.05) : this.getArmorExtras(h).h.protection4 && (t = 0.065);
                       this.getArmorExtras(h).h.protection5 && (t += 0.08);
                       if ("lava" == c || "fire" == c || "lightning" == c)
                         this.getArmorExtras(h).h.protectionFire1 ? (t += 0.04) : this.getArmorExtras(h).h.protectionFire2 ? (t += 0.055) : this.getArmorExtras(h).h.protectionFire3 && (t += 0.07);
                       "explosion" == c && (this.getArmorExtras(h).h.protectionBlast1 ? (t += 0.04) : this.getArmorExtras(h).h.protectionBlast2 ? (t += 0.055) : this.getArmorExtras(h).h.protectionBlast3 && (t += 0.07));
                       "arrow" == c && (this.getArmorExtras(h).h.protectionProjectile1 ? (t += 0.04) : this.getArmorExtras(h).h.protectionProjectile2 ? (t += 0.055) : this.getArmorExtras(h).h.protectionProjectile3 && (t += 0.07));
                       "fall" == c && (this.getArmorExtras(h).h.protectionFalling1 ? (t += 0.09) : this.getArmorExtras(h).h.protectionFalling2 ? (t += 0.12) : this.getArmorExtras(h).h.protectionFalling3 && (t += 0.16));
                     }
                     "anvil" != c &&
                       null != q.get(this.get_armor()[h][0], "life") &&
                       this.get_armor()[h][2] <= q.get(this.get_armor()[h][0], "life") &&
                       ("Leather" == this.get_armor()[h][0].substr(0, 7)
                         ? ((h = a * (Math.random() * (0.02 + t) + 0.07)), (k += h))
                         : "Gold" == this.get_armor()[h][0].substr(0, 4)
                         ? ((h = a * (Math.random() * (0.04 + t) + 0.1)), (k += h))
                         : "Iron" == this.get_armor()[h][0].substr(0, 4)
                         ? ((h = a * (Math.random() * (0.05 + t) + 0.13)), (k += h))
                         : "Diamond" == this.get_armor()[h][0].substr(0, 7)
                         ? ((h = a * (Math.random() * (0.07 + t) + 0.15)), (k += h))
                         : "Dragon" == this.get_armor()[h][0].substr(0, 6) && ((h = a * (Math.random() * (0.09 + t) + 0.15)), (k = "fire" == c || "lightning" == c || "lava" == c ? k + Math.pow(Math.random(), 3) * h : k + h)));
                   }
                 }
                 a -= Math.round(k);
               }
               l.h.health = Math.round(l.h.health - a);
               0 < a && null != this.get_sounds().h.hurt && this.game.requestSound(this.get_sounds().h.hurt[(Math.random() * this.get_sounds().h.hurt.length) | 0], l.h.x - this.world.worldX, l.h.y - this.world.worldY);
               "" != c && "" != d && ((l.h.lastDamageType = c), (l.h.lastDamageID = d), (l.h.ticksSinceLastDamageID = 0));
               if (("attack" == c || ("projectile" == c && (d == this.world.player.id || null != this.world.mobs.h[d]))) && d != b) {
                 l.h.target = d;
                 if (null != f && f.h.groupAttack && (1 != l.h.tamed || l.h.tamedBy != d))
                   for (a = Object.keys(this.world.mobs.h), n = a.length, p = 0; p < n; )
                     (k = a[p++]),
                       this.world.mobs.h[k].h.type == l.h.type &&
                         1 != this.world.mobs.h[k].h.tamed &&
                         this.world.mobs.h[k].h.tamedBy != d &&
                         ((h = 1),
                         "attack" == c && d == this.world.player.id && ((h = this.game.visibility), "mh" == this.world.armors[0][0] && g.makeDynamicMap(this.world.armors[0][2]).h.type == l.h.type && (h *= 0.5)),
                         Math.abs(l.h.x - this.world.mobs.h[k].h.x) < 15 * h &&
                           Math.abs(l.h.y - this.world.mobs.h[k].h.y) < 9 * h &&
                           ((this.world.mobs.h[k].h.target = l.h.target), (h = this.world.mobs.h[k]), (k = Math.random() * m.Instance.get_fps() * 50 + 100 * m.Instance.get_fps()), (h.h.aggressiveness = k)));
                 "passive" != this.mobGetAlignment(b) && ((k = Math.random() * m.Instance.get_fps() * 50 + 100 * m.Instance.get_fps()), (l.h.aggressiveness = k));
               }
               0 < l.h.health
                 ? null != f && 1 == f.h.teleports && Math.random() < (null != f.h.teleportOnDamageChance ? f.h.teleportOnDamageChance : 0) && this.teleportMob()
                 : "explosion" != c ||
                   null == this.world.mobs.h[d] ||
                   d == b ||
                   "creeper" != this.world.mobs.h[d].h.type ||
                   1 != this.world.mobs.h[d].h.charged ||
                   ("zombie" != this.world.mobs.h[b].h.type && "skeleton" != this.world.mobs.h[b].h.type && "creeper" != this.world.mobs.h[b].h.type) ||
                   (null == this.world.mobs.h[b].h.drops && ((h = this.world.mobs.h[b]), (k = []), (h.h.drops = k)),
                   (c = H.__cast(this.world.mobs.h[b].h.drops, Array)),
                   (n = new e()),
                   (n.h.quantity = 1),
                   (n.h.type = "mh"),
                   (p = new e()),
                   (p.h.type = this.world.mobs.h[b].h.type),
                   (n.h.extras = g.makeDynamicMap(p)),
                   c.push(g.makeDynamicMap(n)));
               null != this.world.mobTmpData.h[b] && (this.world.mobTmpData.h[b].h.hurtAnimation = 10);
               0.3333333333333333 > Math.random() && (this.get_keys().h.up = !0);
             }
           }
         },
         killMob: function (b) {
           if (null != this.world.mobs.h[b]) {
             var a = this.world.mobs.h[b],
               c = this.world.mobTmpData.h[b],
               d = this.world.mobData.h[a.h.type];
             if (this.game.getGameRule("domobloot")) {
               c.h.loot = 0;
               var f = this.world.get_selectedInventoryItemExtra();
               Object.prototype.hasOwnProperty.call(f.h, "looting1") && (c.h.loot = 0.3333333333333333);
               f = this.world.get_selectedInventoryItemExtra();
               Object.prototype.hasOwnProperty.call(f.h, "looting2") && (c.h.loot = 0.6666666666666666);
               f = this.world.get_selectedInventoryItemExtra();
               Object.prototype.hasOwnProperty.call(f.h, "looting3") && (c.h.loot = 1);
               f = [];
               0 != a.h.defaultDrops && (f = f.concat(d.h.drops));
               null != a.h.drops && (f = f.concat(a.h.drops));
               var l = {};
               l[0] = Math.random();
               for (var k = f.length - 1; 0 <= k; ) {
                 var h = f[k];
                 if (1 == h.h.onFire) {
                   if (!Object.prototype.hasOwnProperty.call(this.world.onFire.h, b)) {
                     --k;
                     continue;
                   }
                 } else if (null != h.h.onFire && 0 == h.h.onFire && Object.prototype.hasOwnProperty.call(this.world.onFire.h, b)) {
                   --k;
                   continue;
                 }
                 if (null != h.h.properties) {
                   for (var m = !1, n = Object.keys(g.makeDynamicMap(h.h.properties).h), p = n.length, t = 0; t < p; ) {
                     var q = n[t++];
                     if ("==" == g.makeDynamicMap(h.h.properties).h[q][0]) {
                       if (a.h[q] != g.makeDynamicMap(h.h.properties).h[q][1]) {
                         m = !0;
                         break;
                       }
                     } else if ("!=" == g.makeDynamicMap(h.h.properties).h[q][0]) {
                       if (a.h[q] == g.makeDynamicMap(h.h.properties).h[q][1]) {
                         m = !0;
                         break;
                       }
                     } else if (">=" == g.makeDynamicMap(h.h.properties).h[q][0]) {
                       if (parseFloat(a.h[q]) < g.makeDynamicMap(h.h.properties).h[q][1]) {
                         m = !0;
                         break;
                       }
                     } else if (">" == g.makeDynamicMap(h.h.properties).h[q][0]) {
                       if (parseFloat(a.h[q]) <= g.makeDynamicMap(h.h.properties).h[q][1]) {
                         m = !0;
                         break;
                       }
                     } else if ("<=" == g.makeDynamicMap(h.h.properties).h[q][0]) {
                       if (parseFloat(a.h[q]) > g.makeDynamicMap(h.h.properties).h[q][1]) {
                         m = !0;
                         break;
                       }
                     } else if ("<" == g.makeDynamicMap(h.h.properties).h[q][0] && parseFloat(a.h[q]) >= g.makeDynamicMap(h.h.properties).h[q][1]) {
                       m = !0;
                       break;
                     }
                   }
                   if (m) {
                     --k;
                     continue;
                   }
                 }
                 if (
                   !(
                     (1 == h.h.isBaby) != 0 < a.h.babyTimer ||
                     (null != h.h.isVariant && (a.h.variant != h.h.isVariant || ("" == a.h.variant && "normal" == h.h.isVariant))) ||
                     (null != h.h.isDimension && this.world.sceneNum != h.h.isDimension)
                   )
                 ) {
                   if (
                     null != h.h.rare &&
                     ((m = 0),
                     null != g.makeDynamicMap(h.h.rare).h.randomNum && ((m = g.makeDynamicMap(h.h.rare).h.randomNum), null == l[m] && (l[m] = Math.random())),
                     l[m] * (1 - g.makeDynamicMap(h.h.rare).h.lootingBonusChances * c.h.loot) < g.makeDynamicMap(h.h.rare).h.lowerBound ||
                       l[m] * (1 - g.makeDynamicMap(h.h.rare).h.lootingBonusChances * c.h.loot) >= g.makeDynamicMap(h.h.rare).h.upperBound)
                   ) {
                     --k;
                     continue;
                   }
                   m = h.h.quantity;
                   null != h.h.randomBonus && (m += (Math.random() * (h.h.randomBonus + 1)) | 0);
                   null != h.h.lootBonus && (m += ((0.6 * Math.random() + 0.4) * c.h.loot * (h.h.lootBonus + 1)) | 0);
                   n = null != h.h.extras ? O.clone(h.h.extras) : new e();
                   h.h.setColor && (n.h.type = a.h.color);
                   this.game.addDrop(h.h.type, a.h.x, a.h.y, m, null != h.h.damage ? h.h.damage : 0, n);
                 }
                 --k;
               }
               !this.game.isEmptyItem(a.h.handItems[0]) &&
                 Math.random() < a.h.handDropChances[0] + 0.01 * c.h.loot &&
                 ("wd1" == a.h.handItems[0][0] && (a.h.handItems[0][0] = "wd"), this.game.addDrop(a.h.handItems[0][0], a.h.x, a.h.y, a.h.handItems[0][1], a.h.handItems[0][2], a.h.handItems[0][3]));
               !this.game.isEmptyItem(a.h.handItems[1]) &&
                 Math.random() < a.h.handDropChances[1] + 0.01 * c.h.loot &&
                 ("wd1" == a.h.handItems[1][0] && (a.h.handItems[1][0] = "wd"), this.game.addDrop(a.h.handItems[1][0], a.h.x, a.h.y, a.h.handItems[1][1], a.h.handItems[1][2], a.h.handItems[1][3]));
               !this.game.isEmptyItem(this.get_armor()[0]) &&
                 Math.random() < a.h.armorDropChances[0] + 0.01 * c.h.loot &&
                 this.game.addDrop(this.get_armor()[0][0], a.h.x, a.h.y, this.get_armor()[0][1], this.get_armor()[0][2], this.get_armor()[0][3]);
               !this.game.isEmptyItem(this.get_armor()[1]) &&
                 Math.random() < a.h.armorDropChances[1] + 0.01 * c.h.loot &&
                 this.game.addDrop(this.get_armor()[1][0], a.h.x, a.h.y, this.get_armor()[1][1], this.get_armor()[1][2], this.get_armor()[1][3]);
               !this.game.isEmptyItem(this.get_armor()[2]) &&
                 Math.random() < a.h.armorDropChances[2] + 0.01 * c.h.loot &&
                 this.game.addDrop(this.get_armor()[2][0], a.h.x, a.h.y, this.get_armor()[2][1], this.get_armor()[2][2], this.get_armor()[2][3]);
               this.game.isEmptyItem(a.h.saddleItem) || this.game.addDrop(a.h.saddleItem[0], a.h.x, a.h.y, a.h.saddleItem[1], a.h.saddleItem[2], a.h.saddleItem[3]);
             }
             null != this.get_sounds().h.death && this.game.requestSound(this.get_sounds().h.death[(Math.random() * this.get_sounds().h.death.length) | 0], a.h.x - this.world.worldX, a.h.y - this.world.worldY);
             if (a.h.lastDamageID == this.world.player.id || (null != this.world.mobs.h[a.h.lastDamageID] && "wolf" == this.world.mobs.h[a.h.lastDamageID].h.type && this.world.mobs.h[a.h.lastDamageID].h.tamed))
               if ((this.game.dropXP(a.h.x, a.h.y, d.h.xp), 0 >= a.h.health))
                 switch (a.h.type) {
                   case "blaze":
                     this.game.unlockAchieve(19);
                     break;
                   case "chicken":
                     Object.prototype.hasOwnProperty.call(this.world.onFire.h, b) && this.game.unlockAchieve(22);
                     break;
                   case "cow":
                     "" == a.h.variant && this.game.unlockAchieve(13);
                     break;
                   case "creeper":
                     this.game.unlockAchieve(21);
                     break;
                   case "enderman":
                     this.game.unlockAchieve(20);
                     break;
                   case "magmacube":
                     this.game.unlockAchieve(38);
                     break;
                   case "nethereye":
                     this.game.unlockAchieve(18);
                     break;
                   case "pig":
                     this.game.unlockAchieve(12);
                     break;
                   case "sheep":
                     this.game.unlockAchieve(14);
                     break;
                   case "skeleton":
                     this.game.unlockAchieve(16);
                     break;
                   case "slime":
                     this.game.unlockAchieve(37);
                     break;
                   case "spider":
                     this.game.unlockAchieve(17);
                     break;
                   case "zombie":
                     this.game.unlockAchieve(15);
                     break;
                   case "zombiepigman":
                     this.game.unlockAchieve(41);
                 }
             null != d.h.specialDeath && d.h.specialDeath(b);
             if (null == a.h.dead || 0 == a.h.dead) a.h.dead = 1;
           }
         },
         teleportMob: function (b, a, c, d, f) {
           null == f && (f = !1);
           null == d && (d = !0);
           null == c && (c = 5);
           null == a && (a = -1);
           var e = this.world.mobs.h[this.id],
             h = this.id == this.world.player.id ? this.world.mobData.h.player : this.world.mobData.h[e.h.type];
           this.id == this.world.player.id && 0 > a && (a = 10);
           if (0 <= a) var g = a;
           else null == e.h.teleportDistance && (e.h.teleportDistance = 10), (g = e.h.teleportDistance);
           h = h.h.sizeCategory;
           c =
             null != b
               ? K.findSpawnArea("none", h, !1, null, b.x, b.y, g - c, g + c)
               : this.id == this.world.player.id
               ? K.findSpawnArea("none", h, !1, null, this.world.worldX, this.world.worldY, g - c, g + c)
               : K.findSpawnArea("none", h, !1, null, e.h.x, e.h.y, g - c, g + c);
           0 > a && (e.h.teleportDistance += 5);
           if (null != c)
             return (
               d && m.Instance.game.requestSound("tp1", e.h.x - this.world.worldX, e.h.y - this.world.worldY),
               this.id == this.world.player.id ? ((this.world.worldX = c[0]), (this.world.worldY = -1 * c[1])) : ((e.h.x = c[0]), (e.h.y = -1 * c[1])),
               d && m.Instance.game.requestSound("tp2", e.h.x - this.world.worldX, e.h.y - this.world.worldY),
               !0
             );
           f && (this.id == this.world.player.id ? ((this.world.worldX = b.x), (this.world.worldY = b.y)) : ((e.h.x = b.x), (e.h.y = b.y)));
           return !1;
         },
         mobRiding: function (b) {
           var a = this.world.mobs.h[b];
           a.h.riddenBy == this.world.player.id
             ? this.world.riding != b
               ? (a.h.riddenBy = null)
               : ((this.world.worldX = a.h.x),
                 (this.world.worldY = a.h.y - 0.43333333333333335),
                 this.game.resetCamera(),
                 "pig" == a.h.type &&
                   "coas" == this.world.inventoryList[this.world.selectedInventoryItem][0] &&
                   (0 > this.game.characterXScale && ((this.get_keys().h.left = !1), (this.get_keys().h.right = !0)),
                   0 < this.game.characterXScale && ((this.get_keys().h.left = !0), (this.get_keys().h.right = !1)),
                   G.gt(m.Instance.keyDown(J.intToKey.h[J.keyBindings.h.down.h.id]), 0) && ((b = this.get_keys()), (this.get_keys().h.right = !1), (b.h.left = !1)),
                   0.03333333333333333 > Math.random() &&
                     (this.game.damageTool(), "air" == this.world.inventoryList[this.world.selectedInventoryItem][0] && (this.world.inventoryList[this.world.selectedInventoryItem] = ["fr", 1, 0, new e()]))),
                 this.game.upKey && ((this.world.xSpeed = 0.7 * a.h.speedX), (this.world.ySpeed = a.h.speedY), (this.world.riding = ""), (a.h.riddenBy = null)))
             : this.world.riding == b && (this.world.riding = "");
         },
         setMobTmpData: function (b) {
           var a = new e();
           a.h.loot = 0;
           a.h.distanceX = 0;
           a.h.wasFallingAndNotFalling = 0;
           a.h.inWater = !1;
           this.world.mobTmpData.h[b] = g.makeDynamicMap(a);
           a = Object.keys(this.world.mobData.h[this.world.mobs.h[b].h.type].h);
           for (var c = a.length, d = 0; d < c; ) {
             var f = a[d++];
             this.world.mobTmpData.h[b].h[f] = g.makeDynamicMap(this.world.mobData.h[this.world.mobs.h[b].h.type].h.mobTmpData).h[f];
           }
         },
         removeMob: function (b) {
           this.world.setMobNum(this.world.mobs.h[b].h.type.toLowerCase(), -1);
           this.game.removeEntity(b, this.world.mobs);
           var a = this.world.mobTmpData;
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
         },
         getRotD: function (b, a, c) {
           for (; 180 < b; ) b -= 360;
           for (; -180 > b; ) b += 360;
           for (; 180 < a; ) a -= 360;
           for (; -180 > a; ) a += 360;
           return 0 < b && a < b - 180
             ? (0.1 == c && (c = (180 - b + (180 + a)) / 4), a - c)
             : 0 > b && a > b + 180
             ? (0.1 == c && (c = (180 + b + (180 - a)) / 4), a + c)
             : 0.1 == c && Math.abs(a - b) > Math.abs(a - b) / 4
             ? a + (((b - a) / Math.abs(b - a)) * Math.abs(a - b)) / 4
             : Math.abs(a - b) > c
             ? a + ((b - a) / Math.abs(b - a)) * c
             : b;
         },
         get_x: function () {
           return this.world.mobs.h[this.id].h.x;
         },
         get_y: function () {
           return this.world.mobs.h[this.id].h.y;
         },
         get_speedX: function () {
           return this.world.mobs.h[this.id].h.speedX;
         },
         set_speedX: function (b) {
           return (this.world.mobs.h[this.id].h.speedX = b);
         },
         get_speedY: function () {
           return this.world.mobs.h[this.id].h.speedY;
         },
         set_speedY: function (b) {
           return (this.world.mobs.h[this.id].h.speedY = b);
         },
         get_keys: function () {
           null == this.world.mobs.h[this.id].h.keys && (this.world.mobs.h[this.id].h.keys = new e());
           return this.world.mobs.h[this.id].h.keys;
         },
         get_effects: function () {
           null == this.world.mobs.h[this.id].h.effects && (this.world.mobs.h[this.id].h.effects = new e());
           return this.world.mobs.h[this.id].h.effects;
         },
         get_armor: function () {
           null == this.world.mobs.h[this.id].h.armor && (this.world.mobs.h[this.id].h.armor = [g.emptyItem(), g.emptyItem(), g.emptyItem(), g.emptyItem()]);
           return this.world.mobs.h[this.id].h.armor;
         },
         getArmorExtras: function (b) {
           return null == this.get_armor()[b] ? new e() : this.get_armor()[b][3];
         },
         get_sounds: function () {
           null == this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.sounds && (this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.sounds = new e());
           return this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.sounds;
         },
         get_animations: function () {
           null == this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.animations && (this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.animations = new e());
           return this.world.mobData.h[this.world.mobs.h[this.id].h.type].h.animations;
         },
         __class__: K,
       });
       var tg = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Bat"] = tg;
       tg.__name__ = "entities.Entity_Mob_Bat";
       tg.__super__ = K;
       tg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           if (1 == this.world.mobs.h[this.id].h.hanging) this.gotoAndStop(6);
           else {
             b = this.world.mobTmpData.h[this.id];
             var a = null != this.world.mobTmpData.h[this.id].h.flyFrame ? this.world.mobTmpData.h[this.id].h.flyFrame : 0,
               c = 1 == this.get_keys().h.up ? 0.5 : 0.05;
             b.h.flyFrame = w.modulus(a + c, 5);
             this.gotoAndStop(Math.floor(this.world.mobTmpData.h[this.id].h.flyFrame + 1));
           }
           this.scaleX = (0 > this.world.mobs.h[this.id].h.speedX ? 1 : -1) * Math.abs(this.scaleX);
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .translate(0, -0.05)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(1.5 * this.scaleX, 1.5 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           a = this.quadPositions[0];
           c = new h(15 + 16 * (this.currentFrame - 1), 42);
           var d = new h(16, 16),
             f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.5333333333333333)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -0.36666666666666664)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[1]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: tg,
       });
       var Bg = function (b, a, c) {
         var d = new e();
         d.h.x = 0;
         d.h.y = -33.15;
         d.h.s = 0;
         d.h.r = 7;
         d.h.ss = 16;
         var f = new e();
         f.h.x = 0;
         f.h.y = -33.15;
         f.h.s = 130;
         f.h.r = 7;
         f.h.ss = 20;
         var l = new e();
         l.h.x = 0;
         l.h.y = -33.15;
         l.h.s = 310;
         l.h.r = 7;
         l.h.ss = 23;
         var h = new e();
         h.h.x = 0;
         h.h.y = -23.1;
         h.h.s = 50;
         h.h.r = 5;
         h.h.ss = 13;
         var g = new e();
         g.h.x = 0;
         g.h.y = -23.1;
         g.h.s = 200;
         g.h.r = 5;
         g.h.ss = 14;
         var m = new e();
         m.h.x = 0;
         m.h.y = -14.5;
         m.h.s = -0.3;
         m.h.r = 3;
         m.h.ss = 12;
         this.arms = [d, f, l, h, g, m];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Blaze"] = Bg;
       Bg.__name__ = "entities.Entity_Mob_Blaze";
       Bg.__super__ = K;
       Bg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 9);
           this.entityMatrix
             .reset()
             .translate(-0.2, -0.31666666666666665)
             .scale2D(2.858337)
             .translate(-0.05, -1)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           var a = this.entity,
             c = this.quadPositions[0];
           b = new h(218, 112);
           var d = new h(12, 19),
             f = ba.quadMatrixHelper(new t(0, 0, 0.4, 0.6333333333333333), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           a.updateQuad(c, null, b, d, null, f, null, l);
           for (l = 0; 6 > l; ) {
             d = l++;
             this.arms[d].h.s += this.arms[d].h.ss / 2;
             this.arms[d].h.s = w.modulus(this.arms[d].h.s, 360);
             this.arms[d].h.x = (Math.sin((this.arms[d].h.s / 180) * Math.PI) - 0.5) * this.arms[d].h.r * 2 + 6;
             a = this.arms[d].h.x / 30;
             c = this.arms[d].h.y / 30;
             this.entityMatrix
               .reset()
               .translate(-0.05, -0.16666666666666666)
               .scale(2, 2)
               .translate(a, c)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             b = this.entity;
             d = this.quadPositions[d + 1];
             f = new h(230, 112);
             a = new h(3, 10);
             c = ba.quadMatrixHelper(new t(0, 0, 0.1, 0.3333333333333333), this.entityMatrix);
             var g = new e();
             g.h.texBlend = K.blendMob;
             k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             g.h.colorOffset = k;
             k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             g.h.color = k;
             b.updateQuad(d, null, f, a, null, c, null, g);
           }
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -2.1783333333333332)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (a = this.entity),
               (c = this.quadPositions[7]),
               (b = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               a.updateQuad(c, null, b, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[7], null, new h(), new h());
         },
         __class__: Bg,
       });
       var vg = function (b, a, c) {
         this.gradientQuadPosition = -1;
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Chicken"] = vg;
       vg.__name__ = "entities.Entity_Mob_Chicken";
       vg.__super__ = K;
       vg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 3);
           this.entityMatrix
             .reset()
             .translate(-0.23333333333333334, -0.5)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2 * this.scaleX, 2 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(((this.currentFrame - 1) % 9) * 14, 182 + 15 * Math.floor((this.currentFrame - 1) / 9)),
             d = new h(14, 15),
             f = ba.quadMatrixHelper(new t(0, 0, 0.4666666666666667, 0.5), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           b = this.world.mobTmpData.h[this.id].h.lookingBackwards ? -1 : 1;
           this.entityMatrix
             .reset()
             .translate(-0.1, 0)
             .scale(b, 1)
             .translate(-0.16666666666666666, (-18 - (2 == this.currentFrame || 3 == this.currentFrame ? 1 : 0)) / 30)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2 * this.scaleX, 2 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           a = this.quadPositions[1];
           c = new h(28, 197);
           d = new h(5, 8);
           f = ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.26666666666666666), this.entityMatrix);
           l = new e();
           l.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           null != this.get_armor()[0] && "ShadesCap" == g.makeDynamicArray(this.get_armor()[0])[0] && 1 <= g.makeDynamicArray(this.get_armor()[0])[1]
             ? ((b = this.world.mobTmpData.h[this.id].h.lookingBackwards ? -1 : 1),
               this.entityMatrix
                 .reset()
                 .scale2D(0.5)
                 .translate(-0.16666666666666666, 0.1)
                 .scale(b, 1)
                 .translate(-0.16666666666666666, (-18 - (2 == this.currentFrame || 3 == this.currentFrame ? 1 : 0)) / 30)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(2 * this.scaleX, 2 * this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (d = y.getTexture("shades", "armor")),
               (b = this.entity),
               (a = this.quadPositions[2]),
               (c = new h(d.x, d.y)),
               (d = new h(d.width, d.height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6)),
               (l.h.colorOffset = k),
               (k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[2], null, new h(), new h());
           if (Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id)) {
             -1 == this.gradientQuadPosition && (this.gradientQuadPosition = this.game.worldGradientEntity.nearestConsecutiveEmpty(1));
             b = this.game.worldGradientEntity;
             a = this.gradientQuadPosition;
             c = new M(Math.floor((this.movieX - 3.3333333333333335) * this.game.zoom) / this.game.zoom, Math.floor((this.movieY - 3.3333333333333335 - 0.5) * this.game.zoom) / this.game.zoom);
             d = new h();
             f = new h(1, 1);
             var m = new h(6.666666666666667, 6.666666666666667);
             l = new e();
             k = w.repeatArray([1, 0, 0, 0.25], 6);
             l.h.colori = k;
             k = w.repeatArray([1, 0, 0, 0], 6);
             l.h.coloro = k;
             b.updateQuad(a, c, d, f, m, null, null, l);
           } else -1 != this.gradientQuadPosition && (this.game.worldGradientEntity.removeQuad(this.gradientQuadPosition), (this.gradientQuadPosition = -1));
         },
         remove: function () {
           K.prototype.remove.call(this);
           -1 != this.gradientQuadPosition && (this.game.worldGradientEntity.removeQuad(this.gradientQuadPosition), (this.gradientQuadPosition = -1));
         },
         __class__: vg,
       });
       var ug = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Cow"] = ug;
       ug.__name__ = "entities.Entity_Mob_Cow";
       ug.__super__ = K;
       ug.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           this.entityMatrix
             .reset()
             .translate(-0.5333333333333333, -0.6666666666666666)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(3 * this.scaleX, 3 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(((this.currentFrame - 1) % 4) * 27, 122 + 20 * Math.floor((this.currentFrame - 1) / 4)),
             d = new h(27, 20),
             f = ba.quadMatrixHelper(new t(0, 0, 0.9, 0.6666666666666666), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.0500173599999998, 1.0500173599999998)
                 .translate(-0.7333333333333333, -1.9333333333333333)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[1]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: ug,
       });
       var Xc = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Creeper"] = Xc;
       Xc.__name__ = "entities.Entity_Mob_Creeper";
       Xc.__super__ = K;
       Xc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 9);
           for (b = 0; 4 > b; ) {
             var a = b++,
               c = this.entityMatrix.reset().translate(-0.06666666666666667, -0.05),
               d = Xc.legs[a].h.x[this.currentFrame - 1] / 30,
               f = Xc.legs[a].h.y[this.currentFrame - 1] / 30;
             c.rotate2D((-Xc.legs[a].h.rotation[this.currentFrame - 1] / 180) * Math.PI)
               .scale(2.4, 2.4)
               .translate(d, f)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             var l = this.entity,
               k = this.quadPositions[a];
             a = new h(55, 2 > a ? 3 : 0);
             c = new h(4, 3);
             d = ba.quadMatrixHelper(new t(0, 0, 0.13333333333333333, 0.1), this.entityMatrix);
             f = new e();
             f.h.texBlend = K.blendMob;
             var g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             f.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             f.h.color = g;
             l.updateQuad(k, null, a, c, null, d, null, f);
           }
           this.entityMatrix
             .reset()
             .scale(2.4, 2.4)
             .translate(-0.26333333333333336, -1.6766666666666665)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           c = this.entity;
           d = this.quadPositions[4];
           f = new h(48, 0);
           l = new h(7, 18);
           k = ba.quadMatrixHelper(new t(0, 0, 0.23333333333333334, 0.6), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = g;
           g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = g;
           c.updateQuad(d, null, f, l, null, k, null, b);
           if (1 == this.world.mobs.h[this.id].h.charged) {
             var n = new t(-10.5, -52.8, 22.5, 20.8);
             this.entityMatrix
               .reset()
               .translate(n.x / 30, n.y / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             c = this.entity;
             d = this.quadPositions[5];
             f = new h(96, 0);
             l = new h(32, 32);
             k = ba.quadMatrixHelper(new t(0, 0, n.width / 30, n.height / 30), this.entityMatrix);
             a = [
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
             ];
             b = new e();
             b.h.texBlend = K.blendMob;
             g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             b.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             b.h.color = g;
             c.updateQuad(d, null, f, l, null, k, a, b);
             n.set(-6.4, -33, 13.1, 24.1);
             this.entityMatrix
               .reset()
               .translate(n.x / 30, n.y / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             c = this.entity;
             d = this.quadPositions[6];
             f = new h(96, 0);
             l = new h(32, 32);
             k = ba.quadMatrixHelper(new t(0, 0, n.width / 30, n.height / 30), this.entityMatrix);
             a = [
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
             ];
             b = new e();
             b.h.texBlend = K.blendMob;
             g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             b.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             b.h.color = g;
             c.updateQuad(d, null, f, l, null, k, a, b);
             n.set(-15.4, -8.9, 31.6, 9.3);
             this.entityMatrix
               .reset()
               .translate(n.x / 30, n.y / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             c = this.entity;
             d = this.quadPositions[7];
             f = new h(96, 0);
             l = new h(32, 32);
             k = ba.quadMatrixHelper(new t(0, 0, n.width / 30, n.height / 30), this.entityMatrix);
             a = [
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200,
               n.x / 2.43 / 32 + this.world.tick / 200,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
               n.x / 2.43 / 32 + this.world.tick / 200 + n.width / 2.43 / 32,
               n.y / 2.43 / 32 + this.world.tick / 200 + n.height / 2.43 / 32,
             ];
             b = new e();
             b.h.texBlend = K.blendMob;
             g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             b.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             b.h.color = g;
             c.updateQuad(d, null, f, l, null, k, a, b);
           } else this.entity.updateQuad(this.quadPositions[5], null, new h(), new h()), this.entity.updateQuad(this.quadPositions[6], null, new h(), new h()), this.entity.updateQuad(this.quadPositions[7], null, new h(), new h());
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.0500173599999998, 1.0500173599999998)
                 .translate(0, -1.9333333333333333)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (c = this.entity),
               (d = this.quadPositions[8]),
               (f = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (l = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (b = new e()),
               (b.h.texBlend = K.blendItems),
               (g = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (b.h.color = g),
               c.updateQuad(d, null, f, l, null, k, null, b))
             : this.entity.updateQuad(this.quadPositions[8], null, new h(), new h());
         },
         __class__: Xc,
       });
       var T = function (b) {
         this.values = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
         null != b && this.set(b);
       };
       r["lemongine.Matrix4"] = T;
       T.__name__ = "lemongine.Matrix4";
       T.prototype = {
         reset: function () {
           this.values[0] = T.identity.values[0];
           this.values[1] = T.identity.values[1];
           this.values[2] = T.identity.values[2];
           this.values[3] = T.identity.values[3];
           this.values[4] = T.identity.values[4];
           this.values[5] = T.identity.values[5];
           this.values[6] = T.identity.values[6];
           this.values[7] = T.identity.values[7];
           this.values[8] = T.identity.values[8];
           this.values[9] = T.identity.values[9];
           this.values[10] = T.identity.values[10];
           this.values[11] = T.identity.values[11];
           this.values[12] = T.identity.values[12];
           this.values[13] = T.identity.values[13];
           this.values[14] = T.identity.values[14];
           this.values[15] = T.identity.values[15];
           return this;
         },
         rotate: function (b, a) {
           a.normalize();
           var c = Math.cos(b);
           b = Math.sin(b);
           var d = a.x,
             f = a.y;
           a = a.z;
           return this.multiply([
             c + d * d * (1 - c),
             d * f * (1 - c) - a * b,
             d * a * (1 - c) + f * b,
             0,
             f * d * (1 - c) + a * b,
             c + f * f * (1 - c),
             f * a * (1 - c) - d * b,
             0,
             a * d * (1 - c) - f * b,
             a * f * (1 - c) + d * b,
             c + a * a * (1 - c),
             0,
             0,
             0,
             0,
             1,
           ]);
         },
         rotate2D: function (b, a) {
           null == a && (a = !1);
           var c = Math.cos(b);
           b = Math.sin(b);
           a = a ? -1 : 1;
           return this.multiply([c, -a * b, 0, 0, a * b, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
         },
         translate: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           return this.multiply([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, b, a, c, 1]);
         },
         setPosition: function (b, a, c) {
           null == c && (c = 1);
           null == a && (a = 1);
           null == b && (b = 1);
           this.values[12] = b;
           this.values[13] = a;
           this.values[14] = c;
           return this;
         },
         scale: function (b, a, c) {
           null == c && (c = 1);
           null == a && (a = 1);
           null == b && (b = 1);
           return this.multiply([b, 0, 0, 0, 0, a, 0, 0, 0, 0, c, 0, 0, 0, 0, 1]);
         },
         scale2D: function (b) {
           null == b && (b = 1);
           return this.multiply([b, 0, 0, 0, 0, b, 0, 0, 0, 0, b, 0, 0, 0, 0, 1]);
         },
         shear: function (b, a, c, d, f, e) {
           null == e && (e = 0);
           null == f && (f = 0);
           null == d && (d = 0);
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           return this.multiply([1, c, f, 0, b, 1, e, 0, a, d, 1, 0, 0, 0, 0, 1]);
         },
         shear2D: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           return this.shear(b, 0, a);
         },
         invert: function () {
           var b = T.identity.values.slice(),
             a = this.values,
             c = a[9] * a[14] * a[7] - a[13] * a[10] * a[7] + a[13] * a[6] * a[11] - a[5] * a[14] * a[11] - a[9] * a[6] * a[15] + a[5] * a[10] * a[15],
             d = a[12] * a[10] * a[7] - a[8] * a[14] * a[7] - a[12] * a[6] * a[11] + a[4] * a[14] * a[11] + a[8] * a[6] * a[15] - a[4] * a[10] * a[15],
             f = a[8] * a[13] * a[7] - a[12] * a[9] * a[7] + a[12] * a[5] * a[11] - a[4] * a[13] * a[11] - a[8] * a[5] * a[15] + a[4] * a[9] * a[15],
             e = a[12] * a[9] * a[6] - a[8] * a[13] * a[6] - a[12] * a[5] * a[10] + a[4] * a[13] * a[10] + a[8] * a[5] * a[14] - a[4] * a[9] * a[14],
             h = a[0] * c + a[1] * d + a[2] * f + a[3] * e;
           if (0 == h) return Ia.trace("Warning! Matrix can not be inverted.", { fileName: "lemongine/Matrix4.hx", lineNumber: 115, className: "lemongine.Matrix4", methodName: "invert" }), this.set(T.identity.values), this;
           h = 1 / h;
           b[0] = c * h;
           b[1] = (a[13] * a[10] * a[3] - a[9] * a[14] * a[3] - a[13] * a[2] * a[11] + a[1] * a[14] * a[11] + a[9] * a[2] * a[15] - a[1] * a[10] * a[15]) * h;
           b[2] = (a[5] * a[14] * a[3] - a[13] * a[6] * a[3] + a[13] * a[2] * a[7] - a[1] * a[14] * a[7] - a[5] * a[2] * a[15] + a[1] * a[6] * a[15]) * h;
           b[3] = (a[9] * a[6] * a[3] - a[5] * a[10] * a[3] - a[9] * a[2] * a[7] + a[1] * a[10] * a[7] + a[5] * a[2] * a[11] - a[1] * a[6] * a[11]) * h;
           b[4] = d * h;
           b[5] = (a[8] * a[14] * a[3] - a[12] * a[10] * a[3] + a[12] * a[2] * a[11] - a[0] * a[14] * a[11] - a[8] * a[2] * a[15] + a[0] * a[10] * a[15]) * h;
           b[6] = (a[12] * a[6] * a[3] - a[4] * a[14] * a[3] - a[12] * a[2] * a[7] + a[0] * a[14] * a[7] + a[4] * a[2] * a[15] - a[0] * a[6] * a[15]) * h;
           b[7] = (a[4] * a[10] * a[3] - a[8] * a[6] * a[3] + a[8] * a[2] * a[7] - a[0] * a[10] * a[7] - a[4] * a[2] * a[11] + a[0] * a[6] * a[11]) * h;
           b[8] = f * h;
           b[9] = (a[12] * a[9] * a[3] - a[8] * a[13] * a[3] - a[12] * a[1] * a[11] + a[0] * a[13] * a[11] + a[8] * a[1] * a[15] - a[0] * a[9] * a[15]) * h;
           b[10] = (a[4] * a[13] * a[3] - a[12] * a[5] * a[3] + a[12] * a[1] * a[7] - a[0] * a[13] * a[7] - a[4] * a[1] * a[15] + a[0] * a[5] * a[15]) * h;
           b[11] = (a[8] * a[5] * a[3] - a[4] * a[9] * a[3] - a[8] * a[1] * a[7] + a[0] * a[9] * a[7] + a[4] * a[1] * a[11] - a[0] * a[5] * a[11]) * h;
           b[12] = e * h;
           b[13] = (a[8] * a[13] * a[2] - a[12] * a[9] * a[2] + a[12] * a[1] * a[10] - a[0] * a[13] * a[10] - a[8] * a[1] * a[14] + a[0] * a[9] * a[14]) * h;
           b[14] = (a[12] * a[5] * a[2] - a[4] * a[13] * a[2] - a[12] * a[1] * a[6] + a[0] * a[13] * a[6] + a[4] * a[1] * a[14] - a[0] * a[5] * a[14]) * h;
           b[15] = (a[4] * a[9] * a[2] - a[8] * a[5] * a[2] + a[8] * a[1] * a[6] - a[0] * a[9] * a[6] - a[4] * a[1] * a[10] + a[0] * a[5] * a[10]) * h;
           this.values[0] = b[0];
           this.values[1] = b[1];
           this.values[2] = b[2];
           this.values[3] = b[3];
           this.values[4] = b[4];
           this.values[5] = b[5];
           this.values[6] = b[6];
           this.values[7] = b[7];
           this.values[8] = b[8];
           this.values[9] = b[9];
           this.values[10] = b[10];
           this.values[11] = b[11];
           this.values[12] = b[12];
           this.values[13] = b[13];
           this.values[14] = b[14];
           this.values[15] = b[15];
           return this;
         },
         inverse: function () {
           return new T(this.values).invert();
         },
         multiply: function (b) {
           var a = [];
           a[0] = this.values[0] * b[0] + this.values[1] * b[4] + this.values[2] * b[8] + this.values[3] * b[12];
           a[1] = this.values[0] * b[1] + this.values[1] * b[5] + this.values[2] * b[9] + this.values[3] * b[13];
           a[2] = this.values[0] * b[2] + this.values[1] * b[6] + this.values[2] * b[10] + this.values[3] * b[14];
           a[3] = this.values[0] * b[3] + this.values[1] * b[7] + this.values[2] * b[11] + this.values[3] * b[15];
           a[4] = this.values[4] * b[0] + this.values[5] * b[4] + this.values[6] * b[8] + this.values[7] * b[12];
           a[5] = this.values[4] * b[1] + this.values[5] * b[5] + this.values[6] * b[9] + this.values[7] * b[13];
           a[6] = this.values[4] * b[2] + this.values[5] * b[6] + this.values[6] * b[10] + this.values[7] * b[14];
           a[7] = this.values[4] * b[3] + this.values[5] * b[7] + this.values[6] * b[11] + this.values[7] * b[15];
           a[8] = this.values[8] * b[0] + this.values[9] * b[4] + this.values[10] * b[8] + this.values[11] * b[12];
           a[9] = this.values[8] * b[1] + this.values[9] * b[5] + this.values[10] * b[9] + this.values[11] * b[13];
           a[10] = this.values[8] * b[2] + this.values[9] * b[6] + this.values[10] * b[10] + this.values[11] * b[14];
           a[11] = this.values[8] * b[3] + this.values[9] * b[7] + this.values[10] * b[11] + this.values[11] * b[15];
           a[12] = this.values[12] * b[0] + this.values[13] * b[4] + this.values[14] * b[8] + this.values[15] * b[12];
           a[13] = this.values[12] * b[1] + this.values[13] * b[5] + this.values[14] * b[9] + this.values[15] * b[13];
           a[14] = this.values[12] * b[2] + this.values[13] * b[6] + this.values[14] * b[10] + this.values[15] * b[14];
           a[15] = this.values[12] * b[3] + this.values[13] * b[7] + this.values[14] * b[11] + this.values[15] * b[15];
           this.values[0] = a[0];
           this.values[1] = a[1];
           this.values[2] = a[2];
           this.values[3] = a[3];
           this.values[4] = a[4];
           this.values[5] = a[5];
           this.values[6] = a[6];
           this.values[7] = a[7];
           this.values[8] = a[8];
           this.values[9] = a[9];
           this.values[10] = a[10];
           this.values[11] = a[11];
           this.values[12] = a[12];
           this.values[13] = a[13];
           this.values[14] = a[14];
           this.values[15] = a[15];
           return this;
         },
         set: function (b) {
           for (var a = 0; 16 > a; ) {
             var c = a++;
             this.values[c] = b.length < c ? 0 : b[c];
           }
           return this;
         },
         getX: function () {
           return this.values[12];
         },
         getY: function () {
           return this.values[13];
         },
         getZ: function () {
           return this.values[14];
         },
         setPerspectiveMatrix: function (b, a, c, d) {
           null == d && (d = 1e3);
           null == c && (c = 0.1);
           null == a && (a = 1);
           null == b && (b = 45);
           b = 1 / Math.tan((b * Math.PI) / 360);
           this.set([b / a, 0, 0, 0, 0, -b, 0, 0, 0, 0, (c + d) / (c - d), -1, 0, 0, (2 * c * d) / (c - d), 0]);
           return this;
         },
         setOrthographicMatrix: function (b, a, c, d) {
           null == d && (d = 1e3);
           null == c && (c = 0.1);
           null == a && (a = 1);
           null == b && (b = 400);
           this.set([2 / (b * a), 0, 0, 0, 0, -2 / b, 0, 0, 0, 0, 2 / (d - c), 0, 0, 0, -(d + c) / (d - c), 1]);
           return this;
         },
         apply: function (b, a) {
           null == a && (a = !0);
           var c = b.x * this.values[1] + b.y * this.values[5] + b.z * this.values[9] + this.values[13],
             d = b.x * this.values[2] + b.y * this.values[6] + b.z * this.values[10] + this.values[14];
           return a ? ((b.x = b.x * this.values[0] + b.y * this.values[4] + b.z * this.values[8] + this.values[12]), (b.y = c), (b.z = d), b) : new M(b.x, b.y, b.z);
         },
         __class__: T,
       };
       var Ja = function (b, a, c) {
         var d = new e();
         d.h.h = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t1 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t2 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t3 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t4 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t5 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t6 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t7 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t8 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t9 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t10 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t11 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t12 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t13 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         d.h.t14 = { scaleX: 1, scaleY: 1, rotation: 0, x: 0, y: 0, rotateTo: 0, playing: !1, frame: 0 };
         this.mobMovie = d;
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_EnderDragon"] = Ja;
       Ja.__name__ = "entities.Entity_Mob_EnderDragon";
       Ja.__super__ = K;
       Ja.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 24);
           b = this.world.mobs.h[this.id];
           var a = 0 > b.h.speedX ? 1 : -1;
           this.mobMovie.h.h.scaleY != a * Math.abs(this.mobMovie.h.h.scaleY) && (this.mobMovie.h.h.scaleY = a * Math.abs(this.mobMovie.h.h.scaleY));
           this.mobMovie.h.h.rotateTo = (180 * Math.atan2(b.h.speedY, -b.h.speedX)) / Math.PI;
           this.mobMovie.h.h.rotation = this.getRotD(this.mobMovie.h.h.rotateTo, this.mobMovie.h.h.rotation, 10);
           this.mobMovie.h.t1.rotation = this.getRotD(this.mobMovie.h.h.rotation, this.mobMovie.h.t1.rotation, 0.1);
           this.mobMovie.h.t1.scaleY = -90 > this.mobMovie.h.t1.rotation || 90 < this.mobMovie.h.t1.rotation ? -Math.abs(this.mobMovie.h.t1.scaleY) : Math.abs(this.mobMovie.h.t1.scaleY);
           for (var c = 2; 15 > c; )
             (b = c++),
               (this.mobMovie.h["t" + b].rotation = this.getRotD(Math.round(this.mobMovie.h["t" + (b - 1)].rotation), Math.round(this.mobMovie.h["t" + b].rotation), 0.1)),
               (this.mobMovie.h["t" + b].scaleY = -90 > this.mobMovie.h["t" + b].rotation || 90 < this.mobMovie.h["t" + b].rotation ? -Math.abs(this.mobMovie.h["t" + b].scaleY) : Math.abs(this.mobMovie.h["t" + b].scaleY)),
               5 == b
                 ? ((this.mobMovie.h["t" + b].x = this.mobMovie.h["t" + (b - 1)].x + 6.333333333333333 * Math.sin(((-this.mobMovie.h["t" + (b - 1)].rotation + 90) / 180) * Math.PI)),
                   (this.mobMovie.h["t" + b].y = this.mobMovie.h["t" + (b - 1)].y + 6.333333333333333 * Math.cos(((-this.mobMovie.h["t" + (b - 1)].rotation + 90) / 180) * Math.PI)))
                 : ((this.mobMovie.h["t" + b].x = this.mobMovie.h["t" + (b - 1)].x + 0.8333333333333334 * Math.sin(((-this.mobMovie.h["t" + (b - 1)].rotation + 90) / 180) * Math.PI)),
                   (this.mobMovie.h["t" + b].y = this.mobMovie.h["t" + (b - 1)].y + 0.8333333333333334 * Math.cos(((-this.mobMovie.h["t" + (b - 1)].rotation + 90) / 180) * Math.PI)));
           this.mobMovie.h.h.playing && ((b = this.mobMovie.h.h), b.frame++, 23 < this.mobMovie.h.h.frame && ((this.mobMovie.h.h.frame = 0), (this.mobMovie.h.h.playing = !1)));
           this.mobMovie.h.t4.playing && ((b = this.mobMovie.h.t4), b.frame++, 79 < this.mobMovie.h.t4.frame && ((this.mobMovie.h.t4.frame = 0), (this.mobMovie.h.t4.playing = !1)));
           b = 0;
           a = Object.keys(Ja.pieces.h);
           for (var d = a.length, f = 0; f < d; ) {
             c = a[f++];
             var l = Ja.pieces.h[c].clip.width / 2 / 30,
               k = -Ja.pieces.h[c].clip.height / 2 / 30,
               g = Ja.pieces.h[c];
             this.entityMatrix.reset().translate(-l, k).multiply(g.thisTransform.values);
             null != Ja.anims.h[c] && this.entityMatrix.multiply(Ja.anims.h[c][Ja.animFrames.h[c][Math.floor(this.mobMovie.h[Ja.pieces.h[c].movie].frame / 2)]].values);
             l = this.entityMatrix.scale(this.mobMovie.h[Ja.pieces.h[c].movie].scaleX, this.mobMovie.h[Ja.pieces.h[c].movie].scaleY);
             k = this.mobMovie.h[Ja.pieces.h[c].movie];
             g = this.mobMovie.h[Ja.pieces.h[c].movie];
             l.rotate2D((-this.mobMovie.h[Ja.pieces.h[c].movie].rotation / 180) * Math.PI)
               .translate(k.x, g.y)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             l = this.entity;
             k = this.quadPositions[b++];
             g = new h(Ja.pieces.h[c].clip.x, Ja.pieces.h[c].clip.y);
             var m = new h(Ja.pieces.h[c].clip.width, Ja.pieces.h[c].clip.height),
               n = ba.quadMatrixHelper(new t(0, 0, Ja.pieces.h[c].clip.width / 30, Ja.pieces.h[c].clip.height / 30), this.entityMatrix);
             c = new e();
             c.h.texBlend = K.blendMob;
             var p = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             c.h.colorOffset = p;
             p = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             c.h.color = p;
             l.updateQuad(k, null, g, m, null, n, null, c);
           }
         },
         get_bodyCenter: function () {
           return this.getPointOnPart("body", 0.5, 0.5);
         },
         get_headCenter: function () {
           return this.getPointOnPart("head", 0.5, 0.5);
         },
         getPointOnPart: function (b, a, c) {
           var d = Ja.pieces.h[b].clip.width / 2 / 30,
             f = -Ja.pieces.h[b].clip.height / 2 / 30,
             e = Ja.pieces.h[b],
             k = this.mobMovie.h[Ja.pieces.h[b].movie],
             g = this.mobMovie.h[Ja.pieces.h[b].movie];
           e = this.entityMatrix.reset().translate(-d, f).multiply(e.thisTransform.values).scale(k.scaleX, g.scaleY);
           d = this.mobMovie.h[Ja.pieces.h[b].movie];
           f = this.mobMovie.h[Ja.pieces.h[b].movie];
           e.rotate2D((-this.mobMovie.h[Ja.pieces.h[b].movie].rotation / 180) * Math.PI)
             .translate(d.x, f.y)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entityMatrix.apply(new M((Ja.pieces.h[b].clip.width / 30) * a, (Ja.pieces.h[b].clip.height / 30) * c), !0);
           return new h(b.x, b.y);
         },
         __class__: Ja,
       });
       var jb = function (b, a, c) {
         this.wasHolding = [];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Enderman"] = jb;
       jb.__name__ = "entities.Entity_Mob_Enderman";
       jb.__super__ = K;
       jb.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 8);
           this.movieX = this.world.mobs.h[this.id].h.x + this.world.mobTmpData.h[this.id].h.offsetX;
           this.movieY = this.world.mobs.h[this.id].h.y + this.world.mobTmpData.h[this.id].h.offsetY;
           null == this.world.mobTmpData.h[this.id].h.wasHolding && (this.world.mobTmpData.h[this.id].h.wasHolding = "");
           null == this.world.mobs.h[this.id].h.handItems && (this.world.mobs.h[this.id].h.handItems = []);
           null == this.world.mobs.h[this.id].h.handItems[0] && (this.world.mobs.h[this.id].h.handItems[0] = g.emptyItem());
           if (this.wasHolding != this.world.mobs.h[this.id].h.handItems[0][0]) {
             this.wasHolding = O.clone(this.world.mobs.h[this.id].h.handItems[0][0]);
             b = this.world.mobTmpData.h[this.id];
             var a = O.clone(this.world.mobs.h[this.id].h.handItems[0][0]);
             b.h.wasHolding = a;
             if (m.Instance.game.isEmptyItem(this.world.mobs.h[this.id].h.handItems[0])) null != this.item && this.item.destroy();
             else if (
               ((H.__cast(this.entity, ja).overrideEmptySearchIndex = this.quadPositions[0] + 6),
               null == this.item ? (this.item = new bb(this.entity, 0, 0, this.game, this.world, this.world.mobs.h[this.id].h.handItems[0])) : this.item.set_item(this.world.mobs.h[this.id].h.handItems[0]),
               (H.__cast(this.entity, ja).overrideEmptySearchIndex = -1),
               this.item.renderer.quadPositions[0] != this.quadPositions[0] + 6)
             ) {
               a = 8 + this.item.renderer.quadPositions.length;
               this.destroy();
               var c = this.entity.nearestConsecutiveEmpty(a);
               this.quadPositions = [];
               for (b = 0; b < a; ) this.quadPositions.push(c + b++);
             }
           }
           a = this.entityMatrix
             .reset()
             .translate(-0.03333333333333333, 0)
             .scale(3 * this.scaleX, 1.674622 * this.scaleY);
           c = jb.appendages.h.leg11.h.x[this.currentFrame - 1] / 30;
           var d = jb.appendages.h.leg11.h.y[this.currentFrame - 1] / 30;
           a.rotate2D((-jb.appendages.h.leg11.h.r[this.currentFrame - 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[0];
           d = new h(247, 112);
           var f = new h(2, 12),
             l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           a = this.entityMatrix
             .reset()
             .translate(-0.03333333333333333, 0)
             .scale(3 * this.scaleX, 1.725159 * this.scaleY);
           c = jb.appendages.h.leg12.h.x[this.currentFrame - 1] / 30;
           d = jb.appendages.h.leg12.h.y[this.currentFrame - 1] / 30;
           a.rotate2D((-jb.appendages.h.leg12.h.r[this.currentFrame - 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[1];
           d = new h(247, 112);
           f = new h(2, 12);
           l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           a = this.entityMatrix
             .reset()
             .translate(-0.03333333333333333, 0)
             .scale(3 * this.scaleX, 1.629059 * this.scaleY);
           c = jb.appendages.h.leg21.h.x[this.currentFrame - 1] / 30;
           d = jb.appendages.h.leg21.h.y[this.currentFrame - 1] / 30;
           a.rotate2D((-jb.appendages.h.leg21.h.r[this.currentFrame - 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[2];
           d = new h(247, 112);
           f = new h(2, 12);
           l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           a = this.entityMatrix
             .reset()
             .translate(-0.03333333333333333, 0)
             .scale(3 * this.scaleX, 1.725159 * this.scaleY);
           c = jb.appendages.h.leg22.h.x[this.currentFrame - 1] / 30;
           d = jb.appendages.h.leg22.h.y[this.currentFrame - 1] / 30;
           a.rotate2D((-jb.appendages.h.leg22.h.r[this.currentFrame - 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[3];
           d = new h(247, 112);
           f = new h(2, 12);
           l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           this.entityMatrix
             .reset()
             .translate(-0.11666666666666667, -0.9666666666666667)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(3 * this.scaleX, 3 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[4];
           d = new h(233.1, 112);
           f = new h(6.8, 17);
           l = ba.quadMatrixHelper(new t(0, 0, 0.23333333333333334, 0.5666666666666667), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           a = this.entityMatrix.reset().translate(-0.03333333333333333, 0).scale(3, 3);
           c = jb.appendages.h.arm1.h.x[null == this.item ? 0 : 1] / 30;
           d = jb.appendages.h.arm1.h.y[null == this.item ? 0 : 1] / 30;
           a.rotate2D((-jb.appendages.h.arm1.h.r[null == this.item ? 0 : 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[5];
           d = new h(247, 112);
           f = new h(2, 12);
           l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           null != this.item &&
             (this.entityMatrix
               .reset()
               .translate(-0.5, -0.5)
               .scale2D(0.4875)
               .rotate2D(0.04722222222222222 * Math.PI)
               .translate(-0.3766666666666667, -1.0633333333333332)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
             H.__cast(this.entity, ja).currentMatrix.set(this.entityMatrix.values),
             (H.__cast(this.entity, ja).overrideEmptySearchIndex = this.quadPositions[0] + 2),
             (b = new e()),
             (b.h.texBlend = K.blendItems),
             (b.h.color = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha]),
             (H.__cast(this.entity, ja).attributeMultipliers = b),
             this.item.render(),
             H.__cast(this.entity, ja).currentMatrix.reset(),
             (H.__cast(this.entity, ja).overrideEmptySearchIndex = -1),
             (H.__cast(this.entity, ja).attributeMultipliers = new e()));
           a = this.entityMatrix.reset().translate(-0.03333333333333333, 0).scale(3, 3);
           c = jb.appendages.h.arm2.h.x[null == this.item ? 0 : 1] / 30;
           d = jb.appendages.h.arm2.h.y[null == this.item ? 0 : 1] / 30;
           a.rotate2D((-jb.appendages.h.arm2.h.r[null == this.item ? 0 : 1] / 180) * Math.PI)
             .translate(c, d)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = null != this.item ? this.item.renderer.quadPositions[this.item.renderer.quadPositions.length - 1] + 1 : this.quadPositions[6];
           d = new h(247, 112);
           f = new h(2, 12);
           l = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.4), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -3.06)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (a = this.entity),
               (c = null != this.item ? this.item.renderer.quadPositions[this.item.renderer.quadPositions.length - 1] + 2 : this.quadPositions[7]),
               (d = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (f = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (b = new e()),
               (b.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (b.h.color = k),
               a.updateQuad(c, null, d, f, null, l, null, b))
             : this.entity.updateQuad(null != this.item ? this.item.renderer.quadPositions[this.item.renderer.quadPositions.length - 1] + 2 : this.quadPositions[7], null, new h(), new h());
         },
         destroy: function () {
           null != this.item && this.item.destroy();
           this.wasHolding = g.emptyItem();
           K.prototype.destroy.call(this);
         },
         __class__: jb,
       });
       var zg = function (b, a, c) {
         this.tentaclePositions = [new h(-22.2, 32.25), new h(15.15, 19.25), new h(52.5, 25.75), new h(-52.2, 19.25), new h(-14.85, 32.25), new h(22.5, 25.75)];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Ghast"] = zg;
       zg.__name__ = "entities.Entity_Mob_Ghast";
       zg.__super__ = K;
       zg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 7);
           for (b = 1; 7 > b; ) {
             var a = b++,
               c =
                 (-(-w.sign(this.scaleX) * this.world.mobs.h[this.id].h.speedX * 34 + 5 * Math.sin(this.world.tick / (m.Instance.get_fps() / 25) / 6 - 2 * a)) *
                   Math.min(2, Math.abs(2 * this.world.mobs.h[this.id].h.speedX) + Math.abs(2 * this.world.mobs.h[this.id].h.speedY))) /
                 4;
             this.entityMatrix
               .reset()
               .translate(-0.03333333333333333, -0.03333333333333333)
               .scale2D(9.308592)
               .rotate2D((-c / 180) * Math.PI)
               .translate(this.tentaclePositions[a - 1].x / 30, this.tentaclePositions[a - 1].y / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             c = this.entity;
             var d = this.quadPositions[a - 1],
               f = new h(193, 112),
               l = new h(2, 8),
               k = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.26666666666666666), this.entityMatrix),
               g = new e();
             g.h.texBlend = K.blendMob;
             var n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             g.h.colorOffset = n;
             a = w.repeatArray([this.colorTransform[0] * (4 > a ? 0.5 : 1), this.colorTransform[1] * (4 > a ? 0.5 : 1), this.colorTransform[2] * (4 > a ? 0.5 : 1), this.colorTransform[3] * this.alpha], 6);
             g.h.color = a;
             c.updateQuad(d, null, f, l, null, k, null, g);
           }
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.23333333333333334)
             .scale2D(9.308716)
             .translate(0, -1.0766666666666667)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           c = this.entity;
           d = this.quadPositions[6];
           f = new h(177, 112 + (15 > this.world.mobs.h[this.id].h.attackCooldown && 0 < this.world.mobs.h[this.id].h.attackCooldown ? 14 : 0));
           l = new h(16, 14);
           k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.4666666666666667), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = n;
           n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = n;
           c.updateQuad(d, null, f, l, null, k, null, b);
         },
         __class__: zg,
       });
       var yg = function (b, a, c) {
         this.frameScales = [new h(4, 0), new h(4, 0), new h(3.075012, 0.35714285714285715), new h(2.754868, 0.75), new h(2.599915, 1.1071428571428572), new h(2.754868, 0.75), new h(3.075012, 0.35714285714285715)];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_MagmaCube"] = yg;
       yg.__name__ = "entities.Entity_Mob_MagmaCube";
       yg.__super__ = K;
       yg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 9);
           var a = this.world.mobs.h[this.id];
           b = 1;
           null == this.world.mobTmpData.h[this.id].h.animationFrame && (this.world.mobTmpData.h[this.id].h.animationFrame = 0);
           if (1 == a.h.falling) {
             0 == this.world.mobTmpData.h[this.id].h.animationFrame && this.game.requestSound("slimejump" + Math.floor(2 * Math.random() + 1), a.h.x - this.world.worldX, a.h.y - this.world.worldY);
             b = this.world.mobTmpData;
             var c = this.id;
             b.h[c].h.animationFrame += 1;
             b = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7][Math.min(16, Math.floor(this.world.mobTmpData.h[this.id].h.animationFrame / (m.Instance.get_fps() / 25))) | 0];
           } else
             0 < (this.world.mobTmpData.h[this.id].h.animationFrame | 0) &&
               ((this.world.mobTmpData.h[this.id].h.animationFrame = 0),
               this.game.addParticles("magmacube", 0, 2 * a.h.size, new h(a.h.x - (15 * a.h.size) / 2 / 30, (15 * a.h.size) / 30), new h(a.h.y, 0)),
               this.game.requestSound("slimeland" + Math.floor(4 * Math.random() + 1), a.h.x - this.world.worldX, a.h.y - this.world.worldY));
           a = (15 * Math.pow(2, a.h.size - 1)) / 64;
           for (c = 0; 8 > c; ) {
             var d = c++;
             this.entityMatrix
               .reset()
               .translate(-0.26666666666666666, (-16 + 2 * d - (7 - d) * this.frameScales[b - 1].y) / 30)
               .scale(this.frameScales[b - 1].x * this.scaleX, 4 * this.scaleY)
               .scale2D(a)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             var f = this.entity,
               l = this.quadPositions[d];
             d = new h(161, 112 + 2 * d);
             var k = new h(16, 2),
               g = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.06666666666666667), this.entityMatrix),
               n = new e();
             n.h.texBlend = K.blendMob;
             var p = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             n.h.colorOffset = p;
             p = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             n.h.color = p;
             f.updateQuad(l, null, d, k, null, g, null, n);
           }
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.5333333333333333)
                 .translate(0, (-16 - 7 * this.frameScales[b - 1].y) / 30)
                 .scale(this.scaleX * this.frameScales[b - 1].x * a, 4 * this.scaleY * a)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (f = this.entity),
               (l = this.quadPositions[8]),
               (d = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (k = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (g = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (c = new e()),
               (c.h.texBlend = K.blendItems),
               (p = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (c.h.color = p),
               f.updateQuad(l, null, d, k, null, g, null, c))
             : this.entity.updateQuad(this.quadPositions[8], null, new h(), new h());
         },
         __class__: yg,
       });
       var sg = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Nethereye"] = sg;
       sg.__name__ = "entities.Entity_Mob_Nethereye";
       sg.__super__ = K;
       sg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           this.rotation = (180 * Math.atan2(-this.world.mobs.h[this.id].h.speedY, this.world.mobs.h[this.id].h.speedX)) / Math.PI;
           this.entityMatrix
             .reset()
             .translate(-0.16666666666666666, -0.16666666666666666)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2 * Math.abs(this.scaleX), 2 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(22, 112),
             d = new h(10, 10),
             f = ba.quadMatrixHelper(new t(0, 0, 0.3333333333333333, 0.3333333333333333), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.5333333333333333)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -0.36666666666666664)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[1]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: sg,
       });
       var od = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Pig"] = od;
       od.__name__ = "entities.Entity_Mob_Pig";
       od.__super__ = K;
       od.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 3);
           this.entityMatrix
             .reset()
             .translate(-0.3333333333333333, -0.5)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(3 * this.scaleX, 3 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(20 * od.frames[this.currentFrame], 63),
             d = new h(20, 15),
             f = ba.quadMatrixHelper(new t(0, 0, 0.6666666666666666, 0.5), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           this.game.isEmptyItem(this.world.mobs.h[this.id].h.saddleItem)
             ? this.entity.updateQuad(this.quadPositions[1], null, new h(), new h())
             : (this.entityMatrix
                 .reset()
                 .scale(2, 2)
                 .translate(-0.33666666666666667, -0.535)
                 .translate(0, -0.7183333333333334 - (1 == od.frames[this.currentFrame] ? 0.1 * this.scaleY : 0))
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (d = y.getTexture("saddle")),
               (b = this.entity),
               (a = this.quadPositions[1]),
               (c = new h(d.x, d.y)),
               (d = new h(d.width, d.height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6)),
               (l.h.colorOffset = k),
               (k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l));
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(-0.6466666666666666, -1.3333333333333333)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[2]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[2], null, new h(), new h());
         },
         __class__: od,
       });
       var qg = function (b, a, c) {
         this.hit = new t();
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Player"] = qg;
       qg.__name__ = "entities.Entity_Mob_Player";
       qg.__super__ = K;
       qg.prototype = v(K.prototype, {
         get_hit: function () {
           this.hit.set(this.world.worldX - 0.7272000000000001, this.world.worldY - 1.9997999999999998, 1.4544000000000001, 1.9997999999999998);
           return this.hit;
         },
         __class__: qg,
       });
       var wg = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Rabbit"] = wg;
       wg.__name__ = "entities.Entity_Mob_Rabbit";
       wg.__super__ = K;
       wg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           null != this.world.mobs.h[this.id].h.name &&
             ("toast" == this.world.mobs.h[this.id].h.name.toLowerCase() ? (this.world.mobs.h[this.id].h.rabbitType = 7) : "moose" == this.world.mobs.h[this.id].h.name.toLowerCase() && (this.world.mobs.h[this.id].h.rabbitType = 8));
           b = 1;
           this.world.mobs.h[this.id].h.falling && (b = 0 < this.world.mobs.h[this.id].h.speedY ? 2 : 3);
           this.currentFrame != b + (null == this.world.mobTmpData.h[this.id].h.animationOffset ? 0 : this.world.mobTmpData.h[this.id].h.animationOffset) &&
             this.gotoAndStop(b + (null == this.world.mobTmpData.h[this.id].h.animationOffset ? 0 : this.world.mobTmpData.h[this.id].h.animationOffset));
           var a = null == this.world.mobs.h[this.id].h.rabbitType ? 1 : this.world.mobs.h[this.id].h.rabbitType;
           this.entityMatrix
             .reset()
             .translate(-0.2, -0.5333333333333333)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(1.919922 * this.scaleX, 1.919922 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var c = this.quadPositions[0];
           a = new h(128 + ((this.currentFrame - 1 + 4 * (a - 1)) % 8) * 12, 16 * Math.floor((this.currentFrame - 1 + 4 * (a - 1)) / 8));
           var d = new h(12, 16),
             f = ba.quadMatrixHelper(new t(0, 0, 0.4, 0.5333333333333333), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(c, null, a, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .rotate2D(-0.25 * Math.PI)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0.26666666666666666, -0.6)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (c = this.quadPositions[1]),
               (a = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(c, null, a, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: wg,
       });
       var sc = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Sheep"] = sc;
       sc.__name__ = "entities.Entity_Mob_Sheep";
       sc.__super__ = K;
       sc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 4);
           var a = this.world.mobs.h[this.id];
           this.entityMatrix
             .reset()
             .translate(-0.36666666666666664, -0.5666666666666667)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.4 * this.scaleX, 2.4 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var c = this.quadPositions[0],
             d = new h(22 * sc.frames[this.currentFrame], 78),
             f = new h(22, 17),
             l = ba.quadMatrixHelper(new t(0, 0, 0.7333333333333333, 0.5666666666666667), this.entityMatrix),
             k = new e();
           k.h.texBlend = K.blendMob;
           var n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           k.h.colorOffset = n;
           n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           k.h.color = n;
           b.updateQuad(c, null, d, f, null, l, null, k);
           1 != a.h.sheared
             ? ((b = 1 == this.currentFrame ? 1 : 0),
               this.entityMatrix
                 .reset()
                 .translate(-0.36666666666666664, -((17 - b) / 30))
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(2.4 * this.scaleX, 2.4 * this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               Object.prototype.hasOwnProperty.call(V.colors.h, a.h.color) || (a.h.color = "white"),
               (b = this.entity),
               (c = this.quadPositions[1]),
               (d = new h(22 * sc.framesWool[this.currentFrame], 95)),
               (f = new h(22, 17)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.7333333333333333, 0.5666666666666667), this.entityMatrix)),
               (k = new e()),
               (k.h.texBlend = K.blendMob),
               (n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6)),
               (k.h.colorOffset = n),
               (n = w.repeatArray([this.colorTransform[0] * V.colors.h[a.h.color].h.r, this.colorTransform[1] * V.colors.h[a.h.color].h.g, this.colorTransform[2] * V.colors.h[a.h.color].h.b, this.colorTransform[3] * this.alpha], 6)),
               (k.h.color = n),
               b.updateQuad(c, null, d, f, null, l, null, k))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
           null != this.get_armor()[0] && "MustacheCap" == g.makeDynamicArray(this.get_armor()[0])[0] && 1 <= g.makeDynamicArray(this.get_armor()[0])[1]
             ? ((b = 27 - sc.mustacheOffset[this.currentFrame]),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.53, 1.53)
                 .translate(-0.7200000000000001, -(b / 30))
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (a = y.getTexture("mustache")),
               (b = this.entity),
               (c = this.quadPositions[2]),
               (d = new h(a.x, a.y)),
               (f = new h(a.width, a.height)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (k = new e()),
               (k.h.texBlend = K.blendItems),
               (n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6)),
               (k.h.colorOffset = n),
               (n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6)),
               (k.h.color = n),
               b.updateQuad(c, null, d, f, null, l, null, k))
             : this.entity.updateQuad(this.quadPositions[2], null, new h(), new h());
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               (b = 44.3 - sc.mustacheOffset[this.currentFrame]),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.0500173599999998, 1.0500173599999998)
                 .translate(-0.5866666666666667, -(b / 30))
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (c = this.quadPositions[3]),
               (d = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (f = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (k = new e()),
               (k.h.texBlend = K.blendItems),
               (n = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (k.h.color = n),
               b.updateQuad(c, null, d, f, null, l, null, k))
             : this.entity.updateQuad(this.quadPositions[3], null, new h(), new h());
         },
         __class__: sc,
       });
       var Vc = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Skeleton"] = Vc;
       Vc.__name__ = "entities.Entity_Mob_Skeleton";
       Vc.__super__ = K;
       Vc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 3);
           this.entityMatrix
             .reset()
             .translate(-0.2, -0.7)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.858276 * this.scaleX, 2.858276 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(12 * Vc.frames[this.currentFrame], 0),
             d = new h(12, 21),
             f = ba.quadMatrixHelper(new t(0, 0, 0.4, 0.7), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.26666666666666666)
             .scale(2, 2)
             .rotate2D(Math.PI / 4)
             .translate(-0.16666666666666666, -0.7333333333333333 - (1 == Vc.frames[this.currentFrame] || 2 == Vc.frames[this.currentFrame] ? 0.09527586666666667 * this.scaleY : 0))
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           d = y.getTexture("bow");
           b = this.entity;
           a = this.quadPositions[1];
           c = new h(d.x, d.y);
           d = new h(d.width, d.height);
           f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix);
           l = new e();
           l.h.texBlend = K.blendItems;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -2.2366666666666664)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[2]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[2], null, new h(), new h());
         },
         __class__: Vc,
       });
       var xg = function (b, a, c) {
         this.frameScales = [new h(2, 2), new h(1.790634, 2.195984), new h(1.659363, 2.269379), new h(1.593872, 2.337036), new h(1.568848, 2.353012), new h(1.593872, 2.337036), new h(1.659363, 2.269379), new h(1.790634, 2.195984)];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Slime"] = xg;
       xg.__name__ = "entities.Entity_Mob_Slime";
       xg.__super__ = K;
       xg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           var a = this.world.mobs.h[this.id];
           b = 1;
           null == this.world.mobTmpData.h[this.id].h.animationFrame && (this.world.mobTmpData.h[this.id].h.animationFrame = 0);
           if (1 == a.h.falling) {
             0 == E.parseInt(this.world.mobTmpData.h[this.id].h.animationFrame) && this.game.requestSound("slimejump" + Math.floor(2 * Math.random() + 1), a.h.x - this.world.worldX, a.h.y - this.world.worldY);
             b = this.world.mobTmpData;
             var c = this.id;
             b.h[c].h.animationFrame += 1;
             b = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8][Math.min(15, Math.floor(this.world.mobTmpData.h[this.id].h.animationFrame / (m.Instance.get_fps() / 25))) | 0];
           } else
             0 < (this.world.mobTmpData.h[this.id].h.animationFrame | 0) &&
               ((this.world.mobTmpData.h[this.id].h.animationFrame = 0),
               this.game.addParticles("slime", 0, 2 * a.h.size, new h(a.h.x - (15 * a.h.size) / 2 / 30, (15 * a.h.size) / 30), new h(a.h.y, 0)),
               this.game.requestSound("slimeland" + Math.floor(4 * Math.random() + 1), a.h.x - this.world.worldX, a.h.y - this.world.worldY));
           a = (15 * Math.pow(2, a.h.size - 1)) / 64;
           this.entityMatrix
             .reset()
             .translate(-0.5333333333333333, -1.0666666666666667)
             .scale(this.frameScales[b - 1].x * this.scaleX, this.frameScales[b - 1].y * this.scaleY)
             .scale2D(a)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           c = this.entity;
           var d = this.quadPositions[0],
             f = new h(129, 112),
             l = new h(32, 32),
             k = ba.quadMatrixHelper(new t(0, 0, 1.0666666666666667, 1.0666666666666667), this.entityMatrix),
             g = new e();
           g.h.texBlend = K.blendMob;
           var n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           g.h.colorOffset = n;
           n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           g.h.color = n;
           c.updateQuad(d, null, f, l, null, k, null, g);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.5333333333333333)
                 .scale(2, 2)
                 .translate(0, -1.0666666666666667)
                 .scale(this.scaleX * this.frameScales[b - 1].x * a, this.scaleY * this.frameScales[b - 1].y * a)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (c = this.entity),
               (d = this.quadPositions[1]),
               (f = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (l = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (g = new e()),
               (g.h.texBlend = K.blendItems),
               (n = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (g.h.color = n),
               c.updateQuad(d, null, f, l, null, k, null, g))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: xg,
       });
       var rg = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_SnowGolem"] = rg;
       rg.__name__ = "entities.Entity_Mob_SnowGolem";
       rg.__super__ = K;
       rg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           this.entityMatrix
             .reset()
             .translate(-0.21666666666666667, -0.7)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.858276 * this.scaleX, 2.858276 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(0, 42),
             d = new h(15, 21),
             f = ba.quadMatrixHelper(new t(0, 0, 0.5, 0.7), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -2.33)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[1]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         __class__: rg,
       });
       var Cg = function (b, a, c) {
         this.firstFrame = !0;
         this.armorOffsets = [
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
         ];
         this.armorRenderers = [];
         this.lastArmors = [];
         this.frameNumber = this.frameTimer = this.walkAnimation = 0;
         this.characterMatrix = new T();
         K.call(this, b, a, c);
         this.entityPoolID = "spawnskin";
         this.initMobEntity();
         this.entity.setTextureBuffer("texture2", a.spawnskinTextureManager.skinTexture);
         this.entity.setUniform("texSize2", [a.spawnskinTextureManager.skinTexture.width, a.spawnskinTextureManager.skinTexture.height]);
         this.armorRenderers = [new eb(this.entity), new rb(this.entity), new sb(this.entity), new tb(this.entity)];
       };
       r["entities.Entity_Mob_Spawnskin"] = Cg;
       Cg.__name__ = "entities.Entity_Mob_Spawnskin";
       Cg.__super__ = K;
       Cg.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this);
           var a = this.world.mobs.h[this.id];
           b = this.world.mobTmpData.h[this.id];
           this.skinTexture = this.game.spawnskinTextureManager.getTextureSlot(a.h.skin);
           if (1 == this.skinTexture.failed) this.game.console.newLine("[INFO] Failed to load mob skin " + E.parseInt(E.string(a.h.skin))), this.removeMob(this.id);
           else {
             var c = 1;
             1 == b.h.miningAnimation ? (c = 3) : a.h.wasFalling && a.h.falling ? (c = 5) : (1 == g.makeDynamicMap(a.h.keys).h.left || 1 == g.makeDynamicMap(a.h.keys).h.right) && Math.abs(a.h.speedX) > g.migrateSpeed(2) && (c = 2);
             if (0 < b.h.hurtAnimation || 0 < a.h.dead) c = 4;
             var d = !0,
               f = this.quadPositions[0],
               l = 2;
             this.firstFrame && (this.firstFrame = d = !1);
             for (a = 0; 4 > a; ) {
               var k = a++;
               null != this.get_armor()[k]
                 ? (this.lastArmors[k] != this.get_armor()[k][0] &&
                     ((this.lastArmors[k] = O.clone(this.get_armor()[k][0])),
                     0 == k
                       ? H.__cast(this.armorRenderers[k], eb).setItem(this.get_armor()[k], f, new T(), !0)
                       : 1 == k
                       ? H.__cast(this.armorRenderers[k], rb).setItem(this.get_armor()[k], f, new T(), !0)
                       : 2 == k
                       ? H.__cast(this.armorRenderers[k], sb).setItem(this.get_armor()[k], f, new T(), new T(), !0, !0)
                       : 3 == k && H.__cast(this.armorRenderers[k], tb).setItem(this.get_armor()[k], f, new T(), new T(), !0, !0),
                     this.armorRenderers[k].quadPositions[0] != f + 1 ? (d = !1) : (f += this.armorRenderers[k].quadPositions.length)),
                   (l += this.armorRenderers[k].quadPositions.length))
                 : null != this.lastArmors[k] && ((this.lastArmors[k] = null), (d = !1));
             }
             0 == d &&
               (this.destroy(),
               (a = this.entity.nearestConsecutiveEmpty(l)),
               (this.quadPositions = []),
               this.quadPositions.push(a),
               this.entity.updateQuad(a, null, null, new h()),
               null != this.get_armor()[2] && H.__cast(this.armorRenderers[2], sb).setItem(this.get_armor()[2], a, new T(), new T(), !0, !0),
               null != this.get_armor()[3] && H.__cast(this.armorRenderers[3], tb).setItem(this.get_armor()[3], a, new T(), new T(), !0, !0),
               null != this.get_armor()[1] && H.__cast(this.armorRenderers[1], rb).setItem(this.get_armor()[1], a, new T(), !0),
               null != this.get_armor()[0] && H.__cast(this.armorRenderers[0], eb).setItem(this.get_armor()[0], a, new T(), !0),
               this.quadPositions.push(a + l - 1),
               this.entity.updateQuad(a + l - 1, null, null, new h()));
             this.currentFrame != c && ((this.currentFrame = c), (this.frameTimer = this.frameNumber = 0));
             this.characterMatrix
               .reset()
               .translate(-0.26666666666666666, -0.7333333333333333)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(2.727081 * this.scaleX, 2.727081 * this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             this.armorOffsets[1].hide = !1;
             this.armorOffsets[2].hide = !1;
             this.armorOffsets[3].hide = !1;
             this.armorOffsets[4].hide = !1;
             this.armorOffsets[5].hide = !1;
             switch (c) {
               case 1:
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 var n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -36.6;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -17;
                 this.armorOffsets[2].x = -2.9;
                 this.armorOffsets[2].y = -8.9;
                 this.armorOffsets[2].rotation = 0;
                 this.armorOffsets[3].x = 2.8;
                 this.armorOffsets[3].y = -8.9;
                 this.armorOffsets[3].rotation = 0;
                 this.armorOffsets[4].x = -5;
                 this.armorOffsets[4].y = -3;
                 this.armorOffsets[4].rotation = 90;
                 this.armorOffsets[5].x = 4.7;
                 this.armorOffsets[5].y = -3;
                 this.armorOffsets[5].rotation = -90;
                 break;
               case 2:
                 0 != this.walkAnimation && (this.frameTimer = this.walkAnimation = 0);
                 this.frameNumber = Math.floor(Math.min(5, 1 + Math.floor(this.frameTimer / 4)));
                 this.frameTimer = ++this.frameTimer % 22;
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 16 * this.frameNumber, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = [-38.1, -38.1, -38.1, -36.3, -36.3, -33.6, -33.6][this.frameNumber - 1];
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = [-17.5, -17.5, -17.5, -17, -17, -15.7, -15.7][this.frameNumber - 1];
                 this.armorOffsets[2].x = [-4.4, -6, -4.4, -1.2, -2.7, -2.1, -2.7][this.frameNumber - 1];
                 this.armorOffsets[2].y = [-8.5, -8.1, -8.4, -5.8, -8.7, -7, -8.7][this.frameNumber - 1];
                 this.armorOffsets[2].rotation = [15, 30, 15, 15, 0, -30, 0][this.frameNumber - 1];
                 this.armorOffsets[3].x = [2.9, 3.2, 2.9, -1.9, 3, 2, 2.9][this.frameNumber - 1];
                 this.armorOffsets[3].y = [-9.6, -10.1, -9.6, -5.9, -8.6, -7, -8.7][this.frameNumber - 1];
                 this.armorOffsets[3].rotation = [-30, -45, -30, 0, 0, 15, 0][this.frameNumber - 1];
                 this.armorOffsets[4].x = [-6.8, -9.6, -6.8, -2.5, -4.9, -3.4, -5.7][this.frameNumber - 1];
                 this.armorOffsets[4].y = [-3, -3.2, -2.9, -1.3, -1.9, -2.4, -2.5][this.frameNumber - 1];
                 this.armorOffsets[4].rotation = [90, 90, 90, 75, 90, 90, 90][this.frameNumber - 1];
                 this.armorOffsets[5].x = [7, 8.9, 7, 2, 4.6, 1.5, 5][this.frameNumber - 1];
                 this.armorOffsets[5].y = [-3.6, -6.2, -3.6, -0.5, -2, -2.6, -2.5][this.frameNumber - 1];
                 this.armorOffsets[5].rotation = [30, 0, 30, 30, -90, 75, -90][this.frameNumber - 1];
                 break;
               case 3:
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 16 * this.frameNumber, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.frameTimer = ++this.frameTimer % 20;
                 this.frameNumber = 9 + Math.floor(this.frameTimer / 4);
                 0 == this.frameTimer && (b.h.miningAnimation = !1);
                 this.armorOffsets[0].y = -36.6;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -17;
                 this.armorOffsets[2].x = -2.9;
                 this.armorOffsets[2].y = -8.9;
                 this.armorOffsets[2].rotation = 0;
                 this.armorOffsets[3].x = 2.8;
                 this.armorOffsets[3].y = -8.9;
                 this.armorOffsets[3].rotation = 0;
                 this.armorOffsets[4].x = -5;
                 this.armorOffsets[4].y = -3;
                 this.armorOffsets[4].rotation = 90;
                 this.armorOffsets[5].x = 4.7;
                 this.armorOffsets[5].y = -3;
                 this.armorOffsets[5].rotation = -90;
                 break;
               case 4:
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 224, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -37.7;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -17;
                 this.armorOffsets[2].x = -2.7;
                 this.armorOffsets[2].y = -11.5;
                 this.armorOffsets[2].rotation = 30;
                 this.armorOffsets[3].x = 3.2;
                 this.armorOffsets[3].y = -10.9;
                 this.armorOffsets[3].rotation = -15;
                 this.armorOffsets[4].x = -5.3;
                 this.armorOffsets[4].y = -5;
                 this.armorOffsets[4].rotation = 90;
                 this.armorOffsets[5].x = 5.4;
                 this.armorOffsets[5].y = -5;
                 this.armorOffsets[5].rotation = -90;
                 break;
               case 5:
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 128, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -38.8;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -17.5;
                 this.armorOffsets[2].x = -6.1;
                 this.armorOffsets[2].y = -8;
                 this.armorOffsets[2].rotation = 30;
                 this.armorOffsets[3].x = 3.1;
                 this.armorOffsets[3].y = -10;
                 this.armorOffsets[3].rotation = -45;
                 this.armorOffsets[4].x = -9.7;
                 this.armorOffsets[4].y = -3.1;
                 this.armorOffsets[4].rotation = 90;
                 this.armorOffsets[5].x = 8.9;
                 this.armorOffsets[5].y = -6;
                 this.armorOffsets[5].rotation = 0;
                 break;
               case 6:
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 120, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -36.1;
                 this.armorOffsets[1].x = -0.8;
                 this.armorOffsets[1].y = -15.7;
                 this.armorOffsets[2].x = -4.5;
                 this.armorOffsets[2].y = -8.7;
                 this.armorOffsets[2].rotation = 11;
                 this.armorOffsets[4].x = -8.1;
                 this.armorOffsets[4].y = -3.5;
                 this.armorOffsets[4].rotation = 90;
                 this.armorOffsets[3].hide = !0;
                 this.armorOffsets[5].hide = !0;
                 break;
               case 7:
                 b = new T().reset().translate(0.03333333333333333, -0.06444444444444446).multiply(this.characterMatrix.values);
                 this.characterMatrix.set(b.values);
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 256, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -37.9;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -21.7;
                 this.armorOffsets[1].hide = !0;
                 this.armorOffsets[2].hide = !0;
                 this.armorOffsets[3].hide = !0;
                 this.armorOffsets[4].hide = !0;
                 this.armorOffsets[5].hide = !0;
                 break;
               case 8:
                 b = new T()
                   .reset()
                   .rotate2D(0.25 * Math.PI)
                   .translate(-0.3788888888888889, 0.2611111111111111)
                   .multiply(this.characterMatrix.values);
                 this.characterMatrix.set(b.values);
                 c = this.entity;
                 l = this.quadPositions[0];
                 d = new h(this.skinTexture.rect.x + 256, this.skinTexture.rect.y);
                 f = new h(16, 22);
                 k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix);
                 a = new e();
                 a.h.texBlend = K.blendMob;
                 n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
                 a.h.colorOffset = n;
                 n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
                 a.h.color = n;
                 c.updateQuad(l, null, d, f, null, k, null, a);
                 this.armorOffsets[0].y = -37.9;
                 this.armorOffsets[1].x = 0;
                 this.armorOffsets[1].y = -21.7;
                 this.armorOffsets[1].hide = !0;
                 this.armorOffsets[2].hide = !0;
                 this.armorOffsets[3].hide = !0;
                 this.armorOffsets[4].hide = !0;
                 this.armorOffsets[5].hide = !0;
                 break;
               case 9:
                 (b = new T()
                   .reset()
                   .rotate2D(-0.25 * Math.PI)
                   .translate(0.5455555555555556, -0.10333333333333335)
                   .multiply(this.characterMatrix.values)),
                   this.characterMatrix.set(b.values),
                   (c = this.entity),
                   (l = this.quadPositions[0]),
                   (d = new h(this.skinTexture.rect.x + 256, this.skinTexture.rect.y)),
                   (f = new h(16, 22)),
                   (k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.7333333333333333), this.characterMatrix)),
                   (a = new e()),
                   (a.h.texBlend = K.blendMob),
                   (n = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6)),
                   (a.h.colorOffset = n),
                   (n = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6)),
                   (a.h.color = n),
                   c.updateQuad(l, null, d, f, null, k, null, a),
                   (this.armorOffsets[0].y = -37.9),
                   (this.armorOffsets[1].x = 0),
                   (this.armorOffsets[1].y = -21.7),
                   (this.armorOffsets[1].hide = !0),
                   (this.armorOffsets[2].hide = !0),
                   (this.armorOffsets[3].hide = !0),
                   (this.armorOffsets[4].hide = !0),
                   (this.armorOffsets[5].hide = !0);
             }
             H.__cast(this.entity, ja).attributeMultipliers.h.texBlend = K.blendItems;
             this.renderArmor();
             b = H.__cast(this.entity, ja).attributeMultipliers;
             Object.prototype.hasOwnProperty.call(b.h, "texBlend") && delete b.h.texBlend;
             1 == this.fire
               ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
                 this.entityMatrix
                   .reset()
                   .translate(-0.26666666666666666, -0.26666666666666666)
                   .scale(1.3125216999999998, 1.3125216999999998)
                   .translate(0, -2.2366666666666664)
                   .rotate2D((-this.rotation / 180) * Math.PI)
                   .scale(this.scaleX, this.scaleY)
                   .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
                 (c = this.entity),
                 (l = this.quadPositions[this.quadPositions.length - 1]),
                 (d = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
                 (f = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
                 (k = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
                 (a = new e()),
                 (a.h.texBlend = K.blendItems),
                 (n = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
                 (a.h.color = n),
                 c.updateQuad(l, null, d, f, null, k, null, a))
               : this.entity.updateQuad(this.quadPositions[this.quadPositions.length - 1], null, new h(), new h());
           }
         },
         updateAlpha: function () {
           K.prototype.updateAlpha.call(this);
           null != this.skinTexture && (this.alpha *= 0 == this.skinTexture.rect.width ? 0 : 1);
         },
         renderArmor: function () {
           this.armorOffsets[2].matrix
             .reset()
             .scale2D(16)
             .rotate2D((-this.armorOffsets[2].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[2].x, this.armorOffsets[2].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           this.armorOffsets[3].matrix
             .reset()
             .scale(-16, 16)
             .rotate2D((-this.armorOffsets[3].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[3].x, this.armorOffsets[3].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           H.__cast(this.armorRenderers[2], sb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[2], sb).setItem(this.get_armor()[2], this.quadPositions[0], this.armorOffsets[2].matrix, this.armorOffsets[3].matrix, this.armorOffsets[2].hide, this.armorOffsets[3].hide).update();
           this.armorOffsets[4].matrix
             .reset()
             .scale2D(13.6)
             .rotate2D((-(this.armorOffsets[4].rotation - 90) / 180) * Math.PI)
             .translate(this.armorOffsets[4].x, this.armorOffsets[4].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           this.armorOffsets[5].matrix
             .reset()
             .scale(13.6 * (0 > this.armorOffsets[5].rotation ? -1 : 1), 13.6)
             .rotate2D((-(this.armorOffsets[5].rotation - 90 * (0 > this.armorOffsets[5].rotation ? -1 : 1)) / 180) * Math.PI)
             .translate(this.armorOffsets[5].x, this.armorOffsets[5].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           H.__cast(this.armorRenderers[3], tb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[3], tb).setItem(this.get_armor()[3], this.quadPositions[0], this.armorOffsets[4].matrix, this.armorOffsets[5].matrix, this.armorOffsets[4].hide, this.armorOffsets[5].hide).update();
           this.armorOffsets[1].matrix
             .reset()
             .scale2D(16)
             .rotate2D((this.armorOffsets[1].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[1].x, this.armorOffsets[1].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           H.__cast(this.armorRenderers[1], rb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[1], rb).setItem(this.get_armor()[1], this.quadPositions[0], this.armorOffsets[1].matrix, this.armorOffsets[1].hide).update();
           this.armorOffsets[0].matrix
             .reset()
             .scale2D(16)
             .rotate2D((this.armorOffsets[0].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[0].x, this.armorOffsets[0].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.characterMatrix.values);
           H.__cast(this.armorRenderers[0], eb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[0], eb).setItem(this.get_armor()[0], this.quadPositions[0], this.armorOffsets[0].matrix, this.armorOffsets[0].hide).update();
         },
         destroy: function () {
           null != this.armorRenderers[0] && H.__cast(this.armorRenderers[0], eb).remove();
           null != this.armorRenderers[1] && H.__cast(this.armorRenderers[1], rb).remove();
           null != this.armorRenderers[2] && H.__cast(this.armorRenderers[2], sb).remove();
           null != this.armorRenderers[3] && H.__cast(this.armorRenderers[3], tb).remove();
           K.prototype.destroy.call(this);
         },
         __class__: Cg,
       });
       var Wc = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Spider"] = Wc;
       Wc.__name__ = "entities.Entity_Mob_Spider";
       Wc.__super__ = K;
       Wc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 6);
           for (b = 0; 4 > b; ) {
             var a = b++,
               c = this.entityMatrix.reset().translate(-0.03333333333333333, 0),
               d = (6 + Wc.legs[a].h.x[this.currentFrame - 1]) / 30,
               f = (-18.55 + Wc.legs[a].h.y[this.currentFrame - 1]) / 30;
             c.rotate2D((Wc.legs[a].h.rotation[this.currentFrame - 1] / 180) * Math.PI)
               .scale(2.471, 2.471)
               .translate(d, f)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             var l = this.entity;
             a = this.quadPositions[a];
             c = new h(20, 112);
             d = new h(2, 8);
             f = ba.quadMatrixHelper(new t(0, 0, 0.06666666666666667, 0.26666666666666666), this.entityMatrix);
             var k = new e();
             k.h.texBlend = K.blendMob;
             var g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             k.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             k.h.color = g;
             l.updateQuad(a, null, c, d, null, f, null, k);
           }
           this.entityMatrix
             .reset()
             .scale(2.471039, 2.471039)
             .translate(-0.43666666666666665, -0.9666666666666667)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(this.scaleX, this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           c = this.entity;
           d = this.quadPositions[4];
           f = new h(0, 112);
           l = new h(20, 8);
           a = ba.quadMatrixHelper(new t(0, 0, 0.6666666666666666, 0.26666666666666666), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = g;
           g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = g;
           c.updateQuad(d, null, f, l, null, a, null, b);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.0500173599999998, 1.0500173599999998)
                 .translate(-0.1, -1.1)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (c = this.entity),
               (d = this.quadPositions[5]),
               (f = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (l = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (a = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (b = new e()),
               (b.h.texBlend = K.blendItems),
               (g = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (b.h.color = g),
               c.updateQuad(d, null, f, l, null, a, null, b))
             : this.entity.updateQuad(this.quadPositions[5], null, new h(), new h());
         },
         __class__: Wc,
       });
       var Ag = function (b, a, c) {
         this.tentNum = [1, 4, 2, 3];
         this.tentaclePositions = [new h(-7.2, 16.45), new h(7.2, 16.45), new h(-2.5, 19.65), new h(2.5, 19.65)];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Squid"] = Ag;
       Ag.__name__ = "entities.Entity_Mob_Squid";
       Ag.__super__ = K;
       Ag.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 7);
           for (b = 1; 5 > b; ) {
             var a = b++,
               c =
                 ((-Math.sin(this.tentNum[a - 1] - 2.5) * (0 < this.world.mobTmpData.h[this.id].h.closeAnimation ? 10 * this.world.mobTmpData.h[this.id].h.closeAnimation - 20 : this.world.mobs.h[this.id].h.movementCooldown / 2 - 20)) /
                   100) *
                   50 -
                 80 * this.world.mobs.h[this.id].h.rotationSpeed;
             this.entityMatrix
               .reset()
               .translate(-0.05, -0.05)
               .scale2D(2.4000000000000004)
               .rotate2D((-c / 180) * Math.PI)
               .translate(this.tentaclePositions[a - 1].x / 30, this.tentaclePositions[a - 1].y / 30)
               .rotate2D((-(this.world.mobs.h[this.id].h.actualRotation + 90) / 180) * Math.PI)
               .scale(Math.abs(this.scaleX), this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             c = this.entity;
             a = this.quadPositions[a - 1];
             var d = new h(215, 112),
               f = new h(3, 15),
               l = ba.quadMatrixHelper(new t(0, 0, 0.1, 0.5), this.entityMatrix),
               k = new e();
             k.h.texBlend = K.blendMob;
             var g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             k.h.colorOffset = g;
             g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
             k.h.color = g;
             c.updateQuad(a, null, d, f, null, l, null, k);
           }
           this.entityMatrix
             .reset()
             .translate(-0.16666666666666666, -0.25)
             .scale2D(2.4)
             .translate(0, 0.060000000000000005)
             .rotate2D((-(this.world.mobs.h[this.id].h.actualRotation + 90) / 180) * Math.PI)
             .scale(Math.abs(this.scaleX), this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           c = this.entity;
           a = this.quadPositions[4];
           d = new h(
             195 +
               (null == this.world.mobs.h[this.id].h.name ||
               ("ghost" != this.world.mobs.h[this.id].h.name.toLowerCase() && "ghostid" != this.world.mobs.h[this.id].h.name.toLowerCase() && "ghostsquid" != this.world.mobs.h[this.id].h.name.toLowerCase())
                 ? 0
                 : 10),
             112
           );
           f = new h(10, 15);
           l = ba.quadMatrixHelper(new t(0, 0, 0.3333333333333333, 0.5), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           g = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = g;
           g = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = g;
           c.updateQuad(a, null, d, f, null, l, null, b);
         },
         __class__: Ag,
       });
       var hc = function (b, a, c) {
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_Wolf"] = hc;
       hc.__name__ = "entities.Entity_Mob_Wolf";
       hc.__super__ = K;
       hc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 4);
           this.entityMatrix
             .reset()
             .translate(-0.36666666666666664, -0.5333333333333333)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.7 * this.scaleX, 2.7 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPositions[0],
             c = new h(128 + ((this.currentFrame - 1) % 5) * 22, 64 + 16 * Math.floor((this.currentFrame - 1) / 5)),
             d = new h(22, 16),
             f = ba.quadMatrixHelper(new t(0, 0, 0.7333333333333333, 0.5333333333333333), this.entityMatrix),
             l = new e();
           l.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           this.entityMatrix
             .reset()
             .translate(0, -0.06666666666666667)
             .rotate2D((-(hc.tailRotation[this.currentFrame - 1] + (5 >= this.currentFrame ? 0 : 11 == this.currentFrame ? 0 : 4 * (20 - this.world.mobs.h[this.id].h.health))) / 180) * Math.PI)
             .translate(0.25, (-8 + hc.tailOffset[this.currentFrame - 1]) / 30)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.7 * this.scaleX, 2.7 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           b = this.entity;
           a = this.quadPositions[1];
           c = new h(238, 64 + (5 < this.currentFrame ? 4 : 0));
           d = new h(8, 4);
           f = ba.quadMatrixHelper(new t(0, 0, 0.26666666666666666, 0.13333333333333333), this.entityMatrix);
           l = new e();
           l.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           l.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
           if (0 < hc.collarType[this.currentFrame - 1]) {
             var g = null != this.world.mobs.h[this.id].h.collarColor && null != V.colors.h[this.world.mobs.h[this.id].h.collarColor] ? V.colors.h[this.world.mobs.h[this.id].h.collarColor] : V.colors.h.white;
             this.entityMatrix
               .reset()
               .translate((-7 + (11 == this.currentFrame ? 1 : 0)) / 30, (-10 + (10 == this.currentFrame ? -1 : 0)) / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(2.7 * this.scaleX, 2.7 * this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
             b = this.entity;
             a = this.quadPositions[2];
             c = new h(238, 72 + (2 == hc.collarType[this.currentFrame - 1] ? 4 : 0));
             d = new h(5, 4);
             f = ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.13333333333333333), this.entityMatrix);
             l = new e();
             l.h.texBlend = K.blendMob;
             k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
             l.h.colorOffset = k;
             k = w.repeatArray([this.colorTransform[0] * g.h.r, this.colorTransform[1] * g.h.g, this.colorTransform[2] * g.h.b, this.colorTransform[3] * this.alpha], 6);
             l.h.color = k;
             b.updateQuad(a, null, c, d, null, f, null, l);
           } else this.entity.updateQuad(this.quadPositions[2], null, new h(), new h());
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               (b = 46.5 - 2.7 * hc.headBob[this.currentFrame - 1]),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(-0.5866666666666667, -(b / 30))
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (b = this.entity),
               (a = this.quadPositions[3]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (d = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (l = new e()),
               (l.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (l.h.color = k),
               b.updateQuad(a, null, c, d, null, f, null, l))
             : this.entity.updateQuad(this.quadPositions[3], null, new h(), new h());
         },
         __class__: hc,
       });
       var db = function (b, a, c) {
         this.firstFrame = !0;
         this.armorOffsets = [
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
           { x: 0, y: 0, rotation: 0, matrix: new T(), hide: !1 },
         ];
         this.armorRenderers = [];
         this.lastArmors = [];
         K.call(this, b, a, c);
         this.initMobEntity();
         this.armorRenderers = [new eb(this.entity), new rb(this.entity), new sb(this.entity), new tb(this.entity)];
       };
       r["entities.Entity_Mob_Zombie"] = db;
       db.__name__ = "entities.Entity_Mob_Zombie";
       db.__super__ = K;
       db.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this);
           var a = !0,
             c = this.quadPositions[0],
             d = 3;
           this.firstFrame && (this.firstFrame = a = !1);
           for (b = 0; 4 > b; ) {
             var f = b++;
             null != this.get_armor()[f]
               ? (this.lastArmors[f] != this.get_armor()[f][0] &&
                   ((this.lastArmors[f] = O.clone(this.get_armor()[f][0])),
                   0 == f
                     ? H.__cast(this.armorRenderers[f], eb).setItem(this.get_armor()[f], c, new T(), !0)
                     : 1 == f
                     ? H.__cast(this.armorRenderers[f], rb).setItem(this.get_armor()[f], c, new T(), !0)
                     : 2 == f
                     ? H.__cast(this.armorRenderers[f], sb).setItem(this.get_armor()[f], c, new T(), new T(), !0, !0)
                     : 3 == f && H.__cast(this.armorRenderers[f], tb).setItem(this.get_armor()[f], c, new T(), new T(), !0, !0),
                   this.armorRenderers[f].quadPositions[0] != c + 1 ? (a = !1) : (c += this.armorRenderers[f].quadPositions.length)),
                 (d += this.armorRenderers[f].quadPositions.length))
               : null != this.lastArmors[f] && ((this.lastArmors[f] = null), (a = !1));
           }
           0 == a &&
             (this.destroy(),
             (b = this.entity.nearestConsecutiveEmpty(d)),
             (this.quadPositions = []),
             this.quadPositions.push(b),
             this.entity.updateQuad(b, null, null, new h()),
             null != this.get_armor()[2] && H.__cast(this.armorRenderers[2], sb).setItem(this.get_armor()[2], b, new T(), new T(), !0, !0),
             null != this.get_armor()[3] && H.__cast(this.armorRenderers[3], tb).setItem(this.get_armor()[3], b, new T(), new T(), !0, !0),
             null != this.get_armor()[1] && H.__cast(this.armorRenderers[1], rb).setItem(this.get_armor()[1], b, new T(), !0),
             null != this.get_armor()[0] && H.__cast(this.armorRenderers[0], eb).setItem(this.get_armor()[0], b, new T(), !0),
             this.quadPositions.push(b + d - 2),
             this.entity.updateQuad(b + d - 2, null, null, new h()),
             this.quadPositions.push(b + d - 1),
             this.entity.updateQuad(b + d - 1, null, null, new h()));
           this.entityMatrix
             .reset()
             .translate(-0.21666666666666667, -0.7)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.858276 * this.scaleX, 2.858276 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           d = this.entity;
           a = this.quadPositions[0];
           c = new h(13 * db.frames[this.currentFrame], 21);
           f = new h(13, 21);
           var l = ba.quadMatrixHelper(new t(0, 0, 0.43333333333333335, 0.7), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           d.updateQuad(a, null, c, f, null, l, null, b);
           d = this.entity;
           a = this.quadPositions[this.quadPositions.length - 2];
           c = new h(52, 21 + (1 == db.frames[this.currentFrame] || 2 == db.frames[this.currentFrame] ? 1 : 0));
           f = new h(13, 21 - (1 == db.frames[this.currentFrame] || 2 == db.frames[this.currentFrame] ? 1 : 0));
           l = ba.quadMatrixHelper(new t(0, 0, 0.43333333333333335, (21 - (1 == db.frames[this.currentFrame] || 2 == db.frames[this.currentFrame] ? 1 : 0)) / 30), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           d.updateQuad(a, null, c, f, null, l, null, b);
           switch (db.frames[this.currentFrame]) {
             case 0:
               this.armorOffsets[0].y = -36.6;
               this.armorOffsets[1].x = 0;
               this.armorOffsets[1].y = -17;
               this.armorOffsets[2].x = -2.9;
               this.armorOffsets[2].y = -8.9;
               this.armorOffsets[2].rotation = 0;
               this.armorOffsets[3].x = 2.8;
               this.armorOffsets[3].y = -8.9;
               this.armorOffsets[3].rotation = 0;
               this.armorOffsets[4].x = -5;
               this.armorOffsets[4].y = -3;
               this.armorOffsets[4].rotation = 90;
               this.armorOffsets[5].x = 4.7;
               this.armorOffsets[5].y = -3;
               this.armorOffsets[5].rotation = -90;
               break;
             case 1:
             case 2:
             case 3:
               (this.armorOffsets[0].y = [-38.1, -38.1, -36.3][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[1].x = 0),
                 (this.armorOffsets[1].y = [-17.8, -17.8, -17][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[2].x = [-4.4, -6, -1.2][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[2].y = [-8.5, -8.1, -5.8][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[2].rotation = [15, 30, 15][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[3].x = [2.9, 3.2, -1.9][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[3].y = [-9.6, -10.1, -5.9][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[3].rotation = [-30, -45, 0][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[4].x = [-6.8, -9.6, -2.5][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[4].y = [-3, -3.2, -1.3][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[4].rotation = [90, 90, 75][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[5].x = [7, 8.9, 2][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[5].y = [-3.6, -6.2, -0.5][db.frames[this.currentFrame] - 1]),
                 (this.armorOffsets[5].rotation = [30, 0, 30][db.frames[this.currentFrame] - 1]);
           }
           this.entityMatrix
             .reset()
             .translate(-0.26666666666666666, -0.7333333333333333)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.858276 * this.scaleX, 2.858276 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           H.__cast(this.entity, ja).attributeMultipliers.h.texBlend = K.blendItems;
           this.renderArmor();
           b = H.__cast(this.entity, ja).attributeMultipliers;
           Object.prototype.hasOwnProperty.call(b.h, "texBlend") && delete b.h.texBlend;
           0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random())));
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -2.2366666666666664)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (d = this.entity),
               (a = this.quadPositions[this.quadPositions.length - 1]),
               (c = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (f = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (b = new e()),
               (b.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (b.h.color = k),
               d.updateQuad(a, null, c, f, null, l, null, b))
             : this.entity.updateQuad(this.quadPositions[this.quadPositions.length - 1], null, new h(), new h());
         },
         renderArmor: function () {
           this.armorOffsets[2].matrix
             .reset()
             .scale2D(16)
             .rotate2D((-this.armorOffsets[2].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[2].x, this.armorOffsets[2].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           this.armorOffsets[3].matrix
             .reset()
             .scale(-16, 16)
             .rotate2D((-this.armorOffsets[3].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[3].x, this.armorOffsets[3].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           H.__cast(this.armorRenderers[2], sb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[2], sb).setItem(this.get_armor()[2], this.quadPositions[0], this.armorOffsets[2].matrix, this.armorOffsets[3].matrix, this.armorOffsets[2].hide, this.armorOffsets[3].hide).update();
           this.armorOffsets[4].matrix
             .reset()
             .scale2D(13.6)
             .rotate2D((-(this.armorOffsets[4].rotation - 90) / 180) * Math.PI)
             .translate(this.armorOffsets[4].x, this.armorOffsets[4].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           this.armorOffsets[5].matrix
             .reset()
             .scale(13.6 * (0 > this.armorOffsets[5].rotation ? -1 : 1), 13.6)
             .rotate2D((-(this.armorOffsets[5].rotation - 90 * (0 > this.armorOffsets[5].rotation ? -1 : 1)) / 180) * Math.PI)
             .translate(this.armorOffsets[5].x, this.armorOffsets[5].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           H.__cast(this.armorRenderers[3], tb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[3], tb).setItem(this.get_armor()[3], this.quadPositions[0], this.armorOffsets[4].matrix, this.armorOffsets[5].matrix, this.armorOffsets[4].hide, this.armorOffsets[5].hide).update();
           this.armorOffsets[1].matrix
             .reset()
             .scale2D(16)
             .rotate2D((this.armorOffsets[1].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[1].x, this.armorOffsets[1].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           H.__cast(this.armorRenderers[1], rb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[1], rb).setItem(this.get_armor()[1], this.quadPositions[0], this.armorOffsets[1].matrix, this.armorOffsets[1].hide).update();
           this.armorOffsets[0].matrix
             .reset()
             .scale2D(16)
             .rotate2D((this.armorOffsets[0].rotation / 180) * Math.PI)
             .translate(this.armorOffsets[0].x, this.armorOffsets[0].y)
             .scale2D(1.5 / this.game.zoom)
             .scale2D(0.36670333700036667)
             .translate(0.26666666666666666, 0.7333333333333333)
             .multiply(this.entityMatrix.values);
           H.__cast(this.armorRenderers[0], eb).parentColor = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha];
           H.__cast(this.armorRenderers[0], eb).setItem(this.get_armor()[0], this.quadPositions[0], this.armorOffsets[0].matrix, this.armorOffsets[0].hide).update();
         },
         destroy: function () {
           null != this.armorRenderers[0] && H.__cast(this.armorRenderers[0], eb).remove();
           null != this.armorRenderers[1] && H.__cast(this.armorRenderers[1], rb).remove();
           null != this.armorRenderers[2] && H.__cast(this.armorRenderers[2], sb).remove();
           null != this.armorRenderers[3] && H.__cast(this.armorRenderers[3], tb).remove();
           K.prototype.destroy.call(this);
         },
         __class__: db,
       });
       var Yc = function (b, a, c) {
         this.wasHolding = [];
         K.call(this, b, a, c);
       };
       r["entities.Entity_Mob_ZombiePigman"] = Yc;
       Yc.__name__ = "entities.Entity_Mob_ZombiePigman";
       Yc.__super__ = K;
       Yc.prototype = v(K.prototype, {
         render: function (b) {
           K.prototype.render.call(this, 2);
           null == this.world.mobTmpData.h[this.id].h.wasHolding && (this.world.mobTmpData.h[this.id].h.wasHolding = "");
           null == this.world.mobs.h[this.id].h.handItems && (this.world.mobs.h[this.id].h.handItems = []);
           null == this.world.mobs.h[this.id].h.handItems[0] && (this.world.mobs.h[this.id].h.handItems[0] = g.emptyItem());
           if (this.wasHolding != this.world.mobs.h[this.id].h.handItems[0][0]) {
             this.wasHolding = O.clone(this.world.mobs.h[this.id].h.handItems[0][0]);
             b = this.world.mobTmpData.h[this.id];
             var a = O.clone(this.world.mobs.h[this.id].h.handItems[0][0]);
             b.h.wasHolding = a;
             if (m.Instance.game.isEmptyItem(this.world.mobs.h[this.id].h.handItems[0])) null != this.item && this.item.destroy();
             else if (
               ((H.__cast(this.entity, ja).overrideEmptySearchIndex = this.quadPositions[0] + 2),
               null == this.item ? (this.item = new bb(this.entity, 0, 0, this.game, this.world, this.world.mobs.h[this.id].h.handItems[0])) : this.item.set_item(this.world.mobs.h[this.id].h.handItems[0]),
               (H.__cast(this.entity, ja).overrideEmptySearchIndex = -1),
               this.item.renderer.quadPositions[0] != this.quadPositions[0] + 2)
             ) {
               a = 2 + this.item.renderer.quadPositions.length;
               this.destroy();
               var c = this.entity.nearestConsecutiveEmpty(a);
               this.quadPositions = [];
               for (b = 0; b < a; ) this.quadPositions.push(c + b++);
             }
           }
           this.entityMatrix
             .reset()
             .translate(-0.21666666666666667, -0.7333333333333333)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .scale(2.858276 * this.scaleX, 2.858276 * this.scaleY)
             .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom);
           a = this.entity;
           c = this.quadPositions[0];
           var d = new h(13 * Yc.frames[this.currentFrame], 213),
             f = new h(13, 22),
             l = ba.quadMatrixHelper(new t(0, 0, 0.43333333333333335, 0.7333333333333333), this.entityMatrix);
           b = new e();
           b.h.texBlend = K.blendMob;
           var k = w.repeatArray([(this.colorTransform[4] / 255) * this.alpha, (this.colorTransform[5] / 255) * this.alpha, (this.colorTransform[6] / 255) * this.alpha, (this.colorTransform[7] / 255) * this.alpha], 6);
           b.h.colorOffset = k;
           k = w.repeatArray([this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha], 6);
           b.h.color = k;
           a.updateQuad(c, null, d, f, null, l, null, b);
           1 == this.fire
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomFireTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale(1.3125216999999998, 1.3125216999999998)
                 .translate(0, -2.2366666666666664)
                 .rotate2D((-this.rotation / 180) * Math.PI)
                 .scale(this.scaleX, this.scaleY)
                 .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
               (a = this.entity),
               (c = this.quadPositions[1]),
               (d = new h(y.getTexture("fire", this.randomFireTexture).x, y.getTexture("fire", this.randomFireTexture).y)),
               (f = new h(y.getTexture("fire", this.randomFireTexture).width, y.getTexture("fire", this.randomFireTexture).height)),
               (l = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)),
               (b = new e()),
               (b.h.texBlend = K.blendItems),
               (k = w.repeatArray([1, 1, 1, this.colorTransform[3] * this.alpha], 6)),
               (b.h.color = k),
               a.updateQuad(c, null, d, f, null, l, null, b))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
           null != this.item &&
             (this.entityMatrix
               .reset()
               .translate(-0.5, -0.5)
               .scale2D(0.86675)
               .rotate2D(0.33499999999999996 * Math.PI)
               .translate(-0.6433333333333333, (-43 - (1 == Yc.frames[this.currentFrame] || 2 == Yc.frames[this.currentFrame] ? 2.858276 * this.scaleY : 0)) / 30)
               .rotate2D((-this.rotation / 180) * Math.PI)
               .scale(this.scaleX, this.scaleY)
               .translate(Math.floor(this.movieX * this.game.zoom) / this.game.zoom, Math.floor(this.movieY * this.game.zoom) / this.game.zoom),
             H.__cast(this.entity, ja).currentMatrix.set(this.entityMatrix.values),
             (H.__cast(this.entity, ja).overrideEmptySearchIndex = this.quadPositions[0] + 2),
             (b = new e()),
             (b.h.texBlend = K.blendItems),
             (b.h.color = [this.colorTransform[0], this.colorTransform[1], this.colorTransform[2], this.colorTransform[3] * this.alpha]),
             (H.__cast(this.entity, ja).attributeMultipliers = b),
             this.item.render(),
             H.__cast(this.entity, ja).currentMatrix.reset(),
             (H.__cast(this.entity, ja).overrideEmptySearchIndex = -1),
             (H.__cast(this.entity, ja).attributeMultipliers = new e()));
         },
         destroy: function () {
           null != this.item && this.item.destroy();
           this.wasHolding = g.emptyItem();
           K.prototype.destroy.call(this);
         },
         __class__: Yc,
       });
       var mg = function (b, a, c, d, f, e) {
         this.randomTexture = "1";
         this.entityMatrix = new T();
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Projectile"] = mg;
       mg.__name__ = "entities.Entity_Projectile";
       mg.__super__ = pa;
       mg.prototype = v(pa.prototype, {
         init: function () {
           this.entityPoolID = "projectile";
         },
         run: function () {
           this.onScreen(1);
           var b = 5;
           "spear" == this.entityType
             ? (b = 3)
             : "arrow" == this.entityType
             ? (b = 3 + (null == this.get_power() ? 0 : 3 * this.get_power()))
             : "shuriken" == this.entityType
             ? (b = 3)
             : "fireball" == this.entityType
             ? (b = 3)
             : "snowball" == this.entityType && (b = 0);
           var a = this.get_x(),
             c = this.get_y();
           0 < this.get_cooldown() && this.set_cooldown(this.get_cooldown() - 1);
           if ((0 == this.get_speedX() && 0 == this.get_speedY()) || null != this.get_stuckIn()) {
             if ("fireball" == this.entityType || "snowball" == this.entityType) {
               this.remove();
               return;
             }
             if (
               null != this.get_shotBy() &&
               (this.get_shotBy() == this.world.player.id || "dispenser" == I.substr(this.get_shotBy(), 0, 9)) &&
               1 != this.get_infinity() &&
               null == this.get_stuckIn() &&
               this.world.gamemode != U.gamemodes.h.SPECTATOR &&
               this.world.player.get_hit().intersects(new t(this.get_x() - 0.3333333333333333, this.get_y() - 0.3333333333333333, 0.6666666666666666, 0.6666666666666666))
             ) {
               if (this.world.gamemode == U.gamemodes.h.CREATIVE) {
                 this.game.requestSound("pop");
                 this.remove();
                 return;
               }
               if (1 == this.game.addToInventory("shuriken" == this.entityType ? "bshur" : this.entityType, 1)) {
                 this.game.requestSound("pop");
                 this.remove();
                 return;
               }
             }
           } else if (
             ("shuriken" == this.entityType
               ? this.set_rotation(this.get_rotation() + ((0 < this.get_speedX() ? 1 : -1) * (Math.abs(this.get_speedX()) + Math.abs(this.get_speedY()))) / 10)
               : "splashPotion" != this.entityType && this.set_rotation(Math.atan2(this.get_speedY(), this.get_speedX())),
             this.set_x(this.get_x() + this.get_speedX() / 30),
             this.set_y(this.get_y() + this.get_speedY() / 30),
             null == this.get_hurtCooldown() || 0 >= this.get_hurtCooldown())
           ) {
             for (var d = Object.keys(this.world.mobs.h), f = d.length, l = 0; l < f; ) {
               var k = d[l++];
               if (!(0 < this.world.mobs.h[k].h.dead) && null != this.world.mobData.h[this.world.mobs.h[k].h.type])
                 if ("enderdragon" == this.world.mobs.h[k].h.type) {
                   if (
                     (0 >= this.get_cooldown() || this.get_shotBy() != k) &&
                     null != this.game.getMob(k) &&
                     (3 > H.__cast(this.game.getMob(k), Ja).get_bodyCenter().distanceTo(new h(this.get_x(), this.get_y())) || 2 > H.__cast(this.game.getMob(k), Ja).get_headCenter().distanceTo(new h(this.get_x(), this.get_y())))
                   ) {
                     this.game.getMob(k).hurtMob(k, b, "projectile", this.get_shotBy());
                     this.remove();
                     return;
                   }
                 } else if (null != this.game.getMob(k) && this.game.getMob(k).mobCollisionPoint(k, new h(this.get_x(), this.get_y())) && (0 >= this.get_cooldown() || this.get_shotBy() != k)) {
                   var n = this.world.mobs.h[k].h.x,
                     p = this.world.mobs.h[k].h.y;
                   if ("snowball" == this.entityType)
                     if ("snowgolem" == this.world.mobs.h[k].h.type) {
                       var q = this.world.mobs,
                         A = this.get_shotBy();
                       if (null != q.h[A]) {
                         var r = this.world.mobs;
                         A = this.get_shotBy();
                         r = "snowgolem" != r.h[A].h.type;
                       } else r = !0;
                       r && (this.world.mobs.h[k].h.health = Math.min(this.world.mobs.h[k].h.health + 1, 20));
                     } else (0.3333333333333333 > Math.random() || "blaze" == this.world.mobs.h[k].h.type || "enderman" == this.world.mobs.h[k].h.type) && this.game.getMob(k).hurtMob(k, 1, "projectile", this.get_shotBy());
                   else this.game.getMob(k).hurtMob(k, b, "projectile", this.get_shotBy());
                   q = this.world.mobs.h[k];
                   A = q.h.speedX;
                   r = 0 < this.get_speedX() ? 1 : -1;
                   var w = null == this.get_punch() ? 0 : 5 * this.get_punch();
                   q.h.speedX = A + r * (5 + w);
                   A = this.world.mobs.h[k];
                   q = null == this.get_punch() ? 0 : 5 * this.get_punch();
                   A.h.speedY = g.migrateSpeed(3 + q);
                   if (1 == this.get_flame() || Object.prototype.hasOwnProperty.call(this.world.onFire.h, this.id)) this.world.onFire.h[k] = !0;
                   "snowball" == this.entityType && this.game.addParticles("snowball", 0, 10, new h(this.get_x(), 0), new h(this.get_y(), 0), !1);
                   this.set_hurtCooldown(5);
                   if ("spear" != this.entityType || 0.3333333333333333 > Math.random())
                     if (null != this.world.mobs.h[k] && "squid" != this.world.mobs.h[k].h.type) {
                       d = new e();
                       d.h.type = "mob";
                       d.h.id = k;
                       d.h.direction = this.world.mobs.h[k].h.direction;
                       k = this.get_rotation();
                       d.h.rotation = k;
                       k = this.get_x() - n;
                       d.h.relativeX = k;
                       k = this.get_y() - p;
                       d.h.relativeY = k;
                       this.set_stuckIn(d);
                       break;
                     } else {
                       this.remove();
                       return;
                     }
                 }
             }
             d = Object.keys(this.world.balloons.h);
             f = d.length;
             for (l = 0; l < f; )
               if (((k = d[l++]), (p = this.world.balloons.h[k]), 0.4444444444444444 > Math.pow(this.get_x() - p.h.x, 2) + Math.pow(this.get_y() - p.h.y, 2))) {
                 this.game.damageEntity(this.world.balloons, k, b);
                 q = p.h.speedX;
                 r = this.get_speedX();
                 w = null == this.get_punch() || 0 == this.get_punch() ? 1 : 2 * this.get_punch();
                 p.h.speedX = q + r * w;
                 A = p.h.speedY;
                 q = this.get_speedY();
                 n = null == this.get_punch() || 0 == this.get_punch() ? 1 : 2 * this.get_punch();
                 p.h.speedY = A + q * n;
                 this.set_speedX(this.set_speedY(0));
                 this.set_hurtCooldown(5);
                 d = new e();
                 d.h.type = "balloon";
                 d.h.id = k;
                 d.h.direction = p.h.rotation;
                 k = this.get_rotation();
                 d.h.rotation = k;
                 k = this.get_x();
                 d.h.relativeX = k - p.h.x;
                 k = this.get_y();
                 d.h.relativeY = k - p.h.y;
                 this.set_stuckIn(d);
                 break;
               }
             this.world.gamemode != U.gamemodes.h.SPECTATOR &&
               this.world.player.get_hit().contains(this.get_x(), this.get_y()) &&
               (0 >= this.get_cooldown() || this.get_shotBy() != this.world.player.id) &&
               (this.game.ouch(1, -b, "arrow"),
               0 < this.get_speedX() ? (this.world.xSpeed -= 4 + (null == this.get_punch() ? 0 : 5 * this.get_punch())) : 0 > this.get_speedX() && (this.world.xSpeed += 4 + (null == this.get_punch() ? 0 : 5 * this.get_punch())),
               (r = null == this.get_punch() ? 0 : 5 * this.get_punch()),
               (this.world.ySpeed = 3 + r),
               this.set_hurtCooldown(5),
               "spear" != this.entityType || 0.3333333333333333 > Math.random()) &&
               ((q = new e()),
               (q.h.type = "player"),
               (q.h.id = this.world.player.id),
               (q.h.direction = this.game.characterXScale),
               (k = this.get_rotation()),
               (q.h.rotation = k),
               (k = this.get_x() - this.world.worldX),
               (q.h.relativeX = k),
               (k = this.get_y() - this.world.worldY),
               (q.h.relativeY = k),
               this.set_stuckIn(q));
           } else this.set_hurtCooldown(this.get_hurtCooldown() - 1);
           if (null != this.get_stuckIn())
             if ((this.set_timer(this.get_timer() + 2), this.set_speedX(this.set_speedY(0)), "player" == this.get_stuckIn().h.type)) {
               if ("snowball" == this.entityType) {
                 this.remove();
                 return;
               }
               if ("fireball" == this.entityType) {
                 this.game.explode(this.get_x(), -this.get_y(), 4, 1 == this.get_flame(), !1);
                 this.remove();
                 return;
               }
               this.set_x(this.world.worldX + (this.game.characterXScale != this.get_stuckIn().h.direction ? -1 : 1) * this.get_stuckIn().h.relativeX);
               this.set_y(this.world.worldY + this.get_stuckIn().h.relativeY);
               this.set_rotation(Math.PI / 2 + (this.get_stuckIn().h.rotation - Math.PI / 2) * (this.game.characterXScale != this.get_stuckIn().h.direction ? -1 : 1));
             } else if ("mob" == this.get_stuckIn().h.type) {
               if ("snowball" == this.entityType) {
                 this.remove();
                 return;
               }
               if ("fireball" == this.entityType) {
                 this.get_returnedBy() == this.world.player.id ? ((q = this.world.mobs), (A = this.get_shotBy()), (r = null != q.h[A])) : (r = !1);
                 r &&
                   ((q = this.world.mobs),
                   (A = this.get_shotBy()),
                   "ghast" == q.h[A].h.type &&
                     ((q = this.world.mobs),
                     (A = this.get_shotBy()),
                     4 > Math.abs(q.h[A].h.x - this.get_x()) ? ((q = this.world.mobs), (A = this.get_shotBy()), (r = 4 > Math.abs(q.h[A].h.y - this.get_y()))) : (r = !1),
                     r && (this.game.unlockAchieve(42), this.game.getMob(this.get_shotBy()).hurtMob(this.get_shotBy(), 20, "projectile", this.get_shotBy()))));
                 this.game.explode(this.get_x(), -this.get_y(), 4, 1 == this.get_flame(), !1);
                 this.remove();
                 return;
               }
               q = this.world.mobs;
               A = this.get_stuckIn().h.id;
               if (null != q.h[A])
                 (q = this.world.mobs),
                   (A = this.get_stuckIn().h.id),
                   (r = q.h[A].h.x),
                   (q = this.world.mobs),
                   (A = this.get_stuckIn().h.id),
                   this.set_x(r + (q.h[A].h.direction == this.get_stuckIn().h.direction ? 1 : -1) * this.get_stuckIn().h.relativeX),
                   (q = this.world.mobs),
                   (A = this.get_stuckIn().h.id),
                   this.set_y(q.h[A].h.y + this.get_stuckIn().h.relativeY),
                   (r = Math.PI / 2),
                   (a = this.get_stuckIn().h.rotation - Math.PI / 2),
                   (q = this.world.mobs),
                   (A = this.get_stuckIn().h.id),
                   this.set_rotation(r + a * (q.h[A].h.direction == this.get_stuckIn().h.direction ? 1 : -1));
               else {
                 this.remove();
                 return;
               }
             } else {
               if ("balloon" == this.get_stuckIn().h.type) {
                 if ("snowball" == this.entityType) {
                   this.remove();
                   return;
                 }
                 if ("fireball" == this.entityType) {
                   this.game.explode(this.get_x(), -this.get_y(), 4, 1 == this.get_flame(), !1);
                   this.remove();
                   return;
                 }
                 q = this.world.balloons;
                 A = this.get_stuckIn().h.id;
                 if (null == q.h[A])
                   if (((q = this.game.renamedBalloons), (A = this.get_stuckIn().h.id), null != q.h[A])) (q = this.get_stuckIn()), (r = this.game.renamedBalloons), (A = this.get_stuckIn().h.id), (q.h.id = r.h[A]);
                   else {
                     this.remove();
                     return;
                   }
                 q = this.world.balloons;
                 A = this.get_stuckIn().h.id;
                 p = q.h[A];
                 a = -this.get_stuckIn().h.direction + p.h.rotation + Math.atan2(this.get_stuckIn().h.relativeY, this.get_stuckIn().h.relativeX);
                 c = Math.sqrt(Math.pow(this.get_stuckIn().h.relativeX, 2) + Math.pow(this.get_stuckIn().h.relativeY, 2));
                 this.set_x(p.h.x + Math.cos(a) * c);
                 this.set_y(p.h.y + Math.sin(a) * c);
                 this.set_rotation(this.get_stuckIn().h.rotation + p.h.rotation - this.get_stuckIn().h.direction);
               }
             }
           else {
             if (this.game.collision(this.get_x(), this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333)) {
               if ("snowball" == this.entityType) {
                 this.game.addParticles("snowball", 0, 10, new h(this.get_x(), 0), new h(this.get_y(), 0), !1);
                 this.remove();
                 return;
               }
               if ("fireball" == this.entityType) {
                 0 >= this.get_cooldown() && this.game.explode(this.get_x(), -this.get_y(), 4, 1 == this.get_flame(), !1);
                 this.remove();
                 return;
               }
               b = !0;
               this.get_wasntHitting() &&
                 ((k = this.game.raycastSolidBlock(a, c, Math.atan2(this.get_speedY(), this.get_speedX()), 2)),
                 null != k &&
                   "slimeb" == this.world.getFG(k.h.x, k.h.y) &&
                   (k.h.previousX != k.h.x
                     ? (Math.abs(this.get_speedX()) > g.migrateSpeed(3) && (b = !1), this.set_speedX(0.8 * -this.get_speedX()))
                     : (Math.abs(this.get_speedY()) > g.migrateSpeed(3) && (b = !1), this.set_speedY(0.8 * -this.get_speedY())),
                   b || (this.set_x(a), this.set_y(c))));
               b && (this.set_speedX(0), this.set_speedY(0), 1 == this.get_wasntHitting() && (this.set_wasntHitting(!1), this.game.requestSound("Trrrr", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY)));
             } else {
               if ("la" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))) {
                 if ("snowball" == this.entityType) {
                   this.game.addParticles("snowball", 0, 10, new h(this.get_x(), 0), new h(this.get_y(), 0), !1);
                   this.remove();
                   return;
                 }
                 this.set_flame(!0);
               } else {
                 if ("ad" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))) {
                   this.remove();
                   return;
                 }
                 "wr" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))
                   ? (this.set_flame(!1), this.world.onFire.h[this.id] && ((A = this.id), (a = this.world.onFire), Object.prototype.hasOwnProperty.call(a.h, A) && delete a.h[A]))
                   : this.set_wasntHitting(!0);
               }
               "fireball" != this.entityType && this.set_speedY(this.get_speedY() + g.migrateAcc(0.5, 1));
             }
             if (3 == this.world.sceneNum)
               for (a = Object.keys(this.world.enderCrystals.h), c = a.length, b = 0; b < c; )
                 if (((k = a[b++]), 1 > Math.abs(this.get_x() - (this.world.enderCrystals.h[k][0] + 0.5)) && 1 > Math.abs(this.get_y() - (-this.world.enderCrystals.h[k][1] - 0.5)))) {
                   null != this.world.entities.h[k] && H.__cast(this.world.entities.h[k], Bc).explod();
                   this.remove();
                   return;
                 }
           }
           null == this.get_timer() && this.set_timer(0);
           this.set_timer(this.get_timer() + 1) > 60 * m.Instance.get_fps() ? this.remove() : this.render();
         },
         render: function (b) {
           pa.prototype.render.call(this, 2);
           "arrow" == this.entityType
             ? (this.entityMatrix
                 .reset()
                 .scale2D(1.125)
                 .translate(-0.13333333333333333, -0.13333333333333333)
                 .rotate(this.get_rotation() - Math.PI / 4 + Math.PI, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture(this.entityType).x, y.getTexture(this.entityType).y),
                 new h(y.getTexture(this.entityType).width, y.getTexture(this.entityType).height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ))
             : "spear" == this.entityType
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.4, -0.13333333333333333)
                 .scale2D(2)
                 .rotate(this.get_rotation() + Math.PI / 4, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture(this.entityType).x, y.getTexture(this.entityType).y),
                 new h(y.getTexture(this.entityType).width, y.getTexture(this.entityType).height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ))
             : "shuriken" == this.entityType
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale2D(1.582)
                 .rotate(this.get_rotation() + Math.PI / 4 + Math.PI, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture(this.get_type() + "_" + this.entityType).x, y.getTexture(this.get_type() + "_" + this.entityType).y),
                 new h(y.getTexture(this.get_type() + "_" + this.entityType).width, y.getTexture(this.get_type() + "_" + this.entityType).height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ))
             : "snowball" == this.entityType
             ? (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale2D(0.9375)
                 .rotate(this.get_rotation() + Math.PI / 4 + Math.PI, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture("snow_ball").x, y.getTexture("snow_ball").y),
                 new h(y.getTexture("snow_ball").width, y.getTexture("snow_ball").height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ))
             : "fireball" == this.entityType &&
               (this.entityMatrix
                 .reset()
                 .translate(-0.26666666666666666, -0.26666666666666666)
                 .scale2D(1.2)
                 .rotate(this.get_rotation() + Math.PI / 4 + Math.PI, new M(0, 0, -1))
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[0],
                 null,
                 new h(y.getTexture(this.entityType).x, y.getTexture(this.entityType).y),
                 new h(y.getTexture(this.entityType).width, y.getTexture(this.entityType).height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ));
           1 == this.get_flame()
             ? (0 == m.Instance.game.world.tick % 2 && (this.randomTexture = E.string(1 + Math.floor(4 * Math.random()))),
               this.entityMatrix
                 .reset()
                 .scale2D(1)
                 .translate(-0.26666666666666666, -0.5333333333333333)
                 .translate(((30 * this.get_x()) | 0) / 30, ((30 * this.get_y()) | 0) / 30),
               this.entity.updateQuad(
                 this.quadPositions[1],
                 null,
                 new h(y.getTexture("fire", this.randomTexture).x, y.getTexture("fire", this.randomTexture).y),
                 new h(y.getTexture("fire", this.randomTexture).width, y.getTexture("fire", this.randomTexture).height),
                 null,
                 ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix)
               ))
             : this.entity.updateQuad(this.quadPositions[1], null, new h(), new h());
         },
         getData: function (b) {
           return H.__cast(this.data, e).h[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, e).h[b] = a);
         },
         get_x: function () {
           return this.getData("x");
         },
         set_x: function (b) {
           return this.setData("x", b);
         },
         get_y: function () {
           return this.getData("y");
         },
         set_y: function (b) {
           return this.setData("y", b);
         },
         get_speedX: function () {
           return this.getData("speedX");
         },
         set_speedX: function (b) {
           return this.setData("speedX", b);
         },
         get_speedY: function () {
           return this.getData("speedY");
         },
         set_speedY: function (b) {
           return this.setData("speedY", b);
         },
         get_type: function () {
           return this.getData("type");
         },
         get_timer: function () {
           return this.getData("timer");
         },
         set_timer: function (b) {
           return this.setData("timer", b);
         },
         get_cooldown: function () {
           return this.getData("cooldown");
         },
         set_cooldown: function (b) {
           return this.setData("cooldown", b);
         },
         get_hurtCooldown: function () {
           return this.getData("hurtCooldown");
         },
         set_hurtCooldown: function (b) {
           return this.setData("hurtCooldown", b);
         },
         get_rotation: function () {
           return null != this.getData("rotation") ? this.getData("rotation") : 0;
         },
         set_rotation: function (b) {
           return this.setData("rotation", b);
         },
         get_shotBy: function () {
           return this.getData("shotBy");
         },
         get_returnedBy: function () {
           return this.getData("returnedBy");
         },
         get_power: function () {
           return this.getData("power");
         },
         get_punch: function () {
           return this.getData("punch");
         },
         get_flame: function () {
           return this.getData("flame");
         },
         set_flame: function (b) {
           return this.setData("flame", b);
         },
         get_infinity: function () {
           return this.getData("infinity");
         },
         get_stuckIn: function () {
           return this.getData("stuckIn");
         },
         set_stuckIn: function (b) {
           return this.setData("stuckIn", b);
         },
         get_wasntHitting: function () {
           return this.getData("wasntHitting");
         },
         set_wasntHitting: function (b) {
           return this.setData("wasntHitting", b);
         },
         __class__: mg,
       });
       var Oc = function (b, a, c, d, f, e) {
         this.entityMatrix = new T();
         this.tilt = this.rotation = 0;
         this.damag = 3;
         this.hitTimer = 60;
         this.maxSpeed = 50;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_Raft"] = Oc;
       Oc.__name__ = "entities.Entity_Raft";
       Oc.__super__ = pa;
       Oc.prototype = v(pa.prototype, {
         init: function () {
           pa.prototype.init.call(this);
         },
         run: function () {
           if (this.onScreen(2))
             if (
               (this.hitTimer--,
               0 >= this.hitTimer && ((this.damag = Math.min(this.damag + 1, 3)), (this.hitTimer = (2.4 * m.Instance.get_fps()) | 0)),
               (this.tilt = (this.tilt += g.migrateAcc(-this.rotation / 10, 0.93)) * g.migrateDampening(0.93)),
               (this.rotation += g.migrateSpeed(this.tilt)),
               0 >= this.damag)
             )
               this.world.gamemode != U.gamemodes.h.CREATIVE && this.game.addDrop("bb", this.get_x(), this.get_y(), ((3 * Math.random()) | 0) + 3, null, null), this.world.riding == this.id && (this.world.riding = ""), this.remove();
             else {
               1 != q.get(this.world.getFG(Math.round(this.get_x() - 1.5), Math.round(-(this.get_y() + 0.5))), "liquid") &&
                 "sw" != this.world.getFG(Math.round(this.get_x() - 1.5), Math.round(-(this.get_y() + 0.5))) &&
                 "lp" != this.world.getFG(Math.round(this.get_x() - 1.5), Math.round(-(this.get_y() + 0.5))) &&
                 null == q.get(this.world.getFG(Math.round(this.get_x() - 1.5), Math.round(-(this.get_y() + 0.5))), "walkThroughBlockHit") &&
                 "lp" != this.world.getFG(Math.round(this.get_x() - 1.5), Math.round(-(this.get_y() + 0.5))) &&
                 this.set_xSpeed(Math.max(0, this.get_xSpeed()));
               1 != q.get(this.world.getFG(Math.round(this.get_x() + 0.5), Math.round(-(this.get_y() + 0.5))), "liquid") &&
                 "sw" != this.world.getFG(Math.round(this.get_x() + 0.5), Math.round(-(this.get_y() + 0.5))) &&
                 "lp" != this.world.getFG(Math.round(this.get_x() + 0.5), Math.round(-(this.get_y() + 0.5))) &&
                 null == q.get(this.world.getFG(Math.round(this.get_x() + 0.5), Math.round(-(this.get_y() + 0.5))), "walkThroughBlockHit") &&
                 "lp" != this.world.getFG(Math.round(this.get_x() + 0.5), Math.round(-(this.get_y() + 0.5))) &&
                 this.set_xSpeed(Math.min(0, this.get_xSpeed()));
               if (q.get(this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.5))), "liquid") || "sw" == this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.5))))
                 3 < Math.abs(this.get_xSpeed()) && this.game.addParticles("water", 1, 0, new h(this.get_x() + (10 * Math.random() - 5) / 30, 0), new h(this.get_y() + (10 * Math.random() - 5) / 30, 0)),
                   (this.rotation += (((9 * Math.random()) | 0) - 4) / 5),
                   this.set_ySpeed(this.get_ySpeed() - g.migrateAcc(2, 0.9));
               else if (null != q.get(this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.5))), "walkThroughBlockHit") || "lp" == this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.5))))
                 this.set_ySpeed(this.get_ySpeed() + g.migrateAcc(2, 0.9));
               else if (
                 null != q.get(this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.6666666666666666))), "walkThroughBlockHit") ||
                 "lp" == this.world.getFG(Math.round(this.get_x() - 0.5), Math.round(-(this.get_y() + 0.5)))
               )
                 this.set_xSpeed(this.get_xSpeed() * g.migrateDampening(0.9)), this.set_ySpeed(this.get_ySpeed() + g.migrateAcc(2, 0.9));
               else {
                 if (12 < Math.abs(this.get_ySpeed()) || 10 < Math.abs(this.get_xSpeed())) {
                   this.game.addDrop("bb", this.get_x(), this.get_y(), ((3 * Math.random()) | 0) + 3, null, null);
                   this.world.riding == this.id && (this.world.riding = "");
                   this.remove();
                   return;
                 }
                 this.set_ySpeed(0);
                 this.set_xSpeed(this.get_xSpeed() * g.migrateDampening(0.7));
               }
               this.set_xSpeed(this.get_xSpeed() * g.migrateDampening(0.99));
               this.set_ySpeed(this.get_ySpeed() * g.migrateDampening(0.9));
               this.set_x(this.get_x() + Math.min(this.maxSpeed / 2, Math.max(-this.maxSpeed / 2, this.get_xSpeed())) / 30);
               this.set_y(this.get_y() + this.get_ySpeed() / 30);
               if ("char" == this.get_riddenBy())
                 if (this.world.riding != this.id) this.set_riddenBy(null);
                 else {
                   this.world.worldX = this.get_x();
                   var b = this.get_y();
                   this.world.worldY = b + 0.6666666666666666;
                   this.game.resetCamera();
                   this.game.rightKey && this.set_xSpeed(Math.min(this.maxSpeed, this.get_xSpeed() + g.migrateAcc(0.4, 0.99)));
                   this.game.leftKey && this.set_xSpeed(Math.max(-this.maxSpeed, this.get_xSpeed() - g.migrateAcc(0.4, 0.99)));
                   this.game.upKey && ((this.world.ySpeed = this.get_ySpeed()), (this.world.xSpeed = 0.7 * -this.get_xSpeed()), (this.world.riding = ""), this.set_riddenBy(null));
                 }
               else this.world.riding == this.id && (this.world.riding = "");
               this.render();
             }
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix
             .reset()
             .translate(-0.5333333333333333, -0.26666666666666666)
             .scale2D(2)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .translate(Math.floor(this.get_x() * this.game.zoom) / this.game.zoom, Math.floor(this.get_y() * this.game.zoom) / this.game.zoom);
           b = y.getTexture("raft");
           this.entity.updateQuad(this.quadPositions[0], null, new h(b.x, b.y), new h(b.width, b.height), null, ba.quadMatrixHelper(new t(0, 0, 1.0666666666666667, 0.5333333333333333), this.entityMatrix));
         },
         getData: function (b) {
           return H.__cast(this.data, Array)[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, Array)[b] = a);
         },
         get_x: function () {
           return this.getData(1);
         },
         set_x: function (b) {
           return this.setData(1, b);
         },
         get_y: function () {
           return this.getData(2);
         },
         set_y: function (b) {
           return this.setData(2, b);
         },
         get_xSpeed: function () {
           return this.getData(3);
         },
         set_xSpeed: function (b) {
           return this.setData(3, b);
         },
         get_ySpeed: function () {
           return this.getData(4);
         },
         set_ySpeed: function (b) {
           return this.setData(4, b);
         },
         get_riddenBy: function () {
           return this.getData(5);
         },
         set_riddenBy: function (b) {
           return this.setData(5, b);
         },
         __class__: Oc,
       });
       var lg = function (b, a, c, d, f, e) {
         this.entityMatrix = new T();
         this.inWater = !1;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_SplashPotion"] = lg;
       lg.__name__ = "entities.Entity_SplashPotion";
       lg.__super__ = pa;
       lg.prototype = v(pa.prototype, {
         init: function () {
           pa.prototype.init.call(this);
         },
         run: function () {
           0 < this.get_cooldown() && this.set_cooldown(this.get_cooldown() - 1);
           this.set_x(this.get_x() + this.get_speedX() / 30);
           this.set_y(this.get_y() + this.get_speedY() / 30);
           for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
             var d = b[c++];
             if (0 >= this.get_cooldown() || this.get_shotBy() != d)
               if ("enderdragon" == this.world.mobs.h[d].h.type) {
                 if (
                   null != this.game.getMob(d) &&
                   (3 > H.__cast(this.game.getMob(d), Ja).get_bodyCenter().distanceTo(new h(this.get_x(), this.get_y())) || 2 > H.__cast(this.game.getMob(d), Ja).get_headCenter().distanceTo(new h(this.get_x(), this.get_y())))
                 ) {
                   this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
                   this.remove();
                   return;
                 }
               } else if (null != this.game.getMob(d) && this.game.getMob(d).mobCollisionPoint(d, new h(this.get_x(), this.get_y()))) {
                 this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
                 this.remove();
                 return;
               }
           }
           b = Object.keys(this.world.balloons.h);
           a = b.length;
           for (c = 0; c < a; )
             if (((d = b[c++]), 0.4444444444444444 > Math.pow(this.get_x() - g.makeDynamicMap(this.world.balloons.h[d]).h.x, 2) + Math.pow(this.get_y() - g.makeDynamicMap(this.world.balloons.h[d]).h.y, 2))) {
               this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
               this.remove();
               return;
             }
           if (this.world.gamemode != U.gamemodes.h.SPECTATOR && this.world.player.get_hit().contains(this.get_x(), this.get_y()) && (0 >= this.get_cooldown() || this.get_shotBy() != this.world.player.id))
             this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.remove();
           else if (this.game.collision(this.get_x(), this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333))
             this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.remove();
           else if ("la" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))) this.game.requestSound("sizzle", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.remove();
           else if ("ad" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))) this.game.requestSound("sizzle", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY), this.remove();
           else {
             "wr" == this.world.getFG(Math.floor(this.get_x()), Math.floor(-this.get_y()))
               ? this.inWater || ((this.inWater = !0), this.game.requestSound("splash", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY))
               : (this.inWater = !1);
             this.set_speedY(this.get_speedY() + 0.5);
             if (3 == this.world.sceneNum)
               for (b = Object.keys(this.world.enderCrystals.h), a = b.length, c = 0; c < a; )
                 if (((d = b[c++]), 1 > Math.abs(this.get_x() - (this.world.enderCrystals.h[d][0] + 0.5)) && 1 > Math.abs(this.get_y() - (-this.world.enderCrystals.h[d][1] - 0.5)))) {
                   null != this.world.entities.h[d] && H.__cast(this.world.entities.h[d], Bc).explod();
                   this.game.requestSound("glass" + ((3 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
                   this.remove();
                   return;
                 }
             null == this.get_timer() && this.set_timer(0);
             this.set_timer(this.get_timer() + 1) > 60 * m.Instance.get_fps() ? this.remove() : this.render();
           }
         },
         remove: function () {
           this.game.splashAPotion(this.get_x(), this.get_y(), this.get_effects(), this.get_showParticles());
           pa.prototype.remove.call(this);
         },
         render: function (b) {
           pa.prototype.render.call(this, 2);
           this.entityMatrix.reset().translate(-0.26666666666666666, -0.26666666666666666).scale2D(1.03125).rotate2D(this.get_rotation()).translate(this.get_x(), this.get_y());
           var a = y.getTexture("potion", "splash_contents");
           b = this.entity;
           var c = this.quadPositions[0],
             d = new h(a.x, a.y);
           a = new h(a.width, a.height);
           var f = ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix),
             l = new e(),
             k = this.game.potionData,
             g = this.get_type(),
             m = k.h[g].h.r;
           k = this.game.potionData;
           g = this.get_type();
           var n = k.h[g].h.g;
           k = this.game.potionData;
           g = this.get_type();
           k = w.repeatArray([m, n, k.h[g].h.b, 1], 6);
           l.h.color = k;
           b.updateQuad(c, null, d, a, null, f, null, l);
           this.entityMatrix.reset().translate(-0.26666666666666666, -0.26666666666666666).scale2D(1.03125).rotate2D(this.get_rotation()).translate(this.get_x(), this.get_y());
           a = y.getTexture("potion", "splash");
           this.entity.updateQuad(this.quadPositions[1], null, new h(a.x, a.y), new h(a.width, a.height), null, ba.quadMatrixHelper(new t(0, 0, 0.5333333333333333, 0.5333333333333333), this.entityMatrix));
         },
         getData: function (b) {
           return H.__cast(this.data, e).h[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, e).h[b] = a);
         },
         get_x: function () {
           return this.getData("x");
         },
         set_x: function (b) {
           return this.setData("x", b);
         },
         get_y: function () {
           return this.getData("y");
         },
         set_y: function (b) {
           return this.setData("y", b);
         },
         get_speedX: function () {
           return this.getData("speedX");
         },
         get_speedY: function () {
           return this.getData("speedY");
         },
         set_speedY: function (b) {
           return this.setData("speedY", b);
         },
         get_rotation: function () {
           return this.getData("rotation");
         },
         get_shotBy: function () {
           return this.getData("shotBy");
         },
         get_timer: function () {
           return this.getData("timer");
         },
         set_timer: function (b) {
           return this.setData("timer", b);
         },
         get_cooldown: function () {
           return this.getData("cooldown");
         },
         set_cooldown: function (b) {
           return this.setData("cooldown", b);
         },
         get_type: function () {
           return this.getData("type");
         },
         get_effects: function () {
           return this.getData("effects");
         },
         get_showParticles: function () {
           return this.getData("showParticles");
         },
         __class__: lg,
       });
       var Cd = function (b, a, c, d, f, e) {
         this.entityMatrix = new T();
         this.enderDragonOrb = !1;
         this.orbType = 1;
         pa.call(this, b, a, c, d, f, e);
       };
       r["entities.Entity_XpOrb"] = Cd;
       Cd.__name__ = "entities.Entity_XpOrb";
       Cd.__super__ = pa;
       Cd.prototype = v(pa.prototype, {
         init: function () {
           this.orbType = (3 * Math.random() + 1) | 0;
           pa.prototype.init.call(this);
         },
         run: function () {
           if (1 == this.enderDragonOrb || this.onScreen(1)) {
             if (
               this.world.gamemode != U.gamemodes.h.SPECTATOR &&
               16 >= Math.pow(this.world.worldX - this.get_x(), 2) + Math.pow(this.world.worldY - 1.3333333333333333 - this.get_y(), 2) &&
               (this.set_xSpeed(this.get_xSpeed() + g.migrateAcc((this.world.worldX - this.get_x()) / 2.3333333333333335, 0.97)),
               this.set_ySpeed(this.get_ySpeed() + g.migrateAcc((this.world.worldY - 1.3333333333333333 - this.get_y()) / 2.3333333333333335, 0.97)),
               this.set_x(this.get_x() + this.get_xSpeed() / 3 / 30),
               this.set_y(this.get_y() + this.get_ySpeed() / 3 / 30),
               0.25 >= Math.pow(this.world.worldX - this.get_x(), 2) + Math.pow(this.world.worldY - 1.3333333333333333 - this.get_y(), 2))
             ) {
               Math.floor(this.world.experience / 500) != Math.floor((this.world.experience + this.get_amount()) / 500)
                 ? this.game.requestSound("levelup", this.get_x() - this.world.worldX, this.get_y() - this.world.worldY)
                 : this.game.requestSound("orb" + ((5 * Math.random() + 1) | 0), this.get_x() - this.world.worldX, this.get_y() - this.world.worldY);
               this.world.experience += this.get_amount();
               this.remove();
               return;
             }
             this.set_xSpeed(this.get_xSpeed() * g.migrateDampening(0.97));
             this.set_ySpeed(this.get_ySpeed() * g.migrateDampening(0.97));
             this.set_ySpeed(this.get_ySpeed() + g.migrateAcc(0.2, 0.97));
             this.game.collision(this.get_x(), this.get_y() + 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
             this.game.collision(this.get_x(), this.get_y() - 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
               ? this.set_ySpeed(0)
               : this.game.collision(this.get_x(), this.get_y() + 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 !this.game.collision(this.get_x(), this.get_y() - 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
               ? (this.set_y(this.get_y() - 0.016666666666666666), this.set_ySpeed(0))
               : this.game.collision(this.get_x(), this.get_y() - 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 !this.game.collision(this.get_x(), this.get_y() + 0.16666666666666666, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 (this.set_y(this.get_y() + 0.016666666666666666), this.set_ySpeed(0));
             this.game.collision(this.get_x() + 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
             this.game.collision(this.get_x() - 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
               ? this.set_xSpeed(0)
               : this.game.collision(this.get_x() + 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 !this.game.collision(this.get_x() - 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1)
               ? (this.set_x(this.get_x() - 0.016666666666666666), this.set_xSpeed(0))
               : this.game.collision(this.get_x() - 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 !this.game.collision(this.get_x() + 0.16666666666666666, this.get_y(), 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, !1) &&
                 (this.set_x(this.get_x() + 0.016666666666666666), this.set_xSpeed(0));
             this.set_x(this.get_x() + (this.get_xSpeed() * (1 + ((10 * Math.random()) | 0) / 100)) / 30);
             this.set_y(this.get_y() + (this.get_ySpeed() * (1 + ((10 * Math.random()) | 0) / 100)) / 30);
             this.set_timeout(this.get_timeout() - 1);
             0 >= this.get_timeout() || null == this.get_timeout() ? this.remove() : this.render();
           }
         },
         render: function (b) {
           pa.prototype.render.call(this, 1);
           this.entityMatrix.reset().translate(-0.1, -0.1).translate(this.get_x(), this.get_y());
           b = y.getTexture("particle_xporb", E.string(this.orbType));
           this.entity.updateQuad(this.quadPositions[0], null, new h(b.x, b.y), new h(b.width, b.height), null, ba.quadMatrixHelper(new t(0, 0, 0.2, 0.2), this.entityMatrix));
         },
         getData: function (b) {
           return H.__cast(this.data, Array)[b];
         },
         setData: function (b, a) {
           return (H.__cast(this.data, Array)[b] = a);
         },
         get_x: function () {
           return this.getData(1);
         },
         set_x: function (b) {
           return this.setData(1, b);
         },
         get_y: function () {
           return this.getData(2);
         },
         set_y: function (b) {
           return this.setData(2, b);
         },
         get_xSpeed: function () {
           return this.getData(3);
         },
         set_xSpeed: function (b) {
           return this.setData(3, b);
         },
         get_ySpeed: function () {
           return this.getData(4);
         },
         set_ySpeed: function (b) {
           return this.setData(4, b);
         },
         get_amount: function () {
           return this.getData(5);
         },
         get_timeout: function () {
           return this.getData(6);
         },
         set_timeout: function (b) {
           return this.setData(6, b);
         },
         __class__: Cd,
       });
       var Zc = function () {};
       r["haxe.IMap"] = Zc;
       Zc.__name__ = "haxe.IMap";
       Zc.__isInterface__ = !0;
       Zc.prototype = { __class__: Zc };
       var na = function (b, a, c) {
         Error.call(this, b);
         this.message = b;
         this.__previousException = a;
         this.__nativeException = null != c ? c : this;
       };
       r["haxe.Exception"] = na;
       na.__name__ = "haxe.Exception";
       na.caught = function (b) {
         return b instanceof na ? b : b instanceof Error ? new na(b.message, null, b) : new ye(b, null, b);
       };
       na.thrown = function (b) {
         return b instanceof na ? b.get_native() : b instanceof Error ? b : new ye(b);
       };
       na.__super__ = Error;
       na.prototype = v(Error.prototype, {
         unwrap: function () {
           return this.__nativeException;
         },
         toString: function () {
           return this.get_message();
         },
         get_message: function () {
           return this.message;
         },
         get_native: function () {
           return this.__nativeException;
         },
         __class__: na,
       });
       var Ia = function () {};
       r["haxe.Log"] = Ia;
       Ia.__name__ = "haxe.Log";
       Ia.formatOutput = function (b, a) {
         b = E.string(b);
         if (null == a) return b;
         var c = a.fileName + ":" + a.lineNumber;
         if (null != a.customParams) {
           var d = 0;
           for (a = a.customParams; d < a.length; ) b += ", " + E.string(a[d++]);
         }
         return c + ": " + b;
       };
       Ia.trace = function (b, a) {
         b = Ia.formatOutput(b, a);
         "undefined" != typeof console && null != console.log && console.log(b);
       };
       var Cb = function () {
         this.buf = new ph();
         this.cache = [];
         this.useCache = Cb.USE_CACHE;
         this.useEnumIndex = Cb.USE_ENUM_INDEX;
         this.shash = new e();
         this.scount = 0;
       };
       r["haxe.Serializer"] = Cb;
       Cb.__name__ = "haxe.Serializer";
       Cb.run = function (b) {
         var a = new Cb();
         a.serialize(b);
         return a.toString();
       };
       Cb.prototype = {
         toString: function () {
           return this.buf.b;
         },
         serializeString: function (b) {
           var a = this.shash.h[b];
           null != a
             ? ((this.buf.b += "R"), (this.buf.b += null == a ? "null" : "" + a))
             : ((this.shash.h[b] = this.scount++), (this.buf.b += "y"), (b = encodeURIComponent(b)), (this.buf.b += E.string(b.length)), (this.buf.b += ":"), (this.buf.b += null == b ? "null" : "" + b));
         },
         serializeRef: function (b) {
           for (var a = typeof b, c = 0, d = this.cache.length; c < d; ) {
             var f = c++,
               e = this.cache[f];
             if (typeof e == a && e == b) return (this.buf.b += "r"), (this.buf.b += null == f ? "null" : "" + f), !0;
           }
           this.cache.push(b);
           return !1;
         },
         serializeFields: function (b) {
           for (var a = 0, c = Z.fields(b); a < c.length; ) {
             var d = c[a];
             ++a;
             this.serializeString(d);
             this.serialize(Z.field(b, d));
           }
           this.buf.b += "g";
         },
         serialize: function (b) {
           var a = Za.typeof(b);
           switch (a._hx_index) {
             case 0:
               this.buf.b += "n";
               break;
             case 1:
               if (0 == b) {
                 this.buf.b += "z";
                 break;
               }
               this.buf.b += "i";
               this.buf.b += null == b ? "null" : "" + b;
               break;
             case 2:
               isNaN(b) ? (this.buf.b += "k") : isFinite(b) ? ((this.buf.b += "d"), (this.buf.b += null == b ? "null" : "" + b)) : (this.buf.b += 0 > b ? "m" : "p");
               break;
             case 3:
               this.buf.b += b ? "t" : "f";
               break;
             case 4:
               H.__instanceof(b, ci)
                 ? ((b = b.__name__), (this.buf.b += "A"), this.serializeString(b))
                 : H.__instanceof(b, di)
                 ? ((this.buf.b += "B"), this.serializeString(b.__ename__))
                 : (this.useCache && this.serializeRef(b)) || ((this.buf.b += "o"), this.serializeFields(b));
               break;
             case 5:
               throw na.thrown("Cannot serialize function");
             case 6:
               a = a.c;
               if (a == String) {
                 this.serializeString(b);
                 break;
               }
               if (this.useCache && this.serializeRef(b)) break;
               switch (a) {
                 case Array:
                   var c = 0;
                   this.buf.b += "a";
                   for (var d = 0, f = b.length; d < f; ) (a = d++), null == b[a] ? ++c : (0 < c && (1 == c ? (this.buf.b += "n") : ((this.buf.b += "u"), (this.buf.b += null == c ? "null" : "" + c)), (c = 0)), this.serialize(b[a]));
                   0 < c && (1 == c ? (this.buf.b += "n") : ((this.buf.b += "u"), (this.buf.b += null == c ? "null" : "" + c)));
                   this.buf.b += "h";
                   break;
                 case Date:
                   this.buf.b += "v";
                   this.buf.b += E.string(b.getTime());
                   break;
                 case Ma:
                   this.buf.b += "q";
                   for (a = b.keys(); a.hasNext(); ) (c = a.next()), (this.buf.b += ":"), (this.buf.b += null == c ? "null" : "" + c), this.serialize(b.h[c]);
                   this.buf.b += "h";
                   break;
                 case $c:
                   this.buf.b += "l";
                   for (b = b.h; null != b; ) (a = b.item), (b = b.next), this.serialize(a);
                   this.buf.b += "h";
                   break;
                 case oc:
                   this.buf.b += "M";
                   for (a = b.keys(); a.hasNext(); ) {
                     c = a.next();
                     var l = Z.field(c, "__id__");
                     Z.deleteField(c, "__id__");
                     this.serialize(c);
                     c.__id__ = l;
                     this.serialize(b.h[c.__id__]);
                   }
                   this.buf.b += "h";
                   break;
                 case e:
                   this.buf.b += "b";
                   c = Object.keys(b.h);
                   l = c.length;
                   for (d = 0; d < l; ) (a = c[d++]), this.serializeString(a), this.serialize(b.h[a]);
                   this.buf.b += "h";
                   break;
                 case Ka:
                   this.buf.b += "s";
                   this.buf.b += E.string(Math.ceil((8 * b.length) / 6));
                   this.buf.b += ":";
                   a = 0;
                   c = b.length - 2;
                   l = Cb.BASE64_CODES;
                   if (null == l) {
                     l = Array(Cb.BASE64.length);
                     d = 0;
                     for (f = Cb.BASE64.length; d < f; ) {
                       var h = d++;
                       l[h] = I.cca(Cb.BASE64, h);
                     }
                     Cb.BASE64_CODES = l;
                   }
                   for (; a < c; )
                     (d = b.b[a++]),
                       (f = b.b[a++]),
                       (h = b.b[a++]),
                       (this.buf.b += String.fromCodePoint(l[d >> 2])),
                       (this.buf.b += String.fromCodePoint(l[((d << 4) | (f >> 4)) & 63])),
                       (this.buf.b += String.fromCodePoint(l[((f << 2) | (h >> 6)) & 63])),
                       (this.buf.b += String.fromCodePoint(l[h & 63]));
                   a == c
                     ? ((d = b.b[a++]), (f = b.b[a++]), (this.buf.b += String.fromCodePoint(l[d >> 2])), (this.buf.b += String.fromCodePoint(l[((d << 4) | (f >> 4)) & 63])), (this.buf.b += String.fromCodePoint(l[(f << 2) & 63])))
                     : a == c + 1 && ((d = b.b[a++]), (this.buf.b += String.fromCodePoint(l[d >> 2])), (this.buf.b += String.fromCodePoint(l[(d << 4) & 63])));
                   break;
                 default:
                   this.useCache && this.cache.pop(),
                     null != b.hxSerialize
                       ? ((this.buf.b += "C"), this.serializeString(a.__name__), this.useCache && this.cache.push(b), b.hxSerialize(this), (this.buf.b += "g"))
                       : ((this.buf.b += "c"), this.serializeString(a.__name__), this.useCache && this.cache.push(b), this.serializeFields(b));
               }
               break;
             case 7:
               a = a.e;
               if (this.useCache) {
                 if (this.serializeRef(b)) break;
                 this.cache.pop();
               }
               this.buf.b += E.string(this.useEnumIndex ? "j" : "w");
               this.serializeString(a.__ename__);
               this.useEnumIndex ? ((this.buf.b += ":"), (this.buf.b += E.string(b._hx_index))) : ((a = b), this.serializeString(D[a.__enum__].__constructs__[a._hx_index]._hx_name));
               this.buf.b += ":";
               c = Za.enumParameters(b);
               this.buf.b += E.string(c.length);
               for (a = 0; a < c.length; ) this.serialize(c[a++]);
               this.useCache && this.cache.push(b);
               break;
             default:
               throw na.thrown("Cannot serialize " + E.string(b));
           }
         },
         __class__: Cb,
       };
       var ad = function (b) {
         var a = this;
         this.id = setInterval(function () {
           a.run();
         }, b);
       };
       r["haxe.Timer"] = ad;
       ad.__name__ = "haxe.Timer";
       ad.delay = function (b, a) {
         var c = new ad(a);
         c.run = function () {
           c.stop();
           b();
         };
         return c;
       };
       ad.prototype = {
         stop: function () {
           null != this.id && (clearInterval(this.id), (this.id = null));
         },
         run: function () {},
         __class__: ad,
       };
       var Dg = function () {};
       r["haxe._Unserializer.DefaultResolver"] = Dg;
       Dg.__name__ = "haxe._Unserializer.DefaultResolver";
       Dg.prototype = {
         resolveClass: function (b) {
           return r[b];
         },
         resolveEnum: function (b) {
           return D[b];
         },
         __class__: Dg,
       };
       var vb = function (b) {
         this.buf = b;
         this.length = this.buf.length;
         this.pos = 0;
         this.scache = [];
         this.cache = [];
         b = vb.DEFAULT_RESOLVER;
         null == b && ((b = new Dg()), (vb.DEFAULT_RESOLVER = b));
         this.resolver = b;
       };
       r["haxe.Unserializer"] = vb;
       vb.__name__ = "haxe.Unserializer";
       vb.initCodes = function () {
         for (var b = [], a = 0, c = vb.BASE64.length; a < c; ) {
           var d = a++;
           b[vb.BASE64.charCodeAt(d)] = d;
         }
         return b;
       };
       vb.run = function (b) {
         return new vb(b).unserialize();
       };
       vb.prototype = {
         readDigits: function () {
           for (var b = 0, a = !1, c = this.pos; ; ) {
             var d = this.buf.charCodeAt(this.pos);
             if (d != d) break;
             if (45 == d) {
               if (this.pos != c) break;
               a = !0;
             } else {
               if (48 > d || 57 < d) break;
               b = 10 * b + (d - 48);
             }
             this.pos++;
           }
           a && (b *= -1);
           return b;
         },
         readFloat: function () {
           for (var b = this.pos; ; ) {
             var a = this.buf.charCodeAt(this.pos);
             if (a != a) break;
             if ((43 <= a && 58 > a) || 101 == a || 69 == a) this.pos++;
             else break;
           }
           return parseFloat(I.substr(this.buf, b, this.pos - b));
         },
         unserializeObject: function (b) {
           for (;;) {
             if (this.pos >= this.length) throw na.thrown("Invalid object");
             if (103 == this.buf.charCodeAt(this.pos)) break;
             var a = this.unserialize();
             if ("string" != typeof a) throw na.thrown("Invalid object key");
             b[a] = this.unserialize();
           }
           this.pos++;
         },
         unserializeEnum: function (b, a) {
           if (58 != this.buf.charCodeAt(this.pos++)) throw na.thrown("Invalid enum format");
           var c = this.readDigits();
           if (0 == c) return Za.createEnum(b, a);
           for (var d = []; 0 < c--; ) d.push(this.unserialize());
           return Za.createEnum(b, a, d);
         },
         unserialize: function () {
           switch (this.buf.charCodeAt(this.pos++)) {
             case 65:
               var b = this.unserialize(),
                 a = this.resolver.resolveClass(b);
               if (null == a) throw na.thrown("Class not found " + b);
               return a;
             case 66:
               b = this.unserialize();
               a = this.resolver.resolveEnum(b);
               if (null == a) throw na.thrown("Enum not found " + b);
               return a;
             case 67:
               b = this.unserialize();
               a = this.resolver.resolveClass(b);
               if (null == a) throw na.thrown("Class not found " + b);
               a = Object.create(a.prototype);
               this.cache.push(a);
               a.hxUnserialize(this);
               if (103 != this.buf.charCodeAt(this.pos++)) throw na.thrown("Invalid custom data");
               return a;
             case 77:
               b = new oc();
               for (this.cache.push(b); 104 != this.buf.charCodeAt(this.pos); ) b.set(this.unserialize(), this.unserialize());
               this.pos++;
               return b;
             case 82:
               b = this.readDigits();
               if (0 > b || b >= this.scache.length) throw na.thrown("Invalid string reference");
               return this.scache[b];
             case 97:
               a = [];
               for (this.cache.push(a); ; ) {
                 var c = this.buf.charCodeAt(this.pos);
                 if (104 == c) {
                   this.pos++;
                   break;
                 }
                 117 == c ? (this.pos++, (b = this.readDigits()), (a[a.length + b - 1] = null)) : a.push(this.unserialize());
               }
               return a;
             case 98:
               b = new e();
               for (this.cache.push(b); 104 != this.buf.charCodeAt(this.pos); ) (a = this.unserialize()), (c = this.unserialize()), (b.h[a] = c);
               this.pos++;
               return b;
             case 99:
               b = this.unserialize();
               a = this.resolver.resolveClass(b);
               if (null == a) throw na.thrown("Class not found " + b);
               a = Object.create(a.prototype);
               this.cache.push(a);
               this.unserializeObject(a);
               return a;
             case 100:
               return this.readFloat();
             case 102:
               return !1;
             case 105:
               return this.readDigits();
             case 106:
               b = this.unserialize();
               c = this.resolver.resolveEnum(b);
               if (null == c) throw na.thrown("Enum not found " + b);
               this.pos++;
               for (var d = this.readDigits(), f = c.__constructs__, l = Array(f.length), h = 0, g = f.length; h < g; ) (a = h++), (l[a] = f[a]._hx_name);
               a = l[d];
               if (null == a) throw na.thrown("Unknown enum index " + b + "@" + d);
               a = this.unserializeEnum(c, a);
               this.cache.push(a);
               return a;
             case 107:
               return NaN;
             case 108:
               a = new $c();
               for (this.cache.push(a); 104 != this.buf.charCodeAt(this.pos); ) a.add(this.unserialize());
               this.pos++;
               return a;
             case 109:
               return -Infinity;
             case 110:
               return null;
             case 111:
               return (a = {}), this.cache.push(a), this.unserializeObject(a), a;
             case 112:
               return Infinity;
             case 113:
               b = new Ma();
               this.cache.push(b);
               for (c = this.buf.charCodeAt(this.pos++); 58 == c; ) (a = this.readDigits()), (c = this.unserialize()), (b.h[a] = c), (c = this.buf.charCodeAt(this.pos++));
               if (104 != c) throw na.thrown("Invalid IntMap format");
               return b;
             case 114:
               b = this.readDigits();
               if (0 > b || b >= this.cache.length) throw na.thrown("Invalid reference");
               return this.cache[b];
             case 115:
               b = this.readDigits();
               c = this.buf;
               if (58 != this.buf.charCodeAt(this.pos++) || this.length - this.pos < b) throw na.thrown("Invalid bytes length");
               d = vb.CODES;
               null == d && ((d = vb.initCodes()), (vb.CODES = d));
               a = this.pos;
               f = b & 3;
               l = a + (b - f);
               h = new Ka(new ArrayBuffer(3 * (b >> 2) + (2 <= f ? f - 1 : 0)));
               for (g = 0; a < l; ) {
                 var m = d[c.charCodeAt(a++)],
                   n = d[c.charCodeAt(a++)];
                 h.b[g++] = ((m << 2) | (n >> 4)) & 255;
                 m = d[c.charCodeAt(a++)];
                 h.b[g++] = ((n << 4) | (m >> 2)) & 255;
                 n = d[c.charCodeAt(a++)];
                 h.b[g++] = ((m << 6) | n) & 255;
               }
               2 <= f && ((m = d[c.charCodeAt(a++)]), (n = d[c.charCodeAt(a++)]), (h.b[g++] = ((m << 2) | (n >> 4)) & 255), 3 == f && ((m = d[c.charCodeAt(a++)]), (h.b[g++] = ((n << 4) | (m >> 2)) & 255)));
               this.pos += b;
               this.cache.push(h);
               return h;
             case 116:
               return !0;
             case 118:
               return (
                 48 <= this.buf.charCodeAt(this.pos) &&
                 57 >= this.buf.charCodeAt(this.pos) &&
                 48 <= this.buf.charCodeAt(this.pos + 1) &&
                 57 >= this.buf.charCodeAt(this.pos + 1) &&
                 48 <= this.buf.charCodeAt(this.pos + 2) &&
                 57 >= this.buf.charCodeAt(this.pos + 2) &&
                 48 <= this.buf.charCodeAt(this.pos + 3) &&
                 57 >= this.buf.charCodeAt(this.pos + 3) &&
                 45 == this.buf.charCodeAt(this.pos + 4)
                   ? ((a = I.strDate(I.substr(this.buf, this.pos, 19))), (this.pos += 19))
                   : (a = new Date(this.readFloat())),
                 this.cache.push(a),
                 a
               );
             case 119:
               b = this.unserialize();
               c = this.resolver.resolveEnum(b);
               if (null == c) throw na.thrown("Enum not found " + b);
               a = this.unserializeEnum(c, this.unserialize());
               this.cache.push(a);
               return a;
             case 120:
               throw na.thrown(this.unserialize());
             case 121:
               b = this.readDigits();
               if (58 != this.buf.charCodeAt(this.pos++) || this.length - this.pos < b) throw na.thrown("Invalid string length");
               a = I.substr(this.buf, this.pos, b);
               this.pos += b;
               a = decodeURIComponent(a.split("+").join(" "));
               this.scache.push(a);
               return a;
             case 122:
               return 0;
           }
           this.pos--;
           throw na.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
         },
         __class__: vb,
       };
       var ye = function (b, a, c) {
         na.call(this, String(b), a, c);
         this.value = b;
       };
       r["haxe.ValueException"] = ye;
       ye.__name__ = "haxe.ValueException";
       ye.__super__ = na;
       ye.prototype = v(na.prototype, {
         unwrap: function () {
           return this.value;
         },
         __class__: ye,
       });
       var Hd = function () {
         this.a1 = 1;
         this.a2 = 0;
       };
       r["haxe.crypto.Adler32"] = Hd;
       Hd.__name__ = "haxe.crypto.Adler32";
       Hd.read = function (b) {
         var a = new Hd(),
           c = b.readByte(),
           d = b.readByte();
         a.a1 = (b.readByte() << 8) | b.readByte();
         a.a2 = (c << 8) | d;
         return a;
       };
       Hd.prototype = {
         update: function (b, a, c) {
           var d = this.a1,
             f = this.a2,
             e = a;
           for (a += c; e < a; ) (d = (d + b.b[e++]) % 65521), (f = (f + d) % 65521);
           this.a1 = d;
           this.a2 = f;
         },
         equals: function (b) {
           return b.a1 == this.a1 ? b.a2 == this.a2 : !1;
         },
         __class__: Hd,
       };
       var Ka = function (b) {
         this.length = b.byteLength;
         this.b = new Uint8Array(b);
         this.b.bufferValue = b;
         b.hxBytes = this;
         b.bytes = this.b;
       };
       r["haxe.io.Bytes"] = Ka;
       Ka.__name__ = "haxe.io.Bytes";
       Ka.ofString = function (b, a) {
         a = [];
         for (var c = 0; c < b.length; ) {
           var d = b.charCodeAt(c++);
           55296 <= d && 56319 >= d && (d = ((d - 55232) << 10) | (b.charCodeAt(c++) & 1023));
           127 >= d ? a.push(d) : (2047 >= d ? a.push(192 | (d >> 6)) : (65535 >= d ? a.push(224 | (d >> 12)) : (a.push(240 | (d >> 18)), a.push(128 | ((d >> 12) & 63))), a.push(128 | ((d >> 6) & 63))), a.push(128 | (d & 63)));
         }
         return new Ka(new Uint8Array(a).buffer);
       };
       Ka.ofData = function (b) {
         var a = b.hxBytes;
         return null != a ? a : new Ka(b);
       };
       Ka.prototype = {
         blit: function (b, a, c, d) {
           if (0 > b || 0 > c || 0 > d || b + d > this.length || c + d > a.length) throw na.thrown(tc.OutsideBounds);
           0 == c && d == a.b.byteLength ? this.b.set(a.b, b) : this.b.set(a.b.subarray(c, c + d), b);
         },
         setUInt16: function (b, a) {
           null == this.data && (this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength));
           this.data.setUint16(b, a, !0);
         },
         setInt32: function (b, a) {
           null == this.data && (this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength));
           this.data.setInt32(b, a, !0);
         },
         getString: function (b, a, c) {
           if (0 > b || 0 > a || b + a > this.length) throw na.thrown(tc.OutsideBounds);
           c = "";
           var d = this.b,
             f = Sh.fromCharCode,
             e = b;
           for (b += a; e < b; )
             if (((a = d[e++]), 128 > a)) {
               if (0 == a) break;
               c += f(a);
             } else
               224 > a
                 ? (c += f(((a & 63) << 6) | (d[e++] & 127)))
                 : 240 > a
                 ? (c += f(((a & 31) << 12) | ((d[e++] & 127) << 6) | (d[e++] & 127)))
                 : ((a = ((a & 15) << 18) | ((d[e++] & 127) << 12) | ((d[e++] & 127) << 6) | (d[e++] & 127)), (c += f((a >> 10) + 55232)), (c += f((a & 1023) | 56320)));
           return c;
         },
         toString: function () {
           return this.getString(0, this.length);
         },
         __class__: Ka,
       };
       var ic = function () {};
       r["haxe.crypto.Base64"] = ic;
       ic.__name__ = "haxe.crypto.Base64";
       ic.encode = function (b, a) {
         null == a && (a = !0);
         var c = new Eg(ic.BYTES).encodeBytes(b).toString();
         if (a)
           switch (b.length % 3) {
             case 1:
               c += "==";
               break;
             case 2:
               c += "=";
           }
         return c;
       };
       ic.decode = function (b, a) {
         null == a && (a = !0);
         if (a) for (; 61 == I.cca(b, b.length - 1); ) b = I.substr(b, 0, -1);
         return new Eg(ic.BYTES).decodeBytes(Ka.ofString(b));
       };
       var Eg = function (b) {
         for (var a = b.length, c = 1; a > 1 << c; ) ++c;
         if (8 < c || a != 1 << c) throw na.thrown("BaseCode : base length must be a power of two.");
         this.base = b;
         this.nbits = c;
       };
       r["haxe.crypto.BaseCode"] = Eg;
       Eg.__name__ = "haxe.crypto.BaseCode";
       Eg.prototype = {
         encodeBytes: function (b) {
           for (var a = this.nbits, c = this.base, d = ((8 * b.length) / a) | 0, f = new Ka(new ArrayBuffer(d + (0 == (8 * b.length) % a ? 0 : 1))), e = 0, h = 0, g = (1 << a) - 1, m = 0, n = 0; n < d; ) {
             for (; h < a; ) (h += 8), (e <<= 8), (e |= b.b[m++]);
             h -= a;
             f.b[n++] = c.b[(e >> h) & g] & 255;
           }
           0 < h && (f.b[n++] = c.b[(e << (a - h)) & g] & 255);
           return f;
         },
         initTable: function () {
           for (var b = [], a = 0; 256 > a; ) b[a++] = -1;
           a = 0;
           for (var c = this.base.length; a < c; ) {
             var d = a++;
             b[this.base.b[d]] = d;
           }
           this.tbl = b;
         },
         decodeBytes: function (b) {
           var a = this.nbits;
           null == this.tbl && this.initTable();
           for (var c = this.tbl, d = (b.length * a) >> 3, f = new Ka(new ArrayBuffer(d)), e = 0, h = 0, g = 0, m = 0; m < d; ) {
             for (; 8 > h; ) {
               h += a;
               e <<= a;
               var n = c[b.b[g++]];
               if (-1 == n) throw na.thrown("BaseCode : invalid encoded char");
               e |= n;
             }
             h -= 8;
             f.b[m++] = (e >> h) & 255;
           }
           return f;
         },
         __class__: Eg,
       };
       var ze = function () {};
       r["haxe.ds.BalancedTree"] = ze;
       ze.__name__ = "haxe.ds.BalancedTree";
       ze.__interfaces__ = [Zc];
       ze.prototype = {
         set: function (b, a) {
           this.root = this.setLoop(b, a, this.root);
         },
         get: function (b) {
           for (var a = this.root; null != a; ) {
             var c = this.compare(b, a.key);
             if (0 == c) return a.value;
             a = 0 > c ? a.left : a.right;
           }
           return null;
         },
         exists: function (b) {
           for (var a = this.root; null != a; ) {
             var c = this.compare(b, a.key);
             if (0 == c) return !0;
             a = 0 > c ? a.left : a.right;
           }
           return !1;
         },
         keys: function () {
           var b = [];
           this.keysLoop(this.root, b);
           return new sd(b);
         },
         setLoop: function (b, a, c) {
           if (null == c) return new Tb(null, b, a, null);
           var d = this.compare(b, c.key);
           if (0 == d) return new Tb(c.left, b, a, c.right, null == c ? 0 : c._height);
           if (0 > d) return this.balance(this.setLoop(b, a, c.left), c.key, c.value, c.right);
           b = this.setLoop(b, a, c.right);
           return this.balance(c.left, c.key, c.value, b);
         },
         keysLoop: function (b, a) {
           null != b && (this.keysLoop(b.left, a), a.push(b.key), this.keysLoop(b.right, a));
         },
         balance: function (b, a, c, d) {
           var f = null == b ? 0 : b._height,
             e = null == d ? 0 : d._height;
           return f > e + 2
             ? ((f = b.left),
               (e = b.right),
               (null == f ? 0 : f._height) >= (null == e ? 0 : e._height)
                 ? new Tb(b.left, b.key, b.value, new Tb(b.right, a, c, d))
                 : new Tb(new Tb(b.left, b.key, b.value, b.right.left), b.right.key, b.right.value, new Tb(b.right.right, a, c, d)))
             : e > f + 2
             ? ((f = d.right),
               (e = d.left),
               (null == f ? 0 : f._height) > (null == e ? 0 : e._height)
                 ? new Tb(new Tb(b, a, c, d.left), d.key, d.value, d.right)
                 : new Tb(new Tb(b, a, c, d.left.left), d.left.key, d.left.value, new Tb(d.left.right, d.key, d.value, d.right)))
             : new Tb(b, a, c, d, (f > e ? f : e) + 1);
         },
         compare: function (b, a) {
           return Z.compare(b, a);
         },
         __class__: ze,
       };
       var Tb = function (b, a, c, d, f) {
         null == f && (f = -1);
         this.left = b;
         this.key = a;
         this.value = c;
         this.right = d;
         -1 == f ? ((b = this.left), (a = this.right), (b = (null == b ? 0 : b._height) > (null == a ? 0 : a._height) ? this.left : this.right), (this._height = (null == b ? 0 : b._height) + 1)) : (this._height = f);
       };
       r["haxe.ds.TreeNode"] = Tb;
       Tb.__name__ = "haxe.ds.TreeNode";
       Tb.prototype = { __class__: Tb };
       var Dc = function () {};
       r["haxe.ds.EnumValueMap"] = Dc;
       Dc.__name__ = "haxe.ds.EnumValueMap";
       Dc.__interfaces__ = [Zc];
       Dc.__super__ = ze;
       Dc.prototype = v(ze.prototype, {
         compare: function (b, a) {
           var c = b._hx_index - a._hx_index;
           if (0 != c) return c;
           b = Za.enumParameters(b);
           a = Za.enumParameters(a);
           return 0 == b.length && 0 == a.length ? 0 : this.compareArgs(b, a);
         },
         compareArgs: function (b, a) {
           var c = b.length - a.length;
           if (0 != c) return c;
           c = 0;
           for (var d = b.length; c < d; ) {
             var f = c++;
             f = this.compareArg(b[f], a[f]);
             if (0 != f) return f;
           }
           return 0;
         },
         compareArg: function (b, a) {
           return Z.isEnumValue(b) && Z.isEnumValue(a) ? this.compare(b, a) : b instanceof Array && a instanceof Array ? this.compareArgs(b, a) : Z.compare(b, a);
         },
         __class__: Dc,
       });
       var Ma = function () {
         this.h = {};
       };
       r["haxe.ds.IntMap"] = Ma;
       Ma.__name__ = "haxe.ds.IntMap";
       Ma.__interfaces__ = [Zc];
       Ma.prototype = {
         set: function (b, a) {
           this.h[b] = a;
         },
         get: function (b) {
           return this.h[b];
         },
         exists: function (b) {
           return this.h.hasOwnProperty(b);
         },
         remove: function (b) {
           if (!this.h.hasOwnProperty(b)) return !1;
           delete this.h[b];
           return !0;
         },
         keys: function () {
           var b = [],
             a;
           for (a in this.h) this.h.hasOwnProperty(a) && b.push(a | 0);
           return new sd(b);
         },
         iterator: function () {
           return {
             ref: this.h,
             it: this.keys(),
             hasNext: function () {
               return this.it.hasNext();
             },
             next: function () {
               var b = this.it.next();
               return this.ref[b];
             },
           };
         },
         __class__: Ma,
       };
       var $c = function () {
         this.length = 0;
       };
       r["haxe.ds.List"] = $c;
       $c.__name__ = "haxe.ds.List";
       $c.prototype = {
         add: function (b) {
           b = new Fg(b, null);
           null == this.h ? (this.h = b) : (this.q.next = b);
           this.q = b;
           this.length++;
         },
         push: function (b) {
           this.h = b = new Fg(b, this.h);
           null == this.q && (this.q = b);
           this.length++;
         },
         pop: function () {
           if (null == this.h) return null;
           var b = this.h.item;
           this.h = this.h.next;
           null == this.h && (this.q = null);
           this.length--;
           return b;
         },
         __class__: $c,
       };
       var Fg = function (b, a) {
         this.item = b;
         this.next = a;
       };
       r["haxe.ds._List.ListNode"] = Fg;
       Fg.__name__ = "haxe.ds._List.ListNode";
       Fg.prototype = { __class__: Fg };
       var oc = function () {
         this.h = { __keys__: {} };
       };
       r["haxe.ds.ObjectMap"] = oc;
       oc.__name__ = "haxe.ds.ObjectMap";
       oc.__interfaces__ = [Zc];
       oc.prototype = {
         set: function (b, a) {
           var c = b.__id__;
           null == c && (c = b.__id__ = L.$haxeUID++);
           this.h[c] = a;
           this.h.__keys__[c] = b;
         },
         get: function (b) {
           return this.h[b.__id__];
         },
         exists: function (b) {
           return null != this.h.__keys__[b.__id__];
         },
         remove: function (b) {
           b = b.__id__;
           if (null == this.h.__keys__[b]) return !1;
           delete this.h[b];
           delete this.h.__keys__[b];
           return !0;
         },
         keys: function () {
           var b = [],
             a;
           for (a in this.h.__keys__) this.h.hasOwnProperty(a) && b.push(this.h.__keys__[a]);
           return new sd(b);
         },
         __class__: oc,
       };
       var e = function () {
         this.h = Object.create(null);
       };
       r["haxe.ds.StringMap"] = e;
       e.__name__ = "haxe.ds.StringMap";
       e.__interfaces__ = [Zc];
       e.prototype = {
         exists: function (b) {
           return Object.prototype.hasOwnProperty.call(this.h, b);
         },
         get: function (b) {
           return this.h[b];
         },
         set: function (b, a) {
           this.h[b] = a;
         },
         keys: function () {
           return new rh(this.h);
         },
         __class__: e,
       };
       var rh = function (b) {
         this.h = b;
         this.keys = Object.keys(b);
         this.length = this.keys.length;
         this.current = 0;
       };
       r["haxe.ds._StringMap.StringMapKeyIterator"] = rh;
       rh.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
       rh.prototype = {
         hasNext: function () {
           return this.current < this.length;
         },
         next: function () {
           return this.keys[this.current++];
         },
         __class__: rh,
       };
       var Id = function (b, a, c) {
         na.call(this, b, a);
         this.posInfos = null == c ? { fileName: "(unknown)", lineNumber: 0, className: "(unknown)", methodName: "(unknown)" } : c;
       };
       r["haxe.exceptions.PosException"] = Id;
       Id.__name__ = "haxe.exceptions.PosException";
       Id.__super__ = na;
       Id.prototype = v(na.prototype, {
         toString: function () {
           return "" + na.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
         },
         __class__: Id,
       });
       var Gg = function (b, a, c) {
         null == b && (b = "Not implemented");
         Id.call(this, b, a, c);
       };
       r["haxe.exceptions.NotImplementedException"] = Gg;
       Gg.__name__ = "haxe.exceptions.NotImplementedException";
       Gg.__super__ = Id;
       Gg.prototype = v(Id.prototype, { __class__: Gg });
       var Ae = function (b) {
         this.url = b;
         this.headers = [];
         this.params = [];
         this.emptyOnData = B(this, this.onData);
       };
       r["haxe.http.HttpBase"] = Ae;
       Ae.__name__ = "haxe.http.HttpBase";
       Ae.prototype = {
         setParameter: function (b, a) {
           for (var c = 0, d = this.params.length; c < d; ) {
             var f = c++;
             if (this.params[f].name == b) {
               this.params[f] = { name: b, value: a };
               return;
             }
           }
           this.params.push({ name: b, value: a });
         },
         addParameter: function (b, a) {
           this.params.push({ name: b, value: a });
         },
         onData: function (b) {},
         onBytes: function (b) {},
         onError: function (b) {},
         onStatus: function (b) {},
         hasOnData: function () {
           return !Z.compareMethods(B(this, this.onData), this.emptyOnData);
         },
         success: function (b) {
           this.responseBytes = b;
           this.responseAsString = null;
           if (this.hasOnData()) this.onData(this.get_responseData());
           this.onBytes(this.responseBytes);
         },
         get_responseData: function () {
           null == this.responseAsString && null != this.responseBytes && (this.responseAsString = this.responseBytes.getString(0, this.responseBytes.length, Th.UTF8));
           return this.responseAsString;
         },
         __class__: Ae,
       };
       var Be = function (b) {
         this.async = !0;
         this.withCredentials = !1;
         Ae.call(this, b);
       };
       r["haxe.http.HttpJs"] = Be;
       Be.__name__ = "haxe.http.HttpJs";
       Be.__super__ = Ae;
       Be.prototype = v(Ae.prototype, {
         request: function (b) {
           var a = this;
           this.responseBytes = this.responseAsString = null;
           var c = (this.req = Jd.createXMLHttpRequest()),
             d = function (b) {
               if (4 == c.readyState) {
                 try {
                   var d = c.status;
                 } catch (xc) {
                   d = null;
                 }
                 0 == d && Jd.get_supported() && null != L.location && ((b = L.location.protocol.toLowerCase()), new Ra("^(?:about|app|app-storage|.+-extension|file|res|widget):$", "").match(b) && (d = null != c.response ? 200 : 404));
                 void 0 == d && (d = null);
                 if (null != d) a.onStatus(d);
                 if (null != d && 200 <= d && 400 > d) (a.req = null), a.success(Ka.ofData(c.response));
                 else if (null == d || (0 == d && null == c.response)) (a.req = null), a.onError("Failed to connect or resolve host");
                 else if (null == d) (a.req = null), (d = null != c.response ? Ka.ofData(c.response) : null), (a.responseBytes = d), a.onError("Http Error #" + c.status);
                 else
                   switch (d) {
                     case 12007:
                       a.req = null;
                       a.onError("Unknown host");
                       break;
                     case 12029:
                       a.req = null;
                       a.onError("Failed to connect to host");
                       break;
                     default:
                       (a.req = null), (d = null != c.response ? Ka.ofData(c.response) : null), (a.responseBytes = d), a.onError("Http Error #" + c.status);
                   }
               }
             };
           this.async && (c.onreadystatechange = d);
           var f = this.postData,
             e = this.postBytes,
             h = null == f ? (null == e ? null : new Blob([e.b.bufferValue])) : null == e ? f : null;
           if (null != h) b = !0;
           else
             for (f = 0, e = this.params; f < e.length; ) {
               var g = e[f];
               ++f;
               h = null == h ? "" : (null == h ? "null" : E.string(h)) + "&";
               var m = g.name;
               h = (null == h ? "null" : E.string(h)) + encodeURIComponent(m) + "=" + encodeURIComponent(g.value);
             }
           try {
             b ? c.open("POST", this.url, this.async) : null != h ? (c.open("GET", this.url + (1 >= this.url.split("?").length ? "?" : "&") + (null == h ? "null" : E.string(h)), this.async), (h = null)) : c.open("GET", this.url, this.async),
               (c.responseType = "arraybuffer");
           } catch (Ba) {
             e = na.caught(Ba).unwrap();
             this.req = null;
             this.onError(e.toString());
             return;
           }
           c.withCredentials = this.withCredentials;
           !Bb.exists(this.headers, function (a) {
             return "Content-Type" == a.name;
           }) &&
             b &&
             null == this.postData &&
             c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
           f = 0;
           for (e = this.headers; f < e.length; ) (b = e[f]), ++f, c.setRequestHeader(b.name, b.value);
           c.send(h);
           this.async || d(null);
         },
         __class__: Be,
       });
       var Hg = function () {
         this.size = this.pos = 0;
       };
       r["haxe.io.BytesBuffer"] = Hg;
       Hg.__name__ = "haxe.io.BytesBuffer";
       Hg.prototype = {
         addByte: function (b) {
           this.pos == this.size && this.grow(1);
           this.view.setUint8(this.pos++, b);
         },
         add: function (b) {
           this.pos + b.length > this.size && this.grow(b.length);
           0 != this.size && (this.u8.set(new Uint8Array(b.b.buffer, b.b.byteOffset, b.length), this.pos), (this.pos += b.length));
         },
         addBytes: function (b, a, c) {
           if (0 > a || 0 > c || a + c > b.length) throw na.thrown(tc.OutsideBounds);
           this.pos + c > this.size && this.grow(c);
           0 != this.size && (this.u8.set(new Uint8Array(b.b.buffer, b.b.byteOffset + a, c), this.pos), (this.pos += c));
         },
         grow: function (b) {
           var a = this.pos + b;
           for (b = 0 == this.size ? 16 : this.size; b < a; ) b = (3 * b) >> 1;
           a = new ArrayBuffer(b);
           var c = new Uint8Array(a);
           0 < this.size && c.set(this.u8);
           this.size = b;
           this.buffer = a;
           this.u8 = c;
           this.view = new DataView(this.buffer);
         },
         getBytes: function () {
           if (0 == this.size) return new Ka(new ArrayBuffer(0));
           var b = new Ka(this.buffer);
           b.length = this.pos;
           return b;
         },
         __class__: Hg,
       };
       var Ig = function () {};
       r["haxe.io.Input"] = Ig;
       Ig.__name__ = "haxe.io.Input";
       Ig.prototype = {
         readByte: function () {
           throw new Gg(null, null, { fileName: "haxe/io/Input.hx", lineNumber: 53, className: "haxe.io.Input", methodName: "readByte" });
         },
         readBytes: function (b, a, c) {
           var d = c,
             f = b.b;
           if (0 > a || 0 > c || a + c > b.length) throw na.thrown(tc.OutsideBounds);
           try {
             for (; 0 < d; ) (f[a] = this.readByte()), ++a, --d;
           } catch (l) {
             if (!(na.caught(l).unwrap() instanceof Ce)) throw l;
           }
           return c - d;
         },
         readFullBytes: function (b, a, c) {
           for (; 0 < c; ) {
             var d = this.readBytes(b, a, c);
             if (0 == d) throw na.thrown(tc.Blocked);
             a += d;
             c -= d;
           }
         },
         read: function (b) {
           for (var a = new Ka(new ArrayBuffer(b)), c = 0; 0 < b; ) {
             var d = this.readBytes(a, c, b);
             if (0 == d) throw na.thrown(tc.Blocked);
             c += d;
             b -= d;
           }
           return a;
         },
         readInt16: function () {
           var b = this.readByte(),
             a = this.readByte();
           b = this.bigEndian ? a | (b << 8) : b | (a << 8);
           return 0 != (b & 32768) ? b - 65536 : b;
         },
         readUInt16: function () {
           var b = this.readByte(),
             a = this.readByte();
           return this.bigEndian ? a | (b << 8) : b | (a << 8);
         },
         readInt32: function () {
           var b = this.readByte(),
             a = this.readByte(),
             c = this.readByte(),
             d = this.readByte();
           return this.bigEndian ? d | (c << 8) | (a << 16) | (b << 24) : b | (a << 8) | (c << 16) | (d << 24);
         },
         readString: function (b, a) {
           var c = new Ka(new ArrayBuffer(b));
           this.readFullBytes(c, 0, b);
           return c.getString(0, b, a);
         },
         __class__: Ig,
       };
       var Jg = function (b, a, c) {
         null == a && (a = 0);
         null == c && (c = b.length - a);
         if (0 > a || 0 > c || a + c > b.length) throw na.thrown(tc.OutsideBounds);
         this.b = b.b;
         this.pos = a;
         this.totlen = this.len = c;
       };
       r["haxe.io.BytesInput"] = Jg;
       Jg.__name__ = "haxe.io.BytesInput";
       Jg.__super__ = Ig;
       Jg.prototype = v(Ig.prototype, {
         readByte: function () {
           if (0 == this.len) throw na.thrown(new Ce());
           this.len--;
           return this.b[this.pos++];
         },
         readBytes: function (b, a, c) {
           if (0 > a || 0 > c || a + c > b.length) throw na.thrown(tc.OutsideBounds);
           if (0 == this.len && 0 < c) throw na.thrown(new Ce());
           this.len < c && (c = this.len);
           var d = this.b;
           b = b.b;
           for (var f = 0, e = c; f < e; ) {
             var h = f++;
             b[a + h] = d[this.pos + h];
           }
           this.pos += c;
           this.len -= c;
           return c;
         },
         __class__: Jg,
       });
       var Th = (D["haxe.io.Encoding"] = {
         __ename__: "haxe.io.Encoding",
         __constructs__: null,
         UTF8: { _hx_name: "UTF8", _hx_index: 0, __enum__: "haxe.io.Encoding", toString: n },
         RawNative: { _hx_name: "RawNative", _hx_index: 1, __enum__: "haxe.io.Encoding", toString: n },
       });
       Th.__constructs__ = [Th.UTF8, Th.RawNative];
       var Ce = function () {};
       r["haxe.io.Eof"] = Ce;
       Ce.__name__ = "haxe.io.Eof";
       Ce.prototype = {
         toString: function () {
           return "Eof";
         },
         __class__: Ce,
       };
       var tc = (D["haxe.io.Error"] = {
         __ename__: "haxe.io.Error",
         __constructs__: null,
         Blocked: { _hx_name: "Blocked", _hx_index: 0, __enum__: "haxe.io.Error", toString: n },
         Overflow: { _hx_name: "Overflow", _hx_index: 1, __enum__: "haxe.io.Error", toString: n },
         OutsideBounds: { _hx_name: "OutsideBounds", _hx_index: 2, __enum__: "haxe.io.Error", toString: n },
         Custom:
           ((ia = function (b) {
             return { _hx_index: 3, e: b, __enum__: "haxe.io.Error", toString: n };
           }),
           (ia._hx_name = "Custom"),
           (ia.__params__ = ["e"]),
           ia),
       });
       tc.__constructs__ = [tc.Blocked, tc.Overflow, tc.OutsideBounds, tc.Custom];
       var Ic = function (b) {
         switch (b) {
           case ".":
           case "..":
             this.dir = b;
             this.file = "";
             return;
         }
         var a = b.lastIndexOf("/"),
           c = b.lastIndexOf("\\");
         a < c ? ((this.dir = I.substr(b, 0, c)), (b = I.substr(b, c + 1, null)), (this.backslash = !0)) : c < a ? ((this.dir = I.substr(b, 0, a)), (b = I.substr(b, a + 1, null))) : (this.dir = null);
         a = b.lastIndexOf(".");
         -1 != a ? ((this.ext = I.substr(b, a + 1, null)), (this.file = I.substr(b, 0, a))) : ((this.ext = null), (this.file = b));
       };
       r["haxe.io.Path"] = Ic;
       Ic.__name__ = "haxe.io.Path";
       Ic.withoutDirectory = function (b) {
         b = new Ic(b);
         b.dir = null;
         return b.toString();
       };
       Ic.directory = function (b) {
         b = new Ic(b);
         return null == b.dir ? "" : b.dir;
       };
       Ic.prototype = {
         toString: function () {
           return (null == this.dir ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (null == this.ext ? "" : "." + this.ext);
         },
         __class__: Ic,
       };
       var sd = function (b) {
         this.current = 0;
         this.array = b;
       };
       r["haxe.iterators.ArrayIterator"] = sd;
       sd.__name__ = "haxe.iterators.ArrayIterator";
       sd.prototype = {
         hasNext: function () {
           return this.current < this.array.length;
         },
         next: function () {
           return this.array[this.current++];
         },
         __class__: sd,
       };
       var Kd = (D["haxe.zip.ExtraField"] = {
         __ename__: "haxe.zip.ExtraField",
         __constructs__: null,
         FUnknown:
           ((ia = function (b, a) {
             return { _hx_index: 0, tag: b, bytes: a, __enum__: "haxe.zip.ExtraField", toString: n };
           }),
           (ia._hx_name = "FUnknown"),
           (ia.__params__ = ["tag", "bytes"]),
           ia),
         FInfoZipUnicodePath:
           ((ia = function (b, a) {
             return { _hx_index: 1, name: b, crc: a, __enum__: "haxe.zip.ExtraField", toString: n };
           }),
           (ia._hx_name = "FInfoZipUnicodePath"),
           (ia.__params__ = ["name", "crc"]),
           ia),
         FUtf8: { _hx_name: "FUtf8", _hx_index: 2, __enum__: "haxe.zip.ExtraField", toString: n },
       });
       Kd.__constructs__ = [Kd.FUnknown, Kd.FInfoZipUnicodePath, Kd.FUtf8];
       var uc = (D["haxe.zip.Huffman"] = {
         __ename__: "haxe.zip.Huffman",
         __constructs__: null,
         Found:
           ((ia = function (b) {
             return { _hx_index: 0, i: b, __enum__: "haxe.zip.Huffman", toString: n };
           }),
           (ia._hx_name = "Found"),
           (ia.__params__ = ["i"]),
           ia),
         NeedBit:
           ((ia = function (b, a) {
             return { _hx_index: 1, left: b, right: a, __enum__: "haxe.zip.Huffman", toString: n };
           }),
           (ia._hx_name = "NeedBit"),
           (ia.__params__ = ["left", "right"]),
           ia),
         NeedBits:
           ((ia = function (b, a) {
             return { _hx_index: 2, n: b, table: a, __enum__: "haxe.zip.Huffman", toString: n };
           }),
           (ia._hx_name = "NeedBits"),
           (ia.__params__ = ["n", "table"]),
           ia),
       });
       uc.__constructs__ = [uc.Found, uc.NeedBit, uc.NeedBits];
       var sh = function () {};
       r["haxe.zip.HuffTools"] = sh;
       sh.__name__ = "haxe.zip.HuffTools";
       sh.prototype = {
         treeDepth: function (b) {
           switch (b._hx_index) {
             case 0:
               return 0;
             case 1:
               var a = this.treeDepth(b.left);
               b = this.treeDepth(b.right);
               return 1 + (a < b ? a : b);
             case 2:
               throw na.thrown("assert");
           }
         },
         treeCompress: function (b) {
           var a = this.treeDepth(b);
           if (0 == a) return b;
           if (1 == a) {
             if (1 == b._hx_index) return uc.NeedBit(this.treeCompress(b.left), this.treeCompress(b.right));
             throw na.thrown("assert");
           }
           for (var c = 1 << a, d = [], f = 0; f < c; ) ++f, d.push(uc.Found(-1));
           this.treeWalk(d, 0, 0, a, b);
           return uc.NeedBits(a, d);
         },
         treeWalk: function (b, a, c, d, f) {
           1 == f._hx_index ? (0 < d ? (this.treeWalk(b, a, c + 1, d - 1, f.left), this.treeWalk(b, a | (1 << c), c + 1, d - 1, f.right)) : (b[a] = this.treeCompress(f))) : (b[a] = this.treeCompress(f));
         },
         treeMake: function (b, a, c, d) {
           if (d > a) throw na.thrown("Invalid huffman");
           var f = (c << 5) | d;
           if (b.h.hasOwnProperty(f)) return uc.Found(b.h[f]);
           c <<= 1;
           ++d;
           return uc.NeedBit(this.treeMake(b, a, c, d), this.treeMake(b, a, c | 1, d));
         },
         make: function (b, a, c, d) {
           if (1 == c) return uc.NeedBit(uc.Found(0), uc.Found(0));
           var f = [],
             e = [];
           if (32 < d) throw na.thrown("Invalid huffman");
           for (var h = 0; h < d; ) ++h, f.push(0), e.push(0);
           for (h = 0; h < c; ) {
             var g = b[h++ + a];
             if (g >= d) throw na.thrown("Invalid huffman");
             f[g]++;
           }
           var m = 0;
           h = 1;
           for (var n = d - 1; h < n; ) (g = h++), (m = (m + f[g]) << 1), (e[g] = m);
           f = new Ma();
           for (h = 0; h < c; ) (g = h++), (m = b[g + a]), 0 != m && ((n = e[m - 1]), (e[m - 1] = n + 1), (f.h[(n << 5) | m] = g));
           return this.treeCompress(uc.NeedBit(this.treeMake(f, d, 0, 1), this.treeMake(f, d, 1, 1)));
         },
         __class__: sh,
       };
       var th = function (b) {
         this.buffer = new Ka(new ArrayBuffer(65536));
         this.pos = 0;
         b && (this.crc = new Hd());
       };
       r["haxe.zip._InflateImpl.Window"] = th;
       th.__name__ = "haxe.zip._InflateImpl.Window";
       th.prototype = {
         slide: function () {
           null != this.crc && this.crc.update(this.buffer, 0, 32768);
           var b = new Ka(new ArrayBuffer(65536));
           this.pos -= 32768;
           b.blit(0, this.buffer, 32768, this.pos);
           this.buffer = b;
         },
         addBytes: function (b, a, c) {
           65536 < this.pos + c && this.slide();
           this.buffer.blit(this.pos, b, a, c);
           this.pos += c;
         },
         addByte: function (b) {
           65536 == this.pos && this.slide();
           this.buffer.b[this.pos] = b & 255;
           this.pos++;
         },
         getLastChar: function () {
           return this.buffer.b[this.pos - 1];
         },
         available: function () {
           return this.pos;
         },
         checksum: function () {
           null != this.crc && this.crc.update(this.buffer, 0, this.pos);
           return this.crc;
         },
         __class__: th,
       };
       var kb = (D["haxe.zip._InflateImpl.State"] = {
         __ename__: "haxe.zip._InflateImpl.State",
         __constructs__: null,
         Head: { _hx_name: "Head", _hx_index: 0, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         Block: { _hx_name: "Block", _hx_index: 1, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         CData: { _hx_name: "CData", _hx_index: 2, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         Flat: { _hx_name: "Flat", _hx_index: 3, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         Crc: { _hx_name: "Crc", _hx_index: 4, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         Dist: { _hx_name: "Dist", _hx_index: 5, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         DistOne: { _hx_name: "DistOne", _hx_index: 6, __enum__: "haxe.zip._InflateImpl.State", toString: n },
         Done: { _hx_name: "Done", _hx_index: 7, __enum__: "haxe.zip._InflateImpl.State", toString: n },
       });
       kb.__constructs__ = [kb.Head, kb.Block, kb.CData, kb.Flat, kb.Crc, kb.Dist, kb.DistOne, kb.Done];
       var zb = function (b, a, c) {
         null == c && (c = !0);
         null == a && (a = !0);
         this.isFinal = !1;
         this.htools = new sh();
         this.huffman = this.buildFixedHuffman();
         this.huffdist = null;
         this.dist = this.len = 0;
         this.state = a ? kb.Head : kb.Block;
         this.input = b;
         this.needed = this.nbits = this.bits = 0;
         this.output = null;
         this.outpos = 0;
         this.lengths = [];
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.lengths.push(-1);
         this.window = new th(c);
       };
       r["haxe.zip.InflateImpl"] = zb;
       zb.__name__ = "haxe.zip.InflateImpl";
       zb.prototype = {
         buildFixedHuffman: function () {
           if (null != zb.FIXED_HUFFMAN) return zb.FIXED_HUFFMAN;
           for (var b = [], a = 0; 288 > a; ) {
             var c = a++;
             b.push(143 >= c ? 8 : 255 >= c ? 9 : 279 >= c ? 7 : 8);
           }
           zb.FIXED_HUFFMAN = this.htools.make(b, 0, 288, 10);
           return zb.FIXED_HUFFMAN;
         },
         readBytes: function (b, a, c) {
           this.needed = c;
           this.outpos = a;
           this.output = b;
           if (0 < c) for (; this.inflateLoop(); );
           return c - this.needed;
         },
         getBits: function (b) {
           for (; this.nbits < b; ) (this.bits |= this.input.readByte() << this.nbits), (this.nbits += 8);
           var a = this.bits & ((1 << b) - 1);
           this.nbits -= b;
           this.bits >>= b;
           return a;
         },
         getBit: function () {
           0 == this.nbits && ((this.nbits = 8), (this.bits = this.input.readByte()));
           var b = 1 == (this.bits & 1);
           this.nbits--;
           this.bits >>= 1;
           return b;
         },
         getRevBits: function (b) {
           return 0 == b ? 0 : this.getBit() ? (1 << (b - 1)) | this.getRevBits(b - 1) : this.getRevBits(b - 1);
         },
         resetBits: function () {
           this.nbits = this.bits = 0;
         },
         addBytes: function (b, a, c) {
           this.window.addBytes(b, a, c);
           this.output.blit(this.outpos, b, a, c);
           this.needed -= c;
           this.outpos += c;
         },
         addByte: function (b) {
           this.window.addByte(b);
           this.output.b[this.outpos] = b & 255;
           this.needed--;
           this.outpos++;
         },
         addDistOne: function (b) {
           for (var a = this.window.getLastChar(), c = 0; c < b; ) ++c, this.addByte(a);
         },
         addDist: function (b, a) {
           this.addBytes(this.window.buffer, this.window.pos - b, a);
         },
         applyHuffman: function (b) {
           switch (b._hx_index) {
             case 0:
               return b.i;
             case 1:
               return this.applyHuffman(this.getBit() ? b.right : b.left);
             case 2:
               return this.applyHuffman(b.table[this.getBits(b.n)]);
           }
         },
         inflateLengths: function (b, a) {
           for (var c = 0, d = 0; c < a; ) {
             var f = this.applyHuffman(this.huffman);
             switch (f) {
               case 0:
               case 1:
               case 2:
               case 3:
               case 4:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
                 d = f;
                 b[c] = f;
                 ++c;
                 break;
               case 16:
                 f = c + 3 + this.getBits(2);
                 if (f > a) throw na.thrown("Invalid data");
                 for (; c < f; ) (b[c] = d), ++c;
                 break;
               case 17:
                 c += 3 + this.getBits(3);
                 if (c > a) throw na.thrown("Invalid data");
                 break;
               case 18:
                 c += 11 + this.getBits(7);
                 if (c > a) throw na.thrown("Invalid data");
                 break;
               default:
                 throw na.thrown("Invalid data");
             }
           }
         },
         inflateLoop: function () {
           switch (this.state._hx_index) {
             case 0:
               var b = this.input.readByte();
               if (8 != (b & 15)) throw na.thrown("Invalid data");
               var a = this.input.readByte();
               if (0 != ((b << 8) + a) % 31) throw na.thrown("Invalid data");
               if (0 != (a & 32)) throw na.thrown("Unsupported dictionary");
               this.state = kb.Block;
               return !0;
             case 1:
               switch (((this.isFinal = this.getBit()), this.getBits(2))) {
                 case 0:
                   this.len = this.input.readUInt16();
                   if (this.input.readUInt16() != 65535 - this.len) throw na.thrown("Invalid data");
                   this.state = kb.Flat;
                   b = this.inflateLoop();
                   this.resetBits();
                   return b;
                 case 1:
                   return (this.huffman = this.buildFixedHuffman()), (this.huffdist = null), (this.state = kb.CData), !0;
                 case 2:
                   b = this.getBits(5) + 257;
                   a = this.getBits(5) + 1;
                   for (var c = this.getBits(4) + 4, d = 0; d < c; ) this.lengths[zb.CODE_LENGTHS_POS[d++]] = this.getBits(3);
                   for (d = c; 19 > d; ) this.lengths[zb.CODE_LENGTHS_POS[d++]] = 0;
                   this.huffman = this.htools.make(this.lengths, 0, 19, 8);
                   c = [];
                   d = 0;
                   for (var f = b + a; d < f; ) ++d, c.push(0);
                   this.inflateLengths(c, b + a);
                   this.huffdist = this.htools.make(c, b, a, 16);
                   this.huffman = this.htools.make(c, 0, b, 16);
                   this.state = kb.CData;
                   return !0;
                 default:
                   throw na.thrown("Invalid data");
               }
             case 2:
               a = this.applyHuffman(this.huffman);
               if (256 > a) return this.addByte(a), 0 < this.needed;
               if (256 == a) this.state = this.isFinal ? kb.Crc : kb.Block;
               else {
                 a -= 257;
                 b = zb.LEN_EXTRA_BITS_TBL[a];
                 if (-1 == b) throw na.thrown("Invalid data");
                 this.len = zb.LEN_BASE_VAL_TBL[a] + this.getBits(b);
                 a = null == this.huffdist ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
                 b = zb.DIST_EXTRA_BITS_TBL[a];
                 if (-1 == b) throw na.thrown("Invalid data");
                 this.dist = zb.DIST_BASE_VAL_TBL[a] + this.getBits(b);
                 if (this.dist > this.window.available()) throw na.thrown("Invalid data");
                 this.state = 1 == this.dist ? kb.DistOne : kb.Dist;
               }
               return !0;
             case 3:
               return (b = this.len < this.needed ? this.len : this.needed), (a = this.input.read(b)), (this.len -= b), this.addBytes(a, 0, b), 0 == this.len && (this.state = this.isFinal ? kb.Crc : kb.Block), 0 < this.needed;
             case 4:
               b = this.window.checksum();
               if (null == b) return (this.state = kb.Done), !0;
               if (!b.equals(Hd.read(this.input))) throw na.thrown("Invalid CRC");
               this.state = kb.Done;
               return !0;
             case 5:
               for (; 0 < this.len && 0 < this.needed; ) (b = this.len < this.dist ? this.len : this.dist), (b = this.needed < b ? this.needed : b), this.addDist(this.dist, b), (this.len -= b);
               0 == this.len && (this.state = kb.CData);
               return 0 < this.needed;
             case 6:
               return (b = this.len < this.needed ? this.len : this.needed), this.addDistOne(b), (this.len -= b), 0 == this.len && (this.state = kb.CData), 0 < this.needed;
             case 7:
               return !1;
           }
         },
         __class__: zb,
       };
       var De = function (b) {
         this.i = b;
       };
       r["haxe.zip.Reader"] = De;
       De.__name__ = "haxe.zip.Reader";
       De.readZip = function (b) {
         return new De(b).read();
       };
       De.prototype = {
         readZipDate: function () {
           var b = this.i.readUInt16(),
             a = this.i.readUInt16();
           return new Date((a >> 9) + 1980, ((a >> 5) & 15) - 1, a & 31, (b >> 11) & 31, (b >> 5) & 63, (b & 31) << 1);
         },
         readExtraFields: function (b) {
           for (var a = new $c(); 0 < b; ) {
             if (4 > b) throw na.thrown("Invalid extra fields data");
             var c = this.i.readUInt16(),
               d = this.i.readUInt16();
             if (b < d) throw na.thrown("Invalid extra fields data");
             if (28789 == c) {
               var f = this.i.readByte();
               if (1 != f) {
                 var e = new Hg();
                 e.addByte(f);
                 e.add(this.i.read(d - 1));
                 a.add(Kd.FUnknown(c, e.getBytes()));
               } else (c = this.i.readInt32()), a.add(Kd.FInfoZipUnicodePath(this.i.read(d - 5).toString(), c));
             } else a.add(Kd.FUnknown(c, this.i.read(d)));
             b -= 4 + d;
           }
           return a;
         },
         readEntryHeader: function () {
           var b = this.i,
             a = b.readInt32();
           if (33639248 == a || 101010256 == a) return null;
           if (67324752 != a) throw na.thrown("Invalid Zip Data");
           b.readUInt16();
           a = b.readUInt16();
           var c = b.readUInt16(),
             d = 0 != c;
           if (d && 8 != c) throw na.thrown("Unsupported compression " + c);
           c = this.readZipDate();
           var f = b.readInt32(),
             e = b.readInt32(),
             h = b.readInt32(),
             g = b.readInt16(),
             m = b.readInt16();
           b = b.readString(g);
           m = this.readExtraFields(m);
           0 != (a & 2048) && m.push(Kd.FUtf8);
           0 != (a & 8) && (e = -1);
           return { fileName: b, fileSize: h, fileTime: c, compressed: d, dataSize: e, data: null, crc32: f, extraFields: m };
         },
         read: function () {
           for (var b = new $c(), a = null; ; ) {
             var c = this.readEntryHeader();
             if (null == c) break;
             if (0 > c.dataSize) {
               null == a && (a = new Ka(new ArrayBuffer(65536)));
               for (var d = new Hg(), f = new zb(this.i, !1, !1); ; ) {
                 var e = f.readBytes(a, 0, 65536);
                 d.addBytes(a, 0, e);
                 if (65536 > e) break;
               }
               c.data = d.getBytes();
               c.crc32 = this.i.readInt32();
               134695760 == c.crc32 && (c.crc32 = this.i.readInt32());
               c.dataSize = this.i.readInt32();
               c.fileSize = this.i.readInt32();
               c.dataSize = c.fileSize;
               c.compressed = !1;
             } else c.data = this.i.read(c.dataSize);
             b.add(c);
           }
           return b;
         },
         __class__: De,
       };
       var Kg = function () {};
       r["io.newgrounds.ICallable"] = Kg;
       Kg.__name__ = "io.newgrounds.ICallable";
       Kg.__isInterface__ = !0;
       Kg.prototype = { __class__: Kg };
       var bd = function (b, a, c, d) {
         null == d && (d = !1);
         null == c && (c = !1);
         this._core = b;
         this.component = a;
         this._requireSession = c;
         this._isSecure = d && null != b.encryptionHandler;
       };
       r["io.newgrounds.Call"] = bd;
       bd.__name__ = "io.newgrounds.Call";
       bd.__interfaces__ = [Kg];
       bd.prototype = {
         addProperty: function (b, a) {
           null == this._properties && (this._properties = new e());
           this._properties.h[b] = a;
           return this;
         },
         addComponentParameter: function (b, a, c) {
           if (a == c) return this;
           null == this._parameters && (this._parameters = new e());
           this._parameters.h[b] = a;
           return this;
         },
         addDataHandler: function (b) {
           null == this._dataHandlers && (this._dataHandlers = new Lg());
           this._dataHandlers.add(b);
           return this;
         },
         addSuccessHandler: function (b) {
           null == this._successHandlers && (this._successHandlers = new Mg());
           this._successHandlers.add(b);
           return this;
         },
         addErrorHandler: function (b) {
           null == this._httpErrorHandlers && (this._httpErrorHandlers = new Lg());
           this._httpErrorHandlers.add(b);
           return this;
         },
         send: function () {
           var b = {};
           b.app_id = this._core.appId;
           b.call = {};
           b.call.component = this.component;
           this._core.debug && this.addProperty("debug", !0);
           if (null == this._properties || !Object.prototype.hasOwnProperty.call(this._properties.h, "session_id"))
             if (null != this._core.sessionId) this.addProperty("session_id", this._core.sessionId);
             else if (this._requireSession) {
               this._core.logError({ message: 'cannot send "' + this.component + '" call without a sessionId', code: null }, { fileName: "io/newgrounds/Call.hx", lineNumber: 137, className: "io.newgrounds.Call", methodName: "send" });
               return;
             }
           if (null != this._properties)
             for (var a = Object.keys(this._properties.h), c = a.length, d = 0; d < c; ) {
               var f = a[d++];
               b[f] = this._properties.h[f];
             }
           if (null != this._parameters) for (b.call.parameters = {}, a = Object.keys(this._parameters.h), c = a.length, d = 0; d < c; ) (f = a[d++]), (b.call.parameters[f] = this._parameters.h[f]);
           a = this._core;
           c = "Post  - " + JSON.stringify(b);
           a.verbose && a.log(c, { fileName: "io/newgrounds/Call.hx", lineNumber: 156, className: "io.newgrounds.Call", methodName: "send" });
           this._isSecure &&
             ((c = this._core.encryptionHandler(JSON.stringify(b.call))),
             (b.call = {}),
             (b.call.secure = c),
             (a = this._core),
             a.verbose && a.log("    secure - " + c, { fileName: "io/newgrounds/Call.hx", lineNumber: 164, className: "io.newgrounds.Call", methodName: "send" }));
           this._core.markCallPending_io_newgrounds_Call_T(this);
           Ng.send(this._core, JSON.stringify(b), B(this, this.onData), B(this, this.onHttpError), B(this, this.onStatus));
         },
         onData: function (b) {
           var a = this._core;
           a.verbose && a.log("Reply - " + b, { fileName: "io/newgrounds/Call.hx", lineNumber: 180, className: "io.newgrounds.Call", methodName: "onData" });
           if (null != this._dataHandlers || null != this._successHandlers)
             (b = fi._new(this._core, b)), null != this._dataHandlers && this._dataHandlers.dispatch(b), b.success && b.result.data.success && null != this._successHandlers && this._successHandlers.dispatch(), this.destroy();
         },
         onHttpError: function (b) {
           this._core.logError(b, { fileName: "io/newgrounds/Call.hx", lineNumber: 198, className: "io.newgrounds.Call", methodName: "onHttpError" });
           null != this._httpErrorHandlers && this._httpErrorHandlers.dispatch({ message: b, code: null });
         },
         onStatus: function (b) {
           null != this._statusHandlers && this._statusHandlers.dispatch(b);
         },
         destroy: function () {
           this._statusHandlers = this._httpErrorHandlers = this._successHandlers = this._dataHandlers = this._parameters = this._properties = this._core = null;
         },
         __class__: bd,
       };
       var Mg = function () {
         this._list = [];
         this._once = [];
       };
       r["io.newgrounds.utils.Dispatcher"] = Mg;
       Mg.__name__ = "io.newgrounds.utils.Dispatcher";
       Mg.prototype = {
         add: function (b, a) {
           null == a && (a = !1);
           if (-1 != this._list.indexOf(b)) return a || -1 == this._once.indexOf(b) || I.remove(this._once, b), !1;
           this._list.unshift(b);
           a && this._once.unshift(b);
           return !0;
         },
         dispatch: function () {
           for (var b = this._list.length - 1; 0 <= b; ) {
             var a = this._list[b];
             I.remove(this._once, a) && I.remove(this._list, a);
             a();
             --b;
           }
         },
         __class__: Mg,
       };
       var vc = function (b, a, c, d) {
         null == c && (c = !1);
         null == b && (b = "test");
         this._pendingCalls = [];
         this._queuedCalls = [];
         this.appId = b;
         this.set_sessionId(a);
         this.debug = c;
         this.calls = new uh(this);
         if (null != this.sessionId) {
           var f = B(this, this.checkInitialSession),
             e = B(this, this.initialSessionFail);
           this.calls.app
             .checkSession()
             .addDataHandler(function (a) {
               f(d, a);
             })
             .addErrorHandler(function (a) {
               e(d, a);
             })
             .send();
         }
       };
       r["io.newgrounds.NGLite"] = vc;
       vc.__name__ = "io.newgrounds.NGLite";
       vc.create = function (b, a, c) {
         null == b && (b = "test");
         vc.core = new vc(b, a, !1, c);
         vc.onCoreReady.dispatch();
       };
       vc.prototype = {
         markCallPending_io_newgrounds_Call_T: function (b) {
           var a = this;
           this._pendingCalls.push(b);
           b.addDataHandler(function (c) {
             a.onCallComplete(b);
           });
           b.addErrorHandler(function (c) {
             a.onCallComplete(b);
           });
         },
         set_sessionId: function (b) {
           return (this.sessionId = "" == b ? null : b);
         },
         checkInitialSession: function (b, a) {
           (a.success && a.result.data.success && !a.result.data.session.expired) || this.initialSessionFail(b, a.success ? a.result.data.error : a.error);
         },
         initialSessionFail: function (b, a) {
           this.set_sessionId(null);
           null != b && b(a);
         },
         onCallComplete: function (b) {
           I.remove(this._pendingCalls, b);
           this.checkQueue();
         },
         checkQueue: function () {
           0 == this._pendingCalls.length && 0 < this._queuedCalls.length && this._queuedCalls.shift().send();
         },
         log: function (b, a) {
           Ia.trace("[Newgrounds API] :: " + E.string(b), a);
         },
         logError: function (b, a) {
           this.log("Error: " + E.string(b), a);
         },
         initEncryption: function (b, a, c) {
           null == c && (c = "base64");
           null == a && (a = "rc4");
           if ("none" == a) this.encryptionHandler = null;
           else if ("rc4" == a) {
             var d = B(this, this.encryptRc4),
               f = c;
             this.encryptionHandler = function (a) {
               return d(b, f, a);
             };
           } else throw na.thrown("aes not yet implemented");
         },
         encryptRc4: function (b, a, c) {
           if ("hex" == a) throw na.thrown("hex format not yet implemented");
           b = "base64" == a ? ic.decode(b) : null;
           c = new vh(b).crypt(Ka.ofString(c));
           return "base64" == a ? ic.encode(c) : null;
         },
         __class__: vc,
       };
       var Zb = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.Component"] = Zb;
       Zb.__name__ = "io.newgrounds.components.Component";
       Zb.prototype = { __class__: Zb };
       var Og = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.AppComponent"] = Og;
       Og.__name__ = "io.newgrounds.components.AppComponent";
       Og.__super__ = Zb;
       Og.prototype = v(Zb.prototype, {
         startSession: function (b) {
           null == b && (b = !1);
           return new bd(this._core, "App.startSession").addComponentParameter("force", b, !1);
         },
         checkSession: function () {
           return new bd(this._core, "App.checkSession", !0);
         },
         __class__: Og,
       });
       var uh = function (b) {
         this._core = b;
         this.medal = new Pg(this._core);
         this.app = new Og(this._core);
         this.event = new Qg(this._core);
         this.scoreBoard = new Rg(this._core);
         this.loader = new Sg(this._core);
         this.gateway = new Tg(this._core);
       };
       r["io.newgrounds.components.ComponentList"] = uh;
       uh.__name__ = "io.newgrounds.components.ComponentList";
       uh.prototype = { __class__: uh };
       var Qg = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.EventComponent"] = Qg;
       Qg.__name__ = "io.newgrounds.components.EventComponent";
       Qg.__super__ = Zb;
       Qg.prototype = v(Zb.prototype, { __class__: Qg });
       var Tg = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.GatewayComponent"] = Tg;
       Tg.__name__ = "io.newgrounds.components.GatewayComponent";
       Tg.__super__ = Zb;
       Tg.prototype = v(Zb.prototype, {
         ping: function () {
           return new bd(this._core, "Gateway.ping");
         },
         __class__: Tg,
       });
       var Sg = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.LoaderComponent"] = Sg;
       Sg.__name__ = "io.newgrounds.components.LoaderComponent";
       Sg.__super__ = Zb;
       Sg.prototype = v(Zb.prototype, { __class__: Sg });
       var Pg = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.MedalComponent"] = Pg;
       Pg.__name__ = "io.newgrounds.components.MedalComponent";
       Pg.__super__ = Zb;
       Pg.prototype = v(Zb.prototype, {
         unlock: function (b) {
           return new bd(this._core, "Medal.unlock", !0, !0).addComponentParameter("id", b);
         },
         getList: function () {
           return new bd(this._core, "Medal.getList");
         },
         __class__: Pg,
       });
       var Rg = function (b) {
         this._core = b;
       };
       r["io.newgrounds.components.ScoreBoardComponent"] = Rg;
       Rg.__name__ = "io.newgrounds.components.ScoreBoardComponent";
       Rg.__super__ = Zb;
       Rg.prototype = v(Zb.prototype, { __class__: Rg });
       var vh = function (b) {
         this.index1 = this.index2 = 0;
         this.perm = new Ka(new ArrayBuffer(256));
         for (var a = 0; 256 > a; ) {
           var c = a++;
           this.perm.b[c] = c & 255;
         }
         var d = 0;
         for (a = 0; 256 > a; ) {
           c = a++;
           d = (d + this.perm.b[c] + b.b[c % b.length]) % 256;
           var f = this.perm.b[c];
           this.perm.b[c] = this.perm.b[d] & 255;
           this.perm.b[d] = f & 255;
         }
       };
       r["io.newgrounds.crypto.Rc4"] = vh;
       vh.__name__ = "io.newgrounds.crypto.Rc4";
       vh.prototype = {
         crypt: function (b) {
           for (var a = new Ka(new ArrayBuffer(b.length)), c = 0, d = b.length; c < d; ) {
             var f = c++;
             this.index1 = (this.index1 + 1) % 256;
             this.index2 = (this.index2 + this.perm.b[this.index1]) % 256;
             var e = this.index1,
               h = this.index2,
               g = this.perm.b[e];
             this.perm.b[e] = this.perm.b[h] & 255;
             this.perm.b[h] = g & 255;
             a.b[f] = (b.b[f] ^ this.perm.b[(this.perm.b[this.index1] + this.perm.b[this.index2]) % 256]) & 255;
           }
           return a;
         },
         __class__: vh,
       };
       var fi = {
           _new: function (b, a) {
             try {
               var c = JSON.parse(a);
             } catch (d) {
               c = JSON.parse('{"success":false,"error":{"message":"Error parsing reply:\'' + a + "' error:'" + E.string(na.caught(d).unwrap()) + '\'","code":0}}');
             }
             c.success
               ? c.result.data.success ||
                 ((a = c.result.data.error),
                 b.logError("" + c.result.component + " fail: " + (null == a ? "null" : (null != a.code ? "#" + a.code + " - " : "") + a.message), {
                   fileName: "io/newgrounds/objects/events/Response.hx",
                   lineNumber: 42,
                   className: "io.newgrounds.objects.events._Response.Response_Impl_",
                   methodName: "_new",
                 }))
               : ((a = c.error),
                 b.logError("Call unseccessful: " + (null == a ? "null" : (null != a.code ? "#" + a.code + " - " : "") + a.message), {
                   fileName: "io/newgrounds/objects/events/Response.hx",
                   lineNumber: 40,
                   className: "io.newgrounds.objects.events._Response.Response_Impl_",
                   methodName: "_new",
                 }));
             return c;
           },
         },
         Ng = function () {};
       r["io.newgrounds.utils.AsyncHttp"] = Ng;
       Ng.__name__ = "io.newgrounds.utils.AsyncHttp";
       Ng.send = function (b, a, c, d, f) {
         b.verbose && b.log("sending: " + a, { fileName: "io/newgrounds/utils/AsyncHttp.hx", lineNumber: 35, className: "io.newgrounds.utils.AsyncHttp", methodName: "send" });
         Ng.sendSync(b, a, c, d, f);
       };
       Ng.sendSync = function (b, a, c, d, f) {
         b = new Be("https://newgrounds.io/gateway_v3.php");
         b.setParameter("input", a);
         b.onData = c;
         b.onError = d;
         b.onStatus = f;
       };
       var Lg = function () {
         this._list = [];
         this._once = [];
       };
       r["io.newgrounds.utils.TypedDispatcher"] = Lg;
       Lg.__name__ = "io.newgrounds.utils.TypedDispatcher";
       Lg.prototype = {
         add: function (b, a) {
           null == a && (a = !1);
           if (-1 != this._list.indexOf(b)) return a || -1 == this._once.indexOf(b) || I.remove(this._once, b), !1;
           this._list.unshift(b);
           a && this._once.unshift(b);
           return !0;
         },
         dispatch: function (b) {
           for (var a = this._list.length - 1; 0 <= a; ) {
             var c = this._list[a];
             I.remove(this._once, c) && I.remove(this._list, c);
             c(b);
             --a;
           }
         },
         __class__: Lg,
       };
       var H = function () {};
       r["js.Boot"] = H;
       H.__name__ = "js.Boot";
       H.getClass = function (b) {
         if (null == b) return null;
         if (b instanceof Array) return Array;
         var a = b.__class__;
         if (null != a) return a;
         b = H.__nativeClassName(b);
         return null != b ? H.__resolveNativeClass(b) : null;
       };
       H.__string_rec = function (b, a) {
         if (null == b) return "null";
         if (5 <= a.length) return "<...>";
         var c = typeof b;
         "function" == c && (b.__name__ || b.__ename__) && (c = "object");
         switch (c) {
           case "function":
             return "<function>";
           case "object":
             if (b.__enum__) {
               var d = D[b.__enum__].__constructs__[b._hx_index];
               c = d._hx_name;
               if (d.__params__) {
                 a += "\t";
                 var f = [],
                   e = 0;
                 for (d = d.__params__; e < d.length; ) {
                   var h = d[e];
                   e += 1;
                   f.push(H.__string_rec(b[h], a));
                 }
                 return c + "(" + f.join(",") + ")";
               }
               return c;
             }
             if (b instanceof Array) {
               c = "[";
               a += "\t";
               f = 0;
               for (e = b.length; f < e; ) (d = f++), (c += (0 < d ? "," : "") + H.__string_rec(b[d], a));
               return c + "]";
             }
             try {
               f = b.toString;
             } catch (C) {
               return "???";
             }
             if (null != f && f != Object.toString && "function" == typeof f && ((c = b.toString()), "[object Object]" != c)) return c;
             c = "{\n";
             a += "\t";
             f = null != b.hasOwnProperty;
             e = null;
             for (e in b)
               (f && !b.hasOwnProperty(e)) || "prototype" == e || "__class__" == e || "__super__" == e || "__interfaces__" == e || "__properties__" == e || (2 != c.length && (c += ", \n"), (c += a + e + " : " + H.__string_rec(b[e], a)));
             a = a.substring(1);
             return c + ("\n" + a + "}");
           case "string":
             return b;
           default:
             return String(b);
         }
       };
       H.__interfLoop = function (b, a) {
         for (;;) {
           if (null == b) return !1;
           if (b == a) return !0;
           var c = b.__interfaces__;
           if (null != c)
             for (var d = 0, f = c.length; d < f; ) {
               var e = c[d++];
               if (e == a || H.__interfLoop(e, a)) return !0;
             }
           b = b.__super__;
         }
       };
       H.__instanceof = function (b, a) {
         if (null == a) return !1;
         switch (a) {
           case Array:
             return b instanceof Array;
           case gi:
             return "boolean" == typeof b;
           case hi:
             return null != b;
           case pg:
             return "number" == typeof b;
           case bi:
             return "number" == typeof b ? (b | 0) === b : !1;
           case String:
             return "string" == typeof b;
           default:
             if (null != b)
               if ("function" == typeof a) {
                 if (H.__downcastCheck(b, a)) return !0;
               } else {
                 if ("object" == typeof a && H.__isNativeObj(a) && b instanceof a) return !0;
               }
             else return !1;
             return (a == ci && null != b.__name__) || (a == di && null != b.__ename__) ? !0 : null != b.__enum__ ? D[b.__enum__] == a : !1;
         }
       };
       H.__downcastCheck = function (b, a) {
         return b instanceof a ? !0 : a.__isInterface__ ? H.__interfLoop(H.getClass(b), a) : !1;
       };
       H.__cast = function (b, a) {
         if (null == b || H.__instanceof(b, a)) return b;
         throw na.thrown("Cannot cast " + E.string(b) + " to " + E.string(a));
       };
       H.__nativeClassName = function (b) {
         b = H.__toStr.call(b).slice(8, -1);
         return "Object" == b || "Function" == b || "Math" == b || "JSON" == b ? null : b;
       };
       H.__isNativeObj = function (b) {
         return null != H.__nativeClassName(b);
       };
       H.__resolveNativeClass = function (b) {
         return L[b];
       };
       var Jd = function () {};
       r["js.Browser"] = Jd;
       Jd.__name__ = "js.Browser";
       Jd.get_supported = function () {
         return "undefined" != typeof window && "undefined" != typeof window.location ? "string" == typeof window.location.protocol : !1;
       };
       Jd.getLocalStorage = function () {
         try {
           var b = window.localStorage;
           b.getItem("");
           if (0 == b.length) {
             var a = "_hx_" + Math.random();
             b.setItem(a, a);
             b.removeItem(a);
           }
           return b;
         } catch (c) {
           return null;
         }
       };
       Jd.createXMLHttpRequest = function () {
         if ("undefined" != typeof XMLHttpRequest) return new XMLHttpRequest();
         if ("undefined" != typeof ActiveXObject) return new ActiveXObject("Microsoft.XMLHTTP");
         throw na.thrown("Unable to create XMLHttpRequest object.");
       };
       var Uh = function () {};
       r["js.lib._ArrayBuffer.ArrayBufferCompat"] = Uh;
       Uh.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
       Uh.sliceImpl = function (b, a) {
         b = new Uint8Array(this, b, null == a ? null : a - b);
         a = new Uint8Array(b.byteLength);
         a.set(b);
         return a.buffer;
       };
       var Ee = function (b, a) {
         this.playTimestamp = this.playDuration = 0;
         this.setOnFail = !1;
         this.pan = 0;
         this.loops = this.volume = 1;
         this.offset = this.duration = 0;
         this.loaded = !1;
         null == a && (a = md.SFX);
         this.tag = a;
         null == b ? new Ug() : ((this.source = b), this.source.onComplete.add(B(this, this.completeEvent)), (this.loaded = !0));
       };
       r["lemongine.Sound"] = Ee;
       Ee.__name__ = "lemongine.Sound";
       Ee.prototype = {
         fromBuffer: function (b) {
           this.buffer = b;
           this.loaded = !0;
           return this;
         },
         completeEvent: function () {
           this.onComplete();
         },
         play: function (b, a, c, d, f, e) {
           null == e && (e = !0);
           null == f && (f = 1);
           null == d && (d = 0);
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 1);
           var l = this;
           if (null != this.buffer && (null == this.source && (this.source = new Ug(this.buffer)), this.tag != md.SFX || 0 != m.Instance.firstInteraction)) {
             this.set_offset(c);
             this.set_duration(d);
             this.set_loops(f);
             this.set_volume(b);
             this.set_pan(a);
             try {
               e && this.source.stop(), this.source.play();
             } catch (C) {
               if (null != this.onFail) this.onFail();
             }
             null != this.source.__backend.parent.buffer.__srcHowl &&
               (null != this.onFail &&
                 0 == this.setOnFail &&
                 ((this.setOnFail = !0),
                 this.source.__backend.parent.buffer.__srcHowl.on("playerror", function () {
                   if (null != l.onFail) l.onFail();
                 })),
               this.source.__backend.parent.buffer.__srcHowl.stereo(a, this.source.__backend.id));
             this.playTimestamp = new Date().getTime() / 1e3;
             this.track();
             0 < d && 0 == f && (null != this.durationTimer && this.durationTimer.stop(), (this.durationTimer = ad.delay(B(this, this.stop), Math.floor(1e3 * d - 1e3 * this.playDuration))));
           }
         },
         stop: function () {
           null != this.source && (this.source.stop(), this.untrack(), null != this.durationTimer && this.durationTimer.stop());
         },
         set_offset: function (b) {
           isFinite(b) || (b = 0);
           this.offset = b;
           if (null == this.source) return b;
           this.source.offset = Math.floor(1e3 * b);
           return b;
         },
         set_duration: function (b) {
           isFinite(b) || (b = 0);
           var a = Math.floor(1e3 * b);
           0 >= b && (a = null);
           this.source.set_length(a);
           return (this.duration = b);
         },
         set_loops: function (b) {
           isFinite(b) || (b = 1);
           this.loops = b;
           if (null == this.source) return b;
           this.source.set_loops(b - 1);
           return b;
         },
         set_volume: function (b) {
           isFinite(b) || (b = 1);
           this.volume = b;
           if (null == this.source) return b;
           var a = b * ya.masterVolume * (m.Instance.enginePaused ? 0 : 1);
           switch (this.tag._hx_index) {
             case 0:
               a *= ya.sfxVolume;
               break;
             case 1:
               a *= ya.musicVolume;
               break;
             case 2:
               a *= ya.ambienceVolume;
           }
           this.source.set_gain(a);
           return b;
         },
         set_pan: function (b) {
           isFinite(b) || (b = 0);
           this.pan = b;
           if (null == this.source) return b;
           null != this.source.__backend.parent.buffer.__srcHowl && this.source.__backend.parent.buffer.__srcHowl.stereo(this.pan, this.source.__backend.id);
           return b;
         },
         track: function () {
           switch (this.tag._hx_index) {
             case 0:
               null == ya.sfxChannel.h.__keys__[this.__id__] && ya.sfxChannel.set(this, !0);
               break;
             case 1:
               null == ya.musicChannel.h.__keys__[this.__id__] && ya.musicChannel.set(this, !0);
               break;
             case 2:
               null == ya.ambienceChannel.h.__keys__[this.__id__] && ya.ambienceChannel.set(this, !0);
           }
         },
         untrack: function () {
           switch (this.tag._hx_index) {
             case 0:
               null != ya.sfxChannel.h.__keys__[this.__id__] && ya.sfxChannel.remove(this);
               break;
             case 1:
               null != ya.musicChannel.h.__keys__[this.__id__] && ya.musicChannel.remove(this);
               break;
             case 2:
               null != ya.ambienceChannel.h.__keys__[this.__id__] && ya.ambienceChannel.remove(this);
           }
         },
         __class__: Ee,
       };
       var md = (D["lemongine.AudioTag"] = {
         __ename__: "lemongine.AudioTag",
         __constructs__: null,
         SFX: { _hx_name: "SFX", _hx_index: 0, __enum__: "lemongine.AudioTag", toString: n },
         MUSIC: { _hx_name: "MUSIC", _hx_index: 1, __enum__: "lemongine.AudioTag", toString: n },
         AMBIENCE: { _hx_name: "AMBIENCE", _hx_index: 2, __enum__: "lemongine.AudioTag", toString: n },
       });
       md.__constructs__ = [md.SFX, md.MUSIC, md.AMBIENCE];
       var Ug = function (b, a, c, d) {
         null == d && (d = 0);
         null == a && (a = 0);
         this.onComplete = new lb();
         this.buffer = b;
         this.offset = a;
         this.__backend = new wh(this);
         null != c && 0 != c && this.set_length(c);
         this.set_loops(d);
         null != b && this.init();
       };
       r["lime.media.AudioSource"] = Ug;
       Ug.__name__ = "lime.media.AudioSource";
       Ug.prototype = {
         init: function () {
           this.__backend.init();
         },
         play: function () {
           this.__backend.play();
         },
         stop: function () {
           this.__backend.stop();
         },
         get_gain: function () {
           return this.__backend.getGain();
         },
         set_gain: function (b) {
           return this.__backend.setGain(b);
         },
         set_length: function (b) {
           return this.__backend.setLength(b);
         },
         set_loops: function (b) {
           return this.__backend.setLoops(b);
         },
         get_position: function () {
           return this.__backend.getPosition();
         },
         __class__: Ug,
       };
       var wh = function (b) {
         this.parent = b;
         this.id = -1;
         this.gain = 1;
         this.position = new xh();
       };
       r["lime._internal.backend.html5.HTML5AudioSource"] = wh;
       wh.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
       wh.prototype = {
         init: function () {},
         play: function () {
           if (!this.playing && null != this.parent.buffer && null != this.parent.buffer.__srcHowl) {
             this.playing = !0;
             var b = this.getCurrentTime();
             this.completed = !1;
             var a = this.parent.buffer.__srcHowl._volume;
             this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
             this.id = this.parent.buffer.__srcHowl.play();
             this.parent.buffer.__srcHowl._volume = a;
             this.setPosition(this.parent.get_position());
             this.parent.buffer.__srcHowl.on("end", B(this, this.howl_onEnd), this.id);
             this.setCurrentTime(b);
           }
         },
         stop: function () {
           this.playing = !1;
           null != this.parent.buffer && null != this.parent.buffer.__srcHowl && (this.parent.buffer.__srcHowl.stop(this.id), this.parent.buffer.__srcHowl.off("end", B(this, this.howl_onEnd), this.id));
         },
         howl_onEnd: function () {
           this.playing = !1;
           0 < this.loops
             ? (this.loops--, this.stop(), this.play())
             : (null != this.parent.buffer && null != this.parent.buffer.__srcHowl && (this.parent.buffer.__srcHowl.stop(this.id), this.parent.buffer.__srcHowl.off("end", B(this, this.howl_onEnd), this.id)),
               (this.completed = !0),
               this.parent.onComplete.dispatch());
         },
         getCurrentTime: function () {
           if (-1 == this.id) return 0;
           if (this.completed) return this.getLength();
           if (null != this.parent.buffer && null != this.parent.buffer.__srcHowl) {
             var b = ((1e3 * this.parent.buffer.__srcHowl.seek(this.id)) | 0) - this.parent.offset;
             return 0 > b ? 0 : b;
           }
           return 0;
         },
         setCurrentTime: function (b) {
           if (null != this.parent.buffer && null != this.parent.buffer.__srcHowl) {
             var a = (b + this.parent.offset) / 1e3;
             0 > a && (a = 0);
             this.parent.buffer.__srcHowl.seek(a, this.id);
           }
           return b;
         },
         getGain: function () {
           return this.gain;
         },
         setGain: function (b) {
           null != this.parent.buffer && null != this.parent.buffer.__srcHowl && -1 != this.id && this.parent.buffer.__srcHowl.volume(b, this.id);
           return (this.gain = b);
         },
         getLength: function () {
           return 0 != this.length ? this.length : null != this.parent.buffer && null != this.parent.buffer.__srcHowl ? (1e3 * this.parent.buffer.__srcHowl.duration()) | 0 : 0;
         },
         setLength: function (b) {
           return (this.length = b);
         },
         setLoops: function (b) {
           return (this.loops = b);
         },
         getPosition: function () {
           return this.position;
         },
         setPosition: function (b) {
           this.position.x = b.x;
           this.position.y = b.y;
           this.position.z = b.z;
           this.position.w = b.w;
           null != this.parent.buffer.__srcHowl && null != this.parent.buffer.__srcHowl.pos && this.parent.buffer.__srcHowl.pos(this.position.x, this.position.y, this.position.z, this.id);
           return this.position;
         },
         __class__: wh,
       };
       var xh = function (b, a, c, d) {
         null == d && (d = 0);
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.w = d;
         this.x = b;
         this.y = a;
         this.z = c;
       };
       r["lime.math.Vector4"] = xh;
       xh.__name__ = "lime.math.Vector4";
       xh.prototype = { __class__: xh };
       var P = function () {};
       r["lemongine.AssetManager"] = P;
       P.__name__ = "lemongine.AssetManager";
       P.loadImage = function (b, a) {
         null == a && (a = b);
         var c = P.images,
           d = new sa();
         c.h[a] = d;
         P.numImages++;
         qa.loadImage(b)
           .onError(function (b) {
             Ia.trace("Warning! Image '" + a + "' failed to load (" + E.string(b) + ").", { fileName: "lemongine/AssetManager.hx", lineNumber: 33, className: "lemongine.AssetManager", methodName: "loadImage" });
           })
           .onComplete(function (b) {
             P.images.h[a].fromData(b);
             P.numImagesLoaded++;
           });
         return P.images.h[a];
       };
       P.getImage = function (b) {
         return Object.prototype.hasOwnProperty.call(P.images.h, b) ? P.images.h[b] : null;
       };
       P.loadSound = function (b, a, c, d) {
         null == d && (d = 1);
         null == a && (a = b);
         if (1 < d)
           for (var f = 0, e = d; f < e; ) {
             var h = P.sounds,
               g = new Ee(null, c);
             h.h[a + "_" + f++] = g;
           }
         else (h = P.sounds), (g = new Ee(null, c)), (h.h[a] = g);
         P.numSounds++;
         qa.loadAudioBuffer(b)
           .onError(function (b) {
             Ia.trace("Warning! Sound '" + a + "' failed to load.", { fileName: "lemongine/AssetManager.hx", lineNumber: 94, className: "lemongine.AssetManager", methodName: "loadSound" });
             if (1 < d) {
               b = 0;
               for (var c = d; b < c; ) P.sounds.h[a + "_" + b++].fromBuffer(new mb());
             } else P.sounds.h[a].fromBuffer(new mb());
           })
           .onComplete(function (b) {
             if (null == b.get_src() && null == b.data) Ia.trace("Warning! Sound '" + a + "' failed to load.", { fileName: "lemongine/AssetManager.hx", lineNumber: 103, className: "lemongine.AssetManager", methodName: "loadSound" });
             else {
               if (1 < d) for (var c = 0, f = d; c < f; ) P.sounds.h[a + "_" + c++].fromBuffer(b);
               else P.sounds.h[a].fromBuffer(b);
               P.numSoundsLoaded++;
             }
           });
         return 1 < d ? P.sounds.h[a + "_0"] : P.sounds.h[a];
       };
       P.getSound = function (b) {
         return Object.prototype.hasOwnProperty.call(P.sounds.h, b) ? P.sounds.h[b] : P.blankSound;
       };
       var ya = function () {};
       r["lemongine.Audio"] = ya;
       ya.__name__ = "lemongine.Audio";
       ya.stopAll = function (b) {
         if (null != b)
           switch (b._hx_index) {
             case 0:
               for (b = ya.sfxChannel.keys(); b.hasNext(); ) b.next().stop();
               break;
             case 1:
               for (b = ya.musicChannel.keys(); b.hasNext(); ) b.next().stop();
               break;
             case 2:
               for (b = ya.ambienceChannel.keys(); b.hasNext(); ) b.next().stop();
           }
         else {
           for (b = ya.musicChannel.keys(); b.hasNext(); ) b.next().stop();
           for (b = ya.ambienceChannel.keys(); b.hasNext(); ) b.next().stop();
           for (b = ya.sfxChannel.keys(); b.hasNext(); ) b.next().stop();
         }
       };
       ya.updateVolumes = function () {
         for (var b = ya.sfxChannel.keys(); b.hasNext(); ) {
           var a = b.next();
           a.set_volume(a.volume);
         }
         for (b = ya.musicChannel.keys(); b.hasNext(); ) (a = b.next()), a.set_volume(a.volume);
         for (b = ya.ambienceChannel.keys(); b.hasNext(); ) (a = b.next()), a.set_volume(a.volume);
       };
       ya.set_masterVolume = function (b) {
         if (b == ya.masterVolume) return b;
         ya.masterVolume = b;
         for (var a = ya.sfxChannel.keys(); a.hasNext(); ) {
           var c = a.next();
           c.set_volume(c.volume);
         }
         for (a = ya.musicChannel.keys(); a.hasNext(); ) (c = a.next()), c.set_volume(c.volume);
         for (a = ya.ambienceChannel.keys(); a.hasNext(); ) (c = a.next()), c.set_volume(c.volume);
         return b;
       };
       ya.set_musicVolume = function (b) {
         if (b == ya.musicVolume) return b;
         ya.musicVolume = b;
         for (var a = ya.musicChannel.keys(); a.hasNext(); ) {
           var c = a.next();
           c.set_volume(c.volume);
         }
         return b;
       };
       var Uf = function (b, a, c, d) {
         null == d && (d = 16);
         null == c && (c = "ABCDEFGHIJKLMNOPQRSTUVWXYZ      abcdefghijklmnopqrstuvwxyz      0123456789      ~!@#$%^&*()_-+=[]{}|\\;:'\",.<>?/`");
         null == a && (a = "3343443343442333333432244455555544444444664524444544442444555555444344343355555516322443455344455446456646644345");
         this.width = (b.data.width / 8) | 0;
         this.height = (b.data.height / d) | 0;
         this.defaultKerning = this.width;
         this.glyphs = new e();
         this.image = b;
         d = b = 0;
         for (var f, l, h = 0, g = c.length; h < g; )
           (l = h++),
             (f = c.charAt(l)),
             "\n" == f
               ? (++d, (b = 0))
               : (8 <= b && (++d, (b = 0)),
                 Object.prototype.hasOwnProperty.call(this.glyphs.h, f) || ((l = E.parseInt(a.charAt(l))), (this.glyphs.h[f] = new yh(f, (this.width * b) | 0, (this.height * d) | 0, 1, this.defaultKerning - l))),
                 ++b);
       };
       r["lemongine.BitmapFont"] = Uf;
       Uf.__name__ = "lemongine.BitmapFont";
       Uf.prototype = {
         cleanText: function (b) {
           for (var a = "", c = 0, d = b.length; c < d; ) {
             var f = c++;
             if (Object.prototype.hasOwnProperty.call(this.glyphs.h, b.charAt(f)) || "\n" == b.charAt(f) || "\r" == b.charAt(f)) a += b.charAt(f);
           }
           return a;
         },
         __class__: Uf,
       };
       var Q = (D["lemongine.TextAlignment"] = {
         __ename__: "lemongine.TextAlignment",
         __constructs__: null,
         LEFT: { _hx_name: "LEFT", _hx_index: 0, __enum__: "lemongine.TextAlignment", toString: n },
         CENTER: { _hx_name: "CENTER", _hx_index: 1, __enum__: "lemongine.TextAlignment", toString: n },
         RIGHT: { _hx_name: "RIGHT", _hx_index: 2, __enum__: "lemongine.TextAlignment", toString: n },
       });
       Q.__constructs__ = [Q.LEFT, Q.CENTER, Q.RIGHT];
       var nc = function (b, a, c, d) {
         null == d && (d = Q.LEFT);
         null == a && (a = "");
         this.lines = [];
         this.maxLineWidth = -1;
         this.calculatedWidth = this.calculatedHeight = 0;
         this.glyphAtQuad = new Ma();
         this.charToQuad = [];
         da.call(this, b.image, La.NORMAL, gc.getShader());
         this.useColorUniforms = !0;
         this.set_mask(null);
         this.font = b;
         this.text = a;
         this.setColor(c);
         this.textAlignment = d;
         this.create();
         this.isTransparent = !0;
       };
       r["lemongine.BitmapFontEntity"] = nc;
       nc.__name__ = "lemongine.BitmapFontEntity";
       nc.__super__ = da;
       nc.prototype = v(da.prototype, {
         setText: function (b) {
           this.text != b && ((this.text = b), this.create());
         },
         setWordWrap: function (b) {
           null == b && (b = -1);
           this.maxLineWidth = b;
           this.create();
         },
         insertText: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = -1);
           -1 == a && (a = this.text.length);
           -1 == c && (c = this.text.length - a);
           b = I.substr(this.text, 0, a) + b + I.substr(this.text, a + c, null);
           this.text != b && (a >= b.length ? ((this.text = b), this.create(a)) : 0 > a ? ((this.text = b), this.create()) : ((this.text = b), this.create(a), this.resetUnusedQuads()));
         },
         indexAtPoint: function (b) {
           if (0 == this.numQuads) return 0;
           var a = w.clamp(-1, this.lines.length, Math.floor((b.y - this.characterRectangle(0).y) / this.font.height)) | 0;
           if (-1 == a) return 0;
           if (a == this.lines.length) return this.text.length;
           var c = this.lines[a];
           a = (null != this.lines[a + 1] ? this.lines[a + 1] : this.text.length) - 1;
           var d = (this.characterRectangle(c).x + this.characterRectangle(c).width / 2) | 0;
           if (b.x < d) return c;
           d = (this.characterRectangle(a).x + this.characterRectangle(a).width / 2) | 0;
           if (b.x >= d) return " " == this.text.charAt(a) || "\n" == this.text.charAt(a) ? a : a + 1;
           for (;;) {
             d = Math.ceil((c + a) / 2);
             var f = (this.characterRectangle(d).x + this.characterRectangle(d).width / 2) | 0;
             b.x >= f ? (c = d) : ((a = d - 1), this.characterRectangle(a), this.characterRectangle(a));
             if (!(c < a)) break;
           }
           return c + 1;
         },
         characterRectangle: function (b) {
           if (0 == this.numQuads) {
             if (0 == b) return new t(0, 0, 0, this.font.height);
             var a = 0;
             for (b >= this.text.length && (b = this.text.length - 1); 0 <= b - a && "\n" == this.text.charAt(b - a); ) ++a;
             return new t(0, this.font.height * a, 0, this.font.height);
           }
           if (b >= this.text.length) {
             b = this.text.length - 1;
             for (a = 0; 0 <= b - a && "\n" == this.text.charAt(b - a); ) ++a;
             var c = Math.min(this.numQuads - 1, this.charToQuad[b]) | 0;
             if (0 < a) return new t(0, (this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1) + 1] | 0) + this.font.height * a, 0, this.font.height);
             a = this.font.glyphs.h[this.glyphAtQuad.h[c]];
             return new t((this.mesh.vertices.getValue()[18 * c] + a.frontOffset + a.backOffset - 1) | 0, this.mesh.vertices.getValue()[18 * c + 1] | 0, 0, this.font.height);
           }
           if ("\n" == this.text.charAt(b)) {
             for (a = 1; 0 <= b - a && "\n" == this.text.charAt(b - a); ) ++a;
             if (1 < a) return new t(0, (this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1) + 1] | 0) + this.font.height * (a - 1), 0, this.font.height);
             a = this.font.glyphs.h[this.glyphAtQuad.h[Math.max(0, this.charToQuad[b] - 1) | 0]];
             return new t((this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1)] + a.frontOffset + a.backOffset - 1) | 0, this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1) + 1] | 0, 0, this.font.height);
           }
           if (this.charToQuad[b] >= this.numQuads)
             return (
               (a = this.font.glyphs.h[this.glyphAtQuad.h[this.charToQuad[b] - 1]]),
               new t((this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1)] + a.frontOffset + a.backOffset - 1) | 0, this.mesh.vertices.getValue()[18 * (this.charToQuad[b] - 1) + 1] | 0, 0, this.font.height)
             );
           c = this.font.glyphs.h[this.glyphAtQuad.h[this.charToQuad[b]]];
           return new t(this.mesh.vertices.getValue()[18 * this.charToQuad[b]] | 0, this.mesh.vertices.getValue()[18 * this.charToQuad[b] + 1] | 0, c.backOffset, this.font.height);
         },
         previousWordBoundary: function (b) {
           b >= this.text.length && (b = this.text.length - 1);
           --b;
           if (0 >= b) return 0;
           for (;;) {
             var a = I.substr(this.text, b - 2, 2);
             if (new Ra("(?!^)\\b(?!$)", "").match(a)) return b - 1;
             --b;
             if (!(0 < b)) break;
           }
           return b;
         },
         nextWordBoundary: function (b) {
           if (b >= this.text.length) return this.text.length;
           if (0 > b) return 0;
           for (;;) {
             var a = I.substr(this.text, b + 1, 2);
             if (new Ra("(?!^)\\b(?!$)", "").match(a)) return b + 2;
             ++b;
             if (!(b <= this.text.length)) break;
           }
           return b;
         },
         getLineOfChar: function (b) {
           return b > this.text.length - 1 && "\n" == this.text.charAt(this.text.length - 1) ? this.lines.length : w.clamp(0, this.lines.length - 1, Math.floor(this.characterRectangle(b).y / this.font.height)) | 0;
         },
         getPreviousNewline: function (b) {
           return -1 == this.text.lastIndexOf("\n", b) ? 0 : b < this.text.length - 1 && "\n" == this.text.charAt(this.text.length - 1) ? this.text.length : this.text.lastIndexOf("\n", b);
         },
         getNextNewline: function (b) {
           return -1 == this.text.indexOf("\n", b) ? this.text.length : this.text.indexOf("\n", b);
         },
         getCharAtLine: function (b) {
           return b > this.lines.length - 1 ? this.text.length : this.lines[w.clamp(0, this.lines.length - 1, b) | 0];
         },
         recalculateLines: function () {
           this.lines = [0];
           var b = this.text.split("\r").join("\n").split("\n");
           if (0 >= this.maxLineWidth) for (var a = 0; a < b.length; ) this.lines.push(this.lines[this.lines.length - 1] + (b[a++].length + 1));
           else {
             var c = 0;
             a = 0;
             for (var d = b.length; a < d; ) {
               var f = a++,
                 e = 0;
               for (f != b.length - 1 && (b[f] += "\n"); e < b[f].length; ) {
                 for (var h = 0, g = 0; ; ) {
                   var m = this.text.charAt(c + h);
                   Object.prototype.hasOwnProperty.call(this.font.glyphs.h, m) && (g += this.font.glyphs.h[m].backOffset);
                   if ((g > this.maxLineWidth && 0 < h) || e + h >= b[f].length) break;
                   ++h;
                 }
                 if (e + h < b[f].length)
                   for (g = h, m = !1; 1 < g; ) {
                     if (" " != I.substr(b[f], e + g, 1)) m = !0;
                     else if (m) {
                       h = g + 1;
                       break;
                     }
                     --g;
                   }
                 e += h;
                 c += h;
                 this.lines.push(c);
               }
             }
           }
           this.lines.pop();
         },
         create: function (b) {
           null == b && (b = 0);
           -1 < this.maxLineWidth && (b = 0);
           var a,
             c = 0,
             d = 0,
             f = new M(),
             e = new h(),
             k = new h();
           var g = !0;
           this.recalculateLines();
           if (1 < b && this.textAlignment == Q.LEFT && 1 >= this.lines.length) {
             b >= this.text.length - 1 && (b = this.text.length - 2);
             var m = this.font.glyphs.h[this.glyphAtQuad.h[this.charToQuad[b] - 1]];
             if (null != m) {
               g = !1;
               c = (this.mesh.vertices.getValue()[18 * this.charToQuad[b - 1]] + m.frontOffset + m.backOffset) | 0;
               d = this.mesh.vertices.getValue()[18 * this.charToQuad[b - 1] + 1] | 0;
               this.calculatedWidth = c;
               m = this.charToQuad[b];
               for (var n = this.numQuads; m < n; ) {
                 var p = m++;
                 this.removeQuad(p);
                 this.glyphAtQuad.remove(p);
               }
             }
           }
           g && ((b = 0), this.clearPool(), (this.glyphAtQuad.h = {}), (this.calculatedWidth = 0));
           this.charToQuad.splice(b, this.charToQuad.length - b);
           m = 0;
           for (n = this.lines.length; m < n; ) {
             d = m++;
             var q = this.lines[d];
             g = this.lines.length > d + 1 ? this.lines[d + 1] : this.text.length;
             0 < b ? (q = b) : (c = 0);
             d *= this.font.height;
             p = a = 0;
             if (this.textAlignment == Q.CENTER && 0 == c) {
               for (p = g - 1; (p >= q && "\n" == this.text.charAt(p)) || " " == this.text.charAt(p); ) --p;
               for (p < q && (p = g - 1); p >= q; ) {
                 var t = this.text.charAt(p);
                 Object.prototype.hasOwnProperty.call(this.font.glyphs.h, t) && (a += this.font.glyphs.h[t].backOffset);
                 --p;
               }
               p = 0 - Math.floor(a / 2);
             }
             for (t = g; q < t; ) {
               var r = q++;
               g = this.text.charAt(r);
               this.charToQuad[r] = this.numQuads;
               Object.prototype.hasOwnProperty.call(this.font.glyphs.h, g) &&
                 ((a = this.font.glyphs.h[g]),
                 this.updateQuad(this.charToQuad[r], f.set(c - a.frontOffset + p, d), e.set(a.x, a.y), k.set(this.font.width - 0.01, this.font.height - 0.01)),
                 (this.glyphAtQuad.h[this.charToQuad[r]] = g),
                 (c += a.backOffset));
             }
             this.calculatedWidth = Math.max(this.calculatedWidth, c);
           }
           this.resetUnusedQuads();
           this.calculatedWidth = Math.max(this.calculatedWidth, c);
           this.calculatedHeight = d + this.font.height;
         },
         set_mask: function (b) {
           null == b || -1 == b.height ? ((this.mask = null), this.setUniform("mask", [-1, -1, -1, -1])) : ((this.mask = b), this.setUniform("mask", [b.x, b.y, b.width, b.height]));
           return this.mask;
         },
         __class__: nc,
       });
       var fc = (D["lemongine.CameraType"] = {
         __ename__: "lemongine.CameraType",
         __constructs__: null,
         PERSPECTIVE: { _hx_name: "PERSPECTIVE", _hx_index: 0, __enum__: "lemongine.CameraType", toString: n },
         ORTHOGRAPHIC: { _hx_name: "ORTHOGRAPHIC", _hx_index: 1, __enum__: "lemongine.CameraType", toString: n },
       });
       fc.__constructs__ = [fc.PERSPECTIVE, fc.ORTHOGRAPHIC];
       var Ld = function (b) {
         this.projectionMatrix = new T();
         this.cameraType = fc.PERSPECTIVE;
         this.aspect = this.orthographicScale = 1;
         this.fovAngle = 90;
         this.clipFar = 1e5;
         this.clipNear = 0.1;
         this.transform = new T();
         this.rotation = new M(0, 0, 0);
         this.position = new M(0, 0, 0);
         switch (b._hx_index) {
           case 0:
             this.setPerspectiveMatrix();
             break;
           case 1:
             this.setOrthographicMatrix();
         }
       };
       r["lemongine.Camera"] = Ld;
       Ld.__name__ = "lemongine.Camera";
       Ld.prototype = {
         resize: function (b, a) {
           if (this.cameraType == fc.PERSPECTIVE) this.aspect != b / a && ((this.aspect = b / a), this.setPerspectiveMatrix(this.fovAngle));
           else if (this.aspect != b / a || this.orthographicScale != a) (this.aspect = b / a), this.setOrthographicMatrix(a);
         },
         setPerspectiveMatrix: function (b) {
           null == b && (b = 90);
           this.fovAngle = b;
           this.cameraType = fc.PERSPECTIVE;
           this.projectionMatrix.setPerspectiveMatrix(b, this.aspect, this.clipNear, this.clipFar);
         },
         setOrthographicMatrix: function (b) {
           null == b && (b = 1);
           this.cameraType = fc.ORTHOGRAPHIC;
           this.orthographicScale = b;
           this.projectionMatrix.setOrthographicMatrix(b, this.aspect, this.clipNear, this.clipFar);
         },
         setPosition: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.position.set(b, a, c);
         },
         setRotation: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.rotation.set(b, a, c);
         },
         lookAt: function (b, a) {
           null == a && (a = 0);
           b = b.clone().subtract(this.position).normalize();
           this.rotation.x = Math.asin(-b.y);
           this.rotation.y = Math.atan2(b.x, -b.z);
           this.rotation.z = a;
         },
         updateTransform: function () {
           this.transform.reset().translate(-this.position.x, -this.position.y, -this.position.z).rotate(-this.rotation.y, new M(0, 1, 0)).rotate(-this.rotation.x, new M(1, 0, 0)).rotate(-this.rotation.z, new M(0, 0, 1));
         },
         getTransformValues: function () {
           this.updateTransform();
           return this.transform.values.slice();
         },
         __class__: Ld,
       };
       var F = function (b) {
         null == b && (b = 0);
         this.hexUpdated = !1;
         this.fromHex(b);
       };
       r["lemongine.Color"] = F;
       F.__name__ = "lemongine.Color";
       F.ARBGtoRGBA = function (b) {
         return (b << 8) + ((b >>> 24) & 255);
       };
       F.prototype = {
         fromHex: function (b) {
           this.set_a(b >>> 24);
           this.set_r(G.toFloat(b >>> 16) % G.toFloat(256) | 0);
           this.set_g(G.toFloat(b >>> 8) % G.toFloat(256) | 0);
           this.set_b(G.toFloat(b) % G.toFloat(256) | 0);
           this._hex = b;
           this.hexUpdated = !0;
           return this;
         },
         fromRGB: function (b, a, c, d) {
           null == d && (d = 1);
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.set_a((255 * d) | 0);
           this.set_r((255 * b) | 0);
           this.set_g((255 * a) | 0);
           this.set_b((255 * c) | 0);
           this.setHex();
           return this;
         },
         toFloatArray: function () {
           return [G.toFloat(this.r) / G.toFloat(255), G.toFloat(this.g) / G.toFloat(255), G.toFloat(this.b) / G.toFloat(255), G.toFloat(this.a) / G.toFloat(255)];
         },
         setHex: function () {
           this.hexUpdated || ((this.hexUpdated = !0), (this._hex = 16777216 * this.a + 65536 * this.r + 256 * this.g + this.b));
         },
         getHexString: function (b) {
           null == b && (b = !1);
           return b ? Sa.hex(16777216 * this.a + 65536 * this.r + 256 * this.g + this.b, 8) : Sa.hex(65536 * this.r + 256 * this.g + this.b, 6);
         },
         equals: function (b) {
           return null == b ? !1 : b.r == this.r && b.g == this.g && b.b == this.b ? b.a == this.a : !1;
         },
         set_r: function (b) {
           this.r = b;
           this.hexUpdated = !1;
           return b;
         },
         set_g: function (b) {
           this.g = b;
           this.hexUpdated = !1;
           return b;
         },
         set_b: function (b) {
           this.b = b;
           this.hexUpdated = !1;
           return b;
         },
         set_a: function (b) {
           this.a = b;
           this.hexUpdated = !1;
           return b;
         },
         set_hex: function (b) {
           this.fromHex(b);
           return this._hex;
         },
         __class__: F,
       };
       var gb = function () {};
       r["lemongine.File"] = gb;
       gb.__name__ = "lemongine.File";
       gb.openBytes = function (b, a, c) {
         null == gb.inputElement && ((gb.inputElement = window.document.createElement("input")), gb.inputElement.setAttribute("type", "file"));
         b = b.join(",.");
         0 < b.length && (b = "." + b);
         gb.inputElement.setAttribute("accept", b);
         gb.inputElement.onchange = function () {
           gb.loadFile(gb.inputElement.files[0], a, c);
         };
         gb.inputElement.click();
       };
       gb.open = function (b, a, c) {
         gb.openBytes(
           b,
           function (b, c) {
             null == b && (b = new Ka(new ArrayBuffer(0)));
             a(b.toString(), c);
           },
           c
         );
       };
       gb.loadFile = function (b, a, c) {
         var d = new FileReader();
         d.onload = function (c) {
           var d = c.target.result;
           c = c.target.result.indexOf(",") + 1;
           a(Ka.ofData(ic.decode(d.substr(c)).b.bufferValue), b.name);
           try {
             (gb.inputElement.value = ""), "" != gb.inputElement.value && ((gb.inputElement.type = "text"), (gb.inputElement.type = "file"));
           } catch (k) {}
         };
         d.onerror = d.onabort = function (a) {
           null != c && c();
         };
         d.readAsDataURL(b);
       };
       gb.saveString = function (b, a, c, d) {
         var f = new Vg();
         null != d && f.onCancel.add(d);
         d = function (a) {
           null != c && c();
         };
         f.onSave.add(d);
         d = null != a ? I.substr(a, a.lastIndexOf(".") + 1, null) : null;
         f.save(Ka.ofString(b), d, a);
       };
       gb.saveBytes = function (b, a, c, d) {
         var f = new Vg();
         null != d && f.onCancel.add(d);
         f.onSave.add(function (a) {
           null != c && c();
         });
         f.save(b, null != a ? I.substr(a, a.lastIndexOf(".") + 1, null) : null, a);
       };
       var ba = function () {};
       r["lemongine.Geom"] = ba;
       ba.__name__ = "lemongine.Geom";
       ba.createQuad = function (b, a, c, d) {
         null == d && (d = !1);
         null == c && (c = !1);
         null == a && (a = 1);
         null == b && (b = 1);
         b /= 2;
         a /= 2;
         c = c
           ? new Ed([-b, -a, 0, -b, a, 0, b, -a, 0, b, -a, 0, -b, a, 0, b, a, 0, b, -a, 0, b, a, 0, -b, -a, 0, -b, -a, 0, b, a, 0, -b, a, 0], null, [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1])
           : new Ed([-b, -a, 0, -b, a, 0, b, -a, 0, b, -a, 0, -b, a, 0, b, a, 0], null, [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]);
         c.generateNormals();
         return d ? c.toIndexed() : c;
       };
       ba.createQuadBackface = function (b, a, c) {
         null == c && (c = !1);
         null == a && (a = 1);
         null == b && (b = 1);
         b /= 2;
         a /= 2;
         a = new Ed([-b, -a, 0, b, -a, 0, -b, a, 0, b, -a, 0, b, a, 0, -b, a, 0], null, [0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]);
         a.generateNormals();
         return c ? a.toIndexed() : a;
       };
       ba.quadMatrixHelper = function (b, a, c) {
         null == c && (c = !1);
         var d = a.apply(new M(b.x, b.y), !0),
           f = a.apply(new M(b.x + b.width, b.y), !0),
           e = a.apply(new M(b.x, b.y + b.height), !0);
         b = a.apply(new M(b.x + b.width, b.y + b.height), !0);
         return c ? [f.x, f.y, 0, b.x, b.y, 0, d.x, d.y, 0, d.x, d.y, 0, b.x, b.y, 0, e.x, e.y, 0] : [d.x, d.y, 0, e.x, e.y, 0, f.x, f.y, 0, f.x, f.y, 0, e.x, e.y, 0, b.x, b.y, 0];
       };
       var O = function () {};
       r["lemongine.Helpers"] = O;
       O.__name__ = "lemongine.Helpers";
       O.getQualifiedClassName = function (b) {
         return b instanceof Array ? "Array" : "string" == typeof b ? "String" : "number" == typeof b && (b | 0) === b ? "int" : "number" == typeof b ? "Number" : "boolean" == typeof b ? "Boolean" : "Object";
       };
       O.tripleEqual = function (b, a) {
         return b != a ? !1 : null != H.getClass(b) ? H.getClass(b) == H.getClass(a) : Za.typeof(b) == Za.typeof(a);
       };
       O.getTimer = function () {
         return Math.floor((new Date().getTime() / 1e3) * 1e3);
       };
       O.clone = function (b) {
         var a = new e();
         a.h.value = b;
         return O.mappifyObjectsInMap(JSON.parse(JSON.stringify(O.objectifyObjectsInMap(a)))).h.value;
       };
       O.trim = function (b) {
         return null == b ? "" : Sa.trim(b);
       };
       O.restrict = function (b, a) {
         return new Ra("[^" + a + "]", "g").split(b).join("");
       };
       O.mappifyObjectsInMap = function (b) {
         for (var a = new e(), c = 0, d = Z.fields(b); c < d.length; ) {
           var f = d[c];
           ++c;
           if (null == Z.field(b, f)) a.h[f] = null;
           else if ("Object" == O.getQualifiedClassName(Z.field(b, f))) {
             var l = O.mappifyObjectsInMap(Z.field(b, f));
             a.h[f] = l;
           } else "Array" == O.getQualifiedClassName(Z.field(b, f)) ? ((l = O.mappifyObjectsInArray(Z.field(b, f))), (a.h[f] = l)) : (a.h[f] = Z.field(b, f));
         }
         return a;
       };
       O.mappifyObjectsInArray = function (b) {
         for (var a = [], c = 0, d = b.length; c < d; ) {
           var f = c++;
           null == b[f] ? (a[f] = null) : "Object" == O.getQualifiedClassName(b[f]) ? (a[f] = O.mappifyObjectsInMap(b[f])) : "Array" == O.getQualifiedClassName(b[f]) ? (a[f] = O.mappifyObjectsInArray(b[f])) : (a[f] = b[f]);
         }
         return a;
       };
       O.objectifyObjectsInMap = function (b) {
         for (var a = {}, c = Object.keys(b.h), d = c.length, f = 0; f < d; ) {
           var e = c[f++];
           null == b.h[e] ? (a[e] = null) : "Object" == O.getQualifiedClassName(b.h[e]) ? (a[e] = O.objectifyObjectsInMap(b.h[e])) : "Array" == O.getQualifiedClassName(b.h[e]) ? (a[e] = O.objectifyObjectsInArray(b.h[e])) : (a[e] = b.h[e]);
         }
         return a;
       };
       O.objectifyObjectsInArray = function (b) {
         for (var a = [], c = 0, d = b.length; c < d; ) {
           var f = c++;
           null == b[f] ? (a[f] = null) : "Object" == O.getQualifiedClassName(b[f]) ? (a[f] = O.objectifyObjectsInMap(b[f])) : "Array" == O.getQualifiedClassName(b[f]) ? (a[f] = O.objectifyObjectsInArray(b[f])) : (a[f] = b[f]);
         }
         return a;
       };
       O.mapConcat = function (b, a, c) {
         null == c && (c = !0);
         if (null == a) return b;
         for (var d = a.keys(); d.hasNext(); ) {
           var f = d.next();
           (!c && b.exists(f)) || b.set(f, a.get(f));
         }
         return b;
       };
       var M = function (b, a, c) {
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.x = this.y = this.z = 0;
         this.set(b, a, c);
       };
       r["lemongine.Vector3"] = M;
       M.__name__ = "lemongine.Vector3";
       M.cross = function (b, a, c) {
         return null != c ? (c.set(b.y * a.z - b.z * a.y, b.z * a.x - b.x * a.z, b.x * a.y - b.y * a.x), c) : new M(b.y * a.z - b.z * a.y, b.z * a.x - b.x * a.z, b.x * a.y - b.y * a.x);
       };
       M.prototype = {
         set: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = 0);
           null == b && (b = 0);
           this.x = b;
           this.y = a;
           this.z = c;
           return this;
         },
         length: function () {
           return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
         },
         normalize: function () {
           var b = this.length();
           this.x /= b;
           this.y /= b;
           this.z /= b;
           return this;
         },
         subtract: function (b) {
           this.x -= b.x;
           this.y -= b.y;
           this.z -= b.z;
           return this;
         },
         clone: function () {
           return new M(this.x, this.y, this.z);
         },
         __class__: M,
       };
       var Fe = function (b, a, c) {
         null == c && (c = -16777216);
         null == a && (a = 0);
         null == b && (b = 0);
         this.position = new M();
         this.backgroundColor = new F(-16777216);
         this.scenes = [];
         sa.call(this);
         this.backgroundColor.set_hex(c);
         this.isCubemap = this.imageLoaded = !0;
         this.textureLocation = p.gl.createTexture();
         p.gl.bindTexture(p.gl.TEXTURE_CUBE_MAP, this.textureLocation);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 1, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 2, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 3, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 4, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         Qb.texImage2D(p.gl, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 5, 0, p.gl.RGBA, Math.floor(b), Math.floor(a), 0, p.gl.RGBA, p.gl.UNSIGNED_BYTE, null);
         this.scenes[0] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[0].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X);
         this.scenes[1] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[1].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 1);
         this.scenes[2] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[2].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 2);
         this.scenes[3] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[3].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 3);
         this.scenes[4] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[4].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 4);
         this.scenes[5] = new fb(Math.floor(b), Math.floor(a), null, new F(c));
         this.scenes[5].setupCubemap(this, p.gl.TEXTURE_CUBE_MAP_POSITIVE_X + 5);
         p.gl.texParameteri(p.gl.TEXTURE_CUBE_MAP, p.gl.TEXTURE_MAG_FILTER, p.gl.LINEAR);
         p.gl.texParameteri(p.gl.TEXTURE_CUBE_MAP, p.gl.TEXTURE_MIN_FILTER, p.gl.LINEAR);
         this.initCameras();
       };
       r["lemongine.ImageCubemap"] = Fe;
       Fe.__name__ = "lemongine.ImageCubemap";
       Fe.__super__ = sa;
       Fe.prototype = v(sa.prototype, {
         initCameras: function () {
           for (var b = 0; 6 > b; ) {
             var a = b++,
               c = this.scenes[a];
             c.camera.setPerspectiveMatrix(90);
             c.backgroundColor = this.backgroundColor;
             c.camera.projectionMatrix.values[0] *= -1;
             c.camera.setPosition(0, 0, 0);
             c.camera.lookAt(Fe.lookatDirections[a]);
             this.setPosition(this.position.x, this.position.y, this.position.z);
             c.set_isBackFace(!1);
           }
         },
         setPosition: function (b, a, c) {
           this.scenes[0].camera.setPosition(b, a, c);
           this.scenes[1].camera.setPosition(b, a, c);
           this.scenes[2].camera.setPosition(b, a, c);
           this.scenes[3].camera.setPosition(b, a, c);
           this.scenes[4].camera.setPosition(b, a, c);
           this.scenes[5].camera.setPosition(b, a, c);
         },
         updateTextureBuffer: function () {
           this.dirtyBuffer = !1;
         },
         __class__: Fe,
       });
       var Vf = function (b, a, c) {
         null == c && (c = 0);
         null == a && (a = 0);
         null == b && (b = 0);
         this.currentPoint = new h(0, 0);
         this.strokeColor = new F(-16777216);
         sa.call(this, b, a, c);
         this.canvas = window.document.createElement("canvas");
         this.canvas.width = b;
         this.canvas.height = a;
         this.context = this.canvas.getContext("2d", null);
       };
       r["lemongine.ImageVector"] = Vf;
       Vf.__name__ = "lemongine.ImageVector";
       Vf.__super__ = sa;
       Vf.prototype = v(sa.prototype, {
         setDimensions: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           sa.prototype.setDimensions.call(this, b, a);
           null != this.canvas && ((this.canvas.width = b), (this.canvas.height = a));
         },
         lineStyle: function (b, a, c, d) {
           null == d && (d = "");
           null == c && (c = "");
           null == b && (b = 1);
           null != a && (this.strokeColor = a);
           this.context.lineWidth = b;
           "" != c && (this.context.lineCap = c);
           "" != c && (this.context.lineJoin = d);
           return this;
         },
         beginPath: function () {
           this.context.beginPath();
           return this;
         },
         endPath: function () {
           this.context.closePath();
           return this;
         },
         moveTo: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           this.context.moveTo(b, a);
           this.currentPoint.set(b, a);
           return this;
         },
         lineTo: function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           this.context.lineTo(b, a);
           this.currentPoint.set(b, a);
           return this;
         },
         curveTo: function (b, a, c, d) {
           null == d && (d = 0);
           null == c && (c = 0);
           null == b && (b = 0);
           this.context.quadraticCurveTo(b, a, c, d);
           this.currentPoint.set(c, d);
           return this;
         },
         stroke: function () {
           this.dirtyBuffer = !0;
           var b = this.strokeColor.getHexString(!1);
           this.context.strokeStyle = "#" + b;
           this.context.globalAlpha = G.toFloat(this.strokeColor.a) / G.toFloat(255);
           this.context.stroke();
           return this;
         },
         clear: function () {
           this.dirtyBuffer = !0;
           sa.prototype.clear.call(this);
           this.context.clearRect(0, 0, G.toFloat(this.width), G.toFloat(this.height));
           this.context.fillStyle = "#000000";
           this.context.globalAlpha = 0;
           this.context.fillRect(0, 0, G.toFloat(this.width), G.toFloat(this.height));
         },
         updateTextureBuffer: function () {
           this.dirtyBuffer &&
             ((this.dirtyBuffer = !1),
             null != this.textureLocation
               ? p.gl.bindTexture(p.gl.TEXTURE_2D, this.textureLocation)
               : ((this.textureLocation = p.gl.createTexture()),
                 p.gl.bindTexture(p.gl.TEXTURE_2D, this.textureLocation),
                 p.gl.pixelStorei(p.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_S, p.gl.CLAMP_TO_EDGE),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_T, p.gl.CLAMP_TO_EDGE),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MAG_FILTER, p.gl.NEAREST),
                 p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MIN_FILTER, p.gl.NEAREST)),
             Qb.texImage2D(p.gl, p.gl.TEXTURE_2D, 0, p.gl.RGBA, p.gl.RGBA, p.gl.UNSIGNED_BYTE, this.canvas));
         },
         __class__: Vf,
       });
       var Ha = function (b, a, c) {
         null == c && (c = 1);
         this.mouseOnlyDraggingEnd = !1;
         this.mousePoint = new h();
         this.mouseDownPoint = new h();
         this.mouse = new h();
         this.mouseDown = !1;
         this.clickTime = -100;
         this.focused = this.isDoubleClick = this.isTripleClick = !1;
         this.cursorBlinkOffset = 0;
         this.cursorsDirty = !1;
         this.cursors = [];
         this.scrollPosition = new h(0, 0);
         this.wordWrap = this.multiline = !1;
         this.fontScale = 1;
         this.size = new h(100, 10);
         this.transform = new T();
         this.allowedRegex = new Ra("[\n\r]", "g");
         this.allowedCharacters = "";
         this.readonly = !1;
         this.length = 0;
         this.maxLength = -1;
         this.textFieldEntity = b;
         this.size.set(a.x, a.y);
         this.fontScale = c;
         this.cursorEntity = new da(sa.getWhitePixel(), null, gc.getShader());
         this.cursorEntity.isTransparent = !0;
         this.cursorEntity.customBlendFunc = [p.gl.ONE_MINUS_DST_COLOR, p.gl.ZERO, p.gl.ONE, p.gl.ZERO];
         this.cursorEntity.layer = b.layer + 1;
         this.selectionEntity = new da(sa.getWhitePixel(), null, gc.getShader());
         this.selectionEntity.isTransparent = !0;
         this.selectionEntity.customBlendFunc = [p.gl.ONE_MINUS_DST_COLOR, p.gl.ZERO, p.gl.ONE, p.gl.ZERO];
         this.selectionEntity.layer = b.layer + 1;
         this.clearCursors();
       };
       r["lemongine.InputField"] = Ha;
       Ha.__name__ = "lemongine.InputField";
       Ha.regainFocus = function () {
         ad.delay(function () {
           m.Instance.__window.__backend.setTextInputEnabled(null != Ha.focus);
         }, 0);
       };
       Ha.registerListeners = function () {
         m.Instance.addEventListener(Qa.ACTIVATE, Ha.regainFocus);
         m.Instance.addEventListener(Qa.TEXT_INPUT, Ha.textInputHook);
         m.Instance.addEventListener(Qa.KEY_DOWN, Ha.keyDownHook);
         m.Instance.addEventListener(Qa.KEY_DOWN_REPEAT, Ha.keyDownRepeatHook);
         m.Instance.addEventListener(Qa.MOUSE_DOWN, Ha.mouseDownHook);
         m.Instance.addEventListener(Qa.MOUSE_MOVE, Ha.mouseMoveHook);
         m.Instance.addEventListener(Qa.MOUSE_UP, Ha.mouseUpHook);
       };
       Ha.textInputHook = function (b) {
         b = b.split("\r\n").join("\n");
         null != Ha.focus && Ha.focus.textHandler(b);
       };
       Ha.keyDownHook = function (b, a) {
         null != Ha.focus && Ha.focus.keyDownHandler(b, a);
       };
       Ha.keyDownRepeatHook = function (b, a) {
         null != Ha.focus && Ha.focus.keyDownRepeatHandler(b, a);
       };
       Ha.mouseDownHook = function (b, a, c) {
         null != Ha.focus && Ha.focus.mouseDownHandler(b, a, c);
       };
       Ha.mouseMoveHook = function (b, a) {
         null != Ha.focus && Ha.focus.mouseMoveHandler(b, a);
       };
       Ha.mouseUpHook = function (b, a, c) {
         null != Ha.focus && Ha.focus.mouseUpHandler(b, a, c);
       };
       Ha.prototype = {
         offsetX: function () {
           return this.textFieldEntity.textAlignment == Q.LEFT ? 0 : this.textFieldEntity.textAlignment == Q.CENTER ? (this.size.x / 2) | 0 : this.size.x | 0;
         },
         update: function (b) {
           this.textFieldEntity.transform.reset().translate(-this.scrollPosition.x, -this.scrollPosition.y).multiply(this.transform.values);
           this.cursorEntity.transform.reset().translate(-this.scrollPosition.x, -this.scrollPosition.y).multiply(this.transform.values);
           this.selectionEntity.transform.reset().translate(-this.scrollPosition.x, -this.scrollPosition.y).multiply(this.transform.values);
           this.textFieldEntity.transform.translate(this.offsetX());
           this.cursorEntity.transform.translate(this.offsetX());
           this.selectionEntity.transform.translate(this.offsetX());
           this.textFieldEntity.set_mask(new t(this.scrollPosition.x - this.offsetX(), this.scrollPosition.y, this.size.x, this.size.y));
           this.cursorEntity.setUniform("mask", this.textFieldEntity.mask.toArray());
           this.selectionEntity.setUniform("mask", this.textFieldEntity.mask.toArray());
           if (null != b && (b.draw(this.textFieldEntity), this.cursorsDirty && this.updateCursors(), this.focused)) {
             if (this.readonly) var a = !1;
             else {
               var c = m.Instance.tick - this.cursorBlinkOffset;
               a = m.Instance.get_fps();
               c = G.toFloat(c) % G.toFloat(a) | 0;
               a = m.Instance.get_fps() / 2;
               a = G.toFloat(c) < a;
             }
             a && b.draw(this.cursorEntity);
             b.draw(this.selectionEntity);
           }
           this.focused &&
             (this.containsPoint(this.mouse)
               ? (m.Instance.cursor = Ua.TEXT)
               : this.mouseDown &&
                 ((b = this.screenPointToLocalPoint(this.mouse)),
                 b.x < this.scrollPosition.x
                   ? (--this.scrollPosition.x, this.handleMouseMove(), this.scrollToCursor())
                   : b.x > this.scrollPosition.x + this.size.x && ((this.scrollPosition.x += 1), this.handleMouseMove(), this.scrollToCursor())));
         },
         deleteBackwards: function (b, a) {
           null == a && (a = !1);
           null == b && (b = !1);
           for (var c = -1, d = null, f = [], e = this.get_text(), h = 0, g = this.cursors.length; h < g; ) {
             var m = h++,
               n = this.cursors[m];
             if (n.start == n.end && 0 < n.start && !a) {
               if (b) {
                 var p = this.textFieldEntity.previousWordBoundary(n.end);
                 e = I.substr(e, 0, p) + I.substr(e, n.start, null);
                 n.start = p;
               } else (e = I.substr(e, 0, this.first(n) - 1) + I.substr(e, this.first(n), null)), n.start--;
               n.end = n.start;
             } else (e = I.substr(e, 0, this.first(n)) + I.substr(e, this.last(n), null)), (n.start = n.end = this.first(n));
             -1 == c && (c = this.first(n));
             null != d && d.start == n.start && f.unshift(m);
             d = n;
             n.anchor = null;
           }
           for (h = 0; h < f.length; ) this.cursors.splice(f[h++], 1);
           this.cursorsDirty = !0;
           this.textFieldEntity.insertText(I.substr(e, c, null), c, -1);
           this.scrollToCursor();
         },
         deleteForwards: function (b) {
           null == b && (b = !1);
           for (var a = -1, c = null, d = [], f = this.get_text(), e = 0, h = this.cursors.length; e < h; ) {
             var g = e++,
               m = this.cursors[g];
             if (m.start == m.end && m.end < this.get_text().length)
               if (b) {
                 var n = this.textFieldEntity.nextWordBoundary(m.start);
                 f = I.substr(f, 0, m.start) + I.substr(f, n, null);
               } else f = I.substr(f, 0, m.start) + I.substr(f, m.start + 1, null);
             else (f = I.substr(f, 0, this.first(m)) + I.substr(f, this.last(m), null)), (m.start = m.end = this.first(m));
             -1 == a && (a = this.first(m));
             null != c && c.start == m.start && d.unshift(g);
             c = m;
             m.anchor = null;
           }
           for (e = 0; e < d.length; ) this.cursors.splice(d[e++], 1);
           this.cursorsDirty = !0;
           this.textFieldEntity.insertText(I.substr(f, a, null), a, -1);
           this.scrollToCursor();
         },
         moveSelections: function (b, a) {
           null == a && (a = !1);
           for (var c = [], d = -1, f = 0, e = this.cursors.length; f < e; ) {
             var h = f++,
               g = this.cursors[h];
             g.end = a
               ? 0 < b
                 ? w.clamp(0, this.get_text().length, this.textFieldEntity.nextWordBoundary(g.end)) | 0
                 : w.clamp(0, this.get_text().length, this.textFieldEntity.previousWordBoundary(g.end)) | 0
               : w.clamp(0, this.get_text().length, g.end + b) | 0;
             g.start == g.end && g.end == d && c.unshift(h);
             d = g.end;
             g.anchor = null;
           }
           for (f = 0; f < c.length; ) this.cursors.splice(c[f++], 1);
           this.cursorsDirty = !0;
           this.scrollToCursor();
         },
         moveCursors: function (b, a) {
           null == a && (a = !1);
           for (var c = [], d = -1, f = 0, e = this.cursors.length; f < e; ) {
             var h = f++,
               g = this.cursors[h];
             g.end = a
               ? 0 < b
                 ? (g.start = w.clamp(0, this.get_text().length, this.textFieldEntity.nextWordBoundary(g.end)) | 0)
                 : (g.start = w.clamp(0, this.get_text().length, this.textFieldEntity.previousWordBoundary(g.end)) | 0)
               : g.end != g.start
               ? 0 < b
                 ? (g.start = w.clamp(0, this.get_text().length, this.last(g)) | 0)
                 : (g.start = w.clamp(0, this.get_text().length, this.first(g)) | 0)
               : (g.start = w.clamp(0, this.get_text().length, this.first(g) + b) | 0);
             g.end == d && c.unshift(h);
             d = g.end;
             g.anchor = null;
           }
           for (f = 0; f < c.length; ) this.cursors.splice(c[f++], 1);
           this.cursorsDirty = !0;
           this.scrollToCursor();
         },
         insertText: function (b) {
           var a = 0,
             c = -1,
             d = null,
             f = [],
             e = this.get_text();
           b = this.cleanText(b);
           if (-1 < this.maxLength)
             if (1 < this.cursors.length) {
               for (var h = this.get_text().length, g = 0, m = this.cursors; g < m.length; ) {
                 var n = m[g];
                 ++g;
                 h += b.length - (this.last(n) - this.first(n));
               }
               if (h > this.maxLength) return;
             } else b = I.substr(b, 0, this.maxLength - this.get_text().length + (this.last(this.cursors[0]) - this.first(this.cursors[0])));
           g = 0;
           for (m = this.cursors.length; g < m; )
             (h = g++),
               (n = this.cursors[h]),
               -1 == c && (c = this.first(n)),
               (n.start += a),
               (n.end += a),
               (a = (b.length - Math.abs(n.end - n.start)) | 0),
               (e = I.substr(e, 0, this.first(n)) + b + I.substr(e, this.last(n), null)),
               (n.start = n.end = this.first(n)),
               this.scrollToCursor(),
               (n.end += b.length),
               (n.start = n.end),
               (n.anchor = null),
               "" == b && null != d && d.start == n.start && f.unshift(h),
               (d = n);
           for (g = 0; g < f.length; ) this.cursors.splice(f[g++], 1);
           this.cursorsDirty = !0;
           0 > c && (c = 0);
           this.textFieldEntity.insertText(I.substr(e, c, null), c, -1);
           this.scrollToCursor();
         },
         first: function (b) {
           return Math.min(b.start, b.end) | 0;
         },
         last: function (b) {
           return Math.max(b.start, b.end) | 0;
         },
         textHandler: function (b) {
           null == b || this.readonly || ((b = this.cleanText(b)), "" != b && this.insertText(b));
         },
         keyDownRepeatHandler: function (b, a) {
           if (Db.get_ctrlKey(a) || Db.get_metaKey(a))
             switch (b) {
               case 8:
                 this.readonly || this.deleteBackwards(!0);
                 break;
               case 127:
                 this.readonly || this.deleteForwards(!0);
                 break;
               case 1073741903:
                 Db.get_shiftKey(a)
                   ? Db.get_metaKey(a)
                     ? ((this.cursors = [{ start: this.cursors[0].start, end: this.get_text().length, anchor: null }]), (this.cursorsDirty = !0))
                     : this.moveSelections(1, !0)
                   : Db.get_metaKey(a)
                   ? ((this.cursors = [{ start: this.get_text().length, end: this.get_text().length, anchor: null }]), (this.cursorsDirty = !0))
                   : this.moveCursors(1, !0);
                 break;
               case 1073741904:
                 Db.get_shiftKey(a)
                   ? Db.get_metaKey(a)
                     ? ((this.cursors = [{ start: this.cursors[0].start, end: 0, anchor: null }]), (this.cursorsDirty = !0))
                     : this.moveSelections(-1, !0)
                   : Db.get_metaKey(a)
                   ? ((this.cursors = [{ start: 0, end: 0, anchor: null }]), (this.cursorsDirty = !0))
                   : this.moveCursors(-1, !0);
             }
           else
             switch (b) {
               case 8:
                 this.readonly || this.deleteBackwards();
                 break;
               case 13:
                 this.multiline && this.insertText("\n");
                 break;
               case 127:
                 this.readonly || this.deleteForwards();
                 break;
               case 1073741903:
                 Db.get_shiftKey(a) ? this.moveSelections(1) : this.moveCursors(1);
                 break;
               case 1073741904:
                 Db.get_shiftKey(a) ? this.moveSelections(-1) : this.moveCursors(-1);
                 break;
               case 1073741905:
                 b = this.textFieldEntity.characterRectangle(this.cursors[0].end);
                 var c = this.cursors[0].anchor,
                   d = this.textFieldEntity.indexAtPoint(new h(null != c ? c : b.x, b.y + this.textFieldEntity.font.height));
                 this.cursors[0].end == d && (d = this.get_text().length);
                 Db.get_shiftKey(a) ? this.setSelection(this.cursors[0].start, d) : this.setSelection(d, d);
                 this.cursors[0].anchor = null != c ? c : b.x;
                 break;
               case 1073741906:
                 (b = this.textFieldEntity.characterRectangle(this.cursors[0].end)),
                   (c = this.cursors[0].anchor),
                   (d = this.textFieldEntity.indexAtPoint(new h(null != c ? c : b.x, b.y - this.textFieldEntity.font.height))),
                   this.cursors[0].end == d && (d = 0),
                   Db.get_shiftKey(a) ? this.setSelection(this.cursors[0].start, d) : this.setSelection(d, d),
                   (this.cursors[0].anchor = null != c ? c : b.x);
             }
         },
         keyDownHandler: function (b, a) {
           if (Db.get_ctrlKey(a) || Db.get_metaKey(a))
             switch (b) {
               case 97:
                 Db.get_shiftKey(a) ? this.setSelection(this.get_text().length, this.get_text().length) : this.selectAll();
                 break;
               case 118:
                 Ha.regainFocus();
                 break;
               case 99:
               case 120:
                 a = "";
                 for (var c = 0, d = this.cursors; c < d.length; ) {
                   var f = d[c];
                   ++c;
                   f.start != f.end && (a += this.get_text().substring(this.first(f), this.last(f)));
                 }
                 "" != a && Eb.set_text(a);
                 120 == b && (this.readonly || this.deleteBackwards(!1, !0));
                 Ha.regainFocus();
                 break;
               case 1073741898:
                 Db.get_shiftKey(a) ? ((this.cursors = [{ start: this.cursors[0].start, end: 0, anchor: null }]), (this.cursorsDirty = !0)) : this.setSelection(0, 0);
                 break;
               case 1073741901:
                 Db.get_shiftKey(a) ? ((this.cursors = [{ start: this.cursors[0].start, end: this.get_text().length, anchor: null }]), (this.cursorsDirty = !0)) : this.setSelection(this.get_text().length, this.get_text().length);
             }
           else
             switch (b) {
               case 1073741898:
                 b = this.textFieldEntity.getCharAtLine(this.textFieldEntity.getLineOfChar(this.cursors[0].end));
                 this.cursors[0].end == b && ((b = this.textFieldEntity.getPreviousNewline(this.cursors[0].end - 1)), 0 != b && ++b);
                 Db.get_shiftKey(a) ? ((this.cursors = [{ start: this.cursors[0].start, end: b, anchor: null }]), (this.cursorsDirty = !0)) : this.setSelection(b, b);
                 break;
               case 1073741901:
                 (b = this.textFieldEntity.getCharAtLine(this.textFieldEntity.getLineOfChar(this.cursors[0].end) + 1)),
                   this.cursors[0].end <= this.get_text().length - 1 && b == this.get_text().length && (b = this.get_text().length - 1),
                   this.cursors[0].end == b && (b = this.textFieldEntity.getNextNewline(this.cursors[0].end)),
                   Db.get_shiftKey(a) ? ((this.cursors = [{ start: this.cursors[0].start, end: b, anchor: null }]), (this.cursorsDirty = !0)) : this.setSelection(b, b);
             }
         },
         mouseDownHandler: function (b, a, c) {
           0 == c &&
             this.containsPoint(new h(b, a)) &&
             (m.Instance.__window.__backend.setTextInputEnabled(!0),
             (this.mouseDown = !0),
             this.mouse.set(b, a),
             (this.mousePoint = this.screenPointToLocalPoint(this.mouse)),
             0 == m.Instance.keyDown(1073742049) && (this.mouseDownPoint = this.mousePoint),
             this.cursors.splice(1, this.cursors.length - 1),
             (this.cursors[0].end = this.indexAtPoint(this.mousePoint)),
             0 == m.Instance.keyDown(1073742049) && (this.cursors[0].start = this.cursors[0].end),
             (this.cursorsDirty = !0),
             (this.mouseOnlyDraggingEnd = G.gt(m.Instance.keyDown(1073742049), 0)),
             0.3 > new Date().getTime() / 1e3 - this.clickTime
               ? this.isDoubleClick
                 ? ((this.isDoubleClick = !1), (this.isTripleClick = !0), this.selectAll())
                 : ((this.isDoubleClick = !0),
                   (this.isTripleClick = !1),
                   this.mouseOnlyDraggingEnd || (this.cursors[0].start = this.textFieldEntity.previousWordBoundary(this.cursors[0].start + 1)),
                   (this.cursors[0].end = this.textFieldEntity.nextWordBoundary(this.cursors[0].end - 1)))
               : (this.isTripleClick = this.isDoubleClick = !1),
             (this.clickTime = new Date().getTime() / 1e3));
         },
         mouseMoveHandler: function (b, a) {
           this.mouse.set(b, a);
           this.mouseDown && this.handleMouseMove();
         },
         handleMouseMove: function () {
           this.mousePoint = this.screenPointToLocalPoint(new h(this.mouse.x, this.mouse.y));
           if (this.isDoubleClick) {
             this.cursorsDirty = !0;
             var b = this.textFieldEntity,
               a = this.indexAtPoint(this.mousePoint) - 1;
             this.cursors[0].end = b.nextWordBoundary(a);
             this.mouseOnlyDraggingEnd ||
               ((b = this.textFieldEntity.previousWordBoundary(this.indexAtPoint(this.mouseDownPoint) + 1)),
               this.cursors[0].end < b
                 ? ((b = this.textFieldEntity),
                   (a = this.indexAtPoint(this.mousePoint)),
                   (this.cursors[0].end = b.previousWordBoundary(a)),
                   (b = this.textFieldEntity),
                   (a = this.indexAtPoint(this.mouseDownPoint) - 1),
                   (this.cursors[0].start = b.nextWordBoundary(a)))
                 : ((this.cursors[0].start = b), (b = Math.max(this.cursors[0].end, this.textFieldEntity.nextWordBoundary(this.indexAtPoint(this.mouseDownPoint) - 1)) | 0), (this.cursors[0].end = b)));
           } else this.isTripleClick || ((this.cursorsDirty = !0), (this.cursors[0].end = this.indexAtPoint(this.mousePoint)));
         },
         mouseUpHandler: function (b, a, c) {
           0 == c && (this.mouseDown = !1);
         },
         updateCursors: function () {
           this.selectionEntity.clearPool();
           this.cursorEntity.clearPool();
           for (var b = 0, a = this.cursors; b < a.length; ) {
             var c = a[b];
             ++b;
             var d;
             if (c.start < c.end) {
               var f = this.textFieldEntity.characterRectangle(c.start);
               c = d = this.textFieldEntity.characterRectangle(c.end);
             } else (d = this.textFieldEntity.characterRectangle(c.start)), (c = f = this.textFieldEntity.characterRectangle(c.end));
             if (d.y != f.y) {
               var e = this.size.x - f.x;
               this.selectionEntity.addQuad(new M(f.x, f.y, 0), new h(), new h(), !0, new h(e, f.height));
               this.selectionEntity.addQuad(new M(-this.offsetX(), f.get_bottom(), 0), new h(), new h(), !0, new h(this.size.x, d.y - f.get_bottom()));
               this.selectionEntity.addQuad(new M(-this.offsetX(), d.y, 0), new h(), new h(), !0, new h(d.x + this.offsetX(), d.height));
             } else this.selectionEntity.addQuad(new M(f.x, f.y, 0), new h(), new h(), !0, new h(d.x - f.x, d.get_bottom() - f.y));
             this.cursorEntity.addQuad(new M(Math.max(-this.offsetX(), c.x), c.y, 0), new h(), new h(), !0, new h(1, c.height));
           }
           this.selectionEntity.resetUnusedQuads();
           this.cursorEntity.resetUnusedQuads();
           this.cursorsDirty = !1;
         },
         scrollToCursor: function () {
           this.cursorBlinkOffset = m.Instance.tick;
           for (var b = null, a = new t(), c = w.MAX_INT(), d = 0, f = this.cursors; d < f.length; ) {
             var e = f[d];
             ++d;
             var h = this.textFieldEntity.characterRectangle(e.end),
               g = Math.max(this.scrollPosition.x - h.x, h.get_right() - (this.scrollPosition.x + this.size.x - 1)) | 0;
             if (0 >= g) break;
             g < c && ((c = g), (a = h), (b = e));
           }
           null != b && (a.x < this.scrollPosition.x ? (this.scrollPosition.x = a.x) : a.get_right() - this.size.x + 1 > this.scrollPosition.x && ((b = a.get_right() - this.size.x), (this.scrollPosition.x = b + 1)));
           this.textFieldEntity.calculatedWidth + 1 > this.size.x && this.scrollPosition.x > this.textFieldEntity.calculatedWidth - this.size.x + 1 && (this.scrollPosition.x = this.textFieldEntity.calculatedWidth - this.size.x + 1);
           if (0 > this.scrollPosition.x || this.textFieldEntity.calculatedWidth + 1 <= this.size.x) this.scrollPosition.x = 0;
         },
         setSelection: function (b, a) {
           this.cursors = [{ start: b, end: a, anchor: null }];
           this.cursorsDirty = !0;
           this.scrollToCursor();
           return this.cursors[0];
         },
         selectAll: function () {
           this.setSelection(0, this.get_text().length);
         },
         clearCursors: function () {
           this.setSelection(this.get_text().length, this.get_text().length);
         },
         containsPoint: function (b) {
           return w.pointInTransformedRectangle(new h(b.x + this.offsetX(), b.y), new t(0, 0, this.size.x, this.size.y), this.transform);
         },
         indexAtPoint: function (b) {
           return this.textFieldEntity.indexAtPoint(new h(b.x, b.y));
         },
         screenPointToLocalPoint: function (b) {
           b = this.transform.inverse().apply(new M(b.x - this.offsetX(), b.y));
           return new h(b.x + this.scrollPosition.x, b.y + this.scrollPosition.y);
         },
         cleanText: function (b) {
           b = this.textFieldEntity.font.cleanText(b);
           return b.replace(this.allowedRegex.r, "");
         },
         get_text: function () {
           return this.textFieldEntity.text;
         },
         set_text: function (b) {
           -1 < this.maxLength ? this.textFieldEntity.setText(I.substr(this.cleanText(b), 0, this.maxLength)) : this.textFieldEntity.setText(this.cleanText(b));
           this.clearCursors();
           return b;
         },
         set_focused: function (b) {
           b ? Ha.focus != this && (null != Ha.focus ? Ha.focus.set_focused(!1) : Ha.registerListeners(), (Ha.focus = this), Ha.regainFocus()) : Ha.focus == this && ((Ha.focus = null), Ha.regainFocus());
           return (this.focused = b);
         },
         set_maxLength: function (b) {
           -1 < b && this.get_text().length > b && (this.textFieldEntity.insertText("", b, -1), this.clearCursors(), this.scrollToCursor());
           return (this.maxLength = b);
         },
         get_length: function () {
           return this.get_text().length;
         },
         set_allowedCharacters: function (b) {
           if (this.allowedCharacters == b) return b;
           this.allowedCharacters = b;
           this.updateAllowedCharacters();
           return b;
         },
         updateAllowedCharacters: function () {
           this.allowedRegex = "" == this.allowedCharacters ? (this.multiline ? new Ra("^", "g") : new Ra("[\n\r]", "g")) : new Ra("[^" + this.allowedCharacters + "]", "g");
           var b = this.cleanText(this.get_text());
           b != this.get_text() && (this.clearCursors(), this.textFieldEntity.setText(b));
         },
         set_multiline: function (b) {
           if (this.multiline == b) return b;
           this.multiline = b;
           this.updateAllowedCharacters();
           return b;
         },
         set_wordWrap: function (b) {
           this.textFieldEntity.setWordWrap(this.size.x | 0);
           return (this.wordWrap = b);
         },
         __class__: Ha,
       };
       var Qa = (D["lemongine.Event"] = {
         __ename__: "lemongine.Event",
         __constructs__: null,
         MOUSE_DOWN: { _hx_name: "MOUSE_DOWN", _hx_index: 0, __enum__: "lemongine.Event", toString: n },
         MOUSE_MOVE: { _hx_name: "MOUSE_MOVE", _hx_index: 1, __enum__: "lemongine.Event", toString: n },
         MOUSE_UP: { _hx_name: "MOUSE_UP", _hx_index: 2, __enum__: "lemongine.Event", toString: n },
         MOUSE_WHEEL: { _hx_name: "MOUSE_WHEEL", _hx_index: 3, __enum__: "lemongine.Event", toString: n },
         KEY_DOWN: { _hx_name: "KEY_DOWN", _hx_index: 4, __enum__: "lemongine.Event", toString: n },
         KEY_DOWN_REPEAT: { _hx_name: "KEY_DOWN_REPEAT", _hx_index: 5, __enum__: "lemongine.Event", toString: n },
         KEY_UP: { _hx_name: "KEY_UP", _hx_index: 6, __enum__: "lemongine.Event", toString: n },
         ACTIVATE: { _hx_name: "ACTIVATE", _hx_index: 7, __enum__: "lemongine.Event", toString: n },
         FOCUS_IN: { _hx_name: "FOCUS_IN", _hx_index: 8, __enum__: "lemongine.Event", toString: n },
         FOCUS_OUT: { _hx_name: "FOCUS_OUT", _hx_index: 9, __enum__: "lemongine.Event", toString: n },
         TEXT_INPUT: { _hx_name: "TEXT_INPUT", _hx_index: 10, __enum__: "lemongine.Event", toString: n },
         TOUCH_START: { _hx_name: "TOUCH_START", _hx_index: 11, __enum__: "lemongine.Event", toString: n },
         TOUCH_MOVE: { _hx_name: "TOUCH_MOVE", _hx_index: 12, __enum__: "lemongine.Event", toString: n },
         TOUCH_END: { _hx_name: "TOUCH_END", _hx_index: 13, __enum__: "lemongine.Event", toString: n },
       });
       Qa.__constructs__ = [Qa.MOUSE_DOWN, Qa.MOUSE_MOVE, Qa.MOUSE_UP, Qa.MOUSE_WHEEL, Qa.KEY_DOWN, Qa.KEY_DOWN_REPEAT, Qa.KEY_UP, Qa.ACTIVATE, Qa.FOCUS_IN, Qa.FOCUS_OUT, Qa.TEXT_INPUT, Qa.TOUCH_START, Qa.TOUCH_MOVE, Qa.TOUCH_END];
       var Qc = function (b, a, c, d) {
         null == d && (d = !1);
         null == a && (a = "");
         null == b && (b = "save");
         this.dataToStoreInIndexedDB = this.callbackWhenLoaded = null;
         this.indexedDBStorageReady = !1;
         this.usingindexedDBStorage = !0;
         this.exceededQuota = !1;
         this.data = new e();
         this.fullPath = "";
         this.name = "save";
         this.name = b;
         this.fullPath = this.validatePath(a + "/" + b);
         this.callbackWhenLoaded = c;
         (this.usingindexedDBStorage = null != window.indexedDB && !d)
           ? this.initIndexedDB()
           : (d || Ia.trace("Notice: Falling back to local storage.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 56, className: "lemongine.LocalStorage", methodName: "new" }),
             this.initLocalStorage(),
             null == this.storage && Ia.trace("Error: Storage is inaccessible!", { fileName: "lemongine/LocalStorage.hx", lineNumber: 58, className: "lemongine.LocalStorage", methodName: "new" }),
             this.load(),
             this.callFirstLoadCallback());
       };
       r["lemongine.LocalStorage"] = Qc;
       Qc.__name__ = "lemongine.LocalStorage";
       Qc.prototype = {
         onExitCallback: function (b) {
           this.save();
         },
         removeSaveOnExitListener: function () {
           m.Instance.onExit.remove(B(this, this.onExitCallback));
         },
         callFirstLoadCallback: function () {
           null != this.callbackWhenLoaded && (this.callbackWhenLoaded(this), (this.callbackWhenLoaded = null));
         },
         initIndexedDB: function () {
           var b = this;
           this.usingindexedDBStorage = !0;
           this.indexedDBStorageReady = !1;
           var a = window.indexedDB.open("lemongine", 1);
           a.onerror = function () {
             Ia.trace("Notice: Falling back to local storage.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 87, className: "lemongine.LocalStorage", methodName: "initIndexedDB" });
             b.usingindexedDBStorage = !1;
             b.initLocalStorage();
             null == b.storage && Ia.trace("Error: Storage is inaccessible!", { fileName: "lemongine/LocalStorage.hx", lineNumber: 90, className: "lemongine.LocalStorage", methodName: "initIndexedDB" });
             b.load();
             b.callFirstLoadCallback();
           };
           a.onupgradeneeded = function (a) {
             a.target.result.createObjectStore("saves", { keyPath: "name" }).transaction.oncomplete = function (a) {
               null != b.dataToStoreInIndexedDB && (b.addDataToIndexedDB(b.dataToStoreInIndexedDB), (b.dataToStoreInIndexedDB = null));
             };
           };
           a.onsuccess = function () {
             b.indexedDBStorage = a.result;
             b.indexedDBStorageReady = !0;
             b.initLocalStorage();
             if (null != b.storage.getItem("lemongine:" + b.fullPath)) {
               Ia.trace("Notice: Save data migrated from local storage.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 112, className: "lemongine.LocalStorage", methodName: "initIndexedDB" });
               var c = b.storage.getItem("lemongine:" + b.fullPath);
               b.data = vb.run(c);
               b.save();
               b.storage.removeItem("lemongine:" + b.fullPath);
               b.callFirstLoadCallback();
             } else
               null != b.storage.getItem("zanzlanz:null/" + b.fullPath)
                 ? (Ia.trace("Notice: Save data migrated from old storage.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 118, className: "lemongine.LocalStorage", methodName: "initIndexedDB" }),
                   (c = b.storage.getItem("zanzlanz:null/" + b.fullPath)),
                   (b.data = vb.run(c)),
                   b.save(),
                   b.storage.removeItem("zanzlanz:null/" + b.fullPath),
                   b.callFirstLoadCallback())
                 : b.load();
           };
         },
         addDataToIndexedDB: function (b) {
           var a = this;
           if (this.indexedDBStorageReady) {
             var c = this.indexedDBStorage.transaction(["saves"], "readwrite");
             c.objectStore("saves").put({ name: "lemongine:" + this.fullPath, data: b });
             c.oncomplete = function (a) {};
             c.onerror = function (b) {
               null != a.quotaExceededCallback && a.quotaExceededCallback();
             };
           } else this.dataToStoreInIndexedDB = b;
         },
         getDataFromIndexedDB: function (b) {
           var a = this;
           this.indexedDBStorageReady ||
             Ia.trace("Error: IndexedDB not ready - needs to use callback instead.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 146, className: "lemongine.LocalStorage", methodName: "getDataFromIndexedDB" });
           var c = this.indexedDBStorage.transaction(["saves"], "readwrite"),
             d = c.objectStore("saves").get("lemongine:" + this.fullPath);
           c.oncomplete = function (c) {
             null != d.result ? ((c = d.result.data), null == c && (c = Cb.run(new e())), (a.data = vb.run(c))) : (a.data = new e());
             null != b && b(a.data);
             a.callFirstLoadCallback();
           };
           c.onerror = function (c) {
             null != b && b(a.data);
             a.callFirstLoadCallback();
           };
         },
         initLocalStorage: function () {
           this.storage = Jd.getLocalStorage();
           null == this.storage
             ? Ia.trace("Error: Local storage is inaccessible for initialization.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 174, className: "lemongine.LocalStorage", methodName: "initLocalStorage" })
             : null != this.storage.getItem("zanzlanz:null/" + this.fullPath) && ((this.data = vb.run(this.storage.getItem("zanzlanz:null/" + this.fullPath))), this.save(), this.storage.removeItem("zanzlanz:null/" + this.fullPath));
         },
         validatePath: function (b) {
           for (null != xb.get_applicationStorageDirectory() && (b = xb.get_applicationStorageDirectory() + "/" + b); -1 != b.indexOf("\\"); ) b = b.split("\\").join("/");
           for (; -1 != b.indexOf("//"); ) b = b.split("//").join("/");
           "/" == b.charAt(b.length - 1) && (b = I.substr(b, 0, b.length - 1));
           "/" == b.charAt(0) && (b = I.substr(b, 1, null));
           return b;
         },
         save: function () {
           if (this.usingindexedDBStorage || null != this.storage) {
             var b = Cb.run(this.data);
             if (this.usingindexedDBStorage) this.addDataToIndexedDB(b);
             else
               try {
                 this.storage.setItem("lemongine:" + this.fullPath, b), (this.exceededQuota = !1);
               } catch (a) {
                 Ia.trace("Error: Local storage quota exceeded. Could not save data.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 220, className: "lemongine.LocalStorage", methodName: "save" }),
                   0 == this.exceededQuota && ((this.exceededQuota = !0), null != this.quotaExceededCallback && this.quotaExceededCallback());
               }
           } else Ia.trace("Error: Local storage is inaccessible for saving.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 204, className: "lemongine.LocalStorage", methodName: "save" });
         },
         load: function (b) {
           if (!this.usingindexedDBStorage && null == this.storage)
             return Ia.trace("Error: Local storage is inaccessible for loading.", { fileName: "lemongine/LocalStorage.hx", lineNumber: 240, className: "lemongine.LocalStorage", methodName: "load" }), null;
           m.Instance.onExit.has(B(this, this.onExitCallback)) || m.Instance.onExit.add(B(this, this.onExitCallback));
           if (this.usingindexedDBStorage) this.getDataFromIndexedDB(b);
           else {
             var a = this.storage.getItem("lemongine:" + this.fullPath);
             null == a && (a = Cb.run(new e()));
             this.data = vb.run(a);
             this.callFirstLoadCallback();
             null != b && b(this.data);
           }
           return this.data;
         },
         destroy: function () {
           this.removeSaveOnExitListener();
           this.usingindexedDBStorage
             ? this.indexedDBStorage
                 .transaction(["saves"], "readwrite")
                 .objectStore("saves")
                 .delete("lemongine:" + this.fullPath)
             : this.storage.removeItem("lemongine:" + this.fullPath);
           return this;
         },
         __class__: Qc,
       };
       var Ed = function (b, a, c, d) {
         this.hasUVs = this.isIndexed = this.hasNormals = !1;
         this.set(b, a, c, d);
       };
       r["lemongine.Mesh"] = Ed;
       Ed.__name__ = "lemongine.Mesh";
       Ed.prototype = {
         set: function (b, a, c, d) {
           this.isIndexed = this.hasUVs = this.hasNormals = !1;
           this.setVertices(b);
           null != a && ((this.isIndexed = !0), this.setIndices(a));
           null != c && this.setUVs(c);
           null != d && this.setNormals(d);
         },
         setUVs: function (b) {
           this.hasUVs = !0;
           null == this.uvs && (this.uvs = new Fc("uv", "float2"));
           this.uvs.setValue(b);
           return this.uvs.value;
         },
         setVertices: function (b) {
           null == this.vertices && (this.vertices = new Fc("vertex", "float3"));
           this.vertices.setValue(b);
           return this.vertices.value;
         },
         setIndices: function (b) {
           if (!this.isIndexed) return Ia.trace("Error: Mesh is not indexed.", { fileName: "lemongine/Mesh.hx", lineNumber: 62, className: "lemongine.Mesh", methodName: "setIndices" }), [];
           null == this.indices && (this.indices = new Fc("~index", "uint3"));
           this.indices.setValue(b);
           return this.indices.value;
         },
         setNormals: function (b) {
           this.hasNormals = !0;
           null == this.normals && (this.normals = new Fc("normal", "float3"));
           this.normals.setValue(b);
           return this.normals.value;
         },
         getVertices: function () {
           return this.vertices.value;
         },
         getUVs: function () {
           return this.uvs.value;
         },
         getNormals: function () {
           return this.normals.value;
         },
         numVertices: function () {
           return Math.floor(this.vertices.value.length / 3);
         },
         numIndices: function () {
           return null == this.indices ? 0 : this.indices.value.length;
         },
         toIndexed: function () {
           if (this.isIndexed) return Ia.trace("Warning: Mesh is already indexed.", { fileName: "lemongine/Mesh.hx", lineNumber: 105, className: "lemongine.Mesh", methodName: "toIndexed" }), this;
           for (var b = [], a = [], c, d = [], f = 0, e = Math.floor(this.vertices.value.length / 3); f < e; ) {
             var h = f++;
             c = !1;
             for (var g = 0, m = Math.floor(b.length / 3); g < m; ) {
               var n = g++;
               if (
                 b[3 * n] == this.vertices.value[3 * h] &&
                 b[3 * n + 1] == this.vertices.value[3 * h + 1] &&
                 b[3 * n + 2] == this.vertices.value[3 * h + 2] &&
                 (!this.hasUVs || (a[2 * n] == this.uvs.value[2 * h] && a[2 * n + 1] == this.uvs.value[2 * h + 1]))
               ) {
                 d.push(n);
                 c = !0;
                 break;
               }
             }
             c ||
               (b.push(this.vertices.value[3 * h]),
               b.push(this.vertices.value[3 * h + 1]),
               b.push(this.vertices.value[3 * h + 2]),
               this.hasUVs && (a.push(this.uvs.value[2 * h]), a.push(this.uvs.value[2 * h + 1])),
               d.push(Math.floor(b.length / 3) - 1));
           }
           this.isIndexed = !0;
           this.setIndices(d);
           this.setVertices(b);
           this.hasUVs && this.setUVs(a);
           return this;
         },
         generateNormals: function () {
           if (this.isIndexed) return Ia.trace("Cannot generate normals on indexed mesh.", { fileName: "lemongine/Mesh.hx", lineNumber: 167, className: "lemongine.Mesh", methodName: "generateNormals" }), this.getNormals();
           for (var b = [], a = new M(), c = new M(), d = new M(), f = new M(), e = 0, h = Math.floor(this.numVertices() / 3); e < h; ) {
             var g = e++;
             a.set(this.vertices.value[9 * g], this.vertices.value[9 * g + 1], this.vertices.value[9 * g + 2]);
             c.set(this.vertices.value[9 * g + 3], this.vertices.value[9 * g + 4], this.vertices.value[9 * g + 5]);
             d.set(this.vertices.value[9 * g + 6], this.vertices.value[9 * g + 7], this.vertices.value[9 * g + 8]);
             M.cross(c.subtract(a), d.subtract(a), f).normalize();
             b.push(f.x);
             b.push(f.y);
             b.push(f.z);
             b.push(f.x);
             b.push(f.y);
             b.push(f.z);
             b.push(f.x);
             b.push(f.y);
             b.push(f.z);
           }
           return this.setNormals(b);
         },
         __class__: Ed,
       };
       var kh = function (b, a, c) {
         this.pingLoopStarted = !1;
         this.medalList = null;
         this.isConnected = this.loggedIn = !1;
         var d = this;
         vc.create(b);
         vc.core.initEncryption(a);
         this.ngio = vc.core.calls;
         b = window.document.location.href.split("?")[1];
         if (null != b)
           for (b = b.split("&"), a = 0; a < b.length; ) {
             var f = b[a];
             ++a;
             if ("ngio_session_id" == f.split("=")[0]) {
               vc.core.set_sessionId(f.split("=")[1]);
               b = this.ngio.app.checkSession();
               b.addDataHandler(function (a) {
                 d.isConnected = !0;
                 d.startPingLoop();
                 d._session = a.result.data.session;
                 null != d._session && null != d._session.user && (d.loggedIn = !0);
                 null != c && c(d);
               });
               b.send();
               return;
             }
           }
         b = this.ngio.app.startSession(!0);
         b.addDataHandler(function (a) {
           d.isConnected = !0;
           d.startPingLoop();
           d._session = a.result.data.session;
           null != d._session && null != d._session.user && (d.loggedIn = !0);
           null != c && c(d);
         });
         b.send();
       };
       r["lemongine.NGIO"] = kh;
       kh.__name__ = "lemongine.NGIO";
       kh.prototype = {
         get_user: function () {
           return null == this._session ? null : this._session.user;
         },
         listMedals: function (b) {
           var a = this;
           if (null != this.medalList) b(this.medalList);
           else {
             var c = this.ngio.medal.getList();
             c.addDataHandler(function (c) {
               null != c.result && ((a.medalList = c.result.data.medals), b(a.medalList));
             });
             c.send();
           }
         },
         unlockMedal: function (b, a) {
           var c = this;
           this.listMedals(function (d) {
             d = 0;
             for (var f = c.medalList; d < f.length; ) {
               var e = f[d];
               ++d;
               if (e.name.toLowerCase() == b.toLowerCase() || e.id.toString() == b) {
                 e.unlocked ||
                   ((d = c.ngio.medal.unlock(e.id)),
                   d.addSuccessHandler(function () {
                     null != a && a();
                   }),
                   d.send());
                 return;
               }
             }
             Ia.trace("Could not find medal '" + b + "'", { fileName: "lemongine/NGIO.hx", lineNumber: 110, className: "lemongine.NGIO", methodName: "unlockMedal" });
           });
         },
         startPingLoop: function () {
           this.pingLoopStarted || ((this.pingLoopStarted = !0), this._pingLoop());
         },
         _pingLoop: function () {
           this.ngio.gateway.ping();
           ad.delay(B(this, this._pingLoop), 3e5);
         },
         __class__: kh,
       };
       var oa = function () {};
       r["lemongine.Renderer"] = oa;
       oa.__name__ = "lemongine.Renderer";
       oa.clear = function (b) {
         oa.activate(b);
         oa.setDepthMask(!0);
         p.gl.clear(p.gl.COLOR_BUFFER_BIT | p.gl.DEPTH_BUFFER_BIT);
         oa.lastProgram = null;
         oa.lastMesh = null;
         oa.lastTextures = null;
       };
       oa.render = function (b, a) {
         for (var c = 0; c < a.length; ) {
           var d = a[c];
           ++c;
           d.visible && oa.renderEntity(d, b);
         }
       };
       oa.renderEntity = function (b, a) {
         var c = b.shaderProgram == oa.lastProgram,
           d = !1,
           f = !1;
         oa.currentScene != a && oa.activate(a);
         b.isTransparent && oa.setDepthMask(!1);
         c && (b.mesh == oa.lastMesh && null != b.mesh.vertices && 0 == b.mesh.vertices.dirtyBuffer && null != b.mesh.indices && 0 == b.mesh.indices.dirtyBuffer && (d = !0), oa.buffersChanged(b.textureBuffers, oa.lastTextures) || (f = !0));
         oa.callCount++;
         b.render(oa.currentScene, !c, !d, !f);
         oa.lastProgram = b.shaderProgram;
         oa.lastMesh = b.mesh;
         oa.lastTextures = b.textureBuffers;
       };
       oa.buffersChanged = function (b, a) {
         for (var c = Object.keys(b.h), d = c.length, f = 0; f < d; ) {
           var e = c[f++];
           if (!Object.prototype.hasOwnProperty.call(a.h, e) || b.h[e] != a.h[e] || b.h[e].dirtyRender) return !0;
         }
         c = Object.keys(a.h);
         d = c.length;
         for (f = 0; f < d; ) if (!Object.prototype.hasOwnProperty.call(b.h, c[f++])) return !0;
         return !1;
       };
       oa.resetCallCount = function () {
         oa.callCount = 0;
       };
       oa.activate = function (b, a) {
         null == a && (a = !1);
         if (oa.currentScene != b || a) {
           oa.currentScene = b;
           if (b.isInternalScene()) p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, null);
           else if (b.firstActivation)
             if (((b.firstActivation = !1), null != b.cubemap))
               null != b.glRenderBuffer && p.gl.deleteRenderbuffer(b.glRenderBuffer),
                 null == b.glFrameBuffer && (b.glFrameBuffer = p.gl.createFramebuffer()),
                 (b.glRenderBuffer = p.gl.createRenderbuffer()),
                 p.gl.bindRenderbuffer(p.gl.RENDERBUFFER, b.glRenderBuffer),
                 p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, b.glFrameBuffer),
                 p.gl.renderbufferStorage(p.gl.RENDERBUFFER, p.gl.DEPTH_COMPONENT16, b.get_width(), b.get_height()),
                 p.gl.framebufferRenderbuffer(p.gl.FRAMEBUFFER, p.gl.DEPTH_ATTACHMENT, p.gl.RENDERBUFFER, b.glRenderBuffer),
                 p.gl.framebufferTexture2D(p.gl.FRAMEBUFFER, p.gl.COLOR_ATTACHMENT0, b.cubemapSide, b.cubemap.getTextureBuffer(), 0);
             else {
               null != b.get_glTexture() && p.gl.deleteTexture(b.get_glTexture());
               null != b.glRenderBuffer && p.gl.deleteRenderbuffer(b.glRenderBuffer);
               null == b.glFrameBuffer && (b.glFrameBuffer = p.gl.createFramebuffer());
               a = p.gl.createTexture();
               b.glRenderBuffer = p.gl.createRenderbuffer();
               p.gl.bindRenderbuffer(p.gl.RENDERBUFFER, b.glRenderBuffer);
               p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, b.glFrameBuffer);
               p.gl.renderbufferStorage(p.gl.RENDERBUFFER, p.gl.DEPTH_COMPONENT16, b.get_width(), b.get_height());
               p.gl.framebufferRenderbuffer(p.gl.FRAMEBUFFER, p.gl.DEPTH_ATTACHMENT, p.gl.RENDERBUFFER, b.glRenderBuffer);
               p.gl.bindTexture(p.gl.TEXTURE_2D, a);
               p.gl.pixelStorei(p.gl.UNPACK_ALIGNMENT, 1);
               var c = p.gl,
                 d = p.gl.TEXTURE_2D,
                 f = p.gl.RGBA,
                 e = b.get_width(),
                 h = b.get_height(),
                 g = p.gl.RGBA,
                 m = p.gl.UNSIGNED_BYTE,
                 n = (b.get_width() * b.get_height() * 4) | 0;
               n = null != n ? new Uint8Array(n) : null;
               Qb.texImage2D(c, d, 0, f, e, h, 0, g, m, n);
               p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_S, p.gl.CLAMP_TO_EDGE);
               p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_WRAP_T, p.gl.CLAMP_TO_EDGE);
               p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MIN_FILTER, p.gl.NEAREST);
               p.gl.texParameteri(p.gl.TEXTURE_2D, p.gl.TEXTURE_MAG_FILTER, p.gl.NEAREST);
               null == b.get_glTexture() ? (b.set_glTexture(a), p.gl.framebufferTexture2D(p.gl.FRAMEBUFFER, p.gl.COLOR_ATTACHMENT0, p.gl.TEXTURE_2D, b.get_glTexture(), 0)) : b.set_glTexture(a);
             }
           else p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, b.glFrameBuffer);
           oa.initialize();
         }
       };
       oa.setViewport = function () {
         if (oa.currentScene.isInternalScene()) {
           var b = oa.currentScene.get_width(),
             a = oa.currentScene.get_height();
           var c = 0 < m.Instance.viewportScale ? m.Instance.viewportScale : Math.min(fa.current.__window.__width / oa.currentScene.get_width(), fa.current.__window.__height / oa.currentScene.get_height());
           m.Instance.__internal_scale = c;
           p.gl.viewport(((fa.current.__window.__width - b * c) / 2) | 0, ((fa.current.__window.__height - a * c) / 2) | 0, (b * c) | 0, (a * c) | 0);
         } else p.gl.viewport(0, 0, oa.currentScene.get_width() | 0, oa.currentScene.get_height() | 0);
       };
       oa.initialize = function () {
         p.gl.clearColor(
           G.toFloat(oa.currentScene.backgroundColor.r) / G.toFloat(255),
           G.toFloat(oa.currentScene.backgroundColor.g) / G.toFloat(255),
           G.toFloat(oa.currentScene.backgroundColor.b) / G.toFloat(255),
           G.toFloat(oa.currentScene.backgroundColor.a) / G.toFloat(255)
         );
         oa.setCulling(oa.currentScene.cull, oa.currentScene.isBackFace);
         oa.setViewport();
       };
       oa.setDepthMask = function (b) {
         oa.depthMask != b && ((oa.depthMask = b), p.gl.depthMask(b));
       };
       oa.setDepthTest = function (b) {
         oa.depthTest != b && ((oa.depthTest = b), oa.depthTest ? p.gl.enable(p.gl.DEPTH_TEST) : p.gl.disable(p.gl.DEPTH_TEST));
       };
       oa.setCulling = function (b, a) {
         oa.culling != b && ((oa.culling = b), oa.culling ? p.gl.enable(p.gl.CULL_FACE) : p.gl.disable(p.gl.CULL_FACE));
         null != a && oa.cullFaceBack != a && ((oa.cullFaceBack = a), oa.cullFaceBack ? p.gl.cullFace(p.gl.BACK) : p.gl.cullFace(p.gl.FRONT));
       };
       oa.globalInitialize = function () {
         p.gl.depthFunc(p.gl.LEQUAL);
         p.gl.enable(p.gl.BLEND);
         p.gl.blendFunc(p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA);
         oa.setDepthTest(!0);
         oa.setDepthMask(!0);
         oa.setCulling(!0, !0);
       };
       var fb = function (b, a, c, d) {
         this.isImageDirty = !0;
         this.renderQueue = [];
         this.cull = this.isBackFace = this.firstActivation = this.isDirty = this.toClear = !0;
         this.camera = c == fc.PERSPECTIVE ? new Ld(fc.PERSPECTIVE) : new Ld(fc.ORTHOGRAPHIC);
         this.setDimensions(b, a);
         null == d && (d = new F(-16777216));
         this.backgroundColor = d;
       };
       r["lemongine.Scene"] = fb;
       fb.__name__ = "lemongine.Scene";
       fb.prototype = {
         setup2D: function (b, a, c) {
           this.backgroundColor = c;
           this.camera.setOrthographicMatrix(a);
           this.setDimensions(b, a);
           this.camera.setPosition(b / 2, a / 2, -1);
           this.camera.setRotation(0, 0, 0);
           return this;
         },
         setupCubemap: function (b, a) {
           this.cubemap = b;
           this.cubemapSide = a;
           oa.clear(this);
         },
         isInternalScene: function () {
           return this == m.Instance.__internal_scene;
         },
         isMainScene: function () {
           return this == m.Instance.scene;
         },
         clear: function () {
           this.toClear = !0;
           this.renderQueue.splice(0, this.renderQueue.length);
           this.isDirty = this.isImageDirty = !0;
           return this;
         },
         draw: function (b, a) {
           null == a && (a = !1);
           nh.insert(this.renderQueue, b, ma.entitySortFunction, !0);
           this.isDirty = this.isImageDirty = !0;
           a && this.render();
         },
         render: function () {
           1 == this.isDirty && (1 == this.toClear && (oa.clear(this), (this.toClear = !1)), oa.render(this, this.renderQueue), this.renderQueue.splice(0, this.renderQueue.length), (this.isDirty = !1));
           return this;
         },
         toImage: function (b) {
           this.render();
           oa.activate(this, !0);
           var a = !1;
           null == b
             ? ((b = new t(0, 0, this.get_width(), this.get_height())), (a = !0))
             : ((b = b.intersection(new t(0, 0, this.get_width(), this.get_height()))), 0 == b.x && 0 == b.y && b.width == this.get_width() && b.height == this.get_height() && (a = !0));
           b.y = this.get_height() - b.height - b.y;
           var c = Math.floor(b.width) * Math.floor(b.height) * 4;
           c = null != c ? new Uint8Array(c) : null;
           p.gl.readPixels(Math.floor(b.x), Math.floor(b.y), Math.floor(b.width), Math.floor(b.height), p.gl.RGBA, p.gl.UNSIGNED_BYTE, c);
           a ? (null == this._image && (this._image = new sa()), (a = this._image), (this.isImageDirty = !1)) : (a = new sa());
           b = new ua(new Ta(c, Math.floor(b.width), Math.floor(b.height), 32, 0));
           b.buffer.premultiplied = !0;
           return a.fromData(b);
         },
         setDimensions: function (b, a, c) {
           null == c && (c = !1);
           if (c || b != this.get_width() || a != this.get_height())
             this.isInternalScene()
               ? (0 >= b && 0 >= a
                   ? ((b = fa.current.__window.__width), (a = fa.current.__window.__height))
                   : 0 >= b
                   ? (b = ((a * fa.current.__window.__width) / fa.current.__window.__height) | 0)
                   : 0 >= a && (a = ((b * fa.current.__window.__height) / fa.current.__window.__width) | 0),
                 (this._width = b),
                 (this._height = a),
                 this.camera.resize(b, a),
                 this.camera.setPosition(b / 2, a / 2, -1),
                 this.camera.setRotation(0, 0, 0))
               : (this.isMainScene() && m.Instance.__internal_scene.setDimensions(b, a, !0),
                 (this._width = b),
                 (this._height = a),
                 this.camera.resize(b, a),
                 null != this.draw2DEntity && (this.draw2DEntity.camera.resize(b, a), this.draw2DEntity.camera.setPosition(b / 2, a / 2, -1), this.draw2DEntity.camera.setRotation(0, 0, 0)),
                 null != this.fillRectEntity && (this.fillRectEntity.camera.resize(b, a), this.fillRectEntity.camera.setPosition(b / 2, a / 2, -1), this.fillRectEntity.camera.setRotation(0, 0, 0)),
                 (this.firstActivation = !0));
         },
         draw2D: function (b, a, c, d, f, e, k, g, m, n, p, q) {
           null == q && (q = 0);
           null == p && (p = !0);
           null == n && (n = !0);
           null == m && (m = 0);
           null == g && (g = !1);
           null == k && (k = 1);
           null == d && (d = La.NORMAL);
           null == a && (a = new h());
           null == b && Ia.trace("Warning: Attempted to draw null Image to scene", { fileName: "lemongine/Scene.hx", lineNumber: 185, className: "lemongine.Scene", methodName: "draw2D" });
           null == c && (c = new t(0, 0, G.toFloat(b.width), G.toFloat(b.height)));
           if (!(a.x >= this.get_width() || a.y >= this.get_height() || 0 >= a.x + c.width * k || 0 >= a.y + c.height * k)) {
             if (null == this.draw2DEntity)
               (this.draw2DEntity = new ma([], ba.createQuad(1, 1, !1, !1), Xb.getShader(d))),
                 (this.draw2DEntity.camera = new Ld(fc.ORTHOGRAPHIC)),
                 this.draw2DEntity.camera.resize(this.get_width(), this.get_height()),
                 this.draw2DEntity.camera.setPosition(this.get_width() / 2, this.get_height() / 2, -1),
                 this.draw2DEntity.camera.setRotation(0, 0, 0);
             else {
               var l = Xb.getShader(d);
               this.draw2DEntity.shaderProgram.id != l.id && (this.draw2DEntity.shaderProgram = l);
             }
             this.draw2DEntity.useCamera = !n;
             this.draw2DEntity.setTextureBuffer("texture", b);
             g ? this.draw2DEntity.setAttrib("texClip", w.repeatArray([c.x, c.y + c.height, c.width, -c.height], 6)) : this.draw2DEntity.setAttrib("texClip", w.repeatArray([c.x, c.y, c.width, c.height], 6));
             this.draw2DEntity.setUniform("texSize", [b.width, b.height]);
             null == f
               ? this.draw2DEntity.setUniform("color", [1, 1, 1, 1])
               : this.draw2DEntity.setUniform("color", [G.toFloat(f.r) / G.toFloat(255), G.toFloat(f.g) / G.toFloat(255), G.toFloat(f.b) / G.toFloat(255), G.toFloat(f.a) / G.toFloat(255)]);
             null == e
               ? this.draw2DEntity.setUniform("colorOffset", [0, 0, 0, 0])
               : this.draw2DEntity.setUniform("colorOffset", [G.toFloat(e.r) / G.toFloat(255), G.toFloat(e.g) / G.toFloat(255), G.toFloat(e.b) / G.toFloat(255), G.toFloat(e.a) / G.toFloat(255)]);
             this.draw2DEntity.transform.reset().scale(c.width * k, c.height * k);
             0 != q && this.draw2DEntity.transform.rotate(q, new M(0, 0, 1));
             this.draw2DEntity.transform.translate((c.width * k) / 2, (c.height * k) / 2).translate(a.x, a.y, m);
             d != La.NORMAL &&
               d != La.ADD &&
               (this.draw2DEntity.setUniform("texClipBG", [c.x + a.x, c.y - a.y + this.get_height(), c.width * k, -c.height * k]),
               this.draw2DEntity.setUniform("texSizeBG", [this.get_width(), this.get_height()]),
               this.draw2DEntity.setTextureBuffer("background", this.get_image()));
             this.draw2DEntity.blendMode = d;
             this.draw2DEntity.isTransparent = p ? !0 : !1;
             this.draw(this.draw2DEntity, !0);
           }
         },
         draw2DFlipped: function (b, a, c, d, f, e, h, g, m, n, p) {
           null == p && (p = 0);
           null == n && (n = !0);
           null == m && (m = !0);
           null == g && (g = 0);
           null == h && (h = 1);
           this.draw2D(b, a, c, d, f, e, h, !0, g, m, n, p);
         },
         fillRect: function (b, a, c, d) {
           null == d && (d = !1);
           null == c && (c = 0);
           null == this.fillRectEntity &&
             ((this.fillRectEntity = new ma([], ba.createQuad(1, 1, !1, !1), Ub.getShader())),
             (this.fillRectEntity.isTransparent = !0),
             (this.fillRectEntity.camera = new Ld(fc.ORTHOGRAPHIC)),
             this.fillRectEntity.camera.resize(this.get_width(), this.get_height()),
             this.fillRectEntity.camera.setPosition(this.get_width() / 2, this.get_height() / 2, -1),
             this.fillRectEntity.camera.setRotation(0, 0, 0),
             (this.fillRectEntity.useCamera = !0));
           null == b && (b = new t(0, 0, this.get_width(), this.get_height()));
           this.fillRectEntity.setUniform("color", [G.toFloat(a.r) / G.toFloat(255), G.toFloat(a.g) / G.toFloat(255), G.toFloat(a.b) / G.toFloat(255), G.toFloat(a.a) / G.toFloat(255)]);
           this.fillRectEntity.transform.reset().translate(0.5, 0.5).scale(b.width, b.height).translate(b.x, b.y, c);
           d ? (null == fb.replaceBlendFunc && (fb.replaceBlendFunc = [p.gl.ONE, p.gl.ZERO, p.gl.ONE, p.gl.ZERO]), (this.fillRectEntity.customBlendFunc = fb.replaceBlendFunc)) : (this.fillRectEntity.customBlendFunc = null);
           this.draw(this.fillRectEntity, !0);
         },
         get_glTexture: function () {
           null == this._glTexture && oa.activate(this);
           return this._glTexture;
         },
         set_glTexture: function (b) {
           null != this._glTexture && (p.gl.bindFramebuffer(p.gl.FRAMEBUFFER, this.glFrameBuffer), p.gl.framebufferTexture2D(p.gl.FRAMEBUFFER, p.gl.COLOR_ATTACHMENT0, p.gl.TEXTURE_2D, b, 0));
           return (this._glTexture = b);
         },
         get_width: function () {
           return this._width;
         },
         get_height: function () {
           return this._height;
         },
         set_cull: function (b) {
           this.cull = b;
           oa.currentScene == this && oa.setCulling(b);
           return b;
         },
         set_isBackFace: function (b) {
           this.isBackFace = b;
           oa.currentScene == this && oa.setCulling(this.cull, b);
           return b;
         },
         get_image: function () {
           this.isImageDirty && this.toImage();
           return this._image;
         },
         __class__: fb,
       };
       var $b = function (b, a, c) {
         var d = new e();
         d.h.vertex = "";
         d.h.uv = "";
         d.h.normal = "";
         d.h.modelMatrix = "";
         d.h.viewMatrix = "";
         d.h.projectionMatrix = "";
         d.h.time = "";
         this.builtinBuffers = d;
         this.attribs = new e();
         this.uniforms = new e();
         this.textureBuffers = new e();
         this.id = b;
         this.setShaders(a, c);
       };
       r["lemongine.ShaderProgram"] = $b;
       $b.__name__ = "lemongine.ShaderProgram";
       $b.prototype = {
         useProgram: function () {
           p.gl.useProgram(this.program);
           this.lastCamera = null;
           this.updateProjectionMatrix(oa.currentScene.camera);
         },
         updateProjectionMatrix: function (b) {
           this.lastCamera != b && this.hasBuiltin("projectionMatrix") && this.setUniform(this.builtinBuffers.h.projectionMatrix, b.projectionMatrix.values, "matrix4");
         },
         setShaders: function (b, a) {
           this.fragmentShaderRaw = b;
           this.vertexShaderRaw = a;
           this.fragmentShader = this.createShader(this.fragmentShaderRaw, p.gl.FRAGMENT_SHADER);
           this.vertexShader = this.createShader(this.vertexShaderRaw, p.gl.VERTEX_SHADER);
           this.program = p.gl.createProgram();
           p.gl.attachShader(this.program, this.vertexShader);
           p.gl.attachShader(this.program, this.fragmentShader);
           p.gl.linkProgram(this.program);
         },
         setBuiltInBuffers: function (b, a, c, d, f, e, h) {
           null == h && (h = "");
           null == e && (e = "");
           null == f && (f = "");
           null == d && (d = "");
           null == c && (c = "");
           null == a && (a = "");
           null == b && (b = "");
           "" != b && ((this.builtinBuffers.h.vertex = b), this.setAttrib(b, "float"));
           "" != f && ((this.builtinBuffers.h.uv = f), this.setAttrib(f, "float", 2));
           "" != e && ((this.builtinBuffers.h.normal = e), this.setAttrib(e, "float", 3));
           "" != a && ((this.builtinBuffers.h.modelMatrix = a), this.setUniform(a, null, "matrix4"));
           "" != c && ((this.builtinBuffers.h.viewMatrix = c), this.setUniform(c, null, "matrix4"));
           "" != d && ((this.builtinBuffers.h.projectionMatrix = d), this.setUniform(d, null, "matrix4"));
           "" != h && ((this.builtinBuffers.h.time = h), this.setUniform(h, null, "float"));
         },
         setUniform: function (b, a, c) {
           if (Object.prototype.hasOwnProperty.call(this.uniforms.h, b)) (this.uniforms.h[b].value = a), (this.uniforms.h[b].set = !0);
           else {
             null == c && Ia.trace("Uniform '" + b + "' doesn't exist on '" + this.id + "'!", { fileName: "lemongine/ShaderProgram.hx", lineNumber: 115, className: "lemongine.ShaderProgram", methodName: "setUniform" });
             var d = this.uniforms;
             a = { location: p.gl.getUniformLocation(this.program, b), name: b, type: c, value: a, set: null != a };
             d.h[b] = a;
           }
           return this.uniforms.h[b].location;
         },
         setAttrib: function (b, a, c, d, f) {
           null == f && (f = 0);
           null == d && (d = 0);
           null == c && (c = 3);
           null == a && (a = "");
           if (!Object.prototype.hasOwnProperty.call(this.attribs.h, b)) {
             "" == a && Ia.trace("Attrib '" + b + "' doesn't exist on '" + this.id + "'!", { fileName: "lemongine/ShaderProgram.hx", lineNumber: 141, className: "lemongine.ShaderProgram", methodName: "setAttrib" });
             var e = this.attribs;
             a = Fc.createForShader(b, this, a, c, d, f);
             e.h[b] = a;
           }
           return this.attribs.h[b].location;
         },
         hasBuiltin: function (b) {
           return "" != this.builtinBuffers.h[b];
         },
         getBuiltin: function (b) {
           return this.hasBuiltin(b) ? this.builtinBuffers.h[b] : null;
         },
         createShader: function (b, a) {
           var c = p.gl.createShader(a);
           p.gl.shaderSource(c, b);
           p.gl.compileShader(c);
           0 == p.gl.getShaderParameter(c, p.gl.COMPILE_STATUS) &&
             ((b = p.gl.getShaderInfoLog(c)),
             a == p.gl.FRAGMENT_SHADER
               ? Ia.trace("Fragment shader error in '" + this.id + "': " + b, { fileName: "lemongine/ShaderProgram.hx", lineNumber: 183, className: "lemongine.ShaderProgram", methodName: "createShader" })
               : a == p.gl.VERTEX_SHADER && Ia.trace("Vertex shader error in '" + this.id + "': " + b, { fileName: "lemongine/ShaderProgram.hx", lineNumber: 184, className: "lemongine.ShaderProgram", methodName: "createShader" }));
           return c;
         },
         __class__: $b,
       };
       var nh = function () {};
       r["lemongine.Sort"] = nh;
       nh.__name__ = "lemongine.Sort";
       nh.insert = function (b, a, c, d) {
         null == d && (d = !1);
         if (0 == b.length) b.push(a);
         else {
           null == c &&
             (c = function (a, b) {
               return a - b;
             });
           for (var f = 0, e = b.length - 1; ; ) {
             var h = Math.floor((e + f) / 2),
               g = c(a, b[h]);
             if (0 >= e - f) {
               0 <= g ? b.splice(h + 1, 0, a) : b.splice(h, 0, a);
               break;
             }
             if (d || 0 != g) 0 <= g ? (f = h + 1) : (e = h);
             else {
               b.splice(h + 1, 0, a);
               break;
             }
           }
         }
       };
       var cb = function () {};
       r["lemongine.Web"] = cb;
       cb.__name__ = "lemongine.Web";
       cb.open = function (b) {
         xb.openURL(b, "_blank");
       };
       cb.send = function (b, a, c, d, f) {
         null == a && (a = !0);
         b = new Be(b);
         for (var e = Object.keys(c.h), h = e.length, g = 0; g < h; ) {
           var m = e[g++];
           b.addParameter(m, c.h[m]);
         }
         b.onError = function (a) {
           null != f && f(a);
         };
         b.onData = function (a) {
           null != d && d(cb.parseVariables(a));
         };
         b.request(a);
       };
       cb.parseVariables = function (b) {
         for (var a = new e(), c = b.split("&"), d = 0; d < c.length; )
           if (((b = c[d]), ++d, "" != b))
             if (-1 == b.indexOf("=")) {
               var f = decodeURIComponent(b.split("+").join(" "));
               a.h[f] = "";
             } else (f = I.substr(b, 0, b.indexOf("="))), (b = I.substr(b, b.indexOf("=") + 1, null)), (f = decodeURIComponent(f.split("+").join(" "))), (b = decodeURIComponent(b.split("+").join(" "))), (a.h[f] = b);
         return a;
       };
       cb.stringifyVariables = function (b) {
         for (var a = "", c = Object.keys(b.h), d = c.length, f = 0; f < d; ) {
           var e = c[f++];
           if ("" == b.h[e]) a += encodeURIComponent(e) + "&";
           else {
             var h = encodeURIComponent(e) + "=";
             a += h + encodeURIComponent(b.h[e]) + "&";
           }
         }
         return I.substr(a, 0, -1);
       };
       var Fc = function (b, a, c) {
         this.dataOffset = this.dataStride = 0;
         this.dataCount = 3;
         this.dirtyStart = this.dirtyEnd = -1;
         this.dirtyBuffer = this.dirtyLength = !0;
         this.name = b;
         this.value = [];
         this.type = a;
         this.buffer = Ge.context.createBuffer();
       };
       r["lemongine.pieces.Attrib"] = Fc;
       Fc.__name__ = "lemongine.pieces.Attrib";
       Fc.createForShader = function (b, a, c, d, f, e) {
         null == e && (e = 0);
         null == f && (f = 0);
         null == d && (d = 3);
         var l = new Fc(b, c, !1);
         l.location = p.gl.getAttribLocation(a.program, b);
         -1 == l.location && Ia.trace("Warning! Attribute '" + b + "' couldn't be found in shader!", { fileName: "lemongine/pieces/Attrib.hx", lineNumber: 95, className: "lemongine.pieces.Attrib", methodName: "createForShader" });
         l.name = b;
         l.type = c;
         l.dataCount = d;
         l.dataStride = f;
         l.dataOffset = e;
         return l;
       };
       Fc.prototype = {
         setValue: function (b, a, c, d) {
           null == d && (d = -1);
           null == c && (c = -1);
           null == a && (a = !0);
           this.value = b;
           this.setDirty(a, c, d);
           return this;
         },
         getValue: function () {
           return this.value;
         },
         setDirty: function (b, a, c) {
           null == c && (c = -1);
           null == a && (a = -1);
           null == b && (b = !0);
           0 == this.dirtyBuffer
             ? ((this.dirtyBuffer = !0), 1 == b ? (this.dirtyLength = !0) : ((this.dirtyLength = !1), (this.dirtyStart = a), (this.dirtyEnd = a + c)))
             : -1 != this.dirtyStart &&
               (1 == b ? (this.dirtyLength = !0) : 0 == this.dirtyLength && -1 != this.dirtyStart && ((this.dirtyStart = Math.floor(Math.min(this.dirtyStart, a))), (this.dirtyEnd = Math.floor(Math.max(this.dirtyEnd, a + c)))));
         },
         __class__: Fc,
       };
       var yh = function (b, a, c, d, f) {
         this.glyph = b;
         this.x = a;
         this.y = c;
         this.frontOffset = d;
         this.backOffset = f;
       };
       r["lemongine.pieces.BitmapFontGlyph"] = yh;
       yh.__name__ = "lemongine.pieces.BitmapFontGlyph";
       yh.prototype = { __class__: yh };
       var Wg = function () {};
       r["lemongine.screens.BaseScreen"] = Wg;
       Wg.__name__ = "lemongine.screens.BaseScreen";
       Wg.prototype = {
         loadAssets: function () {},
         initialize: function () {
           return !0;
         },
         run: function () {
           return !0;
         },
         __class__: Wg,
       };
       var og = function () {
         this.wasPaused = this.waitingForFirstInteraction = !1;
         this.tick = 0;
         this.splashPixel = new h(4, 4);
         this.splashStartTime = 0;
         this.splashArray = [];
         this.splashLookup = new Ma();
         this.splashSoundPlayed = !1;
       };
       r["lemongine.screens.SplashScreen"] = og;
       og.__name__ = "lemongine.screens.SplashScreen";
       og.__super__ = Wg;
       og.prototype = v(Wg.prototype, {
         loadAssets: function () {
           this.splashImage = P.loadImage("assets/images/zanzlanz.png");
           this.splashSound = P.loadSound("assets/sfx/zanzlanz-splash.ogg");
         },
         initialize: function () {
           this.scene = new fb(m.Instance.scene.get_width(), m.Instance.scene.get_height());
           this.scene.setup2D(this.scene.get_width(), this.scene.get_height(), new F().fromHex(-16777216));
           this.splashQuadPool = new da(this.splashImage);
           var b = Math.floor(Math.max(1, this.scene.get_width() / 320));
           this.splashQuadPool.transform
             .translate(-140, -30, 0)
             .scale(b, b)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           for (b = 0; 70 > b; ) for (var a = b++, c = 0; 18 > c; ) this.splashQuadPool.addQuad(new M(4 * a, 4 * c++, 0), null, new h());
           this.splashQuadPool.addQuad(new M(58, 2, 0), null, new h());
           this.splashQuadPool.addQuad(new M(112, 2, 0), null, new h());
           this.splashQuadPool.addQuad(new M(174, 2, 0), null, new h());
           for (b = 0; 14 > b; )
             (a = b++), (c = this.splashImage.getPixel(4 * a, 0)), (this.splashLookup.h[c] = a), (this.splashArray[a] = new h(4 * a, 1)), (this.splashArray[a + 14] = new h(4 * a, 5)), (this.splashArray[a + 28] = new h(4 * a, 9));
           this.splashStartTime = new Date().getTime() / 1e3;
           return !0;
         },
         run: function () {
           if (1 == m.Instance.enginePaused)
             return this.splashSoundPlayed ? (this.splashSound.stop(), (this.splashStartTime = new Date().getTime() / 1e3 - this.tick / 30)) : (this.splashStartTime = new Date().getTime() / 1e3), (this.wasPaused = !0), !1;
           this.wasPaused
             ? ((this.wasPaused = !1), this.splashSoundPlayed && this.splashSound.play(0.7, 0, new Date().getTime() / 1e3 - this.splashStartTime - 0.4666666666666667))
             : this.waitingForFirstInteraction &&
               1 == m.Instance.firstInteraction &&
               ((this.waitingForFirstInteraction = !1), this.splashSoundPlayed && this.splashSound.play(0.7, 0, new Date().getTime() / 1e3 - this.splashStartTime - 0.4666666666666667));
           this.tick = 30 * (new Date().getTime() / 1e3 - this.splashStartTime);
           var b = Math.max(0, Math.min(38, this.tick - 40)) + Math.max(0, this.tick - 106);
           14 <= this.tick &&
             0 == this.splashSoundPlayed &&
             ((this.splashSoundPlayed = !0), 1 == m.Instance.firstInteraction ? this.splashSound.play(0.7) : (this.waitingForFirstInteraction = !0), (this.splashStartTime = new Date().getTime() / 1e3 - 0.4666666666666667));
           if (40 <= this.tick)
             for (var a = 0; 70 > a; )
               for (var c = a++, d = 0; 18 > d; ) {
                 var f = d++,
                   e = this.splashLookup,
                   k = this.splashImage.getPixel(c, f + 13);
                 e = e.h[k];
                 k = this.splashLookup;
                 var g = this.splashImage.getPixel(c, f + 31);
                 k = k.h[g];
                 -0.7 < Math.sin(-b / 20 + (f + 5) / 200 + c / 200)
                   ? this.splashQuadPool.updateQuad(
                       c + 70 * f,
                       new M(4 * c, 4 * f, 0),
                       this.splashArray[Math.max(0, Math.min(13, Math.floor(G.toFloat(k) + Math.max(0, 13 + 15 * Math.sin(-b / 20 + (f + 5) / 200 + c / 200))))) + 28],
                       this.splashPixel
                     )
                   : (60 < this.tick && 35 > c && 4 > Math.abs(c + 2 * (f + 5) - 4 * (this.tick - 60) - 8)) || (75 < this.tick && 35 <= c && 4 > Math.abs(c + 2 * (f + 5) - 4 * (this.tick - 75) - 30))
                   ? this.splashQuadPool.updateQuad(
                       c + 70 * f,
                       new M(4 * c, 4 * f, 0),
                       this.splashArray[Math.max(0, Math.min(13, Math.floor(G.toFloat(e) + Math.max(0, 20 + 20 * Math.sin(-b / 20 + (f + 5) / 200 + c / 200))))) + 14],
                       this.splashPixel
                     )
                   : ((k = 3 * Math.sin(Math.floor(this.tick / 2) + 1e3 * Math.sin(0.5 * c) + 100 * Math.sin(0.24 * f)) + 0.5),
                     (k *= 0.001 * Math.pow(this.tick - 90, 2)),
                     this.splashQuadPool.updateQuad(c + 70 * f, new M(4 * c, 4 * f, 0), this.splashArray[Math.max(0, Math.min(13, Math.floor(G.toFloat(e) + k)))], this.splashPixel));
               }
           10 < this.tick && 114 > this.tick
             ? this.splashQuadPool.updateQuad(1260, null, new h(70, 40 - 10 * Math.floor(4 * this.splashFadeInOut(this.tick, 10, 10, 103, 15))), new h(54, 10))
             : this.splashQuadPool.updateQuad(1260, null, new h(0, 0), new h(0, 0));
           20 < this.tick && 116 > this.tick
             ? this.splashQuadPool.updateQuad(1261, null, new h(124, 40 - 10 * Math.floor(4 * this.splashFadeInOut(this.tick, 20, 10, 105, 15))), new h(62, 10))
             : this.splashQuadPool.updateQuad(1261, null, new h(0, 0), new h(0, 0));
           30 < this.tick && 118 > this.tick
             ? this.splashQuadPool.updateQuad(1262, null, new h(186, 40 - 10 * Math.floor(4 * this.splashFadeInOut(this.tick, 30, 10, 107, 15))), new h(50, 10))
             : this.splashQuadPool.updateQuad(1262, null, new h(0, 0), new h(0, 0));
           if (164 <= this.tick) return (this.splashStartTime = new Date().getTime() / 1e3), (this.splashSoundPlayed = !1), !0;
           this.scene.draw(this.splashQuadPool);
           return !1;
         },
         splashFadeInOut: function (b, a, c, d, f) {
           return b < a ? 0 : b < a + c ? (b - a) / c : b < d ? 1 : b < d + f ? (d + f - b) / f : 0;
         },
         __class__: og,
       });
       var Ub = function () {};
       r["lemongine.shader.BasicColor"] = Ub;
       Ub.__name__ = "lemongine.shader.BasicColor";
       Ub.getShader = function () {
         null == Ub.shader &&
           ((Ub.shader = new $b("lemongine.shader.BasicColor", Ub.getFragmentShader(), Ub.getVertexShader())),
           Ub.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix"),
           Ub.shader.setUniform("color", [1, 1, 1, 1], "float4"));
         return Ub.shader;
       };
       Ub.setupEntity = function (b, a) {
         null == a ? b.setUniform("color", [1, 1, 1, 1]) : b.setUniform("color", [G.toFloat(a.r) / G.toFloat(255), G.toFloat(a.g) / G.toFloat(255), G.toFloat(a.b) / G.toFloat(255), G.toFloat(a.a) / G.toFloat(255)]);
       };
       Ub.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tuniform vec4 color;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\t\t\t\tgl_FragColor = vec4(color);\r\n\t\t\t}\r\n\t\t\t";
       };
       Ub.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var gc = function () {};
       r["lemongine.shader.BasicFont"] = gc;
       gc.__name__ = "lemongine.shader.BasicFont";
       gc.getShader = function (b) {
         if (null == b || b == La.ADD) b = La.NORMAL;
         if (!gc.shaders.exists(b)) {
           var a = new $b("lemongine.shader.BasicFont." + D[b.__enum__].__constructs__[b._hx_index]._hx_name, gc.getFragmentShader(b), gc.getVertexShader());
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition");
           a.setAttrib("texClip", "float", 4);
           a.setUniform("texSize", [0, 0], "float2");
           a.setUniform("color", [1, 1, 1, 1], "float4");
           a.setUniform("colorOffset", [0, 0, 0, 0], "float4");
           a.setUniform("mask", [-1, -1, -1, -1], "float4");
           b != La.NORMAL && (a.setUniform("texClipBG", [0, 0, 0, 0], "float4"), a.setUniform("texSizeBG", [0, 0], "float2"));
           gc.shaders.set(b, a);
         }
         return gc.shaders.get(b);
       };
       gc.getFragmentShader = function (b) {
         var a =
           "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec3 vertexPositionF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\tuniform vec4 colorOffset;\r\n\t\t\tuniform vec4 color;\r\n\t\t\tuniform vec4 mask;\r\n\t\t";
         if (b == La.NORMAL)
           a +=
             "\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src = texture2D(texture, mod((uvPositionF * texClipF.zw + texClipF.xy) / texSize.xy, 1.0));\r\n\t\t\t\t\t\r\n\t\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\t\tsrc.rgba *= color;\r\n\t\t\t\t\tsrc.rgb *= src.a;\r\n\r\n\t\t\t\t\tif(mask.z != -1.0 &&\r\n\t\t\t\t\t\t(  vertexPositionF.x < mask.x\r\n\t\t\t\t\t\t|| vertexPositionF.y < mask.y\r\n\t\t\t\t\t\t|| vertexPositionF.x >= mask.x+mask.z\r\n\t\t\t\t\t\t|| vertexPositionF.y >= mask.y+mask.w )) {\r\n\t\t\t\t\t\tdiscard;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tgl_FragColor = clamp(colorOffset + src, 0.0, 1.0);\r\n\t\t\t\t}\r\n\t\t\t";
         else {
           a +=
             "\r\n\t\t\t\tuniform sampler2D background;\r\n\t\t\t\t\r\n\t\t\t\tuniform vec2 texSizeBG;\r\n\t\t\t\tuniform vec4 texClipBG;\r\n\t\t\t\t\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src1 = texture2D(texture, mod((uvPositionF * texClipF.zw + texClipF.xy) / texSize.xy, 1.0));\r\n\t\t\t\t\tvec4 dst1 = texture2D(background, mod((uvPositionF * texClipBG.zw + texClipBG.xy) / texSizeBG.xy, 1.0));\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec3 src = src1.rgb;\r\n\t\t\t\t\tvec3 dst = dst1.rgb;\r\n\r\n\t\t\t\t\tif(mask.z != -1.0 &&\r\n\t\t\t\t\t\t(  vertexPositionF.x < mask.x\r\n\t\t\t\t\t\t|| vertexPositionF.y < mask.y\r\n\t\t\t\t\t\t|| vertexPositionF.x >= mask.x+mask.w\r\n\t\t\t\t\t\t|| vertexPositionF.y >= mask.y+mask.z )\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\tdiscard;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec4 mixedColor = vec4(";
           switch (b._hx_index) {
             case 1:
               a += "src + dst";
               break;
             case 2:
               a += "src * dst";
               break;
             case 3:
               a += "src - dst";
               break;
             case 4:
               a += "min(src, dst)";
               break;
             case 5:
               a +=
                 "vec3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)))";
               break;
             case 6:
               a += "(src + dst) - 1.0";
               break;
             case 7:
               a += "max(src, dst)";
               break;
             case 8:
               a += "(src + dst) - (src * dst)";
               break;
             case 9:
               a +=
                 "vec3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)))";
               break;
             case 10:
               a +=
                 "vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)))";
               break;
             case 11:
               a +=
                 "vec3((src.x <= 0.5) ? (dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x)) : (((src.x > 0.5) && (dst.x <= 0.25)) ? (dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x)) : (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y)) : (((src.y > 0.5) && (dst.y <= 0.25)) ? (dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y)) : (dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z)) : (((src.z > 0.5) && (dst.z <= 0.25)) ? (dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z)) : (dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z))))";
               break;
             case 12:
               a +=
                 "vec3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)))";
               break;
             case 13:
               a +=
                 "vec3((src.x <= 0.5) ? (1.0 - (1.0 - dst.x) / (2.0 * src.x)) : (dst.x / (2.0 * (1.0 - src.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (1.0 - (1.0 - dst.y) / (2.0 * src.y)) : (dst.y / (2.0 * (1.0 - src.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (1.0 - (1.0 - dst.z) / (2.0 * src.z)) : (dst.z / (2.0 * (1.0 - src.z))))";
               break;
             case 14:
               a += "2.0 * src + dst - 1.0";
               break;
             case 15:
               a +=
                 "vec3((src.x > 0.5) ? max(dst.x, 2.0 * (src.x - 0.5)) : min(dst.x, 2.0 * src.x),\r\n\t\t\t\t\t\t\t\t\t\t  (src.x > 0.5) ? max(dst.y, 2.0 * (src.y - 0.5)) : min(dst.y, 2.0 * src.y),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z > 0.5) ? max(dst.z, 2.0 * (src.z - 0.5)) : min(dst.z, 2.0 * src.z))";
               break;
             case 16:
               a += "abs(dst - src)";
               break;
             case 17:
               a += "src + dst - 2.0 * src * dst";
               break;
             default:
               a = "src";
           }
           a += ", src1.a);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffset + color*mixedColor, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t\t";
         }
         return a;
       };
       gc.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\t\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec3 vertexPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\tvertexPositionF = vertexPosition;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var La = (D["lemongine.shader.BlendMode"] = {
         __ename__: "lemongine.shader.BlendMode",
         __constructs__: null,
         NORMAL: { _hx_name: "NORMAL", _hx_index: 0, __enum__: "lemongine.shader.BlendMode", toString: n },
         ADD: { _hx_name: "ADD", _hx_index: 1, __enum__: "lemongine.shader.BlendMode", toString: n },
         MULTIPLY: { _hx_name: "MULTIPLY", _hx_index: 2, __enum__: "lemongine.shader.BlendMode", toString: n },
         SUBTRACT: { _hx_name: "SUBTRACT", _hx_index: 3, __enum__: "lemongine.shader.BlendMode", toString: n },
         DARKEN: { _hx_name: "DARKEN", _hx_index: 4, __enum__: "lemongine.shader.BlendMode", toString: n },
         COLOR_BURN: { _hx_name: "COLOR_BURN", _hx_index: 5, __enum__: "lemongine.shader.BlendMode", toString: n },
         LINEAR_BURN: { _hx_name: "LINEAR_BURN", _hx_index: 6, __enum__: "lemongine.shader.BlendMode", toString: n },
         LIGHTEN: { _hx_name: "LIGHTEN", _hx_index: 7, __enum__: "lemongine.shader.BlendMode", toString: n },
         SCREEN: { _hx_name: "SCREEN", _hx_index: 8, __enum__: "lemongine.shader.BlendMode", toString: n },
         COLOR_DODGE: { _hx_name: "COLOR_DODGE", _hx_index: 9, __enum__: "lemongine.shader.BlendMode", toString: n },
         OVERLAY: { _hx_name: "OVERLAY", _hx_index: 10, __enum__: "lemongine.shader.BlendMode", toString: n },
         SOFT_LIGHT: { _hx_name: "SOFT_LIGHT", _hx_index: 11, __enum__: "lemongine.shader.BlendMode", toString: n },
         HARD_LIGHT: { _hx_name: "HARD_LIGHT", _hx_index: 12, __enum__: "lemongine.shader.BlendMode", toString: n },
         VIVID_LIGHT: { _hx_name: "VIVID_LIGHT", _hx_index: 13, __enum__: "lemongine.shader.BlendMode", toString: n },
         LINEAR_LIGHT: { _hx_name: "LINEAR_LIGHT", _hx_index: 14, __enum__: "lemongine.shader.BlendMode", toString: n },
         PIN_LIGHT: { _hx_name: "PIN_LIGHT", _hx_index: 15, __enum__: "lemongine.shader.BlendMode", toString: n },
         DIFFERENCE: { _hx_name: "DIFFERENCE", _hx_index: 16, __enum__: "lemongine.shader.BlendMode", toString: n },
         EXCLUSION: { _hx_name: "EXCLUSION", _hx_index: 17, __enum__: "lemongine.shader.BlendMode", toString: n },
       });
       La.__constructs__ = [
         La.NORMAL,
         La.ADD,
         La.MULTIPLY,
         La.SUBTRACT,
         La.DARKEN,
         La.COLOR_BURN,
         La.LINEAR_BURN,
         La.LIGHTEN,
         La.SCREEN,
         La.COLOR_DODGE,
         La.OVERLAY,
         La.SOFT_LIGHT,
         La.HARD_LIGHT,
         La.VIVID_LIGHT,
         La.LINEAR_LIGHT,
         La.PIN_LIGHT,
         La.DIFFERENCE,
         La.EXCLUSION,
       ];
       var Xb = function () {};
       r["lemongine.shader.BasicTexture"] = Xb;
       Xb.__name__ = "lemongine.shader.BasicTexture";
       Xb.getShader = function (b) {
         if (null == b || b == La.ADD) b = La.NORMAL;
         if (!Xb.shaders.exists(b)) {
           var a = new $b("lemongine.shader.BasicTexture." + D[b.__enum__].__constructs__[b._hx_index]._hx_name, Xb.getFragmentShader(b), Xb.getVertexShader());
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition");
           a.setAttrib("texClip", "float", 4);
           a.setUniform("texSize", [0, 0], "float2");
           a.setUniform("color", [1, 1, 1, 1], "float4");
           a.setUniform("colorOffset", [0, 0, 0, 0], "float4");
           b != La.NORMAL && (a.setUniform("texClipBG", [0, 0, 0, 0], "float4"), a.setUniform("texSizeBG", [0, 0], "float2"));
           Xb.shaders.set(b, a);
         }
         return Xb.shaders.get(b);
       };
       Xb.getFragmentShader = function (b) {
         var a =
           "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\tuniform vec4 colorOffset;\r\n\t\t\tuniform vec4 color;\r\n\t\t";
         if (b == La.NORMAL)
           a +=
             "\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src = texture2D(texture, mod((uvPositionF * texClipF.zw + texClipF.xy) / texSize.xy, 1.0));\r\n\t\t\t\t\t\r\n\t\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\t\tsrc.rgba *= color;\r\n\t\t\t\t\tsrc.rgb *= src.a;\r\n\t\t\t\t\t\r\n\t\t\t\t\tgl_FragColor = clamp(colorOffset + src, 0.0, 1.0);\r\n\t\t\t\t}\r\n\t\t\t";
         else {
           a +=
             "\r\n\t\t\t\tuniform sampler2D background;\r\n\t\t\t\t\r\n\t\t\t\tuniform vec2 texSizeBG;\r\n\t\t\t\tuniform vec4 texClipBG;\r\n\t\t\t\t\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src1 = texture2D(texture, mod((uvPositionF * texClipF.zw + texClipF.xy) / texSize.xy, 1.0));\r\n\t\t\t\t\tvec4 dst1 = texture2D(background, mod((uvPositionF * texClipBG.zw + texClipBG.xy) / texSizeBG.xy, 1.0));\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec3 src = src1.rgb;\r\n\t\t\t\t\tvec3 dst = dst1.rgb;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec4 mixedColor = vec4(";
           switch (b._hx_index) {
             case 1:
               a += "src + dst";
               break;
             case 2:
               a += "src * dst";
               break;
             case 3:
               a += "src - dst";
               break;
             case 4:
               a += "min(src, dst)";
               break;
             case 5:
               a +=
                 "vec3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)))";
               break;
             case 6:
               a += "(src + dst) - 1.0";
               break;
             case 7:
               a += "max(src, dst)";
               break;
             case 8:
               a += "(src + dst) - (src * dst)";
               break;
             case 9:
               a +=
                 "vec3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)))";
               break;
             case 10:
               a +=
                 "vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)))";
               break;
             case 11:
               a +=
                 "vec3((src.x <= 0.5) ? (dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x)) : (((src.x > 0.5) && (dst.x <= 0.25)) ? (dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x)) : (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y)) : (((src.y > 0.5) && (dst.y <= 0.25)) ? (dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y)) : (dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z)) : (((src.z > 0.5) && (dst.z <= 0.25)) ? (dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z)) : (dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z))))";
               break;
             case 12:
               a +=
                 "vec3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)))";
               break;
             case 13:
               a +=
                 "vec3((src.x <= 0.5) ? (1.0 - (1.0 - dst.x) / (2.0 * src.x)) : (dst.x / (2.0 * (1.0 - src.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (1.0 - (1.0 - dst.y) / (2.0 * src.y)) : (dst.y / (2.0 * (1.0 - src.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (1.0 - (1.0 - dst.z) / (2.0 * src.z)) : (dst.z / (2.0 * (1.0 - src.z))))";
               break;
             case 14:
               a += "2.0 * src + dst - 1.0";
               break;
             case 15:
               a +=
                 "vec3((src.x > 0.5) ? max(dst.x, 2.0 * (src.x - 0.5)) : min(dst.x, 2.0 * src.x),\r\n\t\t\t\t\t\t\t\t\t\t  (src.x > 0.5) ? max(dst.y, 2.0 * (src.y - 0.5)) : min(dst.y, 2.0 * src.y),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z > 0.5) ? max(dst.z, 2.0 * (src.z - 0.5)) : min(dst.z, 2.0 * src.z))";
               break;
             case 16:
               a += "abs(dst - src)";
               break;
             case 17:
               a += "src + dst - 2.0 * src * dst";
               break;
             default:
               a = "src";
           }
           a += ", src1.a);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffset + color*mixedColor, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t\t";
         }
         return a;
       };
       Xb.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\t\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var Na = function () {};
       r["lemongine.shader.BasicTextureSingle"] = Na;
       Na.__name__ = "lemongine.shader.BasicTextureSingle";
       Na.getShader = function (b) {
         if (null == b || b == La.ADD) b = La.NORMAL;
         if (!Na.shaders.exists(b)) {
           var a = new $b("lemongine.shader.BasicTexture." + D[b.__enum__].__constructs__[b._hx_index]._hx_name, Na.getFragmentShader(b), Na.getVertexShader());
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition");
           a.setUniform("texClip", [0, 0, 0, 0], "float4");
           a.setUniform("texSize", [0, 0], "float2");
           a.setUniform("color", [1, 1, 1, 1], "float4");
           a.setUniform("colorOffset", [0, 0, 0, 0], "float4");
           a.setUniform("wrap", [1, 1], "float2");
           b != La.NORMAL && (a.setUniform("texClipBG", [0, 0, 0, 0], "float4"), a.setUniform("texSizeBG", [0, 0], "float2"));
           Na.shaders.set(b, a);
         }
         return Na.shaders.get(b);
       };
       Na.setupEntity = function (b, a, c, d, f, e, h, g, m, n) {
         null == h && (h = !0);
         null == e && (e = !0);
         b.setTextureBuffer("texture", a);
         null != c ? b.setUniform("texClip", [c.x, c.y, c.width, c.height]) : b.setUniform("texClip", [0, 0, a.width, a.height]);
         b.setUniform("texSize", [a.width, a.height]);
         null != d ? b.setUniform("color", d.toFloatArray()) : b.setUniform("color", [1, 1, 1, 1]);
         null != f ? b.setUniform("colorOffset", f.toFloatArray()) : b.setUniform("colorOffset", [0, 0, 0, 0]);
         b.setUniform("wrap", [e ? 1 : 0, h ? 1 : 0]);
         null != g && (b.setTextureBuffer("background", a), null != m ? b.setUniform("texClipBG", [m.x, m.y, m.width, m.height]) : b.setUniform("texClipBG", [0, 0, g.width, g.height]), b.setUniform("texSizeBG", [g.width, g.height]));
       };
       Na.getFragmentShader = function (b) {
         var a =
           "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\tuniform vec4 colorOffset;\r\n\t\t\tuniform vec4 color;\r\n\t\t\tuniform vec4 texClip;\r\n\t\t\tuniform vec2 wrap;\r\n\t\t";
         if (b == La.NORMAL)
           a +=
             "\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec2 val = (uvPositionF * texClip.zw + texClip.xy) / texSize.xy;\r\n\t\t\t\t\tvec4 src = texture2D(texture, mod(val, 1.0)*wrap + clamp(val, 0.0, 1.0)*(1.0-wrap));\r\n\t\t\t\t\t\r\n\t\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\t\tsrc.rgba *= color;\r\n\t\t\t\t\tsrc.rgb *= src.a;\r\n\t\t\t\t\t\r\n\t\t\t\t\tgl_FragColor = clamp(colorOffset + src, 0.0, 1.0);\r\n\t\t\t\t}\r\n\t\t\t";
         else {
           a +=
             "\r\n\t\t\t\tuniform sampler2D background;\r\n\t\t\t\t\r\n\t\t\t\tuniform vec2 texSizeBG;\r\n\t\t\t\tuniform vec4 texClipBG;\r\n\t\t\t\t\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src1 = texture2D(texture, mod((uvPositionF * texClip.zw + texClip.xy) / texSize.xy, 1.0));\r\n\t\t\t\t\tvec4 dst1 = texture2D(background, mod((uvPositionF * texClipBG.zw + texClipBG.xy) / texSizeBG.xy, 1.0));\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec3 src = src1.rgb;\r\n\t\t\t\t\tvec3 dst = dst1.rgb;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec4 mixedColor = vec4(";
           switch (b._hx_index) {
             case 1:
               a += "src + dst";
               break;
             case 2:
               a += "src * dst";
               break;
             case 3:
               a += "src - dst";
               break;
             case 4:
               a += "min(src, dst)";
               break;
             case 5:
               a +=
                 "vec3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)))";
               break;
             case 6:
               a += "(src + dst) - 1.0";
               break;
             case 7:
               a += "max(src, dst)";
               break;
             case 8:
               a += "(src + dst) - (src * dst)";
               break;
             case 9:
               a +=
                 "vec3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)))";
               break;
             case 10:
               a +=
                 "vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)))";
               break;
             case 11:
               a +=
                 "vec3((src.x <= 0.5) ? (dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x)) : (((src.x > 0.5) && (dst.x <= 0.25)) ? (dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x)) : (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y)) : (((src.y > 0.5) && (dst.y <= 0.25)) ? (dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y)) : (dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z)) : (((src.z > 0.5) && (dst.z <= 0.25)) ? (dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z)) : (dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z))))";
               break;
             case 12:
               a +=
                 "vec3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)))";
               break;
             case 13:
               a +=
                 "vec3((src.x <= 0.5) ? (1.0 - (1.0 - dst.x) / (2.0 * src.x)) : (dst.x / (2.0 * (1.0 - src.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (1.0 - (1.0 - dst.y) / (2.0 * src.y)) : (dst.y / (2.0 * (1.0 - src.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (1.0 - (1.0 - dst.z) / (2.0 * src.z)) : (dst.z / (2.0 * (1.0 - src.z))))";
               break;
             case 14:
               a += "2.0 * src + dst - 1.0";
               break;
             case 15:
               a +=
                 "vec3((src.x > 0.5) ? max(dst.x, 2.0 * (src.x - 0.5)) : min(dst.x, 2.0 * src.x),\r\n\t\t\t\t\t\t\t\t\t\t  (src.x > 0.5) ? max(dst.y, 2.0 * (src.y - 0.5)) : min(dst.y, 2.0 * src.y),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z > 0.5) ? max(dst.z, 2.0 * (src.z - 0.5)) : min(dst.z, 2.0 * src.z))";
               break;
             case 16:
               a += "abs(dst - src)";
               break;
             case 17:
               a += "src + dst - 2.0 * src * dst";
               break;
             default:
               a = "src";
           }
           a += ", src1.a);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffset + color*mixedColor, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t\t";
         }
         return a;
       };
       Na.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var Yb = function () {};
       r["lemongine.shader.BasicVertexColor"] = Yb;
       Yb.__name__ = "lemongine.shader.BasicVertexColor";
       Yb.getShader = function () {
         null == Yb.shader &&
           ((Yb.shader = new $b("lemongine.shader.BasicVertexColor", Yb.getFragmentShader(), Yb.getVertexShader())),
           Yb.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix"),
           Yb.shader.setAttrib("color", "float", 4));
         return Yb.shader;
       };
       Yb.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\t\t\t\tgl_FragColor = vec4(colorF);\r\n\t\t\t}\r\n\t\t\t";
       };
       Yb.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\t\r\n\t\t\tattribute vec4 color;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tcolorF = color;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var He = (D["lemongine.shader.Quality"] = {
         __ename__: "lemongine.shader.Quality",
         __constructs__: null,
         LOW: { _hx_name: "LOW", _hx_index: 0, __enum__: "lemongine.shader.Quality", toString: n },
         MEDIUM: { _hx_name: "MEDIUM", _hx_index: 1, __enum__: "lemongine.shader.Quality", toString: n },
         HIGH: { _hx_name: "HIGH", _hx_index: 2, __enum__: "lemongine.shader.Quality", toString: n },
       });
       He.__constructs__ = [He.LOW, He.MEDIUM, He.HIGH];
       var Gc = function () {};
       r["lemongine.shader.BlurFilter"] = Gc;
       Gc.__name__ = "lemongine.shader.BlurFilter";
       Gc.getShader = function (b, a) {
         null == a && (a = !0);
         null == b && (b = He.MEDIUM);
         switch (b._hx_index) {
           case 0:
             var c = 10;
             var d = "low";
             break;
           case 1:
             c = 25;
             d = "medium";
             break;
           case 2:
             (c = 100), (d = "high");
         }
         b = "lemongine.shader.BlurFilter." + (a ? "clamp" : "wrap") + "." + d;
         Object.prototype.hasOwnProperty.call(Gc.shaders.h, b) ||
           ((a = new $b(b, Gc.getFragmentShader(a, c), Gc.getVertexShader())),
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition"),
           a.setUniform("blur", [0, 0], "float2"),
           a.setUniform("texSize", [0, 0], "float2"),
           (Gc.shaders.h[b] = a));
         return Gc.shaders.h[b];
       };
       Gc.getFragmentShader = function (b, a) {
         return (
           "precision mediump float;\r\n\t\t\t\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform vec2 blur;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\t\t\t\t\r\n\t\t\t\tvec4 accumulation = vec4(0.0, 0.0, 0.0, 0.0);\r\n\t\t\t\tfloat totalGain = 0.0;\r\n\t\t\t\tfloat maxSide = max(blur.x, blur.y);\r\n\t\t\t\tfor (int x = -" +
           a +
           "; x <= " +
           a +
           "; x++) {\r\n\t\t\t\t\tfor (int y = -" +
           a +
           "; y <= " +
           a +
           "; y++) {\r\n\t\t\t\t\t\tfloat xNorm = float(x) * " +
           1 / a +
           ";\r\n\t\t\t\t\t\tfloat yNorm = float(y) * " +
           1 / a +
           ";\r\n\t\t\t\t\t\tfloat dist = xNorm * xNorm / (blur.x / maxSide * blur.x / maxSide) + yNorm * yNorm / (blur.y / maxSide * blur.y / maxSide);\r\n\t\t\t\t\t\tif (dist <= 1.0) {\r\n\t\t\t\t\t\t\tfloat gain = (1.0 - dist);\r\n\t\t\t\t\t\t\ttotalGain += gain;\r\n\t\t\t\t\t\t\tvec2 newUV = uvPositionF + vec2(1.0 / texSize.x * xNorm * maxSide, 1.0 / texSize.y * yNorm * maxSide);\r\n\t\t\t\t\t\t\t" +
           (b ? "\r\n\t\t\t\t\t\t\t\tnewUV.x = clamp(newUV.x, 1.0 / texSize.x, 1.0 - 1.0 / texSize.x * xNorm);\r\n\t\t\t\t\t\t\t\tnewUV.y = clamp(newUV.y, 1.0 / texSize.y, 1.0 - 1.0 / texSize.y * yNorm);\r\n\t\t\t\t\t\t\t" : "") +
           "\r\n\t\t\t\t\t\t\taccumulation += texture2D(texture, newUV) * gain;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\taccumulation /= max(0.01, totalGain);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = accumulation.xyzw;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t"
         );
       };
       Gc.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\t//attribute vec4 texClip;\r\n\t\t\t\r\n\t\t\t//varying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\t//texClipF = texClip;\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var ob = function () {};
       r["lemongine.shader.GradientRadial"] = ob;
       ob.__name__ = "lemongine.shader.GradientRadial";
       ob.getShader = function () {
         null == ob.shader &&
           ((ob.shader = new $b("lemongine.shader.gradientradial", ob.getFragmentShader(), ob.getVertexShader())),
           ob.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix"),
           ob.shader.setUniform("colori", [0, 0, 0, 1], "float4"),
           ob.shader.setUniform("coloro", [0, 0, 0, 1], "float4"),
           ob.shader.setUniform("position", [0.5, 0.5, 0, 1], "float4"),
           ob.shader.setAttrib("uv", "float", 2));
         return ob.shader;
       };
       ob.setupEntity = function (b, a, c, d, f) {
         null != c && b.setUniform("colori", c.toFloatArray());
         null != d && b.setUniform("coloro", d.toFloatArray());
         null != f && b.setUniform("position", [f.x, f.y, f.width, f.height]);
         null != a && b.setAttrib("uv", a);
       };
       ob.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tvarying vec2 uvF;\r\n\r\n\t\t\tuniform vec4 colori;\r\n\t\t\tuniform vec4 coloro;\r\n\t\t\tuniform vec4 position;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tfloat distToPosition = length(uvF-position.xy);\r\n\t\t\t\tfloat percent = clamp((distToPosition-position.z)/(position.w-position.z), 0.0, 1.0);\r\n\r\n\t\t\t\tgl_FragColor = vec4(colori*(1.0-percent) + coloro*(percent));\r\n\t\t\t}\r\n\t\t\t";
       };
       ob.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\t\r\n\t\t\tattribute vec2 uv;\r\n\t\t\tvarying vec2 uvF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvF = uv;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var gh = function () {
         this.connected = !0;
         this.buttons = [];
         this.axes = [];
       };
       r["lime._internal.backend.html5.GameDeviceData"] = gh;
       gh.__name__ = "lime._internal.backend.html5.GameDeviceData";
       gh.prototype = { __class__: gh };
       var ra = function () {
         this.validStatus0 = new Ra("Tizen", "gi").match(window.navigator.userAgent);
       };
       r["lime._internal.backend.html5.HTML5HTTPRequest"] = ra;
       ra.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
       ra.loadImage = function (b) {
         var a = new Vb();
         ra.activeRequests < ra.requestLimit ? (ra.activeRequests++, ra.__loadImage(b, a, 0)) : ra.requestQueue.add({ instance: null, uri: b, promise: a, type: "IMAGE", options: 0 });
         return a.future;
       };
       ra.loadImageFromBytes = function (b, a) {
         var c = URL.createObjectURL(new Blob([b.b.bufferValue], { type: a }));
         return null != c
           ? ((b = new Vb()), ra.activeRequests < ra.requestLimit ? (ra.activeRequests++, ra.__loadImage(c, b, 1)) : ra.requestQueue.add({ instance: null, uri: c, promise: b, type: "IMAGE", options: 1 }), b.future)
           : ra.loadImage("data:" + a + ";base64," + Hc.encode(b));
       };
       ra.processQueue = function () {
         if (ra.activeRequests < ra.requestLimit && 0 < ra.requestQueue.length) {
           ra.activeRequests++;
           var b = ra.requestQueue.pop();
           switch (b.type) {
             case "BINARY":
               b.instance.__loadData(b.uri, b.promise);
               break;
             case "IMAGE":
               ra.__loadImage(b.uri, b.promise, b.options);
               break;
             case "TEXT":
               b.instance.__loadText(b.uri, b.promise);
               break;
             default:
               ra.activeRequests--;
           }
         }
       };
       ra.__fixHostname = function (b) {
         return null == b ? "" : b;
       };
       ra.__fixPort = function (b, a) {
         if (null == b || "" == b)
           switch (a) {
             case "ftp:":
               return "21";
             case "gopher:":
               return "70";
             case "http:":
               return "80";
             case "https:":
               return "443";
             case "ws:":
               return "80";
             case "wss:":
               return "443";
             default:
               return "";
           }
         return b;
       };
       ra.__fixProtocol = function (b) {
         return null == b || "" == b ? "http:" : b;
       };
       ra.__isInMemoryURI = function (b) {
         return Sa.startsWith(b, "data:") ? !0 : Sa.startsWith(b, "blob:");
       };
       ra.__isSameOrigin = function (b) {
         if (null == b || "" == b || ra.__isInMemoryURI(b)) return !0;
         null == ra.originElement &&
           ((ra.originElement = window.document.createElement("a")),
           (ra.originHostname = ra.__fixHostname(L.location.hostname)),
           (ra.originProtocol = ra.__fixProtocol(L.location.protocol)),
           (ra.originPort = ra.__fixPort(L.location.port, ra.originProtocol)));
         var a = ra.originElement;
         a.href = b;
         "" == a.hostname && (a.href = a.href);
         b = ra.__fixHostname(a.hostname);
         var c = ra.__fixProtocol(a.protocol);
         a = ra.__fixPort(a.port, c);
         return "file:" == c || ("" != b && b != ra.originHostname) ? !1 : "" == a || a == ra.originPort;
       };
       ra.__loadImage = function (b, a, c) {
         var d = new Image();
         ra.__isSameOrigin(b) || (d.crossOrigin = "Anonymous");
         null == ra.supportsImageProgress && (ra.supportsImageProgress = "onprogress" in d);
         if (ra.supportsImageProgress || ra.__isInMemoryURI(b))
           d.addEventListener(
             "load",
             function (f) {
               ra.__revokeBlobURI(b, c);
               f = new Ta(null, d.width, d.height);
               f.__srcImage = d;
               ra.activeRequests--;
               ra.processQueue();
               a.complete(new ua(f));
             },
             !1
           ),
             d.addEventListener(
               "progress",
               function (b) {
                 a.progress(b.loaded, b.total);
               },
               !1
             ),
             d.addEventListener(
               "error",
               function (d) {
                 ra.__revokeBlobURI(b, c);
                 ra.activeRequests--;
                 ra.processQueue();
                 a.error(d.detail);
               },
               !1
             ),
             (d.src = b);
         else {
           var f = new XMLHttpRequest();
           f.onload = function (b) {
             ra.activeRequests--;
             ra.processQueue();
             new ua().__fromBytes(Ka.ofData(f.response), function (b) {
               a.complete(b);
             });
           };
           f.onerror = function (b) {
             a.error(b.message);
           };
           f.onprogress = function (b) {
             b.lengthComputable && a.progress(b.loaded, b.total);
           };
           f.open("GET", b, !0);
           f.responseType = "arraybuffer";
           f.overrideMimeType("text/plain; charset=x-user-defined");
           f.send(null);
         }
       };
       ra.__revokeBlobURI = function (b, a) {
         0 != (a & 1) && URL.revokeObjectURL(b);
       };
       ra.prototype = {
         init: function (b) {
           this.parent = b;
         },
         load: function (b, a, c) {
           this.request = new XMLHttpRequest();
           "POST" == this.parent.method ? this.request.upload.addEventListener("progress", a, !1) : this.request.addEventListener("progress", a, !1);
           this.request.onreadystatechange = c;
           a = "";
           if (null == this.parent.data) {
             c = Object.keys(this.parent.formData.h);
             for (var d = c.length, f = 0; f < d; ) {
               var e = c[f++];
               0 < a.length && (a += "&");
               var h = this.parent.formData.h[e];
               if (-1 < e.indexOf("[]") && h instanceof Array) {
                 var g = [];
                 for (h = aa(h); h.hasNext(); ) {
                   var m = h.next();
                   g.push(encodeURIComponent(m));
                 }
                 g = g.join("&amp;" + e + "=");
                 a += encodeURIComponent(e) + "=" + g;
               } else (g = encodeURIComponent(e) + "="), (e = E.string(h)), (a += g + encodeURIComponent(e));
             }
             "GET" == this.parent.method && "" != a && ((b = -1 < b.indexOf("?") ? b + ("&" + a) : b + ("?" + a)), (a = ""));
           }
           this.request.open(E.string(this.parent.method), b, !0);
           0 < this.parent.timeout && (this.request.timeout = this.parent.timeout);
           this.binary && (this.request.responseType = "arraybuffer");
           b = null;
           g = 0;
           for (c = this.parent.headers; g < c.length; ) (d = c[g]), ++g, "Content-Type" == d.name ? (b = d.value) : this.request.setRequestHeader(d.name, d.value);
           null != this.parent.contentType && (b = this.parent.contentType);
           null == b && (null != this.parent.data ? (b = "application/octet-stream") : "" != a && (b = "application/x-www-form-urlencoded"));
           null != b && this.request.setRequestHeader("Content-Type", b);
           this.parent.withCredentials && (this.request.withCredentials = !0);
           null != this.parent.data ? this.request.send(this.parent.data.b.bufferValue) : this.request.send(a);
         },
         loadData: function (b) {
           var a = new Vb();
           ra.activeRequests < ra.requestLimit ? (ra.activeRequests++, this.__loadData(b, a)) : ra.requestQueue.add({ instance: this, uri: b, promise: a, type: "BINARY", options: 0 });
           return a.future;
         },
         loadText: function (b) {
           var a = new Vb();
           ra.activeRequests < ra.requestLimit ? (ra.activeRequests++, this.__loadText(b, a)) : ra.requestQueue.add({ instance: this, uri: b, promise: a, type: "TEXT", options: 0 });
           return a.future;
         },
         processResponse: function () {
           if (this.parent.enableResponseHeaders) {
             this.parent.responseHeaders = [];
             for (var b, a, c = 0, d = this.request.getAllResponseHeaders().split("\n"); c < d.length; )
               (a = d[c]), ++c, (b = Sa.trim(I.substr(a, 0, a.indexOf(":")))), (a = Sa.trim(I.substr(a, a.indexOf(":") + 1, null))), "" != b && this.parent.responseHeaders.push(new zh(b, a));
           }
           this.parent.responseStatus = this.request.status;
         },
         __loadData: function (b, a) {
           var c = this;
           this.binary = !0;
           this.load(
             b,
             function (b) {
               a.progress(b.loaded, b.total);
             },
             function (b) {
               4 == c.request.readyState &&
                 (null != c.request.status && ((200 <= c.request.status && 400 > c.request.status) || (c.validStatus0 && 0 == c.request.status))
                   ? ((b = null),
                     "" == c.request.responseType ? null != c.request.responseText && (b = Ka.ofString(c.request.responseText)) : null != c.request.response && (b = Ka.ofData(c.request.response)),
                     c.processResponse(),
                     a.complete(b))
                   : (c.processResponse(), a.error(c.request.status)),
                 (c.request = null),
                 ra.activeRequests--,
                 ra.processQueue());
             }
           );
         },
         __loadText: function (b, a) {
           var c = this;
           this.binary = !1;
           this.load(
             b,
             function (b) {
               a.progress(b.loaded, b.total);
             },
             function (b) {
               4 == c.request.readyState &&
                 (null != c.request.status && ((200 <= c.request.status && 400 >= c.request.status) || (c.validStatus0 && 0 == c.request.status))
                   ? (c.processResponse(), a.complete(c.request.responseText))
                   : (c.processResponse(), a.error(c.request.status)),
                 (c.request = null),
                 ra.activeRequests--,
                 ra.processQueue());
             }
           );
         },
         __class__: ra,
       };
       var wa = function (b) {
         this.inputing = !1;
         this.unusedTouchesPool = new $c();
         this.scale = 1;
         this.currentTouches = new Ma();
         this.parent = b;
         this.cursor = Ua.DEFAULT;
         this.cacheMouseY = this.cacheMouseX = 0;
         var a = b.__attributes;
         Object.prototype.hasOwnProperty.call(a, "context") || (a.context = {});
         this.renderType = a.context.type;
         Object.prototype.hasOwnProperty.call(a, "element") && (b.element = a.element);
         var c = b.element;
         Object.prototype.hasOwnProperty.call(a, "allowHighDPI") && a.allowHighDPI && "dom" != this.renderType && (this.scale = window.devicePixelRatio);
         b.__scale = this.scale;
         this.setWidth = Object.prototype.hasOwnProperty.call(a, "width") ? a.width : 0;
         this.setHeight = Object.prototype.hasOwnProperty.call(a, "height") ? a.height : 0;
         b.__width = this.setWidth;
         b.__height = this.setHeight;
         b.id = wa.windowID++;
         c instanceof HTMLCanvasElement ? (this.canvas = c) : "dom" == this.renderType ? (this.div = window.document.createElement("div")) : (this.canvas = window.document.createElement("canvas"));
         if (null != this.canvas) {
           var d = this.canvas.style;
           d.setProperty("-webkit-transform", "translateZ(0)", null);
           d.setProperty("transform", "translateZ(0)", null);
         } else
           null != this.div &&
             ((d = this.div.style),
             d.setProperty("-webkit-transform", "translate3D(0,0,0)", null),
             d.setProperty("transform", "translate3D(0,0,0)", null),
             (d.position = "relative"),
             (d.overflow = "hidden"),
             d.setProperty("-webkit-user-select", "none", null),
             d.setProperty("-moz-user-select", "none", null),
             d.setProperty("-ms-user-select", "none", null),
             d.setProperty("-o-user-select", "none", null));
         0 == b.__width &&
           0 == b.__height &&
           (null != c ? ((b.__width = c.clientWidth), (b.__height = c.clientHeight)) : ((b.__width = window.innerWidth), (b.__height = window.innerHeight)),
           (this.cacheElementWidth = b.__width),
           (this.cacheElementHeight = b.__height),
           (this.resizeElement = !0));
         null != this.canvas
           ? ((this.canvas.width = Math.round(b.__width * this.scale)), (this.canvas.height = Math.round(b.__height * this.scale)), (this.canvas.style.width = b.__width + "px"), (this.canvas.style.height = b.__height + "px"))
           : ((this.div.style.width = b.__width + "px"), (this.div.style.height = b.__height + "px"));
         if ((Object.prototype.hasOwnProperty.call(a, "resizable") && a.resizable) || (!Object.prototype.hasOwnProperty.call(a, "width") && 0 == this.setWidth && 0 == this.setHeight)) b.__resizable = !0;
         this.updateSize();
         if (null != c) {
           null != this.canvas ? c != this.canvas && c.appendChild(this.canvas) : c.appendChild(this.div);
           a = "mousedown mouseenter mouseleave mousemove mouseup wheel".split(" ");
           for (d = 0; d < a.length; ) c.addEventListener(a[d++], B(this, this.handleMouseEvent), !0);
           c.addEventListener("contextmenu", B(this, this.handleContextMenuEvent), !0);
           c.addEventListener("dragstart", B(this, this.handleDragEvent), !0);
           c.addEventListener("dragover", B(this, this.handleDragEvent), !0);
           c.addEventListener("drop", B(this, this.handleDragEvent), !0);
           c.addEventListener("touchstart", B(this, this.handleTouchEvent), !0);
           c.addEventListener("touchmove", B(this, this.handleTouchEvent), !0);
           c.addEventListener("touchend", B(this, this.handleTouchEvent), !0);
           c.addEventListener("touchcancel", B(this, this.handleTouchEvent), !0);
           c.addEventListener("gamepadconnected", B(this, this.handleGamepadEvent), !0);
           c.addEventListener("gamepaddisconnected", B(this, this.handleGamepadEvent), !0);
         }
         this.createContext();
         "webgl" == b.context.type && (this.canvas.addEventListener("webglcontextlost", B(this, this.handleContextEvent), !1), this.canvas.addEventListener("webglcontextrestored", B(this, this.handleContextEvent), !1));
       };
       r["lime._internal.backend.html5.HTML5Window"] = wa;
       wa.__name__ = "lime._internal.backend.html5.HTML5Window";
       wa.prototype = {
         close: function () {
           this.parent.application.__removeWindow(this.parent);
         },
         createContext: function () {
           var b = new Ah(),
             a = this.parent.__attributes.context;
           b.window = this.parent;
           b.attributes = a;
           if (null != this.div) (b.dom = this.div), (b.type = "dom"), (b.version = "");
           else if (null != this.canvas) {
             var c = null,
               d = "canvas" == this.renderType,
               f = "opengl" == this.renderType || "opengles" == this.renderType || "webgl" == this.renderType,
               e = !Object.prototype.hasOwnProperty.call(a, "version") || "1" != a.version,
               h = !1;
             if (f || (!d && (!Object.prototype.hasOwnProperty.call(a, "hardware") || a.hardware))) {
               d = Object.prototype.hasOwnProperty.call(a, "background") && null == a.background;
               f = Object.prototype.hasOwnProperty.call(a, "colorDepth") ? a.colorDepth : 16;
               var g = Object.prototype.hasOwnProperty.call(a, "antialiasing") && 0 < a.antialiasing,
                 m = Object.prototype.hasOwnProperty.call(a, "depth") ? a.depth : !0;
               a = Object.prototype.hasOwnProperty.call(a, "stencil") && a.stencil;
               a = { alpha: d || 16 < f, antialias: g, depth: m, premultipliedAlpha: !0, stencil: a, preserveDrawingBuffer: !1, failIfMajorPerformanceCaveat: !1 };
               d = ["webgl", "experimental-webgl"];
               e && d.unshift("webgl2");
               for (e = 0; e < d.length && ((f = d[e]), ++e, (c = this.canvas.getContext(f, a)), null != c && "webgl2" == f && (h = !0), null == c); );
             }
             null == c
               ? ((b.canvas2D = this.canvas.getContext("2d")), (b.type = "canvas"), (b.version = ""))
               : ((b.webgl = Qb.fromWebGL2RenderContext(c)), h && (b.webgl2 = c), null == Ge.context && ((Ge.context = c), (Ge.type = "webgl"), (Ge.version = h ? 2 : 1)), (b.type = "webgl"), (b.version = h ? "2" : "1"));
           }
           this.parent.context = b;
         },
         getFrameRate: function () {
           return null == this.parent.application ? 0 : 0 > this.parent.application.__backend.framePeriod ? 60 : 1e3 == this.parent.application.__backend.framePeriod ? 0 : 1e3 / this.parent.application.__backend.framePeriod;
         },
         handleContextEvent: function (b) {
           switch (b.type) {
             case "webglcontextlost":
               b.cancelable && b.preventDefault();
               this.parent.context = null;
               this.parent.onRenderContextLost.dispatch();
               break;
             case "webglcontextrestored":
               this.createContext(), this.parent.onRenderContextRestored.dispatch(this.parent.context);
           }
         },
         handleContextMenuEvent: function (b) {
           (this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && b.cancelable && b.preventDefault();
         },
         handleCutOrCopyEvent: function (b) {
           b.clipboardData.setData("text/plain", Eb.get_text());
           b.cancelable && b.preventDefault();
         },
         handleDragEvent: function (b) {
           switch (b.type) {
             case "dragover":
               return b.preventDefault(), !1;
             case "dragstart":
               if ("img" == H.__cast(b.target, HTMLElement).nodeName.toLowerCase() && b.cancelable) return b.preventDefault(), !1;
               break;
             case "drop":
               if (null != b.dataTransfer && 0 < b.dataTransfer.files.length) return this.parent.onDropFile.dispatch(b.dataTransfer.files), b.preventDefault(), !1;
           }
           return !0;
         },
         handleFocusEvent: function (b) {
           var a = this;
           this.textInputEnabled &&
             (null == b.relatedTarget || this.isDescendent(b.relatedTarget)) &&
             ad.delay(function () {
               a.textInputEnabled && wa.textInput.focus();
             }, 20);
         },
         handleFullscreenEvent: function (b) {
           if (null != (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement))
             (this.isFullscreen = !0), (this.parent.__fullscreen = !0), this.requestedFullscreen && ((this.requestedFullscreen = !1), this.parent.onFullscreen.dispatch());
           else {
             this.isFullscreen = !1;
             this.parent.__fullscreen = !1;
             this.parent.onRestore.dispatch();
             b = ["fullscreenchange", "mozfullscreenchange", "webkitfullscreenchange", "MSFullscreenChange"];
             for (var a = ["fullscreenerror", "mozfullscreenerror", "webkitfullscreenerror", "MSFullscreenError"], c = 0, d = b.length; c < d; ) {
               var f = c++;
               window.document.removeEventListener(b[f], B(this, this.handleFullscreenEvent), !1);
               window.document.removeEventListener(a[f], B(this, this.handleFullscreenEvent), !1);
             }
           }
         },
         handleGamepadEvent: function (b) {
           switch (b.type) {
             case "gamepadconnected":
               pb.__connect(b.gamepad.index);
               "standard" == b.gamepad.mapping && wb.__connect(b.gamepad.index);
               break;
             case "gamepaddisconnected":
               pb.__disconnect(b.gamepad.index), wb.__disconnect(b.gamepad.index);
           }
         },
         handleInputEvent: function (b) {
           this.inputing || wa.textInput.value == wa.dummyCharacter || ((b = Sa.replace(wa.textInput.value, wa.dummyCharacter, "")), 0 < b.length && this.parent.onTextInput.dispatch(b), (wa.textInput.value = wa.dummyCharacter));
         },
         handleMouseEvent: function (b) {
           if ("wheel" != b.type) {
             if (null != this.parent.element)
               if (null != this.canvas) {
                 var a = this.canvas.getBoundingClientRect();
                 var c = (this.parent.__width / a.width) * (b.clientX - a.left);
                 a = (this.parent.__height / a.height) * (b.clientY - a.top);
               } else
                 null != this.div
                   ? ((a = this.div.getBoundingClientRect()), (c = b.clientX - a.left), (a = b.clientY - a.top))
                   : ((a = this.parent.element.getBoundingClientRect()), (c = (this.parent.__width / a.width) * (b.clientX - a.left)), (a = (this.parent.__height / a.height) * (b.clientY - a.top)));
             else (c = b.clientX), (a = b.clientY);
             switch (b.type) {
               case "mousedown":
                 b.currentTarget == this.parent.element && window.addEventListener("mouseup", B(this, this.handleMouseEvent));
                 this.parent.onMouseDown.dispatch(c, a, b.button);
                 this.parent.onMouseDown.canceled && b.cancelable && b.preventDefault();
                 break;
               case "mouseenter":
                 b.target == this.parent.element && (this.parent.onEnter.dispatch(), this.parent.onEnter.canceled && b.cancelable && b.preventDefault());
                 break;
               case "mouseleave":
                 b.target == this.parent.element && (this.parent.onLeave.dispatch(), this.parent.onLeave.canceled && b.cancelable && b.preventDefault());
                 break;
               case "mousemove":
                 if (c != this.cacheMouseX || a != this.cacheMouseY)
                   this.parent.onMouseMove.dispatch(c, a),
                     this.parent.onMouseMoveRelative.dispatch(c - this.cacheMouseX, a - this.cacheMouseY),
                     (this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && b.cancelable && b.preventDefault();
                 break;
               case "mouseup":
                 window.removeEventListener("mouseup", B(this, this.handleMouseEvent)),
                   b.currentTarget == this.parent.element && b.stopPropagation(),
                   this.parent.onMouseUp.dispatch(c, a, b.button),
                   this.parent.onMouseUp.canceled && b.cancelable && b.preventDefault();
             }
             this.cacheMouseX = c;
             this.cacheMouseY = a;
           } else {
             switch (b.deltaMode) {
               case 0:
                 c = pd.PIXELS;
                 break;
               case 1:
                 c = pd.LINES;
                 break;
               case 2:
                 c = pd.PAGES;
                 break;
               default:
                 c = pd.UNKNOWN;
             }
             this.parent.onMouseWheel.dispatch(b.deltaX, -b.deltaY, c);
             this.parent.onMouseWheel.canceled && b.cancelable && b.preventDefault();
           }
         },
         handlePasteEvent: function (b) {
           if (-1 < b.clipboardData.types.indexOf("text/plain")) {
             var a = b.clipboardData.getData("text/plain");
             Eb.set_text(a);
             this.textInputEnabled && this.parent.onTextInput.dispatch(a);
             b.cancelable && b.preventDefault();
           }
         },
         handleResizeEvent: function (b) {
           this.primaryTouch = null;
           this.updateSize();
         },
         handleTouchEvent: function (b) {
           b.cancelable && b.preventDefault();
           var a = null;
           null != this.parent.element && (a = null != this.canvas ? this.canvas.getBoundingClientRect() : null != this.div ? this.div.getBoundingClientRect() : this.parent.element.getBoundingClientRect());
           var c = this.setWidth,
             d = this.setHeight;
           if (0 == c || 0 == d) null != a ? ((c = a.width), (d = a.height)) : (d = c = 1);
           for (var f, e, h, g, m, n = 0, p = b.changedTouches; n < p.length; ) {
             var q = p[n];
             ++n;
             null != a ? ((e = (c / a.width) * (q.clientX - a.left)), (h = (d / a.height) * (q.clientY - a.top))) : ((e = q.clientX), (h = q.clientY));
             if ("touchstart" == b.type)
               (f = this.unusedTouchesPool.pop()),
                 null == f ? (f = new Ib(e / c, h / d, q.identifier, 0, 0, q.force, this.parent.id)) : ((f.x = e / c), (f.y = h / d), (f.id = q.identifier), (f.dx = 0), (f.dy = 0), (f.pressure = q.force), (f.device = this.parent.id)),
                 (this.currentTouches.h[q.identifier] = f),
                 Ib.onStart.dispatch(f),
                 null == this.primaryTouch && (this.primaryTouch = f),
                 f == this.primaryTouch && this.parent.onMouseDown.dispatch(e, h, 0);
             else if (((f = this.currentTouches.h[q.identifier]), null != f))
               switch (((g = f.x), (m = f.y), (f.x = e / c), (f.y = h / d), (f.dx = f.x - g), (f.dy = f.y - m), (f.pressure = q.force), b.type)) {
                 case "touchcancel":
                   Ib.onCancel.dispatch(f);
                   this.currentTouches.remove(q.identifier);
                   this.unusedTouchesPool.add(f);
                   f == this.primaryTouch && (this.primaryTouch = null);
                   break;
                 case "touchend":
                   Ib.onEnd.dispatch(f);
                   this.currentTouches.remove(q.identifier);
                   this.unusedTouchesPool.add(f);
                   f == this.primaryTouch && (this.parent.onMouseUp.dispatch(e, h, 0), (this.primaryTouch = null));
                   break;
                 case "touchmove":
                   Ib.onMove.dispatch(f), f == this.primaryTouch && this.parent.onMouseMove.dispatch(e, h);
               }
           }
         },
         isDescendent: function (b) {
           if (b == this.parent.element) return !0;
           for (; null != b; ) {
             if (b.parentNode == this.parent.element) return !0;
             b = b.parentNode;
           }
           return !1;
         },
         setClipboard: function (b) {
           null == wa.textArea &&
             ((wa.textArea = window.document.createElement("textarea")),
             (wa.textArea.style.height = "0px"),
             (wa.textArea.style.left = "-100px"),
             (wa.textArea.style.opacity = "0"),
             (wa.textArea.style.position = "fixed"),
             (wa.textArea.style.top = "-100px"),
             (wa.textArea.style.width = "0px"),
             window.document.body.appendChild(wa.textArea));
           wa.textArea.value = b;
           wa.textArea.focus();
           wa.textArea.select();
           window.document.queryCommandEnabled("copy") && window.document.execCommand("copy");
         },
         setCursor: function (b) {
           if (this.cursor != b) {
             if (null == b) this.parent.element.style.cursor = "none";
             else {
               switch (b._hx_index) {
                 case 0:
                   var a = "default";
                   break;
                 case 1:
                   a = "crosshair";
                   break;
                 case 3:
                   a = "move";
                   break;
                 case 4:
                   a = "pointer";
                   break;
                 case 5:
                   a = "nesw-resize";
                   break;
                 case 6:
                   a = "ns-resize";
                   break;
                 case 7:
                   a = "nwse-resize";
                   break;
                 case 8:
                   a = "ew-resize";
                   break;
                 case 9:
                   a = "text";
                   break;
                 case 10:
                   a = "wait";
                   break;
                 case 11:
                   a = "wait";
                   break;
                 default:
                   a = "auto";
               }
               this.parent.element.style.cursor = a;
             }
             this.cursor = b;
           }
           return this.cursor;
         },
         setFrameRate: function (b) {
           null != this.parent.application &&
             (60 <= b
               ? this.parent == this.parent.application.__window && (this.parent.application.__backend.framePeriod = -1)
               : 0 < b
               ? this.parent == this.parent.application.__window && (this.parent.application.__backend.framePeriod = 1e3 / b)
               : this.parent == this.parent.application.__window && (this.parent.application.__backend.framePeriod = 1e3));
           return b;
         },
         setFullscreen: function (b) {
           b
             ? this.requestedFullscreen ||
               this.isFullscreen ||
               ((this.requestedFullscreen = !0),
               ((ia = this.parent.element), B(ia, ia.requestFullscreen))
                 ? (document.addEventListener("fullscreenchange", B(this, this.handleFullscreenEvent), !1), document.addEventListener("fullscreenerror", B(this, this.handleFullscreenEvent), !1), this.parent.element.requestFullscreen())
                 : this.parent.element.mozRequestFullScreen
                 ? (document.addEventListener("mozfullscreenchange", B(this, this.handleFullscreenEvent), !1),
                   document.addEventListener("mozfullscreenerror", B(this, this.handleFullscreenEvent), !1),
                   this.parent.element.mozRequestFullScreen())
                 : this.parent.element.webkitRequestFullscreen
                 ? (document.addEventListener("webkitfullscreenchange", B(this, this.handleFullscreenEvent), !1),
                   document.addEventListener("webkitfullscreenerror", B(this, this.handleFullscreenEvent), !1),
                   this.parent.element.webkitRequestFullscreen())
                 : this.parent.element.msRequestFullscreen &&
                   (document.addEventListener("MSFullscreenChange", B(this, this.handleFullscreenEvent), !1),
                   document.addEventListener("MSFullscreenError", B(this, this.handleFullscreenEvent), !1),
                   this.parent.element.msRequestFullscreen()))
             : this.isFullscreen &&
               ((this.requestedFullscreen = !1),
               document.exitFullscreen
                 ? document.exitFullscreen()
                 : document.mozCancelFullScreen
                 ? document.mozCancelFullScreen()
                 : document.webkitExitFullscreen
                 ? document.webkitExitFullscreen()
                 : document.msExitFullscreen && document.msExitFullscreen());
           return b;
         },
         setMaximized: function (b) {
           return !1;
         },
         setTextInputEnabled: function (b) {
           b
             ? (null == wa.textInput &&
                 ((wa.textInput = window.document.createElement("input")),
                 (wa.textInput.type = "text"),
                 (wa.textInput.style.position = "absolute"),
                 (wa.textInput.style.opacity = "0"),
                 (wa.textInput.style.color = "transparent"),
                 (wa.textInput.value = wa.dummyCharacter),
                 (wa.textInput.autocapitalize = "off"),
                 (wa.textInput.autocorrect = "off"),
                 (wa.textInput.autocomplete = "off"),
                 (wa.textInput.style.left = "0px"),
                 (wa.textInput.style.top = "50%"),
                 new Ra("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)
                   ? ((wa.textInput.style.fontSize = "0px"), (wa.textInput.style.width = "0px"), (wa.textInput.style.height = "0px"))
                   : ((wa.textInput.style.width = "1px"), (wa.textInput.style.height = "1px")),
                 (wa.textInput.style.pointerEvents = "none"),
                 (wa.textInput.style.zIndex = "-10000000")),
               null == wa.textInput.parentNode && this.parent.element.appendChild(wa.textInput),
               this.textInputEnabled ||
                 (wa.textInput.addEventListener("input", B(this, this.handleInputEvent), !0),
                 wa.textInput.addEventListener("blur", B(this, this.handleFocusEvent), !0),
                 wa.textInput.addEventListener("cut", B(this, this.handleCutOrCopyEvent), !0),
                 wa.textInput.addEventListener("copy", B(this, this.handleCutOrCopyEvent), !0),
                 wa.textInput.addEventListener("paste", B(this, this.handlePasteEvent), !0),
                 wa.textInput.addEventListener("compositionstart", B(this, this.handleCompositionstartEvent), !0),
                 wa.textInput.addEventListener("compositionend", B(this, this.handleCompositionendEvent), !0)),
               wa.textInput.focus(),
               wa.textInput.select())
             : null != wa.textInput &&
               (wa.textInput.removeEventListener("input", B(this, this.handleInputEvent), !0),
               wa.textInput.removeEventListener("blur", B(this, this.handleFocusEvent), !0),
               wa.textInput.removeEventListener("cut", B(this, this.handleCutOrCopyEvent), !0),
               wa.textInput.removeEventListener("copy", B(this, this.handleCutOrCopyEvent), !0),
               wa.textInput.removeEventListener("paste", B(this, this.handlePasteEvent), !0),
               wa.textInput.removeEventListener("compositionstart", B(this, this.handleCompositionstartEvent), !0),
               wa.textInput.removeEventListener("compositionend", B(this, this.handleCompositionendEvent), !0),
               wa.textInput.blur());
           return (this.textInputEnabled = b);
         },
         handleCompositionstartEvent: function (b) {
           this.inputing = !0;
         },
         handleCompositionendEvent: function (b) {
           this.inputing = !1;
           this.handleInputEvent(b);
         },
         updateSize: function () {
           if (this.parent.__resizable) {
             if (null != this.parent.element) {
               var b = this.parent.element.clientWidth;
               var a = this.parent.element.clientHeight;
             } else (b = window.innerWidth), (a = window.innerHeight);
             if (b != this.cacheElementWidth || a != this.cacheElementHeight) {
               this.cacheElementWidth = b;
               this.cacheElementHeight = a;
               var c = this.resizeElement || (0 == this.setWidth && 0 == this.setHeight);
               if (null != this.parent.element && (null == this.div || (null != this.div && c)))
                 if (c) {
                   if (this.parent.__width != b || this.parent.__height != a)
                     (this.parent.__width = b),
                       (this.parent.__height = a),
                       null != this.canvas
                         ? this.parent.element != this.canvas &&
                           ((this.canvas.width = Math.round(b * this.scale)), (this.canvas.height = Math.round(a * this.scale)), (this.canvas.style.width = b + "px"), (this.canvas.style.height = a + "px"))
                         : ((this.div.style.width = b + "px"), (this.div.style.height = a + "px")),
                       this.parent.onResize.dispatch(b, a);
                 } else {
                   c = 0 != this.setWidth ? b / this.setWidth : 1;
                   var d = 0 != this.setHeight ? a / this.setHeight : 1,
                     f = b,
                     e = a,
                     h = 0,
                     g = 0;
                   c < d ? ((e = Math.floor(this.setHeight * c)), (g = Math.floor((a - e) / 2))) : ((f = Math.floor(this.setWidth * d)), (h = Math.floor((b - f) / 2)));
                   null != this.canvas
                     ? this.parent.element != this.canvas && ((this.canvas.style.width = f + "px"), (this.canvas.style.height = e + "px"), (this.canvas.style.marginLeft = h + "px"), (this.canvas.style.marginTop = g + "px"))
                     : ((this.div.style.width = f + "px"), (this.div.style.height = e + "px"), (this.div.style.marginLeft = h + "px"), (this.div.style.marginTop = g + "px"));
                 }
             }
           }
         },
         __class__: wa,
       };
       var Qh = function () {};
       r["lime._internal.format.BMP"] = Qh;
       Qh.__name__ = "lime._internal.format.BMP";
       Qh.encode = function (b, a) {
         if (b.get_premultiplied() || 0 != b.get_format()) (b = b.clone()), b.set_premultiplied(!1), b.set_format(0);
         null == a && (a = qd.RGB);
         var c = 14,
           d = 40,
           f = b.width * b.height * 4;
         if (null != a)
           switch (a._hx_index) {
             case 0:
               f = (3 * b.width + ((3 * b.width) % 4)) * b.height;
               break;
             case 1:
               d = 108;
               break;
             case 2:
               (c = 0), (f += b.width * b.height);
           }
         var e = new Ka(new ArrayBuffer(c + d + f)),
           h = 0;
         0 < c && ((e.b[0] = 66), (e.b[1] = 77), e.setInt32(2, e.length), e.setUInt16(6, 0), e.setUInt16(8, 0), e.setInt32(10, c + d), (h = 14));
         e.setInt32(h, d);
         h += 4;
         e.setInt32(h, b.width);
         h += 4;
         e.setInt32(h, a == qd.ICO ? 2 * b.height : b.height);
         h += 4;
         e.setUInt16(h, 1);
         h += 2;
         e.setUInt16(h, a == qd.RGB ? 24 : 32);
         h += 2;
         e.setInt32(h, a == qd.BITFIELD ? 3 : 0);
         h += 4;
         e.setInt32(h, f);
         h += 4;
         e.setInt32(h, 11824);
         h += 4;
         e.setInt32(h, 11824);
         h += 4;
         e.setInt32(h, 0);
         h += 4;
         e.setInt32(h, 0);
         h += 4;
         if (a == qd.BITFIELD)
           for (e.setInt32(h, 16711680), h += 4, e.setInt32(h, 65280), h += 4, e.setInt32(h, 255), h += 4, e.setInt32(h, -16777216), h += 4, e.b[h++] = 32, e.b[h++] = 110, e.b[h++] = 105, e.b[h++] = 87, c = 0; 48 > c; ) ++c, (e.b[h++] = 0);
         d = b.getPixels(new Sb(0, 0, b.width, b.height), 1);
         var g;
         if (null != a)
           switch (a._hx_index) {
             case 0:
               c = 0;
               for (a = b.height; c < a; ) {
                 f = 4 * (b.height - 1 - c++) * b.width;
                 for (var m = 0, n = b.width; m < n; ) {
                   ++m;
                   ++f;
                   var p = d.b[f++];
                   var q = d.b[f++];
                   var t = d.b[f++];
                   e.b[h++] = t & 255;
                   e.b[h++] = q & 255;
                   e.b[h++] = p & 255;
                 }
                 f = 0;
                 for (g = (3 * b.width) % 4; f < g; ) ++f, (e.b[h++] = 0);
               }
               break;
             case 1:
               c = 0;
               for (a = b.height; c < a; )
                 for (f = 4 * (b.height - 1 - c++) * b.width, m = 0, n = b.width; m < n; )
                   ++m, (g = d.b[f++]), (p = d.b[f++]), (q = d.b[f++]), (t = d.b[f++]), (e.b[h++] = t & 255), (e.b[h++] = q & 255), (e.b[h++] = p & 255), (e.b[h++] = g & 255);
               break;
             case 2:
               var r = new Ka(new ArrayBuffer(b.width * b.height)),
                 w = 0;
               c = 0;
               for (a = b.height; c < a; )
                 for (f = 4 * (b.height - 1 - c++) * b.width, m = 0, n = b.width; m < n; )
                   ++m, (g = d.b[f++]), (p = d.b[f++]), (q = d.b[f++]), (t = d.b[f++]), (e.b[h++] = t & 255), (e.b[h++] = q & 255), (e.b[h++] = p & 255), (e.b[h++] = g & 255), (r.b[w++] = 0);
               e.blit(h, r, 0, b.width * b.height);
           }
         return e;
       };
       var qd = (D["lime._internal.format.BMPType"] = {
         __ename__: "lime._internal.format.BMPType",
         __constructs__: null,
         RGB: { _hx_name: "RGB", _hx_index: 0, __enum__: "lime._internal.format.BMPType", toString: n },
         BITFIELD: { _hx_name: "BITFIELD", _hx_index: 1, __enum__: "lime._internal.format.BMPType", toString: n },
         ICO: { _hx_name: "ICO", _hx_index: 2, __enum__: "lime._internal.format.BMPType", toString: n },
       });
       qd.__constructs__ = [qd.RGB, qd.BITFIELD, qd.ICO];
       var Hc = function () {};
       r["lime._internal.format.Base64"] = Hc;
       Hc.__name__ = "lime._internal.format.Base64";
       Hc.encode = function (b) {
         var a = [],
           c = Hc.DICTIONARY,
           d = Hc.EXTENDED_DICTIONARY,
           f = b.length,
           e = Math.floor(f / 3),
           h = 2 * e;
         a.length = 2 * Math.ceil(f / 3);
         for (var g = 0, m = 0, n; m < h; ) (n = (b.b[g] << 16) | (b.b[g + 1] << 8) | b.b[g + 2]), (a[m] = d[(n >> 12) & 4095]), (a[m + 1] = d[n & 4095]), (g += 3), (m += 2);
         switch (f - 3 * e) {
           case 1:
             n = b.b[g] << 16;
             a[m] = d[(n >> 12) & 4095];
             a[m + 1] = "==";
             break;
           case 2:
             (n = (b.b[g] << 16) | (b.b[g + 1] << 8)), (a[m] = d[(n >> 12) & 4095]), (a[m + 1] = c[(n >> 6) & 63] + "=");
         }
         return a.join("");
       };
       var Vh = function () {};
       r["lime._internal.format.Deflate"] = Vh;
       Vh.__name__ = "lime._internal.format.Deflate";
       Vh.decompress = function (b) {
         b = pako.inflateRaw(b.b.bufferValue);
         return Ka.ofData(b);
       };
       var Wh = function () {};
       r["lime._internal.format.GZip"] = Wh;
       Wh.__name__ = "lime._internal.format.GZip";
       Wh.decompress = function (b) {
         b = pako.ungzip(b.b.bufferValue);
         return Ka.ofData(b);
       };
       var Rh = function () {};
       r["lime._internal.format.JPEG"] = Rh;
       Rh.__name__ = "lime._internal.format.JPEG";
       Rh.encode = function (b, a) {
         if (b.get_premultiplied() || 0 != b.get_format()) (b = b.clone()), b.set_premultiplied(!1), b.set_format(0);
         va.convertToCanvas(b, !1);
         if (null != b.buffer.__srcCanvas) {
           b = b.buffer.__srcCanvas.toDataURL("image/jpeg", a / 100);
           b = window.atob(b.split(";base64,")[1]);
           a = new Ka(new ArrayBuffer(b.length));
           for (var c = 0, d = b.length; c < d; ) {
             var f = c++;
             a.b[f] = I.cca(b, f) & 255;
           }
           return a;
         }
         return null;
       };
       var Xh = function () {};
       r["lime._internal.format.LZMA"] = Xh;
       Xh.__name__ = "lime._internal.format.LZMA";
       Xh.decompress = function (b) {
         return null;
       };
       var oh = function () {};
       r["lime._internal.format.PNG"] = oh;
       oh.__name__ = "lime._internal.format.PNG";
       oh.encode = function (b) {
         if (b.get_premultiplied() || 0 != b.get_format()) (b = b.clone()), b.set_premultiplied(!1), b.set_format(0);
         va.convertToCanvas(b, !1);
         if (null != b.buffer.__srcCanvas) {
           b = b.buffer.__srcCanvas.toDataURL("image/png");
           b = window.atob(b.split(";base64,")[1]);
           for (var a = new Ka(new ArrayBuffer(b.length)), c = 0, d = b.length; c < d; ) {
             var f = c++;
             a.b[f] = I.cca(b, f) & 255;
           }
           return a;
         }
         return null;
       };
       var Yh = function () {};
       r["lime._internal.format.Zlib"] = Yh;
       Yh.__name__ = "lime._internal.format.Zlib";
       Yh.decompress = function (b) {
         b = pako.inflate(b.b.bufferValue);
         return Ka.ofData(b);
       };
       var Ya = function () {};
       r["lime._internal.graphics.ImageDataUtil"] = Ya;
       Ya.__name__ = "lime._internal.graphics.ImageDataUtil";
       Ya.copyChannel = function (b, a, c, d, f, e) {
         switch (e._hx_index) {
           case 0:
             var l = 0;
             break;
           case 1:
             l = 1;
             break;
           case 2:
             l = 2;
             break;
           case 3:
             l = 3;
         }
         switch (f._hx_index) {
           case 0:
             var h = 0;
             break;
           case 1:
             h = 1;
             break;
           case 2:
             h = 2;
             break;
           case 3:
             h = 3;
         }
         f = a.buffer.data;
         e = b.buffer.data;
         if (null != f && null != e) {
           c = new Rc(a, c);
           d = new Rc(b, new Sb(d.x, d.y, c.width, c.height));
           var g = a.buffer.format,
             m = b.buffer.format;
           a = a.buffer.premultiplied;
           for (var n = b.buffer.premultiplied, p, q, t = 0, r = 0, w = 0, y = 0, x = d.height; y < x; ) {
             q = y++;
             p = c.byteOffset + c.stride * q;
             q = d.byteOffset + d.stride * q;
             for (var E = 0, D = d.width; E < D; ) {
               ++E;
               var ka = g,
                 Ga = a;
               null == a && (Ga = !1);
               null == g && (ka = 0);
               switch (ka) {
                 case 0:
                   t = ((f[p] & 255) << 24) | ((f[p + 1] & 255) << 16) | ((f[p + 2] & 255) << 8) | (f[p + 3] & 255);
                   break;
                 case 1:
                   t = ((f[p + 1] & 255) << 24) | ((f[p + 2] & 255) << 16) | ((f[p + 3] & 255) << 8) | (f[p] & 255);
                   break;
                 case 2:
                   t = ((f[p + 2] & 255) << 24) | ((f[p + 1] & 255) << 16) | ((f[p] & 255) << 8) | (f[p + 3] & 255);
               }
               Ga &&
                 0 != (t & 255) &&
                 255 != (t & 255) &&
                 ((ca.unmult = 255 / (t & 255)),
                 (t =
                   ((ca.__clamp[Math.round(((t >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                   ((ca.__clamp[Math.round(((t >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                   ((ca.__clamp[Math.round(((t >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                   (t & 255)));
               ka = m;
               Ga = n;
               null == n && (Ga = !1);
               null == m && (ka = 0);
               switch (ka) {
                 case 0:
                   r = ((e[q] & 255) << 24) | ((e[q + 1] & 255) << 16) | ((e[q + 2] & 255) << 8) | (e[q + 3] & 255);
                   break;
                 case 1:
                   r = ((e[q + 1] & 255) << 24) | ((e[q + 2] & 255) << 16) | ((e[q + 3] & 255) << 8) | (e[q] & 255);
                   break;
                 case 2:
                   r = ((e[q + 2] & 255) << 24) | ((e[q + 1] & 255) << 16) | ((e[q] & 255) << 8) | (e[q + 3] & 255);
               }
               Ga &&
                 0 != (r & 255) &&
                 255 != (r & 255) &&
                 ((ca.unmult = 255 / (r & 255)),
                 (r =
                   ((ca.__clamp[Math.round(((r >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                   ((ca.__clamp[Math.round(((r >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                   ((ca.__clamp[Math.round(((r >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                   (r & 255)));
               switch (h) {
                 case 0:
                   w = (t >>> 24) & 255;
                   break;
                 case 1:
                   w = (t >>> 16) & 255;
                   break;
                 case 2:
                   w = (t >>> 8) & 255;
                   break;
                 case 3:
                   w = t & 255;
               }
               switch (l) {
                 case 0:
                   r = ((w & 255) << 24) | (((r >>> 16) & 255) << 16) | (((r >>> 8) & 255) << 8) | (r & 255);
                   break;
                 case 1:
                   r = (((r >>> 24) & 255) << 24) | ((w & 255) << 16) | (((r >>> 8) & 255) << 8) | (r & 255);
                   break;
                 case 2:
                   r = (((r >>> 24) & 255) << 24) | (((r >>> 16) & 255) << 16) | ((w & 255) << 8) | (r & 255);
                   break;
                 case 3:
                   r = (((r >>> 24) & 255) << 24) | (((r >>> 16) & 255) << 16) | (((r >>> 8) & 255) << 8) | (w & 255);
               }
               ka = m;
               Ga = n;
               null == n && (Ga = !1);
               null == m && (ka = 0);
               Ga &&
                 (0 == (r & 255)
                   ? 0 != r && (r = 0)
                   : 255 != (r & 255) &&
                     ((ca.a16 = ca.__alpha16[r & 255]), (r = ((((((r >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((r >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((r >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (r & 255))));
               switch (ka) {
                 case 0:
                   e[q] = (r >>> 24) & 255;
                   e[q + 1] = (r >>> 16) & 255;
                   e[q + 2] = (r >>> 8) & 255;
                   e[q + 3] = r & 255;
                   break;
                 case 1:
                   e[q] = r & 255;
                   e[q + 1] = (r >>> 24) & 255;
                   e[q + 2] = (r >>> 16) & 255;
                   e[q + 3] = (r >>> 8) & 255;
                   break;
                 case 2:
                   (e[q] = (r >>> 8) & 255), (e[q + 1] = (r >>> 16) & 255), (e[q + 2] = (r >>> 24) & 255), (e[q + 3] = r & 255);
               }
               p += 4;
               q += 4;
             }
           }
           b.dirty = !0;
           b.version++;
         }
       };
       Ya.copyPixels = function (b, a, c, d, f, e, h) {
         null == h && (h = !1);
         if (b.width == a.width && b.height == a.height && c.width == a.width && c.height == a.height && 0 == c.x && 0 == c.y && 0 == d.x && 0 == d.y && null == f && null == e && 0 == h && b.get_format() == a.get_format())
           b.buffer.data.set(a.buffer.data);
         else {
           var l = a.buffer.data,
             g = b.buffer.data;
           if (null == l || null == g) return;
           c = new Rc(a, c);
           var k = new Rc(b, new Sb(d.x, d.y, c.width, c.height)),
             m = a.buffer.format,
             n = b.buffer.format,
             p = 0,
             q = 0,
             t = a.buffer.premultiplied,
             r = b.buffer.premultiplied,
             w = (a.buffer.bitsPerPixel / 8) | 0,
             y = (b.buffer.bitsPerPixel / 8) | 0,
             x = null != f && f.get_transparent(),
             ka = h || (x && !b.get_transparent()) || (!h && !b.get_transparent() && a.get_transparent());
           if (x)
             if (((y = f.buffer.data), (a = f.buffer.format), (h = 0), (f = new Rc(f, new Sb(c.x + (null == e ? 0 : e.x), c.y + (null == e ? 0 : e.y), c.width, c.height))), k.clip(d.x | 0, d.y | 0, f.width, f.height), ka))
               for (ka = 0, w = k.height; ka < w; )
                 for (x = ka++, d = c.byteOffset + c.stride * x, e = k.byteOffset + k.stride * x, x = f.byteOffset + f.stride * x, F = 0, G = k.width; F < G; ) {
                   ++F;
                   var E = m;
                   var D = t;
                   null == t && (D = !1);
                   null == m && (E = 0);
                   switch (E) {
                     case 0:
                       p = ((l[d] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d + 2] & 255) << 8) | (l[d + 3] & 255);
                       break;
                     case 1:
                       p = ((l[d + 1] & 255) << 24) | ((l[d + 2] & 255) << 16) | ((l[d + 3] & 255) << 8) | (l[d] & 255);
                       break;
                     case 2:
                       p = ((l[d + 2] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d] & 255) << 8) | (l[d + 3] & 255);
                   }
                   D &&
                     0 != (p & 255) &&
                     255 != (p & 255) &&
                     ((ca.unmult = 255 / (p & 255)),
                     (p =
                       ((ca.__clamp[Math.round(((p >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                       ((ca.__clamp[Math.round(((p >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                       ((ca.__clamp[Math.round(((p >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                       (p & 255)));
                   D = n;
                   E = r;
                   null == r && (E = !1);
                   null == n && (D = 0);
                   switch (D) {
                     case 0:
                       q = ((g[e] & 255) << 24) | ((g[e + 1] & 255) << 16) | ((g[e + 2] & 255) << 8) | (g[e + 3] & 255);
                       break;
                     case 1:
                       q = ((g[e + 1] & 255) << 24) | ((g[e + 2] & 255) << 16) | ((g[e + 3] & 255) << 8) | (g[e] & 255);
                       break;
                     case 2:
                       q = ((g[e + 2] & 255) << 24) | ((g[e + 1] & 255) << 16) | ((g[e] & 255) << 8) | (g[e + 3] & 255);
                   }
                   E &&
                     0 != (q & 255) &&
                     255 != (q & 255) &&
                     ((ca.unmult = 255 / (q & 255)),
                     (q =
                       ((ca.__clamp[Math.round(((q >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                       ((ca.__clamp[Math.round(((q >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                       ((ca.__clamp[Math.round(((q >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                       (q & 255)));
                   D = a;
                   null == a && (D = 0);
                   switch (D) {
                     case 0:
                       h = ((y[x] & 255) << 24) | ((y[x + 1] & 255) << 16) | ((y[x + 2] & 255) << 8) | (y[x + 3] & 255);
                       break;
                     case 1:
                       h = ((y[x + 1] & 255) << 24) | ((y[x + 2] & 255) << 16) | ((y[x + 3] & 255) << 8) | (y[x] & 255);
                       break;
                     case 2:
                       h = ((y[x + 2] & 255) << 24) | ((y[x + 1] & 255) << 16) | ((y[x] & 255) << 8) | (y[x + 3] & 255);
                   }
                   E = ((h & 255) / 255) * ((p & 255) / 255);
                   if (0 < E) {
                     D = (q & 255) / 255;
                     var Ga = 1 - E;
                     var I = E + D * Ga;
                     q = ((ca.__clamp[Math.round((((p >>> 24) & 255) * E + ((q >>> 24) & 255) * D * Ga) / I)] & 255) << 24) | (((q >>> 16) & 255) << 16) | (((q >>> 8) & 255) << 8) | (q & 255);
                     q = (((q >>> 24) & 255) << 24) | ((ca.__clamp[Math.round((((p >>> 16) & 255) * E + ((q >>> 16) & 255) * D * Ga) / I)] & 255) << 16) | (((q >>> 8) & 255) << 8) | (q & 255);
                     q = (((q >>> 24) & 255) << 24) | (((q >>> 16) & 255) << 16) | ((ca.__clamp[Math.round((((p >>> 8) & 255) * E + ((q >>> 8) & 255) * D * Ga) / I)] & 255) << 8) | (q & 255);
                     q = (((q >>> 24) & 255) << 24) | (((q >>> 16) & 255) << 16) | (((q >>> 8) & 255) << 8) | (ca.__clamp[Math.round(255 * I)] & 255);
                     D = n;
                     E = r;
                     null == r && (E = !1);
                     null == n && (D = 0);
                     E &&
                       (0 == (q & 255)
                         ? 0 != q && (q = 0)
                         : 255 != (q & 255) &&
                           ((ca.a16 = ca.__alpha16[q & 255]),
                           (q = ((((((q >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((q >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((q >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (q & 255))));
                     switch (D) {
                       case 0:
                         g[e] = (q >>> 24) & 255;
                         g[e + 1] = (q >>> 16) & 255;
                         g[e + 2] = (q >>> 8) & 255;
                         g[e + 3] = q & 255;
                         break;
                       case 1:
                         g[e] = q & 255;
                         g[e + 1] = (q >>> 24) & 255;
                         g[e + 2] = (q >>> 16) & 255;
                         g[e + 3] = (q >>> 8) & 255;
                         break;
                       case 2:
                         (g[e] = (q >>> 8) & 255), (g[e + 1] = (q >>> 16) & 255), (g[e + 2] = (q >>> 24) & 255), (g[e + 3] = q & 255);
                     }
                   }
                   d += 4;
                   e += 4;
                   x += 4;
                 }
             else
               for (ka = 0, w = k.height; ka < w; )
                 for (x = ka++, d = c.byteOffset + c.stride * x, e = k.byteOffset + k.stride * x, x = f.byteOffset + f.stride * x, F = 0, G = k.width; F < G; ) {
                   ++F;
                   E = m;
                   D = t;
                   null == t && (D = !1);
                   null == m && (E = 0);
                   switch (E) {
                     case 0:
                       p = ((l[d] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d + 2] & 255) << 8) | (l[d + 3] & 255);
                       break;
                     case 1:
                       p = ((l[d + 1] & 255) << 24) | ((l[d + 2] & 255) << 16) | ((l[d + 3] & 255) << 8) | (l[d] & 255);
                       break;
                     case 2:
                       p = ((l[d + 2] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d] & 255) << 8) | (l[d + 3] & 255);
                   }
                   D &&
                     0 != (p & 255) &&
                     255 != (p & 255) &&
                     ((ca.unmult = 255 / (p & 255)),
                     (p =
                       ((ca.__clamp[Math.round(((p >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                       ((ca.__clamp[Math.round(((p >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                       ((ca.__clamp[Math.round(((p >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                       (p & 255)));
                   D = a;
                   null == a && (D = 0);
                   switch (D) {
                     case 0:
                       h = ((y[x] & 255) << 24) | ((y[x + 1] & 255) << 16) | ((y[x + 2] & 255) << 8) | (y[x + 3] & 255);
                       break;
                     case 1:
                       h = ((y[x + 1] & 255) << 24) | ((y[x + 2] & 255) << 16) | ((y[x + 3] & 255) << 8) | (y[x] & 255);
                       break;
                     case 2:
                       h = ((y[x + 2] & 255) << 24) | ((y[x + 1] & 255) << 16) | ((y[x] & 255) << 8) | (y[x + 3] & 255);
                   }
                   p = (((p >>> 24) & 255) << 24) | (((p >>> 16) & 255) << 16) | (((p >>> 8) & 255) << 8) | (Math.round(((h & 255) / 255) * (p & 255)) & 255);
                   D = n;
                   E = r;
                   null == r && (E = !1);
                   null == n && (D = 0);
                   E &&
                     (0 == (p & 255)
                       ? 0 != p && (p = 0)
                       : 255 != (p & 255) &&
                         ((ca.a16 = ca.__alpha16[p & 255]),
                         (p = ((((((p >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((p >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((p >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (p & 255))));
                   switch (D) {
                     case 0:
                       g[e] = (p >>> 24) & 255;
                       g[e + 1] = (p >>> 16) & 255;
                       g[e + 2] = (p >>> 8) & 255;
                       g[e + 3] = p & 255;
                       break;
                     case 1:
                       g[e] = p & 255;
                       g[e + 1] = (p >>> 24) & 255;
                       g[e + 2] = (p >>> 16) & 255;
                       g[e + 3] = (p >>> 8) & 255;
                       break;
                     case 2:
                       (g[e] = (p >>> 8) & 255), (g[e + 1] = (p >>> 16) & 255), (g[e + 2] = (p >>> 24) & 255), (g[e + 3] = p & 255);
                   }
                   d += 4;
                   e += 4;
                   x += 4;
                 }
           else if (ka)
             for (ka = 0, w = k.height; ka < w; ) {
               x = ka++;
               d = c.byteOffset + c.stride * x;
               e = k.byteOffset + k.stride * x;
               for (var F = 0, G = k.width; F < G; ) {
                 ++F;
                 E = m;
                 D = t;
                 null == t && (D = !1);
                 null == m && (E = 0);
                 switch (E) {
                   case 0:
                     p = ((l[d] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d + 2] & 255) << 8) | (l[d + 3] & 255);
                     break;
                   case 1:
                     p = ((l[d + 1] & 255) << 24) | ((l[d + 2] & 255) << 16) | ((l[d + 3] & 255) << 8) | (l[d] & 255);
                     break;
                   case 2:
                     p = ((l[d + 2] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d] & 255) << 8) | (l[d + 3] & 255);
                 }
                 D &&
                   0 != (p & 255) &&
                   255 != (p & 255) &&
                   ((ca.unmult = 255 / (p & 255)),
                   (p =
                     ((ca.__clamp[Math.round(((p >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                     ((ca.__clamp[Math.round(((p >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                     ((ca.__clamp[Math.round(((p >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                     (p & 255)));
                 D = n;
                 E = r;
                 null == r && (E = !1);
                 null == n && (D = 0);
                 switch (D) {
                   case 0:
                     q = ((g[e] & 255) << 24) | ((g[e + 1] & 255) << 16) | ((g[e + 2] & 255) << 8) | (g[e + 3] & 255);
                     break;
                   case 1:
                     q = ((g[e + 1] & 255) << 24) | ((g[e + 2] & 255) << 16) | ((g[e + 3] & 255) << 8) | (g[e] & 255);
                     break;
                   case 2:
                     q = ((g[e + 2] & 255) << 24) | ((g[e + 1] & 255) << 16) | ((g[e] & 255) << 8) | (g[e + 3] & 255);
                 }
                 E &&
                   0 != (q & 255) &&
                   255 != (q & 255) &&
                   ((ca.unmult = 255 / (q & 255)),
                   (q =
                     ((ca.__clamp[Math.round(((q >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                     ((ca.__clamp[Math.round(((q >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                     ((ca.__clamp[Math.round(((q >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                     (q & 255)));
                 E = (p & 255) / 255;
                 D = (q & 255) / 255;
                 Ga = 1 - E;
                 I = E + D * Ga;
                 0 == I
                   ? (q = 0)
                   : ((q = ((ca.__clamp[Math.round((((p >>> 24) & 255) * E + ((q >>> 24) & 255) * D * Ga) / I)] & 255) << 24) | (((q >>> 16) & 255) << 16) | (((q >>> 8) & 255) << 8) | (q & 255)),
                     (q = (((q >>> 24) & 255) << 24) | ((ca.__clamp[Math.round((((p >>> 16) & 255) * E + ((q >>> 16) & 255) * D * Ga) / I)] & 255) << 16) | (((q >>> 8) & 255) << 8) | (q & 255)),
                     (q = (((q >>> 24) & 255) << 24) | (((q >>> 16) & 255) << 16) | ((ca.__clamp[Math.round((((p >>> 8) & 255) * E + ((q >>> 8) & 255) * D * Ga) / I)] & 255) << 8) | (q & 255)),
                     (q = (((q >>> 24) & 255) << 24) | (((q >>> 16) & 255) << 16) | (((q >>> 8) & 255) << 8) | (ca.__clamp[Math.round(255 * I)] & 255)));
                 D = n;
                 E = r;
                 null == r && (E = !1);
                 null == n && (D = 0);
                 E &&
                   (0 == (q & 255)
                     ? 0 != q && (q = 0)
                     : 255 != (q & 255) &&
                       ((ca.a16 = ca.__alpha16[q & 255]),
                       (q = ((((((q >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((q >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((q >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (q & 255))));
                 switch (D) {
                   case 0:
                     g[e] = (q >>> 24) & 255;
                     g[e + 1] = (q >>> 16) & 255;
                     g[e + 2] = (q >>> 8) & 255;
                     g[e + 3] = q & 255;
                     break;
                   case 1:
                     g[e] = q & 255;
                     g[e + 1] = (q >>> 24) & 255;
                     g[e + 2] = (q >>> 16) & 255;
                     g[e + 3] = (q >>> 8) & 255;
                     break;
                   case 2:
                     (g[e] = (q >>> 8) & 255), (g[e + 1] = (q >>> 16) & 255), (g[e + 2] = (q >>> 24) & 255), (g[e + 3] = q & 255);
                 }
                 d += 4;
                 e += 4;
               }
             }
           else if (m == n && t == r && w == y) for (ka = 0, w = k.height; ka < w; ) (x = ka++), (d = c.byteOffset + c.stride * x), (e = k.byteOffset + k.stride * x), g.set(l.subarray(d, d + k.width * y), e);
           else
             for (ka = 0, w = k.height; ka < w; )
               for (x = ka++, d = c.byteOffset + c.stride * x, e = k.byteOffset + k.stride * x, F = 0, G = k.width; F < G; ) {
                 ++F;
                 E = m;
                 D = t;
                 null == t && (D = !1);
                 null == m && (E = 0);
                 switch (E) {
                   case 0:
                     p = ((l[d] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d + 2] & 255) << 8) | (l[d + 3] & 255);
                     break;
                   case 1:
                     p = ((l[d + 1] & 255) << 24) | ((l[d + 2] & 255) << 16) | ((l[d + 3] & 255) << 8) | (l[d] & 255);
                     break;
                   case 2:
                     p = ((l[d + 2] & 255) << 24) | ((l[d + 1] & 255) << 16) | ((l[d] & 255) << 8) | (l[d + 3] & 255);
                 }
                 D &&
                   0 != (p & 255) &&
                   255 != (p & 255) &&
                   ((ca.unmult = 255 / (p & 255)),
                   (p =
                     ((ca.__clamp[Math.round(((p >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                     ((ca.__clamp[Math.round(((p >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                     ((ca.__clamp[Math.round(((p >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                     (p & 255)));
                 D = n;
                 E = r;
                 null == r && (E = !1);
                 null == n && (D = 0);
                 E &&
                   (0 == (p & 255)
                     ? 0 != p && (p = 0)
                     : 255 != (p & 255) &&
                       ((ca.a16 = ca.__alpha16[p & 255]),
                       (p = ((((((p >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((p >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((p >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (p & 255))));
                 switch (D) {
                   case 0:
                     g[e] = (p >>> 24) & 255;
                     g[e + 1] = (p >>> 16) & 255;
                     g[e + 2] = (p >>> 8) & 255;
                     g[e + 3] = p & 255;
                     break;
                   case 1:
                     g[e] = p & 255;
                     g[e + 1] = (p >>> 24) & 255;
                     g[e + 2] = (p >>> 16) & 255;
                     g[e + 3] = (p >>> 8) & 255;
                     break;
                   case 2:
                     (g[e] = (p >>> 8) & 255), (g[e + 1] = (p >>> 16) & 255), (g[e + 2] = (p >>> 24) & 255), (g[e + 3] = p & 255);
                 }
                 d += 4;
                 e += 4;
               }
         }
         b.dirty = !0;
         b.version++;
       };
       Ya.fillRect = function (b, a, c, d) {
         switch (d) {
           case 1:
             c = (((c >>> 16) & 255) << 24) | (((c >>> 8) & 255) << 16) | ((c & 255) << 8) | ((c >>> 24) & 255);
             break;
           case 2:
             c = (((c >>> 8) & 255) << 24) | (((c >>> 16) & 255) << 16) | (((c >>> 24) & 255) << 8) | (c & 255);
         }
         b.get_transparent() || (c = (((c >>> 24) & 255) << 24) | (((c >>> 16) & 255) << 16) | (((c >>> 8) & 255) << 8) | 255);
         var f = b.buffer.data;
         if (null != f) {
           d = b.buffer.format;
           b.buffer.premultiplied &&
             (0 == (c & 255)
               ? 0 != c && (c = 0)
               : 255 != (c & 255) &&
                 ((ca.a16 = ca.__alpha16[c & 255]), (c = ((((((c >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((c >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((c >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (c & 255))));
           a = new Rc(b, a);
           for (var e, h = 0, g = a.height; h < g; ) {
             e = a.byteOffset + a.stride * h++;
             for (var m = 0, n = a.width; m < n; ) {
               var p = e + 4 * m++,
                 q = d;
               null == d && (q = 0);
               switch (q) {
                 case 0:
                   f[p] = (c >>> 24) & 255;
                   f[p + 1] = (c >>> 16) & 255;
                   f[p + 2] = (c >>> 8) & 255;
                   f[p + 3] = c & 255;
                   break;
                 case 1:
                   f[p] = c & 255;
                   f[p + 1] = (c >>> 24) & 255;
                   f[p + 2] = (c >>> 16) & 255;
                   f[p + 3] = (c >>> 8) & 255;
                   break;
                 case 2:
                   (f[p] = (c >>> 8) & 255), (f[p + 1] = (c >>> 16) & 255), (f[p + 2] = (c >>> 24) & 255), (f[p + 3] = c & 255);
               }
             }
           }
           b.dirty = !0;
           b.version++;
         }
       };
       Ya.getPixel = function (b, a, c, d) {
         var f = 0,
           e = b.buffer.data;
         a = 4 * (c + b.offsetY) * b.buffer.width + 4 * (a + b.offsetX);
         c = b.buffer.format;
         b = b.buffer.premultiplied;
         null == b && (b = !1);
         null == c && (c = 0);
         switch (c) {
           case 0:
             f = ((e[a] & 255) << 24) | ((e[a + 1] & 255) << 16) | ((e[a + 2] & 255) << 8) | (e[a + 3] & 255);
             break;
           case 1:
             f = ((e[a + 1] & 255) << 24) | ((e[a + 2] & 255) << 16) | ((e[a + 3] & 255) << 8) | (e[a] & 255);
             break;
           case 2:
             f = ((e[a + 2] & 255) << 24) | ((e[a + 1] & 255) << 16) | ((e[a] & 255) << 8) | (e[a + 3] & 255);
         }
         b &&
           0 != (f & 255) &&
           255 != (f & 255) &&
           ((ca.unmult = 255 / (f & 255)),
           (f =
             ((ca.__clamp[Math.round(((f >>> 24) & 255) * ca.unmult)] & 255) << 24) |
             ((ca.__clamp[Math.round(((f >>> 16) & 255) * ca.unmult)] & 255) << 16) |
             ((ca.__clamp[Math.round(((f >>> 8) & 255) * ca.unmult)] & 255) << 8) |
             (f & 255)));
         f = (((f >>> 24) & 255) << 24) | (((f >>> 16) & 255) << 16) | (((f >>> 8) & 255) << 8) | 0;
         switch (d) {
           case 1:
             return ((f & 255) << 24) | (((f >>> 24) & 255) << 16) | (((f >>> 16) & 255) << 8) | ((f >>> 8) & 255);
           case 2:
             return (((f >>> 8) & 255) << 24) | (((f >>> 16) & 255) << 16) | (((f >>> 24) & 255) << 8) | (f & 255);
           default:
             return f;
         }
       };
       Ya.getPixel32 = function (b, a, c, d) {
         var f = 0,
           e = b.buffer.data;
         a = 4 * (c + b.offsetY) * b.buffer.width + 4 * (a + b.offsetX);
         c = b.buffer.format;
         b = b.buffer.premultiplied;
         null == b && (b = !1);
         null == c && (c = 0);
         switch (c) {
           case 0:
             f = ((e[a] & 255) << 24) | ((e[a + 1] & 255) << 16) | ((e[a + 2] & 255) << 8) | (e[a + 3] & 255);
             break;
           case 1:
             f = ((e[a + 1] & 255) << 24) | ((e[a + 2] & 255) << 16) | ((e[a + 3] & 255) << 8) | (e[a] & 255);
             break;
           case 2:
             f = ((e[a + 2] & 255) << 24) | ((e[a + 1] & 255) << 16) | ((e[a] & 255) << 8) | (e[a + 3] & 255);
         }
         b &&
           0 != (f & 255) &&
           255 != (f & 255) &&
           ((ca.unmult = 255 / (f & 255)),
           (f =
             ((ca.__clamp[Math.round(((f >>> 24) & 255) * ca.unmult)] & 255) << 24) |
             ((ca.__clamp[Math.round(((f >>> 16) & 255) * ca.unmult)] & 255) << 16) |
             ((ca.__clamp[Math.round(((f >>> 8) & 255) * ca.unmult)] & 255) << 8) |
             (f & 255)));
         switch (d) {
           case 1:
             return ((f & 255) << 24) | (((f >>> 24) & 255) << 16) | (((f >>> 16) & 255) << 8) | ((f >>> 8) & 255);
           case 2:
             return (((f >>> 8) & 255) << 24) | (((f >>> 16) & 255) << 16) | (((f >>> 24) & 255) << 8) | (f & 255);
           default:
             return f;
         }
       };
       Ya.getPixels = function (b, a, c) {
         if (null == b.buffer.data) return null;
         var d = new Ka(new ArrayBuffer(4 * ((a.width * a.height) | 0))),
           f = b.buffer.data,
           e = b.buffer.format,
           h = b.buffer.premultiplied;
         b = new Rc(b, a);
         for (var g, m = (g = 0), n = 0, p = b.height; n < p; ) {
           a = b.byteOffset + b.stride * n++;
           for (var q = 0, t = b.width; q < t; ) {
             ++q;
             var r = e,
               w = h;
             null == h && (w = !1);
             null == e && (r = 0);
             switch (r) {
               case 0:
                 g = ((f[a] & 255) << 24) | ((f[a + 1] & 255) << 16) | ((f[a + 2] & 255) << 8) | (f[a + 3] & 255);
                 break;
               case 1:
                 g = ((f[a + 1] & 255) << 24) | ((f[a + 2] & 255) << 16) | ((f[a + 3] & 255) << 8) | (f[a] & 255);
                 break;
               case 2:
                 g = ((f[a + 2] & 255) << 24) | ((f[a + 1] & 255) << 16) | ((f[a] & 255) << 8) | (f[a + 3] & 255);
             }
             w &&
               0 != (g & 255) &&
               255 != (g & 255) &&
               ((ca.unmult = 255 / (g & 255)),
               (g =
                 ((ca.__clamp[Math.round(((g >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                 ((ca.__clamp[Math.round(((g >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                 ((ca.__clamp[Math.round(((g >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                 (g & 255)));
             switch (c) {
               case 1:
                 g = ((g & 255) << 24) | (((g >>> 24) & 255) << 16) | (((g >>> 16) & 255) << 8) | ((g >>> 8) & 255);
                 break;
               case 2:
                 g = (((g >>> 8) & 255) << 24) | (((g >>> 16) & 255) << 16) | (((g >>> 24) & 255) << 8) | (g & 255);
             }
             d.b[m++] = (g >>> 24) & 255;
             d.b[m++] = (g >>> 16) & 255;
             d.b[m++] = (g >>> 8) & 255;
             d.b[m++] = g & 255;
             a += 4;
           }
         }
         return d;
       };
       Ya.multiplyAlpha = function (b) {
         var a = b.buffer.data;
         if (null != a && b.buffer.transparent) {
           for (var c = b.buffer.format, d = (a.length / 4) | 0, f = 0, e = 0; e < d; ) {
             var h = e++,
               g = 4 * h,
               m = c;
             null == c && (m = 0);
             switch (m) {
               case 0:
                 f = ((a[g] & 255) << 24) | ((a[g + 1] & 255) << 16) | ((a[g + 2] & 255) << 8) | (a[g + 3] & 255);
                 break;
               case 1:
                 f = ((a[g + 1] & 255) << 24) | ((a[g + 2] & 255) << 16) | ((a[g + 3] & 255) << 8) | (a[g] & 255);
                 break;
               case 2:
                 f = ((a[g + 2] & 255) << 24) | ((a[g + 1] & 255) << 16) | ((a[g] & 255) << 8) | (a[g + 3] & 255);
             }
             h *= 4;
             g = c;
             null == c && (g = 0);
             0 == (f & 255)
               ? 0 != f && (f = 0)
               : 255 != (f & 255) &&
                 ((ca.a16 = ca.__alpha16[f & 255]), (f = ((((((f >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((f >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((f >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (f & 255)));
             switch (g) {
               case 0:
                 a[h] = (f >>> 24) & 255;
                 a[h + 1] = (f >>> 16) & 255;
                 a[h + 2] = (f >>> 8) & 255;
                 a[h + 3] = f & 255;
                 break;
               case 1:
                 a[h] = f & 255;
                 a[h + 1] = (f >>> 24) & 255;
                 a[h + 2] = (f >>> 16) & 255;
                 a[h + 3] = (f >>> 8) & 255;
                 break;
               case 2:
                 (a[h] = (f >>> 8) & 255), (a[h + 1] = (f >>> 16) & 255), (a[h + 2] = (f >>> 24) & 255), (a[h + 3] = f & 255);
             }
           }
           b.buffer.premultiplied = !0;
           b.dirty = !0;
           b.version++;
         }
       };
       Ya.setFormat = function (b, a) {
         var c = b.buffer.data;
         if (null != c) {
           var d = (c.length / 4) | 0;
           switch (b.get_format()) {
             case 0:
               var f = 0;
               var e = 1;
               var h = 2;
               var g = 3;
               break;
             case 1:
               f = 1;
               e = 2;
               h = 3;
               g = 0;
               break;
             case 2:
               (f = 2), (e = 1), (h = 0), (g = 3);
           }
           switch (a) {
             case 0:
               var m = 0;
               var n = 1;
               var p = 2;
               var q = 3;
               break;
             case 1:
               m = 1;
               n = 2;
               p = 3;
               q = 0;
               break;
             case 2:
               (m = 2), (n = 1), (p = 0), (q = 3);
           }
           for (var t = 0; t < d; ) {
             var r = 4 * t++;
             var w = c[r + f];
             var y = c[r + e];
             var x = c[r + h];
             var D = c[r + g];
             c[r + m] = w;
             c[r + n] = y;
             c[r + p] = x;
             c[r + q] = D;
           }
           b.buffer.format = a;
           b.dirty = !0;
           b.version++;
         }
       };
       Ya.setPixel = function (b, a, c, d, f) {
         switch (f) {
           case 1:
             d = (((d >>> 16) & 255) << 24) | (((d >>> 8) & 255) << 16) | ((d & 255) << 8) | ((d >>> 24) & 255);
             break;
           case 2:
             d = (((d >>> 8) & 255) << 24) | (((d >>> 16) & 255) << 16) | (((d >>> 24) & 255) << 8) | (d & 255);
         }
         var e = 0,
           h = b.buffer.data,
           g = 4 * (c + b.offsetY) * b.buffer.width + 4 * (a + b.offsetX);
         f = b.buffer.format;
         var m = b.buffer.premultiplied;
         null == m && (m = !1);
         null == f && (f = 0);
         switch (f) {
           case 0:
             e = ((h[g] & 255) << 24) | ((h[g + 1] & 255) << 16) | ((h[g + 2] & 255) << 8) | (h[g + 3] & 255);
             break;
           case 1:
             e = ((h[g + 1] & 255) << 24) | ((h[g + 2] & 255) << 16) | ((h[g + 3] & 255) << 8) | (h[g] & 255);
             break;
           case 2:
             e = ((h[g + 2] & 255) << 24) | ((h[g + 1] & 255) << 16) | ((h[g] & 255) << 8) | (h[g + 3] & 255);
         }
         m &&
           0 != (e & 255) &&
           255 != (e & 255) &&
           ((ca.unmult = 255 / (e & 255)),
           (e =
             ((ca.__clamp[Math.round(((e >>> 24) & 255) * ca.unmult)] & 255) << 24) |
             ((ca.__clamp[Math.round(((e >>> 16) & 255) * ca.unmult)] & 255) << 16) |
             ((ca.__clamp[Math.round(((e >>> 8) & 255) * ca.unmult)] & 255) << 8) |
             (e & 255)));
         d = (((d >>> 24) & 255) << 24) | (((d >>> 16) & 255) << 16) | (((d >>> 8) & 255) << 8) | (e & 255);
         h = b.buffer.data;
         g = 4 * (c + b.offsetY) * b.buffer.width + 4 * (a + b.offsetX);
         f = b.buffer.format;
         m = b.buffer.premultiplied;
         null == m && (m = !1);
         null == f && (f = 0);
         m &&
           (0 == (d & 255)
             ? 0 != d && (d = 0)
             : 255 != (d & 255) &&
               ((ca.a16 = ca.__alpha16[d & 255]), (d = ((((((d >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((d >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((d >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (d & 255))));
         switch (f) {
           case 0:
             h[g] = (d >>> 24) & 255;
             h[g + 1] = (d >>> 16) & 255;
             h[g + 2] = (d >>> 8) & 255;
             h[g + 3] = d & 255;
             break;
           case 1:
             h[g] = d & 255;
             h[g + 1] = (d >>> 24) & 255;
             h[g + 2] = (d >>> 16) & 255;
             h[g + 3] = (d >>> 8) & 255;
             break;
           case 2:
             (h[g] = (d >>> 8) & 255), (h[g + 1] = (d >>> 16) & 255), (h[g + 2] = (d >>> 24) & 255), (h[g + 3] = d & 255);
         }
         b.dirty = !0;
         b.version++;
       };
       Ya.setPixel32 = function (b, a, c, d, f) {
         switch (f) {
           case 1:
             d = (((d >>> 16) & 255) << 24) | (((d >>> 8) & 255) << 16) | ((d & 255) << 8) | ((d >>> 24) & 255);
             break;
           case 2:
             d = (((d >>> 8) & 255) << 24) | (((d >>> 16) & 255) << 16) | (((d >>> 24) & 255) << 8) | (d & 255);
         }
         b.get_transparent() || (d = (((d >>> 24) & 255) << 24) | (((d >>> 16) & 255) << 16) | (((d >>> 8) & 255) << 8) | 255);
         var e = b.buffer.data;
         a = 4 * (c + b.offsetY) * b.buffer.width + 4 * (a + b.offsetX);
         f = b.buffer.format;
         c = b.buffer.premultiplied;
         null == c && (c = !1);
         null == f && (f = 0);
         c &&
           (0 == (d & 255)
             ? 0 != d && (d = 0)
             : 255 != (d & 255) &&
               ((ca.a16 = ca.__alpha16[d & 255]), (d = ((((((d >>> 24) & 255) * ca.a16) >> 16) & 255) << 24) | ((((((d >>> 16) & 255) * ca.a16) >> 16) & 255) << 16) | ((((((d >>> 8) & 255) * ca.a16) >> 16) & 255) << 8) | (d & 255))));
         switch (f) {
           case 0:
             e[a] = (d >>> 24) & 255;
             e[a + 1] = (d >>> 16) & 255;
             e[a + 2] = (d >>> 8) & 255;
             e[a + 3] = d & 255;
             break;
           case 1:
             e[a] = d & 255;
             e[a + 1] = (d >>> 24) & 255;
             e[a + 2] = (d >>> 16) & 255;
             e[a + 3] = (d >>> 8) & 255;
             break;
           case 2:
             (e[a] = (d >>> 8) & 255), (e[a + 1] = (d >>> 16) & 255), (e[a + 2] = (d >>> 24) & 255), (e[a + 3] = d & 255);
         }
         b.dirty = !0;
         b.version++;
       };
       Ya.unmultiplyAlpha = function (b) {
         var a = b.buffer.data;
         if (null != a) {
           for (var c = b.buffer.format, d = (a.length / 4) | 0, f = 0, e = 0; e < d; ) {
             var h = e++,
               g = 4 * h,
               m = c;
             null == c && (m = 0);
             switch (m) {
               case 0:
                 f = ((a[g] & 255) << 24) | ((a[g + 1] & 255) << 16) | ((a[g + 2] & 255) << 8) | (a[g + 3] & 255);
                 break;
               case 1:
                 f = ((a[g + 1] & 255) << 24) | ((a[g + 2] & 255) << 16) | ((a[g + 3] & 255) << 8) | (a[g] & 255);
                 break;
               case 2:
                 f = ((a[g + 2] & 255) << 24) | ((a[g + 1] & 255) << 16) | ((a[g] & 255) << 8) | (a[g + 3] & 255);
             }
             0 != (f & 255) &&
               255 != (f & 255) &&
               ((ca.unmult = 255 / (f & 255)),
               (f =
                 ((ca.__clamp[Math.round(((f >>> 24) & 255) * ca.unmult)] & 255) << 24) |
                 ((ca.__clamp[Math.round(((f >>> 16) & 255) * ca.unmult)] & 255) << 16) |
                 ((ca.__clamp[Math.round(((f >>> 8) & 255) * ca.unmult)] & 255) << 8) |
                 (f & 255)));
             h *= 4;
             g = c;
             null == c && (g = 0);
             switch (g) {
               case 0:
                 a[h] = (f >>> 24) & 255;
                 a[h + 1] = (f >>> 16) & 255;
                 a[h + 2] = (f >>> 8) & 255;
                 a[h + 3] = f & 255;
                 break;
               case 1:
                 a[h] = f & 255;
                 a[h + 1] = (f >>> 24) & 255;
                 a[h + 2] = (f >>> 16) & 255;
                 a[h + 3] = (f >>> 8) & 255;
                 break;
               case 2:
                 (a[h] = (f >>> 8) & 255), (a[h + 1] = (f >>> 16) & 255), (a[h + 2] = (f >>> 24) & 255), (a[h + 3] = f & 255);
             }
           }
           b.buffer.premultiplied = !1;
           b.dirty = !0;
           b.version++;
         }
       };
       var Rc = function (b, a) {
         this.image = b;
         null == a
           ? (this.rect = b.get_rect())
           : (0 > a.x && (a.x = 0),
             0 > a.y && (a.y = 0),
             a.x + a.width > b.width && (a.width = b.width - a.x),
             a.y + a.height > b.height && (a.height = b.height - a.y),
             0 > a.width && (a.width = 0),
             0 > a.height && (a.height = 0),
             (this.rect = a));
         this.stride = b.buffer.get_stride();
         this.__update();
       };
       r["lime._internal.graphics._ImageDataUtil.ImageDataView"] = Rc;
       Rc.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
       Rc.prototype = {
         clip: function (b, a, c, d) {
           null == this.tempRect && (this.tempRect = new Sb());
           this.tempRect.setTo(b, a, c, d);
           this.rect.intersection(this.tempRect, this.rect);
           this.__update();
         },
         __update: function () {
           this.x = Math.ceil(this.rect.x);
           this.y = Math.ceil(this.rect.y);
           this.width = Math.floor(this.rect.width);
           this.height = Math.floor(this.rect.height);
           this.byteOffset = this.stride * (this.y + this.image.offsetY) + 4 * (this.x + this.image.offsetX);
         },
         __class__: Rc,
       };
       var Xa = function (b, a) {
         null == a && (a = !1);
         if (null != b)
           if (a) (a = new Vb()), (a.future = this), Hb.queue({ promise: a, work: b });
           else
             try {
               (this.value = b()), (this.isComplete = !0);
             } catch (c) {
               (this.error = na.caught(c).unwrap()), (this.isError = !0);
             }
       };
       r["lime.app.Future"] = Xa;
       Xa.__name__ = "lime.app.Future";
       Xa.withError = function (b) {
         var a = new Xa();
         a.isError = !0;
         a.error = b;
         return a;
       };
       Xa.withValue = function (b) {
         var a = new Xa();
         a.isComplete = !0;
         a.value = b;
         return a;
       };
       Xa.prototype = {
         onComplete: function (b) {
           null != b && (this.isComplete ? b(this.value) : this.isError || (null == this.__completeListeners && (this.__completeListeners = []), this.__completeListeners.push(b)));
           return this;
         },
         onError: function (b) {
           null != b && (this.isError ? b(this.error) : this.isComplete || (null == this.__errorListeners && (this.__errorListeners = []), this.__errorListeners.push(b)));
           return this;
         },
         onProgress: function (b) {
           null != b && (null == this.__progressListeners && (this.__progressListeners = []), this.__progressListeners.push(b));
           return this;
         },
         then: function (b) {
           if (this.isComplete) return b(this.value);
           if (this.isError) {
             var a = new Xa();
             a.isError = !0;
             a.error = this.error;
             return a;
           }
           var c = new Vb();
           this.onError(B(c, c.error));
           this.onProgress(B(c, c.progress));
           this.onComplete(function (a) {
             a = b(a);
             a.onError(B(c, c.error));
             a.onComplete(B(c, c.complete));
           });
           return c.future;
         },
         __class__: Xa,
       };
       var Hb = function () {};
       r["lime.app._Future.FutureWork"] = Hb;
       Hb.__name__ = "lime.app._Future.FutureWork";
       Hb.queue = function (b) {
         null == Hb.threadPool && ((Hb.threadPool = new Bh()), Hb.threadPool.doWork.add(Hb.threadPool_doWork), Hb.threadPool.onComplete.add(Hb.threadPool_onComplete), Hb.threadPool.onError.add(Hb.threadPool_onError));
         Hb.threadPool.queue(b);
       };
       Hb.threadPool_doWork = function (b) {
         try {
           var a = b.work();
           Hb.threadPool.sendComplete({ promise: b.promise, result: a });
         } catch (c) {
           (a = na.caught(c).unwrap()), Hb.threadPool.sendError({ promise: b.promise, error: a });
         }
       };
       Hb.threadPool_onComplete = function (b) {
         b.promise.complete(b.result);
       };
       Hb.threadPool_onError = function (b) {
         b.promise.error(b.error);
       };
       var Vb = function () {
         this.future = new Xa();
       };
       r["lime.app.Promise"] = Vb;
       Vb.__name__ = "lime.app.Promise";
       Vb.prototype = {
         complete: function (b) {
           if (!this.future.isError && ((this.future.isComplete = !0), (this.future.value = b), null != this.future.__completeListeners)) {
             for (var a = 0, c = this.future.__completeListeners; a < c.length; ) c[a++](b);
             this.future.__completeListeners = null;
           }
           return this;
         },
         completeWith: function (b) {
           b.onComplete(B(this, this.complete));
           b.onError(B(this, this.error));
           b.onProgress(B(this, this.progress));
           return this;
         },
         error: function (b) {
           if (!this.future.isComplete && ((this.future.isError = !0), (this.future.error = b), null != this.future.__errorListeners)) {
             for (var a = 0, c = this.future.__errorListeners; a < c.length; ) c[a++](b);
             this.future.__errorListeners = null;
           }
           return this;
         },
         progress: function (b, a) {
           if (!this.future.isError && !this.future.isComplete && null != this.future.__progressListeners) for (var c = 0, d = this.future.__progressListeners; c < d.length; ) d[c++](b, a);
           return this;
         },
         __class__: Vb,
       };
       var Md = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Dynamic_Void"] = Md;
       Md.__name__ = "lime.app._Event_Dynamic_Void";
       Md.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Md,
       };
       var Ch = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Float_Float_Float_Void"] = Ch;
       Ch.__name__ = "lime.app._Event_Float_Float_Float_Void";
       Ch.prototype = {
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a, c) {
           this.canceled = !1;
           for (var d = this.__listeners, f = this.__repeat, e = 0; e < d.length && (d[e](b, a, c), f[e] ? ++e : this.remove(d[e]), !this.canceled); );
         },
         __class__: Ch,
       };
       var Dh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Float_Float_Int_Void"] = Dh;
       Dh.__name__ = "lime.app._Event_Float_Float_Int_Void";
       Dh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         cancel: function () {
           this.canceled = !0;
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a, c) {
           this.canceled = !1;
           for (var d = this.__listeners, f = this.__repeat, e = 0; e < d.length && (d[e](b, a, c), f[e] ? ++e : this.remove(d[e]), !this.canceled); );
         },
         __class__: Dh,
       };
       var Ie = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Float_Float_Void"] = Ie;
       Ie.__name__ = "lime.app._Event_Float_Float_Void";
       Ie.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a) {
           this.canceled = !1;
           for (var c = this.__listeners, d = this.__repeat, f = 0; f < c.length && (c[f](b, a), d[f] ? ++f : this.remove(c[f]), !this.canceled); );
         },
         __class__: Ie,
       };
       var Eh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = Eh;
       Eh.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
       Eh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a, c) {
           this.canceled = !1;
           for (var d = this.__listeners, f = this.__repeat, e = 0; e < d.length && (d[e](b, a, c), f[e] ? ++e : this.remove(d[e]), !this.canceled); );
         },
         __class__: Eh,
       };
       var Fh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = Fh;
       Fh.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
       Fh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a, c) {
           this.canceled = !1;
           for (var d = this.__listeners, f = this.__repeat, e = 0; e < d.length && (d[e](b, a, c), f[e] ? ++e : this.remove(d[e]), !this.canceled); );
         },
         __class__: Fh,
       };
       var Gh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Int_Float_Float_Void"] = Gh;
       Gh.__name__ = "lime.app._Event_Int_Float_Float_Void";
       Gh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         __class__: Gh,
       };
       var Hh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Int_Float_Void"] = Hh;
       Hh.__name__ = "lime.app._Event_Int_Float_Void";
       Hh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a) {
           this.canceled = !1;
           for (var c = this.__listeners, d = this.__repeat, f = 0; f < c.length && (c[f](b, a), d[f] ? ++f : this.remove(c[f]), !this.canceled); );
         },
         __class__: Hh,
       };
       var Xg = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Int_Int_Void"] = Xg;
       Xg.__name__ = "lime.app._Event_Int_Int_Void";
       Xg.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a) {
           this.canceled = !1;
           for (var c = this.__listeners, d = this.__repeat, f = 0; f < c.length && (c[f](b, a), d[f] ? ++f : this.remove(c[f]), !this.canceled); );
         },
         __class__: Xg,
       };
       var cd = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Int_Void"] = cd;
       cd.__name__ = "lime.app._Event_Int_Void";
       cd.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         has: function (b) {
           for (var a = 0, c = this.__listeners; a < c.length; ) if (Z.compareMethods(c[a++], b)) return !0;
           return !1;
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: cd,
       };
       var Ih = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = Ih;
       Ih.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
       Ih.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         __class__: Ih,
       };
       var Jh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_String_Int_Int_Void"] = Jh;
       Jh.__name__ = "lime.app._Event_String_Int_Int_Void";
       Jh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         __class__: Jh,
       };
       var Je = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_String_Void"] = Je;
       Je.__name__ = "lime.app._Event_String_Void";
       Je.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Je,
       };
       var lb = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_Void_Void"] = lb;
       lb.__name__ = "lime.app._Event_Void_Void";
       lb.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function () {
           this.canceled = !1;
           for (var b = this.__listeners, a = this.__repeat, c = 0; c < b.length && (b[c](), a[c] ? ++c : this.remove(b[c]), !this.canceled); );
         },
         __class__: lb,
       };
       var Yg = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_graphics_RenderContext_Void"] = Yg;
       Yg.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
       Yg.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Yg,
       };
       var Kh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = Kh;
       Kh.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
       Kh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a) {
           this.canceled = !1;
           for (var c = this.__listeners, d = this.__repeat, f = 0; f < c.length && (c[f](b, a), d[f] ? ++f : this.remove(c[f]), !this.canceled); );
         },
         __class__: Kh,
       };
       var Zg = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_GamepadButton_Void"] = Zg;
       Zg.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
       Zg.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Zg,
       };
       var Lh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_Gamepad_Void"] = Lh;
       Lh.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
       Lh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Lh,
       };
       var Mh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_Joystick_Void"] = Mh;
       Mh.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
       Mh.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Mh,
       };
       var $g = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = $g;
       $g.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
       $g.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         cancel: function () {
           this.canceled = !0;
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b, a) {
           this.canceled = !1;
           for (var c = this.__listeners, d = this.__repeat, f = 0; f < c.length && (c[f](b, a), d[f] ? ++f : this.remove(c[f]), !this.canceled); );
         },
         __class__: $g,
       };
       var Nd = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_Touch_Void"] = Nd;
       Nd.__name__ = "lime.app._Event_lime_ui_Touch_Void";
       Nd.prototype = {
         add: function (b, a, c) {
           null == c && (c = 0);
           null == a && (a = !1);
           for (var d = 0, f = this.__priorities.length; d < f; ) {
             var e = d++;
             if (c > this.__priorities[e]) {
               this.__listeners.splice(e, 0, b);
               this.__priorities.splice(e, 0, c);
               this.__repeat.splice(e, 0, !a);
               return;
             }
           }
           this.__listeners.push(b);
           this.__priorities.push(c);
           this.__repeat.push(!a);
         },
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: Nd,
       };
       var hh = function () {
         this.canceled = !1;
         this.__listeners = [];
         this.__priorities = [];
         this.__repeat = [];
       };
       r["lime.app._Event_lime_ui_Window_Void"] = hh;
       hh.__name__ = "lime.app._Event_lime_ui_Window_Void";
       hh.prototype = {
         remove: function (b) {
           for (var a = this.__listeners.length; 0 <= --a; ) Z.compareMethods(this.__listeners[a], b) && (this.__listeners.splice(a, 1), this.__priorities.splice(a, 1), this.__repeat.splice(a, 1));
         },
         dispatch: function (b) {
           this.canceled = !1;
           for (var a = this.__listeners, c = this.__repeat, d = 0; d < a.length && (a[d](b), c[d] ? ++d : this.remove(a[d]), !this.canceled); );
         },
         __class__: hh,
       };
       var Gd = (D["lime.graphics.ImageChannel"] = {
         __ename__: "lime.graphics.ImageChannel",
         __constructs__: null,
         RED: { _hx_name: "RED", _hx_index: 0, __enum__: "lime.graphics.ImageChannel", toString: n },
         GREEN: { _hx_name: "GREEN", _hx_index: 1, __enum__: "lime.graphics.ImageChannel", toString: n },
         BLUE: { _hx_name: "BLUE", _hx_index: 2, __enum__: "lime.graphics.ImageChannel", toString: n },
         ALPHA: { _hx_name: "ALPHA", _hx_index: 3, __enum__: "lime.graphics.ImageChannel", toString: n },
       });
       Gd.__constructs__ = [Gd.RED, Gd.GREEN, Gd.BLUE, Gd.ALPHA];
       var ah = (D["lime.graphics.ImageFileFormat"] = {
         __ename__: "lime.graphics.ImageFileFormat",
         __constructs__: null,
         BMP: { _hx_name: "BMP", _hx_index: 0, __enum__: "lime.graphics.ImageFileFormat", toString: n },
         JPEG: { _hx_name: "JPEG", _hx_index: 1, __enum__: "lime.graphics.ImageFileFormat", toString: n },
         PNG: { _hx_name: "PNG", _hx_index: 2, __enum__: "lime.graphics.ImageFileFormat", toString: n },
       });
       ah.__constructs__ = [ah.BMP, ah.JPEG, ah.PNG];
       var Ah = function () {};
       r["lime.graphics.RenderContext"] = Ah;
       Ah.__name__ = "lime.graphics.RenderContext";
       Ah.prototype = { __class__: Ah };
       var ei = {
           uniform2fv: function (b, a, c, d, f) {
             null != d ? b.uniform2fv(a, c, d, f) : b.uniform2fv(a, c);
           },
         },
         Qb = {
           bufferData: function (b, a, c, d) {
             b.bufferData(a, c, d);
           },
           texImage2D: function (b, a, c, d, f, e, h, g, m, n) {
             null != g ? b.texImage2D(a, c, d, f, e, h, g, m, n) : b.texImage2D(a, c, d, f, e, h);
           },
           uniformMatrix4fv: function (b, a, c, d) {
             b.uniformMatrix4fv(a, c, d);
           },
           fromWebGL2RenderContext: function (b) {
             return b;
           },
         },
         Ge = function () {};
       r["lime.graphics.opengl.GL"] = Ge;
       Ge.__name__ = "lime.graphics.opengl.GL";
       var ca = {},
         Fd = function (b, a) {
           null == a && (a = 0);
           null == b && (b = 0);
           this.x = b;
           this.y = a;
         };
       r["lime.math.Vector2"] = Fd;
       Fd.__name__ = "lime.math.Vector2";
       Fd.prototype = {
         offset: function (b, a) {
           this.x += b;
           this.y += a;
         },
         __toFlashPoint: function () {
           return null;
         },
         __class__: Fd,
       };
       var mb = function () {};
       r["lime.media.AudioBuffer"] = mb;
       mb.__name__ = "lime.media.AudioBuffer";
       mb.fromBytes = function (b) {
         if (null == b) return null;
         var a = new mb();
         a.set_src(new Howl({ src: ["data:" + mb.__getCodec(b) + ";base64," + Hc.encode(b)], html5: !0, preload: !1 }));
         return a;
       };
       mb.fromFile = function (b) {
         if (null == b) return null;
         var a = new mb();
         a.__srcHowl = new Howl({ src: [b], preload: !1 });
         return a;
       };
       mb.fromFiles = function (b) {
         var a = new mb();
         a.__srcHowl = new Howl({ src: b, preload: !1 });
         return a;
       };
       mb.loadFromFile = function (b) {
         var a = new Vb(),
           c = mb.fromFile(b);
         null != c
           ? null != c &&
             (c.__srcHowl.on("load", function () {
               a.complete(c);
             }),
             c.__srcHowl.on("loaderror", function (b, c) {
               a.error(c);
             }),
             c.__srcHowl.load())
           : a.error(null);
         return a.future;
       };
       mb.loadFromFiles = function (b) {
         var a = new Vb();
         b.reverse();
         var c = mb.fromFiles(b);
         null != c
           ? (c.__srcHowl.on("load", function () {
               a.complete(c);
             }),
             c.__srcHowl.on("loaderror", function () {
               a.error(null);
             }),
             c.__srcHowl.load())
           : a.error(null);
         return a.future;
       };
       mb.__getCodec = function (b) {
         switch (b.getString(0, 4)) {
           case "OggS":
             return "audio/ogg";
           case "RIFF":
             if ("WAVE" == b.getString(8, 4)) return "audio/wav";
             var a = b.b[1],
               c = b.b[2];
             switch (b.b[0]) {
               case 73:
                 if (68 == a && 51 == c) return "audio/mp3";
                 break;
               case 255:
                 switch (a) {
                   case 243:
                   case 250:
                   case 251:
                     return "audio/mp3";
                 }
             }
             break;
           case "fLaC":
             return "audio/flac";
           default:
             switch (((a = b.b[1]), (c = b.b[2]), b.b[0])) {
               case 73:
                 if (68 == a && 51 == c) return "audio/mp3";
                 break;
               case 255:
                 switch (a) {
                   case 243:
                   case 250:
                   case 251:
                     return "audio/mp3";
                 }
             }
         }
         ab.error("Unsupported sound format", { fileName: "lime/media/AudioBuffer.hx", lineNumber: 363, className: "lime.media.AudioBuffer", methodName: "__getCodec" });
         return null;
       };
       mb.prototype = {
         get_src: function () {
           return this.__srcHowl;
         },
         set_src: function (b) {
           return (this.__srcHowl = b);
         },
         __class__: mb,
       };
       var Oh = function (b) {
         if ("custom" != b) {
           if (null == b || "web" == b)
             try {
               (window.AudioContext = window.AudioContext || window.webkitAudioContext), (this.web = new window.AudioContext()), (this.type = "web");
             } catch (a) {}
           null == this.web && "web" != b && ((this.html5 = new Nh()), (this.type = "html5"));
         } else this.type = "custom";
       };
       r["lime.media.AudioContext"] = Oh;
       Oh.__name__ = "lime.media.AudioContext";
       Oh.prototype = { __class__: Oh };
       var td = function () {};
       r["lime.media.AudioManager"] = td;
       td.__name__ = "lime.media.AudioManager";
       td.init = function (b) {
         if (null == td.context) {
           if (null == b && ((td.context = new Oh()), (b = td.context), "openal" == b.type)) {
             var a = b.openal,
               c = a.createContext(a.openDevice());
             a.makeContextCurrent(c);
             a.processContext(c);
           }
           td.context = b;
         }
       };
       var Nh = function () {};
       r["lime.media.HTML5AudioContext"] = Nh;
       Nh.__name__ = "lime.media.HTML5AudioContext";
       Nh.prototype = { __class__: Nh };
       var Zh = function () {};
       r["lime.media.OpenALAudioContext"] = Zh;
       Zh.__name__ = "lime.media.OpenALAudioContext";
       Zh.prototype = {
         createContext: function (b, a) {
           return Od.createContext(b, a);
         },
         makeContextCurrent: function (b) {
           return Od.makeContextCurrent(b);
         },
         openDevice: function (b) {
           return Od.openDevice(b);
         },
         processContext: function (b) {},
         __class__: Zh,
       };
       var Od = function () {};
       r["lime.media.openal.ALC"] = Od;
       Od.__name__ = "lime.media.openal.ALC";
       Od.createContext = function (b, a) {
         return null;
       };
       Od.makeContextCurrent = function (b) {
         return !1;
       };
       Od.openDevice = function (b) {
         return null;
       };
       var bh = function () {};
       r["lime.net._IHTTPRequest"] = bh;
       bh.__name__ = "lime.net._IHTTPRequest";
       bh.__isInterface__ = !0;
       bh.prototype = { __class__: bh };
       var Jc = function (b) {
         this.uri = b;
         this.contentType = "application/x-www-form-urlencoded";
         this.followRedirects = !0;
         this.enableResponseHeaders = !1;
         this.formData = new e();
         this.headers = [];
         this.method = "GET";
         this.timeout = 3e4;
         this.withCredentials = !1;
         this.__backend = new ra();
         this.__backend.init(this);
       };
       r["lime.net._HTTPRequest.AbstractHTTPRequest"] = Jc;
       Jc.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
       Jc.__interfaces__ = [bh];
       Jc.prototype = { __class__: Jc };
       var Ke = function (b) {
         Jc.call(this, b);
       };
       r["lime.net._HTTPRequest_Bytes"] = Ke;
       Ke.__name__ = "lime.net._HTTPRequest_Bytes";
       Ke.__super__ = Jc;
       Ke.prototype = v(Jc.prototype, {
         fromBytes: function (b) {
           return b;
         },
         load: function (b) {
           var a = this;
           null != b && (this.uri = b);
           var c = new Vb();
           b = this.__backend.loadData(this.uri);
           b.onProgress(B(c, c.progress));
           b.onError(B(c, c.error));
           b.onComplete(function (b) {
             a.responseData = a.fromBytes(b);
             c.complete(a.responseData);
           });
           return c.future;
         },
         __class__: Ke,
       });
       var ch = function (b) {
         Jc.call(this, b);
       };
       r["lime.net._HTTPRequest_String"] = ch;
       ch.__name__ = "lime.net._HTTPRequest_String";
       ch.__super__ = Jc;
       ch.prototype = v(Jc.prototype, {
         load: function (b) {
           var a = this;
           null != b && (this.uri = b);
           var c = new Vb();
           b = this.__backend.loadText(this.uri);
           b.onProgress(B(c, c.progress));
           b.onError(B(c, c.error));
           b.onComplete(function (b) {
             a.responseData = b;
             c.complete(a.responseData);
           });
           return c.future;
         },
         __class__: ch,
       });
       var zh = function (b, a) {
         null == a && (a = "");
         this.name = b;
         this.value = a;
       };
       r["lime.net.HTTPRequestHeader"] = zh;
       zh.__name__ = "lime.net.HTTPRequestHeader";
       zh.prototype = { __class__: zh };
       var dh = function (b) {
         Jc.call(this, b);
       };
       r["lime.net._HTTPRequest_lime_utils_Bytes"] = dh;
       dh.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
       dh.__super__ = Ke;
       dh.prototype = v(Ke.prototype, {
         fromBytes: function (b) {
           return rd.fromBytes(b);
         },
         __class__: dh,
       });
       var Eb = function () {};
       r["lime.system.Clipboard"] = Eb;
       Eb.__name__ = "lime.system.Clipboard";
       Eb.__update = function () {
         var b = Eb._text;
         Eb._text = null;
         Eb._text != b && Eb.onUpdate.dispatch();
       };
       Eb.get_text = function () {
         Eb.__update();
         return Eb._text;
       };
       Eb.set_text = function (b) {
         var a = Eb._text;
         Eb._text = b;
         var c = fa.current.__window;
         null != c && c.__backend.setClipboard(b);
         Eb._text != a && Eb.onUpdate.dispatch();
         return b;
       };
       var Kc = function (b, a) {
         this.onUpdate = new Ch();
         this.type = b;
         this.id = a;
       };
       r["lime.system.Sensor"] = Kc;
       Kc.__name__ = "lime.system.Sensor";
       Kc.registerSensor = function (b, a) {
         b = new Kc(b, a);
         Kc.sensors.push(b);
         return (Kc.sensorByID.h[a] = b);
       };
       Kc.prototype = { __class__: Kc };
       var $h = (D["lime.system.SensorType"] = { __ename__: "lime.system.SensorType", __constructs__: null, ACCELEROMETER: { _hx_name: "ACCELEROMETER", _hx_index: 0, __enum__: "lime.system.SensorType", toString: n } });
       $h.__constructs__ = [$h.ACCELEROMETER];
       var xb = function () {};
       r["lime.system.System"] = xb;
       xb.__name__ = "lime.system.System";
       xb.embed = u.lime.embed = function (b, a, c, d, f) {
         if (null != xb.__applicationEntryPoint && Object.prototype.hasOwnProperty.call(xb.__applicationEntryPoint.h, b)) {
           var e = "string" == typeof a ? window.document.getElementById(a) : null == a ? window.document.createElement("div") : a;
           null == e
             ? window.console.log("[lime.embed] ERROR: Cannot find target element: " + E.string(a))
             : (null == c && (c = 0),
               null == d && (d = 0),
               null == f && (f = {}),
               Object.prototype.hasOwnProperty.call(f, "background") &&
                 "string" == typeof f.background &&
                 ((a = Sa.replace(E.string(f.background), "#", "")), -1 < a.indexOf("0x") ? (f.background = E.parseInt(a)) : (f.background = E.parseInt("0x" + a))),
               (f.element = e),
               (f.width = c),
               (f.height = d),
               xb.__applicationEntryPoint.h[b](f));
         }
       };
       xb.openURL = function (b, a) {
         null == a && (a = "_blank");
         null != b && window.open(b, a);
       };
       xb.__getDirectory = function (b) {
         return null;
       };
       xb.__registerEntryPoint = function (b, a) {
         null == xb.__applicationEntryPoint && (xb.__applicationEntryPoint = new e());
         xb.__applicationEntryPoint.h[b] = a;
       };
       xb.get_applicationStorageDirectory = function () {
         null == xb.__applicationStorageDirectory && (xb.__applicationStorageDirectory = xb.__getDirectory(1));
         return xb.__applicationStorageDirectory;
       };
       var Bh = function (b, a) {
         null == a && (a = 1);
         null == b && (b = 0);
         this.onRun = new Md();
         this.onError = new Md();
         this.onComplete = new Md();
         this.doWork = new Md();
         this.minThreads = b;
         this.maxThreads = a;
         this.currentThreads = 0;
       };
       r["lime.system.ThreadPool"] = Bh;
       Bh.__name__ = "lime.system.ThreadPool";
       Bh.prototype = {
         queue: function (b) {
           this.runWork(b);
         },
         sendComplete: function (b) {
           this.onComplete.dispatch(b);
         },
         sendError: function (b) {
           this.onError.dispatch(b);
         },
         runWork: function (b) {
           this.onRun.dispatch(b);
           this.doWork.dispatch(b);
         },
         __class__: Bh,
       };
       var pc = function (b) {
         null != b && (this.name = b);
         this.__init ||
           (void 0 == this.ascender && (this.ascender = 0),
           void 0 == this.descender && (this.descender = 0),
           void 0 == this.height && (this.height = 0),
           void 0 == this.numGlyphs && (this.numGlyphs = 0),
           void 0 == this.underlinePosition && (this.underlinePosition = 0),
           void 0 == this.underlineThickness && (this.underlineThickness = 0),
           void 0 == this.unitsPerEM && (this.unitsPerEM = 0),
           null != this.__fontID ? qa.isLocal(this.__fontID) && this.__fromBytes(qa.getBytes(this.__fontID)) : null != this.__fontPath && this.__fromFile(this.__fontPath));
       };
       r["lime.text.Font"] = pc;
       pc.__name__ = "lime.text.Font";
       pc.fromFile = function (b) {
         if (null == b) return null;
         var a = new pc();
         a.__fromFile(b);
         return a;
       };
       pc.loadFromName = function (b) {
         return new pc().__loadFromName(b);
       };
       pc.__measureFontNode = function (b) {
         var a = window.document.createElement("span");
         a.setAttribute("aria-hidden", "true");
         a.appendChild(window.document.createTextNode("BESbswy"));
         var c = a.style;
         c.display = "block";
         c.position = "absolute";
         c.top = "-9999px";
         c.left = "-9999px";
         c.fontSize = "300px";
         c.width = "auto";
         c.height = "auto";
         c.lineHeight = "normal";
         c.margin = "0";
         c.padding = "0";
         c.fontVariant = "normal";
         c.whiteSpace = "nowrap";
         c.fontFamily = b;
         window.document.body.appendChild(a);
         return a;
       };
       pc.prototype = {
         __fromBytes: function (b) {
           this.__fontPath = null;
         },
         __fromFile: function (b) {
           this.__fontPath = b;
         },
         __loadFromName: function (b) {
           var a = this,
             c = new Vb();
           this.name = b;
           var d = L.navigator.userAgent.toLowerCase(),
             f = 0 <= d.indexOf(" safari/") && 0 > d.indexOf(" chrome/");
           d = new Ra("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)", "i").match(d);
           if (!f && !d && window.document.fonts && ((ia = window.document.fonts), B(ia, ia.load)))
             window.document.fonts.load("1em '" + b + "'").then(
               function (b) {
                 c.complete(a);
               },
               function (d) {
                 ab.warn('Could not load web font "' + b + '"', { fileName: "lime/text/Font.hx", lineNumber: 513, className: "lime.text.Font", methodName: "__loadFromName" });
                 c.complete(a);
               }
             );
           else {
             var e = pc.__measureFontNode("'" + b + "', sans-serif"),
               h = pc.__measureFontNode("'" + b + "', serif"),
               g = e.offsetWidth,
               m = h.offsetWidth,
               n = -1,
               p = 0,
               q,
               t;
             n = window.setInterval(function () {
               p += 1;
               q = e.offsetWidth != g || h.offsetWidth != m;
               t = 3e3 <= 50 * p;
               if (q || t)
                 window.clearInterval(n),
                   e.parentNode.removeChild(e),
                   h.parentNode.removeChild(h),
                   (h = e = null),
                   t && ab.warn('Could not load web font "' + b + '"', { fileName: "lime/text/Font.hx", lineNumber: 548, className: "lime.text.Font", methodName: "__loadFromName" }),
                   c.complete(a);
             }, 50);
           }
           return c.future;
         },
         __class__: pc,
       };
       var Vg = function () {
         this.onSave = new Je();
         this.onCancel = new lb();
       };
       r["lime.ui.FileDialog"] = Vg;
       Vg.__name__ = "lime.ui.FileDialog";
       Vg.prototype = {
         save: function (b, a, c, d, f) {
           null == f && (f = "application/octet-stream");
           if (null == b) return this.onCancel.dispatch(), !1;
           a = "";
           ua.__isPNG(b) ? ((f = "image/png"), (a = ".png")) : ua.__isJPG(b) ? ((f = "image/jpeg"), (a = ".jpg")) : ua.__isGIF(b) ? ((f = "image/gif"), (a = ".gif")) : ua.__isWebP(b) && ((f = "image/webp"), (a = ".webp"));
           c = null != c ? Ic.withoutDirectory(c) : "download" + a;
           a = b.b.bufferValue;
           a = a.slice(0, b.length);
           window.saveAs(new Blob([a], { type: f }), c, !0);
           this.onSave.dispatch(c);
           return !0;
         },
         __class__: Vg,
       };
       var wb = function (b) {
         this.onDisconnect = new lb();
         this.onButtonUp = new Zg();
         this.onButtonDown = new Zg();
         this.onAxisMove = new Kh();
         this.id = b;
         this.connected = !0;
       };
       r["lime.ui.Gamepad"] = wb;
       wb.__name__ = "lime.ui.Gamepad";
       wb.__connect = function (b) {
         if (!wb.devices.h.hasOwnProperty(b)) {
           var a = new wb(b);
           wb.devices.h[b] = a;
           wb.onConnect.dispatch(a);
         }
       };
       wb.__disconnect = function (b) {
         var a = wb.devices.h[b];
         null != a && (a.connected = !1);
         wb.devices.remove(b);
         null != a && a.onDisconnect.dispatch();
       };
       wb.prototype = { __class__: wb };
       var pb = function (b) {
         this.onTrackballMove = new Gh();
         this.onHatMove = new Ih();
         this.onDisconnect = new lb();
         this.onButtonUp = new cd();
         this.onButtonDown = new cd();
         this.onAxisMove = new Hh();
         this.id = b;
         this.connected = !0;
       };
       r["lime.ui.Joystick"] = pb;
       pb.__name__ = "lime.ui.Joystick";
       pb.__connect = function (b) {
         if (!pb.devices.h.hasOwnProperty(b)) {
           var a = new pb(b);
           pb.devices.h[b] = a;
           pb.onConnect.dispatch(a);
         }
       };
       pb.__disconnect = function (b) {
         var a = pb.devices.h[b];
         null != a && (a.connected = !1);
         pb.devices.remove(b);
         null != a && a.onDisconnect.dispatch();
       };
       pb.__getDeviceData = function () {
         return navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null;
       };
       pb.prototype = { __class__: pb };
       var Db = {
           get_ctrlKey: function (b) {
             return 0 >= (b & 64) ? 0 < (b & 128) : !0;
           },
           get_metaKey: function (b) {
             return 0 >= (b & 1024) ? 0 < (b & 2048) : !0;
           },
           get_shiftKey: function (b) {
             return 0 >= (b & 1) ? 0 < (b & 2) : !0;
           },
         },
         Ua = (D["lime.ui.MouseCursor"] = {
           __ename__: "lime.ui.MouseCursor",
           __constructs__: null,
           ARROW: { _hx_name: "ARROW", _hx_index: 0, __enum__: "lime.ui.MouseCursor", toString: n },
           CROSSHAIR: { _hx_name: "CROSSHAIR", _hx_index: 1, __enum__: "lime.ui.MouseCursor", toString: n },
           DEFAULT: { _hx_name: "DEFAULT", _hx_index: 2, __enum__: "lime.ui.MouseCursor", toString: n },
           MOVE: { _hx_name: "MOVE", _hx_index: 3, __enum__: "lime.ui.MouseCursor", toString: n },
           POINTER: { _hx_name: "POINTER", _hx_index: 4, __enum__: "lime.ui.MouseCursor", toString: n },
           RESIZE_NESW: { _hx_name: "RESIZE_NESW", _hx_index: 5, __enum__: "lime.ui.MouseCursor", toString: n },
           RESIZE_NS: { _hx_name: "RESIZE_NS", _hx_index: 6, __enum__: "lime.ui.MouseCursor", toString: n },
           RESIZE_NWSE: { _hx_name: "RESIZE_NWSE", _hx_index: 7, __enum__: "lime.ui.MouseCursor", toString: n },
           RESIZE_WE: { _hx_name: "RESIZE_WE", _hx_index: 8, __enum__: "lime.ui.MouseCursor", toString: n },
           TEXT: { _hx_name: "TEXT", _hx_index: 9, __enum__: "lime.ui.MouseCursor", toString: n },
           WAIT: { _hx_name: "WAIT", _hx_index: 10, __enum__: "lime.ui.MouseCursor", toString: n },
           WAIT_ARROW: { _hx_name: "WAIT_ARROW", _hx_index: 11, __enum__: "lime.ui.MouseCursor", toString: n },
           CUSTOM: { _hx_name: "CUSTOM", _hx_index: 12, __enum__: "lime.ui.MouseCursor", toString: n },
         });
       Ua.__constructs__ = [Ua.ARROW, Ua.CROSSHAIR, Ua.DEFAULT, Ua.MOVE, Ua.POINTER, Ua.RESIZE_NESW, Ua.RESIZE_NS, Ua.RESIZE_NWSE, Ua.RESIZE_WE, Ua.TEXT, Ua.WAIT, Ua.WAIT_ARROW, Ua.CUSTOM];
       var pd = (D["lime.ui.MouseWheelMode"] = {
         __ename__: "lime.ui.MouseWheelMode",
         __constructs__: null,
         PIXELS: { _hx_name: "PIXELS", _hx_index: 0, __enum__: "lime.ui.MouseWheelMode", toString: n },
         LINES: { _hx_name: "LINES", _hx_index: 1, __enum__: "lime.ui.MouseWheelMode", toString: n },
         PAGES: { _hx_name: "PAGES", _hx_index: 2, __enum__: "lime.ui.MouseWheelMode", toString: n },
         UNKNOWN: { _hx_name: "UNKNOWN", _hx_index: 3, __enum__: "lime.ui.MouseWheelMode", toString: n },
       });
       pd.__constructs__ = [pd.PIXELS, pd.LINES, pd.PAGES, pd.UNKNOWN];
       var Ib = function (b, a, c, d, f, e, h) {
         this.x = b;
         this.y = a;
         this.id = c;
         this.dx = d;
         this.dy = f;
         this.pressure = e;
         this.device = h;
       };
       r["lime.ui.Touch"] = Ib;
       Ib.__name__ = "lime.ui.Touch";
       Ib.prototype = { __class__: Ib };
       var jh = function (b, a) {
         this.onTextInput = new Je();
         this.onTextEdit = new Jh();
         this.onRestore = new lb();
         this.onResize = new Xg();
         this.onRenderContextRestored = new Yg();
         this.onRenderContextLost = new lb();
         this.onRender = new Yg();
         this.onMove = new Ie();
         this.onMouseWheel = new Fh();
         this.onMouseUp = new Dh();
         this.onMouseMoveRelative = new Ie();
         this.onMouseMove = new Ie();
         this.onMouseDown = new Eh();
         this.onMinimize = new lb();
         this.onMaximize = new lb();
         this.onLeave = new lb();
         this.onKeyUp = new $g();
         this.onKeyDown = new $g();
         this.onFullscreen = new lb();
         this.onFocusOut = new lb();
         this.onFocusIn = new lb();
         this.onExpose = new lb();
         this.onEnter = new lb();
         this.onDropFile = new Je();
         this.onDeactivate = new lb();
         this.onClose = new lb();
         this.onActivate = new lb();
         this.application = b;
         this.__attributes = null != a ? a : {};
         Object.prototype.hasOwnProperty.call(this.__attributes, "parameters") && (this.parameters = this.__attributes.parameters);
         this.__height = this.__width = 0;
         this.__fullscreen = !1;
         this.__scale = 1;
         this.__y = this.__x = 0;
         this.__title = "";
         this.id = -1;
         this.__backend = new wa(this);
       };
       r["lime.ui.Window"] = jh;
       jh.__name__ = "lime.ui.Window";
       jh.prototype = {
         close: function () {
           this.__backend.close();
         },
         set_cursor: function (b) {
           return this.__backend.setCursor(b);
         },
         set_fullscreen: function (b) {
           return (this.__fullscreen = this.__backend.setFullscreen(b));
         },
         __class__: jh,
       };
       var wc = function () {
         this.data = new e();
         this.paths = [];
       };
       r["lime.utils.AssetBundle"] = wc;
       wc.__name__ = "lime.utils.AssetBundle";
       wc.fromBytes = function (b) {
         return wc.__extractBundle(new Jg(b));
       };
       wc.loadFromBytes = function (b) {
         return Xa.withValue(wc.fromBytes(b));
       };
       wc.loadFromFile = function (b) {
         return rd.loadFromFile(b).then(wc.loadFromBytes);
       };
       wc.__extractBundle = function (b) {
         var a = De.readZip(b);
         b = new wc();
         for (a = a.h; null != a; ) {
           var c = a.item;
           a = a.next;
           if (c.compressed) {
             var d = b.data,
               f = c.fileName,
               e = rd.decompress(c.data, eh.DEFLATE);
             d.h[f] = e;
           } else b.data.h[c.fileName] = c.data;
           b.paths.push(c.fileName);
         }
         return b;
       };
       wc.prototype = { __class__: wc };
       var Ph = function () {
         this.enabled = !0;
         this.audio = new e();
         this.font = new e();
         this.image = new e();
         this.version = 122077;
       };
       r["lime.utils.AssetCache"] = Ph;
       Ph.__name__ = "lime.utils.AssetCache";
       Ph.prototype = {
         exists: function (b, a) {
           return (("IMAGE" == a || null == a) && Object.prototype.hasOwnProperty.call(this.image.h, b)) ||
             (("FONT" == a || null == a) && Object.prototype.hasOwnProperty.call(this.font.h, b)) ||
             (("SOUND" == a || "MUSIC" == a || null == a) && Object.prototype.hasOwnProperty.call(this.audio.h, b))
             ? !0
             : !1;
         },
         set: function (b, a, c) {
           switch (a) {
             case "FONT":
               this.font.h[b] = c;
               break;
             case "IMAGE":
               if (!(c instanceof ua)) throw na.thrown("Cannot cache non-Image asset: " + E.string(c) + " as Image");
               this.image.h[b] = c;
               break;
             case "MUSIC":
             case "SOUND":
               if (!(c instanceof mb)) throw na.thrown("Cannot cache non-AudioBuffer asset: " + E.string(c) + " as AudioBuffer");
               this.audio.h[b] = c;
               break;
             default:
               throw na.thrown(a + " assets are not cachable");
           }
         },
         clear: function (b) {
           if (null == b) (this.audio = new e()), (this.font = new e()), (this.image = new e());
           else {
             for (var a = Object.keys(this.audio.h), c = a.length, d = 0; d < c; ) {
               var f = a[d++];
               if (Sa.startsWith(f, b)) {
                 var h = this.audio;
                 Object.prototype.hasOwnProperty.call(h.h, f) && delete h.h[f];
               }
             }
             a = Object.keys(this.font.h);
             c = a.length;
             for (d = 0; d < c; ) (f = a[d++]), Sa.startsWith(f, b) && ((h = this.font), Object.prototype.hasOwnProperty.call(h.h, f) && delete h.h[f]);
             a = Object.keys(this.image.h);
             c = a.length;
             for (d = 0; d < c; ) (f = a[d++]), Sa.startsWith(f, b) && ((h = this.image), Object.prototype.hasOwnProperty.call(h.h, f) && delete h.h[f]);
           }
         },
         __class__: Ph,
       };
       var Ec = function () {
         this.types = new e();
         this.sizes = new e();
         this.preload = new e();
         this.paths = new e();
         this.pathGroups = new e();
         this.classTypes = new e();
         this.cachedText = new e();
         this.cachedImages = new e();
         this.cachedFonts = new e();
         this.cachedBytes = new e();
         this.cachedAudioBuffers = new e();
         this.onChange = new lb();
         this.bytesTotal = this.bytesLoaded = 0;
       };
       r["lime.utils.AssetLibrary"] = Ec;
       Ec.__name__ = "lime.utils.AssetLibrary";
       Ec.fromBundle = function (b) {
         if (Object.prototype.hasOwnProperty.call(b.data.h, "library.json")) {
           var a = Rb.fromBytes(b.data.h["library.json"]);
           if (null != a) {
             if (null == a.libraryType) var c = new Ec();
             else if (((c = r[a.libraryType]), null != c)) c = Za.createInstance(c, a.libraryArgs);
             else return ab.warn("Could not find library type: " + a.libraryType, { fileName: "lime/utils/AssetLibrary.hx", lineNumber: 122, className: "lime.utils.AssetLibrary", methodName: "fromBundle" }), null;
             c.__fromBundle(b, a);
             return c;
           }
         } else return (c = new Ec()), c.__fromBundle(b), c;
         return null;
       };
       Ec.fromManifest = function (b) {
         if (null == b) return null;
         if (null == b.libraryType) var a = new Ec();
         else if (((a = r[b.libraryType]), null != a)) a = Za.createInstance(a, b.libraryArgs);
         else return ab.warn("Could not find library type: " + b.libraryType, { fileName: "lime/utils/AssetLibrary.hx", lineNumber: 160, className: "lime.utils.AssetLibrary", methodName: "fromManifest" }), null;
         a.__fromManifest(b);
         return a;
       };
       Ec.prototype = {
         exists: function (b, a) {
           a = null != a ? H.__cast(a, String) : null;
           b = this.types.h[b];
           return null == b || (b != a && (("SOUND" != a && "MUSIC" != a) || ("MUSIC" != b && "SOUND" != b)) && "BINARY" != a && null != a && ("BINARY" != b || "TEXT" != a)) ? !1 : !0;
         },
         getAsset: function (b, a) {
           switch (a) {
             case "BINARY":
               return this.getBytes(b);
             case "FONT":
               return this.getFont(b);
             case "IMAGE":
               return this.getImage(b);
             case "MUSIC":
             case "SOUND":
               return this.getAudioBuffer(b);
             case "TEMPLATE":
               throw na.thrown("Not sure how to get template: " + b);
             case "TEXT":
               return this.getText(b);
             default:
               throw na.thrown("Unknown asset type: " + a);
           }
         },
         getAudioBuffer: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h, b)
             ? this.cachedAudioBuffers.h[b]
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? mb.fromBytes(H.__cast(Za.createInstance(this.classTypes.h[b], []), Ka))
             : mb.fromFile(this.paths.h[b]);
         },
         getBytes: function (b) {
           if (Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b)) return this.cachedBytes.h[b];
           if (Object.prototype.hasOwnProperty.call(this.cachedText.h, b)) {
             var a = rd.ofString(this.cachedText.h[b]);
             return (this.cachedBytes.h[b] = a);
           }
           return Object.prototype.hasOwnProperty.call(this.classTypes.h, b) ? H.__cast(Za.createInstance(this.classTypes.h[b], []), Ka) : rd.fromFile(this.paths.h[b]);
         },
         getFont: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedFonts.h, b)
             ? this.cachedFonts.h[b]
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? H.__cast(Za.createInstance(this.classTypes.h[b], []), pc)
             : pc.fromFile(this.paths.h[b]);
         },
         getImage: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedImages.h, b)
             ? this.cachedImages.h[b]
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? H.__cast(Za.createInstance(this.classTypes.h[b], []), ua)
             : ua.fromFile(this.paths.h[b]);
         },
         getText: function (b) {
           if (Object.prototype.hasOwnProperty.call(this.cachedText.h, b)) return this.cachedText.h[b];
           b = this.getBytes(b);
           return null == b ? null : b.getString(0, b.length);
         },
         isLocal: function (b, a) {
           if (Object.prototype.hasOwnProperty.call(this.classTypes.h, b)) return !0;
           a = null != a ? H.__cast(a, String) : null;
           if (null == a) return Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b) ? !0 : Object.prototype.hasOwnProperty.call(this.cachedText.h, b);
           switch (a) {
             case "FONT":
               return Object.prototype.hasOwnProperty.call(this.cachedFonts.h, b);
             case "IMAGE":
               return Object.prototype.hasOwnProperty.call(this.cachedImages.h, b);
             case "MUSIC":
             case "SOUND":
               return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h, b);
             default:
               return Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b) ? !0 : Object.prototype.hasOwnProperty.call(this.cachedText.h, b);
           }
         },
         loadAsset: function (b, a) {
           switch (a) {
             case "BINARY":
               return this.loadBytes(b);
             case "FONT":
               return this.loadFont(b);
             case "IMAGE":
               return this.loadImage(b);
             case "MUSIC":
             case "SOUND":
               return this.loadAudioBuffer(b);
             case "TEMPLATE":
               throw na.thrown("Not sure how to load template: " + b);
             case "TEXT":
               return this.loadText(b);
             default:
               throw na.thrown("Unknown asset type: " + a);
           }
         },
         load: function () {
           if (this.loaded) return Xa.withValue(this);
           if (null == this.promise) {
             this.promise = new Vb();
             this.bytesLoadedCache = new e();
             this.assetsLoaded = 0;
             this.assetsTotal = 1;
             for (var b = Object.keys(this.preload.h), a = b.length, c = 0; c < a; ) {
               var d = b[c++];
               if (this.preload.h[d]) {
                 ab.verbose("Preloading asset: " + d + " [" + this.types.h[d] + "]", { fileName: "lime/utils/AssetLibrary.hx", lineNumber: 405, className: "lime.utils.AssetLibrary", methodName: "load" });
                 var f = this.types.h[d];
                 if (null != f)
                   switch (f) {
                     case "BINARY":
                       this.assetsTotal++;
                       f = this.loadBytes(d);
                       f.onProgress(
                         (function (a, b) {
                           return function (c, d) {
                             b[0](a[0], c, d);
                           };
                         })([d], [B(this, this.load_onProgress)])
                       );
                       f.onError(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.load_onError)])
                       );
                       f.onComplete(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.loadBytes_onComplete)])
                       );
                       break;
                     case "FONT":
                       this.assetsTotal++;
                       f = this.loadFont(d);
                       f.onProgress(
                         (function (a, b) {
                           return function (c, d) {
                             b[0](a[0], c, d);
                           };
                         })([d], [B(this, this.load_onProgress)])
                       );
                       f.onError(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.load_onError)])
                       );
                       f.onComplete(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.loadFont_onComplete)])
                       );
                       break;
                     case "IMAGE":
                       this.assetsTotal++;
                       f = this.loadImage(d);
                       f.onProgress(
                         (function (a, b) {
                           return function (c, d) {
                             b[0](a[0], c, d);
                           };
                         })([d], [B(this, this.load_onProgress)])
                       );
                       f.onError(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.load_onError)])
                       );
                       f.onComplete(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.loadImage_onComplete)])
                       );
                       break;
                     case "MUSIC":
                     case "SOUND":
                       this.assetsTotal++;
                       f = this.loadAudioBuffer(d);
                       f.onProgress(
                         (function (a, b) {
                           return function (c, d) {
                             b[0](a[0], c, d);
                           };
                         })([d], [B(this, this.load_onProgress)])
                       );
                       f.onError(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.loadAudioBuffer_onError)])
                       );
                       f.onComplete(
                         (function (a, b) {
                           return function (c) {
                             b[0](a[0], c);
                           };
                         })([d], [B(this, this.loadAudioBuffer_onComplete)])
                       );
                       break;
                     case "TEXT":
                       this.assetsTotal++,
                         (f = this.loadText(d)),
                         f.onProgress(
                           (function (a, b) {
                             return function (c, d) {
                               b[0](a[0], c, d);
                             };
                           })([d], [B(this, this.load_onProgress)])
                         ),
                         f.onError(
                           (function (a, b) {
                             return function (c) {
                               b[0](a[0], c);
                             };
                           })([d], [B(this, this.load_onError)])
                         ),
                         f.onComplete(
                           (function (a, b) {
                             return function (c) {
                               b[0](a[0], c);
                             };
                           })([d], [B(this, this.loadText_onComplete)])
                         );
                   }
               }
             }
             this.__assetLoaded(null);
           }
           return this.promise.future;
         },
         loadAudioBuffer: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h, b)
             ? Xa.withValue(this.cachedAudioBuffers.h[b])
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? Xa.withValue(mb.fromBytes(H.__cast(Za.createInstance(this.classTypes.h[b], []), Ka)))
             : Object.prototype.hasOwnProperty.call(this.pathGroups.h, b)
             ? mb.loadFromFiles(this.pathGroups.h[b])
             : mb.loadFromFile(this.paths.h[b]);
         },
         loadBytes: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b)
             ? Xa.withValue(this.cachedBytes.h[b])
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? Xa.withValue(Za.createInstance(this.classTypes.h[b], []))
             : rd.loadFromFile(this.paths.h[b]);
         },
         loadFont: function (b) {
           return Object.prototype.hasOwnProperty.call(this.cachedFonts.h, b)
             ? Xa.withValue(this.cachedFonts.h[b])
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? ((b = Za.createInstance(this.classTypes.h[b], [])), b.__loadFromName(b.name))
             : pc.loadFromName(this.paths.h[b]);
         },
         loadImage: function (b) {
           var a = this;
           return Object.prototype.hasOwnProperty.call(this.cachedImages.h, b)
             ? Xa.withValue(this.cachedImages.h[b])
             : Object.prototype.hasOwnProperty.call(this.classTypes.h, b)
             ? Xa.withValue(Za.createInstance(this.classTypes.h[b], []))
             : Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b)
             ? ua.loadFromBytes(this.cachedBytes.h[b]).then(function (c) {
                 var d = a.cachedBytes;
                 Object.prototype.hasOwnProperty.call(d.h, b) && delete d.h[b];
                 a.cachedImages.h[b] = c;
                 return Xa.withValue(c);
               })
             : ua.loadFromFile(this.paths.h[b]);
         },
         loadText: function (b) {
           if (Object.prototype.hasOwnProperty.call(this.cachedText.h, b)) return Xa.withValue(this.cachedText.h[b]);
           if (Object.prototype.hasOwnProperty.call(this.cachedBytes.h, b) || Object.prototype.hasOwnProperty.call(this.classTypes.h, b)) {
             var a = this.getBytes(b);
             if (null == a) return Xa.withValue(null);
             a = a.getString(0, a.length);
             this.cachedText.h[b] = a;
             return Xa.withValue(a);
           }
           return new ch().load(this.paths.h[b]);
         },
         unload: function () {},
         __assetLoaded: function (b) {
           this.assetsLoaded++;
           null != b &&
             ab.verbose("Loaded asset: " + b + " [" + this.types.h[b] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")", {
               fileName: "lime/utils/AssetLibrary.hx",
               lineNumber: 619,
               className: "lime.utils.AssetLibrary",
               methodName: "__assetLoaded",
             });
           if (null != b) {
             var a = Object.prototype.hasOwnProperty.call(this.sizes.h, b) ? this.sizes.h[b] : 0;
             if (Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h, b)) {
               var c = this.bytesLoadedCache.h[b];
               c < a && (this.bytesLoaded += a - c);
             } else this.bytesLoaded += a;
             this.bytesLoadedCache.h[b] = a;
           }
           this.assetsLoaded < this.assetsTotal ? this.promise.progress(this.bytesLoaded, this.bytesTotal) : ((this.loaded = !0), this.promise.progress(this.bytesTotal, this.bytesTotal), this.promise.complete(this));
         },
         __cacheBreak: function (b) {
           return qa.__cacheBreak(b);
         },
         __fromBundle: function (b, a) {
           if (null != a) {
             var c = 0;
             for (a = a.assets; c < a.length; ) {
               var d = a[c];
               ++c;
               var f = Object.prototype.hasOwnProperty.call(d, "id") ? d.id : d.path;
               var e = b.data.h[d.path];
               if (Object.prototype.hasOwnProperty.call(d, "type")) {
                 var h = d.type;
                 "TEXT" == h ? (this.cachedText.h[f] = null != e ? E.string(e) : null) : (this.cachedBytes.h[f] = e);
                 this.types.h[f] = d.type;
               } else (this.cachedBytes.h[f] = e), (this.types.h[f] = "BINARY");
             }
           } else for (c = 0, a = b.paths; c < a.length; ) (f = a[c]), ++c, (this.cachedBytes.h[f] = b.data.h[f]), (this.types.h[f] = "BINARY");
         },
         __fromManifest: function (b) {
           var a = 2 <= b.version,
             c = b.rootPath;
           null == c && (c = "");
           "" != c && (c += "/");
           for (var d = 0, f = b.assets; d < f.length; ) {
             var e = f[d];
             ++d;
             var h = a && Object.prototype.hasOwnProperty.call(e, "size") ? e.size : 100;
             var g = Object.prototype.hasOwnProperty.call(e, "id") ? e.id : e.path;
             if (Object.prototype.hasOwnProperty.call(e, "path")) {
               var m = this.paths;
               var n = this.__cacheBreak(this.__resolvePath(c + E.string(Z.field(e, "path"))));
               m.h[g] = n;
             }
             if (Object.prototype.hasOwnProperty.call(e, "pathGroup")) {
               m = Z.field(e, "pathGroup");
               n = 0;
               for (var p = m.length; n < p; ) {
                 var q = n++;
                 m[q] = this.__cacheBreak(this.__resolvePath(c + m[q]));
               }
               this.pathGroups.h[g] = m;
             }
             this.sizes.h[g] = h;
             this.types.h[g] = e.type;
             Object.prototype.hasOwnProperty.call(e, "preload") && (this.preload.h[g] = Z.field(e, "preload"));
             Object.prototype.hasOwnProperty.call(e, "className") && ((h = Z.field(e, "className")), (h = r[h]), (this.classTypes.h[g] = h));
           }
           d = this.bytesTotal = 0;
           for (f = b.assets; d < f.length; )
             (e = f[d]),
               ++d,
               (g = Object.prototype.hasOwnProperty.call(e, "id") ? e.id : e.path),
               Object.prototype.hasOwnProperty.call(this.preload.h, g) && this.preload.h[g] && Object.prototype.hasOwnProperty.call(this.sizes.h, g) && (this.bytesTotal += this.sizes.h[g]);
         },
         __resolvePath: function (b) {
           b = Sa.replace(b, "\\", "/");
           var a = b.indexOf(":");
           Sa.startsWith(b, "http") && 0 < a ? ((a += 3), (b = I.substr(b, 0, a) + Sa.replace(I.substr(b, a, null), "//", "/"))) : (b = Sa.replace(b, "//", "/"));
           if (-1 < b.indexOf("./")) {
             b = b.split("/");
             a = [];
             for (var c = 0, d = b.length; c < d; ) {
               var f = c++;
               ".." == b[f] ? (0 == f || ".." == a[f - 1] ? a.push("..") : a.pop()) : "." == b[f] ? 0 == f && a.push(".") : a.push(b[f]);
             }
             b = a.join("/");
           }
           return b;
         },
         loadAudioBuffer_onComplete: function (b, a) {
           this.cachedAudioBuffers.h[b] = a;
           if (Object.prototype.hasOwnProperty.call(this.pathGroups.h, b))
             for (var c = this.pathGroups.h[b], d = Object.keys(this.pathGroups.h), f = d.length, e = 0; e < f; ) {
               var h = d[e++];
               if (h != b)
                 for (var g = 0; g < c.length; )
                   if (-1 < this.pathGroups.h[h].indexOf(c[g++])) {
                     this.cachedAudioBuffers.h[h] = a;
                     break;
                   }
             }
           this.__assetLoaded(b);
         },
         loadAudioBuffer_onError: function (b, a) {
           null != a && "" != a
             ? ab.warn('Could not load "' + b + '": ' + E.string(a), { fileName: "lime/utils/AssetLibrary.hx", lineNumber: 865, className: "lime.utils.AssetLibrary", methodName: "loadAudioBuffer_onError" })
             : ab.warn('Could not load "' + b + '"', { fileName: "lime/utils/AssetLibrary.hx", lineNumber: 869, className: "lime.utils.AssetLibrary", methodName: "loadAudioBuffer_onError" });
           this.loadAudioBuffer_onComplete(b, new mb());
         },
         loadBytes_onComplete: function (b, a) {
           this.cachedBytes.h[b] = a;
           this.__assetLoaded(b);
         },
         loadFont_onComplete: function (b, a) {
           this.cachedFonts.h[b] = a;
           this.__assetLoaded(b);
         },
         loadImage_onComplete: function (b, a) {
           this.cachedImages.h[b] = a;
           this.__assetLoaded(b);
         },
         loadText_onComplete: function (b, a) {
           this.cachedText.h[b] = a;
           this.__assetLoaded(b);
         },
         load_onError: function (b, a) {
           null != a && "" != a ? this.promise.error('Error loading asset "' + b + '": ' + E.string(a)) : this.promise.error('Error loading asset "' + b + '"');
         },
         load_onProgress: function (b, a, c) {
           if (0 < a) {
             var d = this.sizes.h[b];
             0 < c ? ((a /= c), 1 < a && (a = 1), (a = Math.floor(a * d))) : a > d && (a = d);
             Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h, b) ? ((d = this.bytesLoadedCache.h[b]), a != d && (this.bytesLoaded += a - d)) : (this.bytesLoaded += a);
             this.bytesLoadedCache.h[b] = a;
             this.promise.progress(this.bytesLoaded, this.bytesTotal);
           }
         },
         __class__: Ec,
       };
       var Rb = function () {
         this.assets = [];
         this.libraryArgs = [];
         this.version = 2;
       };
       r["lime.utils.AssetManifest"] = Rb;
       Rb.__name__ = "lime.utils.AssetManifest";
       Rb.fromBytes = function (b, a) {
         return null != b ? Rb.parse(b.getString(0, b.length), a) : null;
       };
       Rb.loadFromFile = function (b, a) {
         b = Rb.__resolvePath(b);
         a = Rb.__resolveRootPath(a, b);
         return null == b
           ? null
           : rd.loadFromFile(b).then(function (b) {
               return Xa.withValue(Rb.fromBytes(b, a));
             });
       };
       Rb.parse = function (b, a) {
         if (null == b || "" == b) return null;
         b = JSON.parse(b);
         var c = new Rb();
         Object.prototype.hasOwnProperty.call(b, "name") && (c.name = b.name);
         Object.prototype.hasOwnProperty.call(b, "libraryType") && (c.libraryType = b.libraryType);
         Object.prototype.hasOwnProperty.call(b, "libraryArgs") && (c.libraryArgs = b.libraryArgs);
         if (Object.prototype.hasOwnProperty.call(b, "assets")) {
           var d = b.assets;
           Object.prototype.hasOwnProperty.call(b, "version") && 2 >= b.version ? (c.assets = vb.run(d)) : (c.assets = d);
         }
         Object.prototype.hasOwnProperty.call(b, "rootPath") && (c.rootPath = b.rootPath);
         null != a && "" != a && (c.rootPath = null == c.rootPath || "" == c.rootPath ? a : a + "/" + c.rootPath);
         return c;
       };
       Rb.__resolvePath = function (b) {
         if (null == b) return null;
         var a = b.indexOf("?");
         var c = -1 < a ? I.substr(b, 0, a) : b;
         for (c = Sa.replace(c, "\\", "/"); Sa.endsWith(c, "/"); ) c = I.substr(c, 0, c.length - 1);
         return Sa.endsWith(c, ".bundle") ? (-1 < a ? c + "/library.json" + I.substr(b, a, null) : c + "/library.json") : b;
       };
       Rb.__resolveRootPath = function (b, a) {
         if (null != b) return b;
         b = a.indexOf("?");
         b = -1 < b ? I.substr(a, 0, b) : a;
         for (b = Sa.replace(b, "\\", "/"); Sa.endsWith(b, "/"); ) {
           if ("/" == b) return b;
           b = I.substr(b, 0, b.length - 1);
         }
         return Sa.endsWith(b, ".bundle") ? b : Ic.directory(b);
       };
       Rb.prototype = { __class__: Rb };
       var qa = function () {};
       r["lime.utils.Assets"] = qa;
       qa.__name__ = "lime.utils.Assets";
       qa.getAsset = function (b, a, c) {
         if (c && qa.cache.enabled)
           switch (a) {
             case "BINARY":
             case "TEXT":
               c = !1;
               break;
             case "FONT":
               var d = qa.cache.font.h[b];
               if (null != d) return d;
               break;
             case "IMAGE":
               d = qa.cache.image.h[b];
               if (qa.isValidImage(d)) return d;
               break;
             case "MUSIC":
             case "SOUND":
               d = qa.cache.audio.h[b];
               if (qa.isValidAudio(d)) return d;
               break;
             case "TEMPLATE":
               throw na.thrown("Not sure how to get template: " + b);
             default:
               return null;
           }
         var f = b.indexOf(":");
         d = b.substring(0, f);
         f = b.substring(f + 1);
         var e = qa.getLibrary(d);
         if (null != e)
           if (e.exists(f, a)) {
             if (e.isLocal(f, a)) return (d = e.getAsset(f, a)), c && qa.cache.enabled && qa.cache.set(b, a, d), d;
             ab.error(a + ' asset "' + b + '" exists, but only asynchronously', { fileName: "lime/utils/Assets.hx", lineNumber: 133, className: "lime.utils.Assets", methodName: "getAsset" });
           } else ab.error("There is no " + a + ' asset with an ID of "' + b + '"', { fileName: "lime/utils/Assets.hx", lineNumber: 138, className: "lime.utils.Assets", methodName: "getAsset" });
         else ab.error(qa.__libraryNotFound(d), { fileName: "lime/utils/Assets.hx", lineNumber: 143, className: "lime.utils.Assets", methodName: "getAsset" });
         return null;
       };
       qa.getBytes = function (b) {
         return qa.getAsset(b, "BINARY", !1);
       };
       qa.getLibrary = function (b) {
         if (null == b || "" == b) b = "default";
         return qa.libraries.h[b];
       };
       qa.getText = function (b) {
         return qa.getAsset(b, "TEXT", !1);
       };
       qa.isLocal = function (b, a, c) {
         null == c && (c = !0);
         if (c && qa.cache.enabled && qa.cache.exists(b, a)) return !0;
         c = b.indexOf(":");
         var d = qa.getLibrary(b.substring(0, c));
         return null != d ? d.isLocal(b.substring(c + 1), a) : !1;
       };
       qa.isValidAudio = function (b) {
         return null != b;
       };
       qa.isValidImage = function (b) {
         return null != b ? null != b.buffer : !1;
       };
       qa.loadAsset = function (b, a, c) {
         if (c && qa.cache.enabled)
           switch (a) {
             case "BINARY":
             case "TEXT":
               c = !1;
               break;
             case "FONT":
               var d = qa.cache.font.h[b];
               if (null != d) return Xa.withValue(d);
               break;
             case "IMAGE":
               d = qa.cache.image.h[b];
               if (qa.isValidImage(d)) return Xa.withValue(d);
               break;
             case "MUSIC":
             case "SOUND":
               d = qa.cache.audio.h[b];
               if (qa.isValidAudio(d)) return Xa.withValue(d);
               break;
             case "TEMPLATE":
               throw na.thrown("Not sure how to get template: " + b);
             default:
               return null;
           }
         var f = b.indexOf(":");
         d = b.substring(0, f);
         f = b.substring(f + 1);
         var e = qa.getLibrary(d);
         if (null != e) {
           if (e.exists(f, a)) {
             d = e.loadAsset(f, a);
             if (c && qa.cache.enabled)
               d.onComplete(function (c) {
                 qa.cache.set(b, a, c);
               });
             return d;
           }
           return Xa.withError("There is no " + a + ' asset with an ID of "' + b + '"');
         }
         return Xa.withError(qa.__libraryNotFound(d));
       };
       qa.loadAudioBuffer = function (b, a) {
         null == a && (a = !0);
         return qa.loadAsset(b, "SOUND", a);
       };
       qa.loadImage = function (b, a) {
         null == a && (a = !0);
         return qa.loadAsset(b, "IMAGE", a);
       };
       qa.loadLibrary = function (b) {
         var a = new Vb(),
           c = qa.getLibrary(b);
         if (null != c) return c.load();
         c = b;
         var d = null;
         if (Object.prototype.hasOwnProperty.call(qa.bundlePaths.h, b))
           wc.loadFromFile(qa.bundlePaths.h[b])
             .onComplete(function (c) {
               null == c
                 ? a.error('Cannot load bundle for library "' + b + '"')
                 : ((c = Ec.fromBundle(c)), null == c ? a.error('Cannot open library "' + b + '"') : ((qa.libraries.h[b] = c), c.onChange.add(((ia = qa.onChange), B(ia, ia.dispatch))), a.completeWith(c.load())));
             })
             .onError(function (c) {
               a.error('There is no asset library with an ID of "' + b + '"');
             });
         else
           Object.prototype.hasOwnProperty.call(qa.libraryPaths.h, b) ? ((c = qa.libraryPaths.h[b]), (d = Ic.directory(c))) : (Sa.endsWith(c, ".bundle") ? ((d = c), (c += "/library.json")) : (d = Ic.directory(c)), (c = qa.__cacheBreak(c))),
             Rb.loadFromFile(c, d)
               .onComplete(function (c) {
                 null == c
                   ? a.error('Cannot parse asset manifest for library "' + b + '"')
                   : ((c = Ec.fromManifest(c)), null == c ? a.error('Cannot open library "' + b + '"') : ((qa.libraries.h[b] = c), c.onChange.add(((ia = qa.onChange), B(ia, ia.dispatch))), a.completeWith(c.load())));
               })
               .onError(function (c) {
                 a.error('There is no asset library with an ID of "' + b + '"');
               });
         return a.future;
       };
       qa.registerLibrary = function (b, a) {
         if (Object.prototype.hasOwnProperty.call(qa.libraries.h, b)) {
           if (qa.libraries.h[b] == a) return;
           qa.unloadLibrary(b);
         }
         null != a && a.onChange.add(qa.library_onChange);
         qa.libraries.h[b] = a;
       };
       qa.unloadLibrary = function (b) {
         if (null == b || "" == b) b = "default";
         var a = qa.libraries.h[b];
         null != a && (qa.cache.clear(b + ":"), a.onChange.remove(qa.library_onChange), a.unload());
         a = qa.libraries;
         Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
       };
       qa.__cacheBreak = function (b) {
         0 < qa.cache.version && (b = -1 < b.indexOf("?") ? b + ("&" + qa.cache.version) : b + ("?" + qa.cache.version));
         return b;
       };
       qa.__libraryNotFound = function (b) {
         if (null == b || "" == b) b = "default";
         return null == fa.current || null == fa.current.__preloader || fa.current.__preloader.complete ? 'There is no asset library named "' + b + '"' : 'There is no asset library named "' + b + '", or it is not yet preloaded';
       };
       qa.library_onChange = function () {
         qa.cache.clear();
         qa.onChange.dispatch();
       };
       var rd = {
           _new: function (b, a) {
             return new Ka(a);
           },
           decompress: function (b, a) {
             switch (a._hx_index) {
               case 0:
                 return Vh.decompress(b);
               case 1:
                 return Wh.decompress(b);
               case 2:
                 return Xh.decompress(b);
               case 3:
                 return Yh.decompress(b);
             }
           },
           fromBytes: function (b) {
             return null == b ? null : rd._new(b.length, b.b.bufferValue);
           },
           fromFile: function (b) {
             return null;
           },
           loadFromFile: function (b) {
             return new dh().load(b);
           },
           ofString: function (b) {
             b = Ka.ofString(b);
             return rd._new(b.length, b.b.bufferValue);
           },
         },
         eh = (D["lime.utils.CompressionAlgorithm"] = {
           __ename__: "lime.utils.CompressionAlgorithm",
           __constructs__: null,
           DEFLATE: { _hx_name: "DEFLATE", _hx_index: 0, __enum__: "lime.utils.CompressionAlgorithm", toString: n },
           GZIP: { _hx_name: "GZIP", _hx_index: 1, __enum__: "lime.utils.CompressionAlgorithm", toString: n },
           LZMA: { _hx_name: "LZMA", _hx_index: 2, __enum__: "lime.utils.CompressionAlgorithm", toString: n },
           ZLIB: { _hx_name: "ZLIB", _hx_index: 3, __enum__: "lime.utils.CompressionAlgorithm", toString: n },
         });
       eh.__constructs__ = [eh.DEFLATE, eh.GZIP, eh.LZMA, eh.ZLIB];
       var ab = function () {};
       r["lime.utils.Log"] = ab;
       ab.__name__ = "lime.utils.Log";
       ab.error = function (b, a) {
         if (1 <= ab.level) {
           b = "[" + a.className + "] ERROR: " + E.string(b);
           if (ab.throwErrors) throw na.thrown(b);
           console.error(b);
         }
       };
       ab.verbose = function (b, a) {
         5 <= ab.level && ((b = "[" + a.className + "] " + E.string(b)), console.log(b));
       };
       ab.warn = function (b, a) {
         2 <= ab.level && console.warn("[" + a.className + "] WARNING: " + E.string(b));
       };
       var ih = function () {
         this.bytesTotalCache = new e();
         this.bytesLoadedCache2 = new e();
         this.bytesLoadedCache = new oc();
         this.onProgress = new Xg();
         this.onComplete = new lb();
         this.bytesTotal = this.bytesLoaded = 0;
         this.libraries = [];
         this.libraryNames = [];
         this.onProgress.add(B(this, this.update));
       };
       r["lime.utils.Preloader"] = ih;
       ih.__name__ = "lime.utils.Preloader";
       ih.prototype = {
         addLibrary: function (b) {
           this.libraries.push(b);
         },
         addLibraryName: function (b) {
           -1 == this.libraryNames.indexOf(b) && this.libraryNames.push(b);
         },
         load: function () {
           for (var b = this, a = 0, c = this.libraries; a < c.length; ) this.bytesTotal += c[a++].bytesTotal;
           this.loadedLibraries = -1;
           this.preloadStarted = !1;
           a = 0;
           for (c = this.libraries; a < c.length; ) {
             var d = [c[a]];
             ++a;
             ab.verbose("Preloading asset library", { fileName: "lime/utils/Preloader.hx", lineNumber: 132, className: "lime.utils.Preloader", methodName: "load" });
             d[0]
               .load()
               .onProgress(
                 (function (a) {
                   return function (c, d) {
                     b.bytesLoaded = null == b.bytesLoadedCache.h.__keys__[a[0].__id__] ? b.bytesLoaded + c : b.bytesLoaded + (c - b.bytesLoadedCache.h[a[0].__id__]);
                     b.bytesLoadedCache.set(a[0], c);
                     b.simulateProgress || b.onProgress.dispatch(b.bytesLoaded, b.bytesTotal);
                   };
                 })(d)
               )
               .onComplete(
                 (function (a) {
                   return function (c) {
                     b.bytesLoaded = null == b.bytesLoadedCache.h.__keys__[a[0].__id__] ? b.bytesLoaded + a[0].bytesTotal : b.bytesLoaded + (a[0].bytesTotal - b.bytesLoadedCache.h[a[0].__id__]);
                     b.loadedAssetLibrary();
                   };
                 })(d)
               )
               .onError(
                 (function () {
                   return function (a) {
                     ab.error(a, { fileName: "lime/utils/Preloader.hx", lineNumber: 168, className: "lime.utils.Preloader", methodName: "load" });
                   };
                 })()
               );
           }
           a = 0;
           for (c = this.libraryNames; a < c.length; ) ++a, (this.bytesTotal += 200);
           this.loadedLibraries++;
           this.preloadStarted = !0;
           this.updateProgress();
         },
         loadedAssetLibrary: function (b) {
           this.loadedLibraries++;
           var a = this.loadedLibraries;
           this.preloadStarted || ++a;
           var c = this.libraries.length + this.libraryNames.length;
           null != b
             ? ab.verbose("Loaded asset library: " + b + " [" + a + "/" + c + "]", { fileName: "lime/utils/Preloader.hx", lineNumber: 195, className: "lime.utils.Preloader", methodName: "loadedAssetLibrary" })
             : ab.verbose("Loaded asset library [" + a + "/" + c + "]", { fileName: "lime/utils/Preloader.hx", lineNumber: 199, className: "lime.utils.Preloader", methodName: "loadedAssetLibrary" });
           this.updateProgress();
         },
         start: function () {
           this.complete || this.simulateProgress || !this.preloadComplete || ((this.complete = !0), this.onComplete.dispatch());
         },
         update: function (b, a) {},
         updateProgress: function () {
           var b = this;
           this.simulateProgress || this.onProgress.dispatch(this.bytesLoaded, this.bytesTotal);
           if (this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
             this.initLibraryNames = !0;
             for (var a = 0, c = this.libraryNames; a < c.length; ) {
               var d = [c[a]];
               ++a;
               ab.verbose("Preloading asset library: " + d[0], { fileName: "lime/utils/Preloader.hx", lineNumber: 236, className: "lime.utils.Preloader", methodName: "updateProgress" });
               qa.loadLibrary(d[0])
                 .onProgress(
                   (function (a) {
                     return function (c, d) {
                       0 < d &&
                         (Object.prototype.hasOwnProperty.call(b.bytesTotalCache.h, a[0]) || ((b.bytesTotalCache.h[a[0]] = d), (b.bytesTotal += d - 200)),
                         c > d && (c = d),
                         Object.prototype.hasOwnProperty.call(b.bytesLoadedCache2.h, a[0]) ? (b.bytesLoaded += c - b.bytesLoadedCache2.h[a[0]]) : (b.bytesLoaded += c),
                         (b.bytesLoadedCache2.h[a[0]] = c),
                         b.simulateProgress || b.onProgress.dispatch(b.bytesLoaded, b.bytesTotal));
                     };
                   })(d)
                 )
                 .onComplete(
                   (function (a) {
                     return function (c) {
                       c = 200;
                       Object.prototype.hasOwnProperty.call(b.bytesTotalCache.h, a[0]) && (c = b.bytesTotalCache.h[a[0]]);
                       Object.prototype.hasOwnProperty.call(b.bytesLoadedCache2.h, a[0]) ? (b.bytesLoaded += c - b.bytesLoadedCache2.h[a[0]]) : (b.bytesLoaded += c);
                       b.loadedAssetLibrary(a[0]);
                     };
                   })(d)
                 )
                 .onError(
                   (function () {
                     return function (a) {
                       ab.error(a, { fileName: "lime/utils/Preloader.hx", lineNumber: 290, className: "lime.utils.Preloader", methodName: "updateProgress" });
                     };
                   })()
                 );
             }
           }
           this.simulateProgress ||
             this.loadedLibraries != this.libraries.length + this.libraryNames.length ||
             (this.preloadComplete || ((this.preloadComplete = !0), ab.verbose("Preload complete", { fileName: "lime/utils/Preloader.hx", lineNumber: 301, className: "lime.utils.Preloader", methodName: "updateProgress" })), this.start());
         },
         __class__: ih,
       };
       var ta = function (b, a, c, d) {
         this.quadPosition = -1;
         this.game = c;
         this.world = d;
         this.x = b;
         this.y = a;
         this.generateID();
         Object.prototype.hasOwnProperty.call(c.particles.h, this.id) ||
           ((c.particles.h[this.id] = this), (this.entity = c.particleEntity), (this.quadPosition = this.entity.nearestConsecutiveEmpty(1)), this.entity.updateQuad(this.quadPosition, null, null, new h()), this.init());
       };
       r["particles.Particle_Base"] = ta;
       ta.__name__ = "particles.Particle_Base";
       ta.prototype = {
         generateID: function () {
           return (this.id = this.game.uniqueID(this.game.particles, "particle"));
         },
         init: function () {},
         update: function () {},
         remove: function () {
           var b = this.id,
             a = this.game.particles;
           Object.prototype.hasOwnProperty.call(a.h, b) && delete a.h[b];
           -1 != this.quadPosition && this.entity.removeQuad(this.quadPosition, !1);
         },
         __class__: ta,
       };
       var Zf = function (b, a, c, d) {
         this.rotation = this.scale = this.alpha = 1;
         this.xSpeed = this.ySpeed = 0;
         b += Math.random() - 0.5;
         a += Math.random() - 0.5;
         this.rotation = 90 * Math.random();
         this.scale = 0.4 * Math.random() + 0.6;
         this.xSpeed = (5 * Math.random() - 2) | 0;
         this.ySpeed = (5 * Math.random() - 2) | 0;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_Critical"] = Zf;
       Zf.__name__ = "particles.Particle_Critical";
       Zf.__super__ = ta;
       Zf.prototype = v(ta.prototype, {
         init: function () {
           this.xSpeed = g.migrateSpeed(this.xSpeed);
           this.ySpeed = g.migrateSpeed(this.ySpeed);
           this.texture = y.getTexture("particle_critical");
         },
         update: function () {
           if (
             !this.game.pawsed &&
             ((this.xSpeed *= g.migrateDampening(0.8)), (this.ySpeed *= g.migrateDampening(0.8)), (this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), (this.alpha -= 2.5 / m.Instance.get_fps()), 0 >= this.alpha)
           ) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .scale2D(3 * this.scale)
             .rotate2D((-this.rotation * Math.PI) / 180)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: Zf,
       });
       var Pc = function (b, a, c, d, e) {
         null == e && (e = 0);
         this.scale = this.alpha = 1;
         this.xSpeed = this.ySpeed = 0;
         b += 0.5 * Math.random() - 0.25;
         this.scale = 5 * Math.random() + 0.5;
         this.xSpeed = -(30 * Math.random() - 14) / 15 - (e / 20) * 2;
         this.ySpeed = (2 * -Math.random()) / 3;
         this.alpha = 1;
         ta.call(this, b, a - 0.3333333333333333, c, d);
       };
       r["particles.Particle_Dust"] = Pc;
       Pc.__name__ = "particles.Particle_Dust";
       Pc.__super__ = ta;
       Pc.prototype = v(ta.prototype, {
         init: function () {
           this.xSpeed = g.migrateSpeed(this.xSpeed);
           this.ySpeed = g.migrateSpeed(this.ySpeed);
           this.texture = y.getTexture("particle_dust");
         },
         update: function () {
           if (!this.game.pawsed && ((this.scale += g.migrateSpeed(0.15)), (this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), (this.alpha -= g.migrateSpeed(0.02)), 0 >= this.alpha)) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.095, -0.095)
             .scale2D(this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.19, 0.19), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: Pc,
       });
       var $f = function (b, a, c, d, e) {
         this.happyBirthdayMinecraftMan = -0.2;
         this.frame = this.rotation = this.xSpeed = this.ySpeed = 0;
         this.scale = 2;
         ta.call(this, b, a, c, d);
         this.color = e;
       };
       r["particles.Particle_Effect"] = $f;
       $f.__name__ = "particles.Particle_Effect";
       $f.__super__ = ta;
       $f.prototype = v(ta.prototype, {
         init: function () {
           null != this.color ? ((this.xSpeed = g.migrateSpeed(6 * Math.random() - 3)), (this.ySpeed = g.migrateSpeed(2 * Math.random() - 3))) : (this.color = [1, 1, 1]);
           this.rotation = (Math.random() * Math.PI) / 2;
           this.x += Math.random() - 0.5;
           this.y += Math.random() - 0.5;
         },
         update: function () {
           if (!this.game.pawsed && ((this.ySpeed += g.migrateAcc(this.happyBirthdayMinecraftMan, 1)), (this.xSpeed *= g.migrateDampening(0.9)), (this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), this.frame++, 31 <= this.frame)) {
             this.remove();
             return;
           }
           this.texture = y.getTexture("particle_effect", Math.floor((this.frame - 1) / 6 + 1));
           ta.entityMatrix
             .reset()
             .translate(-0.13333333333333333, -0.13333333333333333)
             .rotate2D(this.rotation)
             .scale2D(this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.26666666666666666, 0.26666666666666666), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([this.color[0], this.color[1], this.color[2], 1], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: $f,
       });
       var ag = function (b, a, c, d) {
         this.alpha = this.alphaSpeed = 0;
         this.rotation = this.scale = 1;
         this.xSpeed = this.ySpeed = 0;
         b += Math.random() - 0.5;
         a += Math.random() - 0.5;
         this.rotation = 360 * Math.random();
         this.scale = 0.9 * Math.random() + 0.1;
         this.xSpeed = ((11 * Math.random() - 5) | 0) / 10;
         this.ySpeed = ((11 * Math.random() - 5) | 0) / 30;
         this.alpha = 0;
         this.alphaSpeed = 10;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_EnderSparkle"] = ag;
       ag.__name__ = "particles.Particle_EnderSparkle";
       ag.__super__ = ta;
       ag.prototype = v(ta.prototype, {
         init: function () {
           this.xSpeed = g.migrateSpeed(this.xSpeed);
           this.ySpeed = g.migrateSpeed(this.ySpeed);
           this.alphaSpeed = g.migrateSpeed(this.alphaSpeed);
           this.texture = y.getTexture("particle_ender");
         },
         update: function () {
           if (!this.game.pawsed && ((this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), 1 <= this.alpha && 0 < this.alphaSpeed && (this.alphaSpeed = g.migrateSpeed(-5)), (this.alpha += this.alphaSpeed / 100), 0 >= this.alpha)) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .scale2D(1.5 * this.scale)
             .rotate2D((-this.rotation * Math.PI) / 180)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: ag,
       });
       var ld = function (b, a, c, d) {
         this.scale = this.alpha = 1;
         this.yqSpeed = 0;
         b += Math.random() - 0.5;
         a += (2 * Math.random()) / 3 - 0.3333333333333333;
         this.scale = 0.5 * Math.random() + 1;
         this.yqSpeed = -(10 * Math.random() - 2) / 10;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_Heart"] = ld;
       ld.__name__ = "particles.Particle_Heart";
       ld.__super__ = ta;
       ld.prototype = v(ta.prototype, {
         init: function () {
           this.yqSpeed = g.migrateSpeed(this.yqSpeed);
           this.texture = y.getTexture("particle_heart");
         },
         update: function () {
           if (!this.game.pawsed && ((this.y += this.yqSpeed / 30), (this.alpha -= 0.125 / m.Instance.get_fps()), 0 >= this.alpha)) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.15, -0.15)
             .scale2D(this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.3, 0.3), ta.entityMatrix),
             l = new e(),
             g = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = g;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: ld,
       });
       var bg = function (b, a, c, d) {
         ld.call(this, b, a, c, d);
       };
       r["particles.Particle_Grow"] = bg;
       bg.__name__ = "particles.Particle_Grow";
       bg.__super__ = ld;
       bg.prototype = v(ld.prototype, {
         init: function () {
           this.yqSpeed = g.migrateSpeed(this.yqSpeed);
           this.scale *= 0.7777777777777778;
           this.texture = y.getTexture("particle_grow");
         },
         __class__: bg,
       });
       var cg = function (b, a, c, d) {
         this.alpha = 1;
         this.xSpeed = 5;
         this.ySpeed = -5;
         b += Math.random() - 0.5;
         this.xSpeed = (5 * (4 * Math.random() - 2)) / 2;
         this.ySpeed = -5;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_LavaBubble"] = cg;
       cg.__name__ = "particles.Particle_LavaBubble";
       cg.__super__ = ta;
       cg.prototype = v(ta.prototype, {
         init: function () {
           this.xSpeed = g.migrateSpeed(this.xSpeed);
           this.ySpeed = g.migrateSpeed(this.ySpeed);
           this.texture = y.getTexture("particle_lava_bubble");
         },
         update: function () {
           if (!this.game.pawsed && ((this.ySpeed += g.migrateAcc(1, 1)), (this.xSpeed *= g.migrateDampening(0.95)), (this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), (this.alpha -= g.migrateSpeed(0.1)), 0 >= this.alpha)) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.08666666666666667, -0.08666666666666667)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.17333333333333334, 0.17333333333333334), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: cg,
       });
       var te = function (b, a, c, d) {
         this.portal = this.snowball = this.chicken = this.mycelium = this.slime = this.magmacube = !1;
         this.g = 0.5;
         this.alph = this.alpha = 1;
         this.xSpeed = this.ySpeed = 0;
         b += Math.random() - 0.5;
         a += Math.random() - 0.5;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_Mining"] = te;
       te.__name__ = "particles.Particle_Mining";
       te.__super__ = ta;
       te.prototype = v(ta.prototype, {
         init: function () {
           1 == this.portal
             ? ((this.color = new F().fromHex(-3407617)), (this.xSpeed = ((10 * Math.random()) | 0) - 4), (this.ySpeed = -5), (this.g = -0.5), (this.alph = 9))
             : 1 == this.snowball
             ? ((this.color = new F().fromHex(-1)), (this.xSpeed = ((10 * Math.random()) | 0) - 4), (this.ySpeed = ((10 * Math.random()) | 0) - 4), (this.g = 0.5), (this.alph = 7))
             : 1 == this.chicken
             ? ((this.color = new F().fromHex(-6750208)), (this.xSpeed = ((10 * Math.random()) | 0) - 4), (this.ySpeed = ((10 * Math.random()) | 0) - 4), (this.g = -0.5), (this.alph = 3))
             : 1 == this.mycelium
             ? ((this.color = new F().fromHex(-12307627)), (this.xSpeed = 0), (this.ySpeed = -0.2), (this.g = 0), (this.alph = 1))
             : (1 == this.slime
                 ? ((this.color = new F().fromHex(-16711936)), (this.xSpeed = ((20 * Math.random()) | 0) - 9), (this.ySpeed = -((5 * Math.random()) | 0) - 4))
                 : 1 == this.magmacube
                 ? ((this.color = new F().fromHex(-65536)), (this.xSpeed = ((20 * Math.random()) | 0) - 9), (this.ySpeed = -((5 * Math.random()) | 0) - 4))
                 : (null == this.color && (this.color = new F().fromHex(-1)), (this.xSpeed = ((10 * Math.random()) | 0) - 4), (this.ySpeed = -((5 * Math.random()) | 0))),
               (this.g = 0.5),
               (this.alph = 5));
           this.xSpeed = g.migrateSpeed(this.xSpeed);
           this.ySpeed = g.migrateSpeed(this.ySpeed);
           this.texture = y.getTexture("particle_square");
         },
         update: function () {
           if (
             !this.game.pawsed &&
             ((this.ySpeed += g.migrateAcc(this.g, 1)), (this.xSpeed *= g.migrateDampening(0.8)), (this.x += this.xSpeed / 30), (this.y += this.ySpeed / 30), (this.alpha -= g.migrateSpeed(this.alph / 100)), 0 >= this.alpha)
           ) {
             this.remove();
             return;
           }
           ta.entityMatrix
             .reset()
             .translate(-0.016666666666666666, -0.016666666666666666)
             .scale2D(3)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.03333333333333333, 0.03333333333333333), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([G.toFloat(this.color.r) / G.toFloat(255), G.toFloat(this.color.g) / G.toFloat(255), G.toFloat(this.color.b) / G.toFloat(255), Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: te,
       });
       var Xf = function (b, a, c, d) {
         this.bX = this.bY = this.endY = this.distY = 0;
         ta.call(this, b, a, c, d);
         this.bX = Math.round(b + 0.5) - 1;
         this.bY = -Math.round(a) - 1;
         for (b = this.endY = 0; 51 > b; )
           if (
             ((a = b++),
             "air" != d.getFG(this.bX, this.bY - a) &&
               ((null == q.get(d.getFG(this.bX, this.bY - a), "walkThroughBlock") && ("lv" != I.substr(d.getFG(this.bX, this.bY - a), 0, 2) || 1 == ((2 * Math.random()) | 0))) || null != q.get(d.getFG(this.bX, this.bY - a), "liquid")))
           ) {
             this.endY = this.bY - a;
             break;
           }
         this.distY = this.bY - this.endY;
         this.endY >= this.bY && this.remove();
       };
       r["particles.Particle_Rain"] = Xf;
       Xf.__name__ = "particles.Particle_Rain";
       Xf.__super__ = ta;
       Xf.prototype = v(ta.prototype, {
         update: function () {
           if (!this.game.pawsed && ((this.y += (20 + ((10 * Math.random()) | 0)) / 30 / 2), (this.x += (((20 * Math.random()) | 0) - 9) / 30 / 2), -Math.round(this.y) - 1 <= this.endY)) {
             this.bX = Math.round(this.x + 0.5) - 1;
             this.bY = -Math.round(this.y) - 1;
             "fire" == this.world.getFG(this.bX, this.bY) &&
               (this.game.requestRemove(this.bX, this.bY, !0, !1, !0),
               this.game.requestSound("sizzle", this.x - this.world.worldX, this.y - this.world.worldY),
               1 < J.particles && this.game.addParticles("smoke", 3, 0, new h(this.x, 0), new h(this.y - 1, 0), !0));
             "dt" == this.world.getFG(this.bX - 1, this.bY + 1) &&
               "dt" == this.world.getFG(this.bX + 1, this.bY + 1) &&
               "dt" == this.world.getFG(this.bX, this.bY) &&
               "air" == this.world.getFG(this.bX, this.bY + 1) &&
               1 == ((50 * Math.random()) | 0) &&
               this.world.setFG(this.bX, this.bY + 1, "wr");
             ("la" == this.world.getFG(this.bX, this.bY) || "magma" == this.world.getFG(this.bX, this.bY)) &&
               0.1 > Math.random() &&
               (0.1 > Math.random() && this.game.requestSound("sizzle", this.x - this.world.worldX, this.y - this.world.worldY), 1 < J.particles && this.game.addParticles("smoke", 1, 0, new h(this.x, 0), new h(this.y - 1, 0), !0));
             2 < this.distY && this.game.closeRains.push([30 * (this.x - this.world.worldX), 30 * (this.y - this.world.worldY)]);
             "air" != this.world.getFG(this.bX, this.bY + 1) || ("r" != this.world.getFG(this.bX, this.bY) && "cs" != this.world.getFG(this.bX, this.bY)) || 1 != ((400 * Math.random()) | 0) || this.world.setFG(this.bX, this.bY + 1, "moss");
             1 < J.particles && 1 == ((3 * Math.random()) | 0) && this.game.addParticles("water", 1, 0, new h(this.x, 0), new h(this.y, 0), !0);
             if (0.3333333333333333 > Math.random())
               for (var b = Object.keys(this.world.mobs.h), a = b.length, c = 0; c < a; ) {
                 var d = b[c++];
                 if (null != this.game.getMob(d))
                   if ("enderman" == this.world.mobs.h[d].h.type) {
                     var e = this.x,
                       l = this.y - 0.3333333333333333;
                     this.game.getMob(d).mobCollisionPoint(d, new h(e, l)) && this.game.getMob(d).hurtMob(d, 1);
                   } else
                     Object.prototype.hasOwnProperty.call(this.world.onFire.h, d) &&
                       ((e = this.x), (l = this.y - 0.3333333333333333), this.game.getMob(d).mobCollisionPoint(d, new h(e, l)) && ((e = this.world.onFire), Object.prototype.hasOwnProperty.call(e.h, d) && delete e.h[d]));
               }
             this.remove();
             return;
           }
           this.texture = y.getTexture("particle_rain");
           ta.entityMatrix
             .reset()
             .translate(-0.016666666666666666, -0.8)
             .scale(1.5, 1)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           this.entity.updateQuad(this.quadPosition, null, new h(this.texture.x, this.texture.y), new h(this.texture.width, this.texture.height), null, ba.quadMatrixHelper(new t(0, 0, 0.03333333333333333, 0.8), ta.entityMatrix));
         },
         __class__: Xf,
       });
       var dg = function (b, a, c, d) {
         this.rotation = this.scale = this.rS = this.aA = this.aS = this.raysize = this.alpha = 1;
         this.rS = (10 * Math.random() - 5) / 2;
         this.aA = 20 * Math.random();
         this.alpha = 0.5 - this.aA;
         this.aS = 5;
         this.rotation = 360 * Math.random();
         this.scale = (150 * Math.random() + 100) / 100;
         this.raysize = (40 * Math.random() + 20) / 100;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_RayThing"] = dg;
       dg.__name__ = "particles.Particle_RayThing";
       dg.__super__ = ta;
       dg.prototype = v(ta.prototype, {
         init: function () {
           this.rS = g.migrateSpeed(this.rS);
           this.texture = y.getTexture("particle_raything");
         },
         update: function () {
           if (!this.game.pawsed)
             if (((this.rotation += this.rS), (this.alpha += g.migrateSpeed(this.aS / 100)), 5 == this.aS && this.alpha > (100 - this.aA) / 100)) this.aS = -3;
             else if (-3 == this.aS && 0 >= this.alpha) {
               this.remove();
               return;
             }
           ta.entityMatrix
             .reset()
             .translate(-2.5, -5)
             .scale(this.raysize * this.scale * 2, 2 * this.scale)
             .rotate2D((-this.rotation * Math.PI) / 180)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           var b = this.entity,
             a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 5, 5), ta.entityMatrix),
             l = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           l.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, l);
         },
         __class__: dg,
       });
       var eg = function (b, a, c, d) {
         this.scale = 1;
         this.playing = !1;
         this.frame = 3;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_Shockwave"] = eg;
       eg.__name__ = "particles.Particle_Shockwave";
       eg.__super__ = ta;
       eg.prototype = v(ta.prototype, {
         update: function () {
           if (!this.game.pawsed && (this.playing || 0 != ((12 * Math.random()) | 0) || (this.playing = !0), this.playing && this.frame++, 32 <= this.frame)) {
             this.remove();
             return;
           }
           var b = E.string(Math.floor((this.frame - 1) / 4));
           this.texture = y.getTexture("particle_shockwave", "0" == b ? "1" : b);
           b = "0" == b ? 0 : 2 * this.scale;
           ta.entityMatrix
             .reset()
             .translate(-0.5333333333333333, -0.5333333333333333)
             .scale2D(b)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPosition,
             null,
             new h(this.texture.x, this.texture.y),
             new h(this.texture.width, this.texture.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 1.0666666666666667, 1.0666666666666667), ta.entityMatrix)
           );
         },
         __class__: eg,
       });
       var fg = function (b, a, c, d) {
         this.rotation = 0;
         this.scale = this.frame = 1;
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_Smoke"] = fg;
       fg.__name__ = "particles.Particle_Smoke";
       fg.__super__ = ta;
       fg.prototype = v(ta.prototype, {
         init: function () {
           this.rotation = (((4 * Math.random()) | 0) * Math.PI) / 2;
           this.x += (((9 * Math.random()) | 0) - 4) / 30;
           this.scale = 0.5 * Math.random() + 0.5;
         },
         update: function () {
           if (!this.game.pawsed && ((this.y -= g.migrateSpeed(0.7) / 30), 1 == ((12 * Math.random()) | 0))) {
             if (5 == this.frame) {
               this.remove();
               return;
             }
             this.rotation = (((4 * Math.random()) | 0) * Math.PI) / 2;
             this.frame++;
           }
           this.texture = y.getTexture("particle_smoke_dark", this.frame);
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .rotate2D(this.rotation)
             .scale2D(2 * this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPosition,
             null,
             new h(this.texture.x, this.texture.y),
             new h(this.texture.width, this.texture.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix)
           );
         },
         __class__: fg,
       });
       var Dd = function (b, a, c, d, e, h) {
         this.rotation = this.xSpeed = this.ySpeed = 0;
         this.scale = this.frame = 1;
         ta.call(this, b, a, c, d);
         this.xSpeed = null == e ? 16 * Math.random() - 8 : e;
         this.ySpeed = null == h ? 16 * Math.random() - 8 : h;
       };
       r["particles.Particle_Smoke2"] = Dd;
       Dd.__name__ = "particles.Particle_Smoke2";
       Dd.__super__ = ta;
       Dd.prototype = v(ta.prototype, {
         init: function () {
           this.rotation = (((4 * Math.random()) | 0) * Math.PI) / 2;
           this.x += (((9 * Math.random()) | 0) - 4) / 30;
           this.scale = 0.5 * Math.random() + 0.5;
         },
         update: function () {
           if (
             !this.game.pawsed &&
             ((this.ySpeed -= g.migrateAcc(0.2, 0.93)),
             (this.y += g.migrateSpeed(this.ySpeed) / 30),
             (this.x += g.migrateSpeed(this.xSpeed) / 30),
             (this.xSpeed *= g.migrateDampening(0.93)),
             (this.ySpeed *= g.migrateDampening(0.93)),
             1 == ((10 * Math.random()) | 0))
           ) {
             if (5 == this.frame) {
               this.remove();
               return;
             }
             this.rotation = (((4 * Math.random()) | 0) * Math.PI) / 2;
             this.frame++;
           }
           this.texture = y.getTexture("particle_smoke", this.frame);
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .rotate2D(this.rotation)
             .scale2D(4 * this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPosition,
             null,
             new h(this.texture.x, this.texture.y),
             new h(this.texture.width, this.texture.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix)
           );
         },
         __class__: Dd,
       });
       var Yf = function (b, a, c, d) {
         this.life = 0;
         this.speed = 5;
         this.scale = 1.5;
         this.bX = this.frame = this.alpha = this.rotation = 0;
         ta.call(this, b, a, c, d);
         this.bX = Math.round(b + 0.5) - 1;
         this.rot = 20 * Math.random();
         this.frame = Math.floor(9 * Math.random() + 1);
         this.speed = 3 * Math.random() + 3;
         this.life = 10 * m.Instance.get_fps();
       };
       r["particles.Particle_Snow"] = Yf;
       Yf.__name__ = "particles.Particle_Snow";
       Yf.__super__ = ta;
       Yf.prototype = v(ta.prototype, {
         update: function () {
           if (!this.game.pawsed) {
             1 > this.alpha && (this.alpha += 0.05);
             this.rotation += this.rot / 5 / 2;
             this.y += this.speed / 30 / 2;
             var b = -Math.round(this.y) - 1;
             if (0 >= this.life--) {
               this.remove();
               return;
             }
             if (("air" != this.world.getFG(this.bX, b) && null == q.get(this.world.getFG(this.bX, b), "walkThroughBlock")) || null != q.get(this.world.getFG(this.bX, b), "liquid")) {
               null == q.get(this.world.getFG(this.bX - 1, b + 1), "walkThroughBlock") &&
                 null == q.get(this.world.getFG(this.bX + 1, b + 1), "walkThroughBlock") &&
                 0.5 <= this.alpha &&
                 ("air" == this.world.getFG(this.bX, b + 1) || "snow" == this.world.getFG(this.bX, b + 1)) &&
                 1 == Math.floor(20 * Math.random()) &&
                 this.world.setFG(this.bX, b + 1, "snowblock");
               "wr" == this.world.getFG(this.bX, b) && "air" == this.world.getFG(this.bX, b + 1) && 1 == Math.floor(20 * Math.random()) && this.world.setFG(this.bX, b, "ice");
               ("la" != this.world.getFG(this.bX, b) && "ad" != this.world.getFG(this.bX, b)) ||
                 1 != Math.floor(20 * Math.random()) ||
                 (this.world.setFG(this.bX, b, "ob"),
                 this.game.requestSound("sizzle", this.x - this.world.worldX, this.y - this.world.worldY),
                 1 < J.particles && this.game.addParticles("smoke", 3, 0, new h(this.x, 0), new h(this.y - 1, 0), !0));
               null == q.get(this.world.getFG(this.bX, b), "liquid") && "air" == this.world.getFG(this.bX, b + 1) && 1 == Math.floor(20 * Math.random()) && this.world.setFG(this.bX, b + 1, "snow");
               this.remove();
               return;
             }
           }
           this.texture = y.getTexture("particle_snow", E.string(this.frame));
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .rotate2D((this.rotation / 180) * Math.PI)
             .scale2D(this.scale)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           b = this.entity;
           var a = this.quadPosition,
             c = new h(this.texture.x, this.texture.y),
             d = new h(this.texture.width, this.texture.height),
             f = ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix),
             g = new e(),
             k = w.repeatArray([1, 1, 1, Math.min(1, this.alpha)], 6);
           g.h.color = k;
           b.updateQuad(a, null, c, d, null, f, null, g);
         },
         __class__: Yf,
       });
       var gg = function (b, a, c, d) {
         ta.call(this, b, a, c, d);
       };
       r["particles.Particle_TorchTip"] = gg;
       gg.__name__ = "particles.Particle_TorchTip";
       gg.__super__ = ta;
       gg.prototype = v(ta.prototype, {
         generateID: function () {
           return (this.id = "particle," + Math.floor(this.x) + "," + Math.floor(this.y));
         },
         update: function () {
           "th" != this.world.getFG(this.x, -this.y)
             ? this.remove()
             : 0 != this.world.tick % 2 ||
               this.game.pawsed ||
               ((this.texture = y.getTexture("particle_torchtip", (7 * Math.random() + 1) | 0)),
               ta.entityMatrix
                 .reset()
                 .translate(-0.105, -0.28500000000000003)
                 .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom),
               this.entity.updateQuad(this.quadPosition, null, new h(this.texture.x, this.texture.y), new h(this.texture.width, this.texture.height), null, ba.quadMatrixHelper(new t(0, 0, 0.21, 0.28500000000000003), ta.entityMatrix)));
         },
         __class__: gg,
       });
       var hg = function (b, a, c, d) {
         this.alpha = 1;
         this.rotation = 0;
         this.currentFrame = this.frame = 1;
         this.randomStartingNumber = 0;
         this.bubbleDirection = "up";
         this.wasABubble = !1;
         this.yqSpeed = 0;
         this.xqSpeed = null;
         ta.call(this, b, a, c, d);
         this.x += (10 * Math.random() - 5) / 30;
         this.y += (10 * Math.random() - 5) / 30;
       };
       r["particles.Particle_Water"] = hg;
       hg.__name__ = "particles.Particle_Water";
       hg.__super__ = ta;
       hg.prototype = v(ta.prototype, {
         init: function () {
           null == this.xqSpeed && ((this.xqSpeed = (20 * Math.random() - 10) / 2), (this.yqSpeed = -(40 * Math.random()) / 5), (this.randomStartingNumber = Math.random()));
           this.xqSpeed = g.migrateSpeed(this.xqSpeed);
           this.yqSpeed = g.migrateSpeed(this.yqSpeed);
         },
         update: function () {
           if (!this.game.pawsed) {
             if ("wr" == this.world.getFG(Math.floor(this.x), Math.floor(-this.y))) {
               if (
                 ((this.wasABubble = !0),
                 "up" == this.bubbleDirection
                   ? ((this.yqSpeed = g.migrateSpeed(-1.5)), (this.xqSpeed = 0))
                   : "down" == this.bubbleDirection
                   ? ((this.yqSpeed = g.migrateSpeed(3)), (this.xqSpeed = g.migrateSpeed(2 * Math.sin(((this.world.tick / 4) * 25) / m.Instance.get_fps() + 2 * this.randomStartingNumber * Math.PI))))
                   : (this.yqSpeed -= g.migrateAcc(0.5, 1)),
                 2 != this.currentFrame)
               ) {
                 this.currentFrame = 2;
                 return;
               }
             } else if ("air" == this.world.getFG(Math.floor(this.x), Math.floor(-this.y))) {
               if (this.wasABubble) {
                 this.remove();
                 return;
               }
               this.yqSpeed += g.migrateAcc(1, 1);
               if (3 != this.currentFrame) {
                 this.currentFrame = 3;
                 this.frame = 0;
                 return;
               }
             } else {
               this.remove();
               return;
             }
             this.xqSpeed *= g.migrateDampening(0.9);
             this.x += this.xqSpeed / 30;
             this.y += this.yqSpeed / 30;
             this.alpha -= g.migrateSpeed(0.05);
             if (3 == this.currentFrame) {
               if (0 == this.frame % 4 && ((this.rotation = 90 * Math.floor(4 * Math.random())), 20 < this.frame)) {
                 this.remove();
                 return;
               }
               this.frame++;
             }
             if (0 >= this.alpha) {
               this.remove();
               return;
             }
           }
           this.texture = y.getTexture(3 == this.currentFrame ? "particle_water" : "particle_bubble");
           ta.entityMatrix
             .reset()
             .translate(-0.08333333333333333, -0.08333333333333333)
             .rotate2D(this.rotation)
             .translate(Math.floor(this.x * this.game.zoom) / this.game.zoom, Math.floor(this.y * this.game.zoom) / this.game.zoom);
           this.entity.updateQuad(
             this.quadPosition,
             null,
             new h(this.texture.x, this.texture.y),
             new h(this.texture.width, this.texture.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 0.16666666666666666, 0.16666666666666666), ta.entityMatrix)
           );
         },
         __class__: hg,
       });
       var X = function (b, a, c) {
         null == c && (c = 0);
         null == a && (a = 0);
         this.hasFrameEvent = !1;
         this.quadPositions = [];
         this.entity = b;
         this.destination = new M(a, c);
       };
       r["renderers.Q_Base"] = X;
       X.__name__ = "renderers.Q_Base";
       X.prototype = {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         destroy: function () {
           for (var b = 0, a = this.quadPositions.length; b < a; ) ++b, this.entity.removeQuad(this.quadPositions.pop(), !0);
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0], !0);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         setBlockTextureID: function (b, a) {
           null == a && (a = !1);
           a && null != q.get(b, "itemTextureID") ? (this.textureID = q.get(b, "itemTextureID")) : null != q.get(b, "textureID") ? (this.textureID = q.get(b, "textureID")) : (this.textureID = q.get(b, "identifier"));
         },
         set_x: function (b) {
           return (this.destination.x = b);
         },
         set_y: function (b) {
           return (this.destination.y = b);
         },
         __class__: X,
       };
       var Ne = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.Q_Nothing"] = Ne;
       Ne.__name__ = "renderers.Q_Nothing";
       Ne.__super__ = X;
       Ne.prototype = v(X.prototype, {
         update: function () {},
         destroy: function () {},
         fromBlock: function (b) {
           return this;
         },
         __class__: Ne,
       });
       var tb = function (b) {
         this.hide1 = this.hide2 = !1;
         this.colorUV = [];
         this.parentColor = [1, 1, 1, 1];
         this.matrix2 = new T();
         this.matrix1 = new T();
         this.itemData = g.emptyItem();
         var a = new e(),
           c = new e();
         c.h.baseQuads = 4;
         c.h.texture = "leather_boots";
         a.h.LeatherShoes = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "iron_boots";
         a.h.IronShoes = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "diamond_boots";
         a.h.DiamondShoes = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "gold_boots";
         a.h.GoldShoes = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "dragon_scale_boots";
         a.h.DragonShoes = c;
         this.frames = a;
         this.entity = b;
         X.call(this, b, 0, 0);
       };
       r["renderers.armor.Q_Boots"] = tb;
       tb.__name__ = "renderers.armor.Q_Boots";
       tb.__super__ = X;
       tb.prototype = v(X.prototype, {
         update: function () {
           if (null != this.itemData && null != this.frames.h[this.itemData[0]]) {
             H.__cast(this.entity, ja).currentMatrix.translate(-0.6875, -0.75).multiply(this.matrix1.values);
             var b = this.entity;
             var a = 1;
             var c = this.quadPositions[0],
               d = this.destination,
               f = new h(this.textureClip.x, this.textureClip.y),
               g = new h(this.textureClip.width, this.textureClip.height),
               k = new h(1, 1),
               m = new e(),
               n = w.repeatArray([this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide1 ? 0 : 1)], 6);
             m.h.color = n;
             b.updateQuad(c, d, f, g, k, null, null, m);
             null != this.textureColorClip &&
               ((b = this.entity),
               (a = 2),
               (c = this.quadPositions[1]),
               (d = this.destination),
               (f = new h(this.textureColorClip.x, this.textureColorClip.y)),
               (g = new h(this.textureColorClip.width, this.textureColorClip.height)),
               (k = new h(1, 1)),
               (m = new e()),
               (n = w.repeatArray([this.colorUV[0] * this.parentColor[0], this.colorUV[1] * this.parentColor[1], this.colorUV[2] * this.parentColor[2], this.colorUV[3] * this.parentColor[3] * (this.hide1 ? 0 : 1)], 6)),
               (m.h.color = n),
               b.updateQuad(c, d, f, g, k, null, null, m));
             H.__cast(this.entity, ja).currentMatrix.reset().translate(-0.6875, -0.75).multiply(this.matrix2.values);
             b = this.entity;
             c = this.quadPositions[a++];
             d = this.destination;
             f = new h(this.textureClip.x, this.textureClip.y);
             g = new h(this.textureClip.width, this.textureClip.height);
             k = new h(1, 1);
             m = new e();
             n = w.repeatArray([this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide2 ? 0 : 1)], 6);
             m.h.color = n;
             b.updateQuad(c, d, f, g, k, null, null, m);
             null != this.textureColorClip &&
               ((b = this.entity),
               (c = this.quadPositions[a++]),
               (d = this.destination),
               (f = new h(this.textureColorClip.x, this.textureColorClip.y)),
               (g = new h(this.textureColorClip.width, this.textureColorClip.height)),
               (k = new h(1, 1)),
               (m = new e()),
               (n = w.repeatArray([this.colorUV[0] * this.parentColor[0], this.colorUV[1] * this.parentColor[1], this.colorUV[2] * this.parentColor[2], this.colorUV[3] * this.parentColor[3] * (this.hide2 ? 0 : 1)], 6)),
               (m.h.color = n),
               b.updateQuad(c, d, f, g, k, null, null, m));
             H.__cast(this.entity, ja).currentMatrix.reset();
           }
         },
         setItem: function (b, a, c, d, f, g) {
           null == g && (g = !1);
           null == f && (f = !1);
           if (null == b || null == this.frames.h[b[0]]) return this.remove(), this;
           this.matrix1 = c;
           this.matrix2 = d;
           this.hide1 = f;
           this.hide2 = g;
           if (b[0] != this.itemData[0] || !m.Instance.game.sameExtras(b, this.itemData)) {
             this.destroy();
             this.itemData = O.clone(b);
             a = c = this.entity.nearestConsecutiveEmpty(this.frames.h[b[0]].h.baseQuads, a + 1);
             for (c += this.frames.h[b[0]].h.baseQuads; a < c; ) this.quadPositions.push(a++);
             "LeatherShoes" == b[0]
               ? ((this.textureClip = y.getTexture(this.frames.h[b[0]].h.texture, "base")),
                 (this.textureColorClip = y.getTexture(this.frames.h[b[0]].h.texture, "color")),
                 null != b[3] &&
                   ((b = H.__cast(b[3], e).h.type),
                   null != b && Object.prototype.hasOwnProperty.call(V.colors.h, b)
                     ? Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6))
                     : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6))))
               : ((this.textureClip = y.getTexture(this.frames.h[b[0]].h.texture)), (this.textureColorClip = null));
             this.update();
             a = 0;
             for (c = this.quadPositions; a < c.length; ) this.entity.updateQuad(c[a++], null, null, null, new h());
           }
           return this;
         },
         destroy: function () {
           X.prototype.destroy.call(this);
         },
         remove: function () {
           this.destroy();
           this.itemData = g.emptyItem();
         },
         __class__: tb,
       });
       var rb = function (b) {
         this.hide = !1;
         this.parentColor = [1, 1, 1, 1];
         this.matrix = new T();
         this.itemData = g.emptyItem();
         var a = new e(),
           c = new e();
         c.h.baseQuads = 2;
         c.h.useItem = !0;
         var d = new T().translate(-0.5, -0.5);
         c.h.matrix = d;
         a.h.LeatherShirt = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5);
         c.h.matrix = d;
         a.h.IronShirt = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5);
         c.h.matrix = d;
         a.h.DiamondShirt = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5);
         c.h.matrix = d;
         a.h.GoldShirt = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5);
         c.h.matrix = d;
         a.h.DragonShirt = c;
         this.frames = a;
         this.entity = b;
         X.call(this, b, 0, 0);
       };
       r["renderers.armor.Q_Chestplate"] = rb;
       rb.__name__ = "renderers.armor.Q_Chestplate";
       rb.__super__ = X;
       rb.prototype = v(X.prototype, {
         update: function () {
           if (null != this.itemData && null != this.frames.h[this.itemData[0]]) {
             H.__cast(this.entity, ja).currentMatrix.multiply(this.frames.h[this.itemData[0]].h.matrix.values).multiply(this.matrix.values);
             null != this.parentColor && (H.__cast(this.entity, ja).attributeMultipliers.h.color = [this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide ? 0 : 1)]);
             null != this.itemRenderer && this.itemRenderer.update();
             if (null != this.parentColor) {
               var b = H.__cast(this.entity, ja).attributeMultipliers;
               Object.prototype.hasOwnProperty.call(b.h, "color") && delete b.h.color;
             }
             H.__cast(this.entity, ja).currentMatrix.reset();
           }
         },
         setItem: function (b, a, c, d) {
           null == d && (d = !1);
           if (null == b || null == this.frames.h[b[0]]) return this.destroy(), (this.itemRenderer = null), (this.itemData = g.emptyItem()), this;
           this.matrix = c;
           this.hide = d;
           if (b[0] != this.itemData[0] || !m.Instance.game.sameExtras(b, this.itemData)) {
             this.destroy();
             this.itemData = O.clone(b);
             H.__cast(this.entity, ja).overrideEmptySearchIndex = a + 1;
             this.itemRenderer = 1 == this.frames.h[b[0]].h.useItem ? Za.createInstance(q.getItemRenderer(b[0]), [this.entity, 0, 0]).fromItem(b) : null;
             a = c = this.entity.nearestConsecutiveEmpty(this.frames.h[b[0]].h.baseQuads);
             for (b = c + this.frames.h[b[0]].h.baseQuads; a < b; ) this.quadPositions.push(a++);
             this.update();
             a = 0;
             for (b = this.quadPositions; a < b.length; ) this.entity.updateQuad(b[a++], null, null, null, new h());
             H.__cast(this.entity, ja).overrideEmptySearchIndex = -1;
           }
           return this;
         },
         destroy: function () {
           null != this.itemRenderer && this.itemRenderer.destroy();
           X.prototype.destroy.call(this);
         },
         remove: function () {
           this.destroy();
           this.itemRenderer = null;
           this.itemData = g.emptyItem();
         },
         __class__: rb,
       });
       var eb = function (b) {
         this.dragonHeadAnimationCache = 0;
         this.hide = !1;
         this.parentColor = [1, 1, 1, 1];
         this.matrix = new T();
         this.itemData = g.emptyItem();
         var a = new e(),
           c = new e();
         c.h.baseQuads = 2;
         c.h.useItem = !0;
         var d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.LeatherCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.IronCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.DiamondCap = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.pk = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).scale(-1, 1).translate(0, 0.25);
         c.h.matrix = d;
         a.h.jl = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.GoldCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).translate(0, 0.25);
         c.h.matrix = d;
         a.h.DragonCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T()
           .translate(-0.5, -0.5)
           .rotate2D(-0.08 * Math.PI)
           .translate(0.125, -0.375);
         c.h.matrix = d;
         a.h.SnowCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).scale2D(1.517).translate(0, 0.125);
         c.h.matrix = d;
         a.h.AfroCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T()
           .translate(-0.5, -0.5)
           .scale2D(1.15)
           .rotate2D(-0.08333333333333333 * Math.PI)
           .translate(0.1875, -0.3125);
         c.h.matrix = d;
         a.h.PartyCap = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !1;
         c.h.texture = "shades[armor]";
         d = new T().translate(-0.5, -0.5).scale(-0.85, 0.85).translate(-0.15625, 0.6875);
         c.h.matrix = d;
         a.h.ShadesCap = c;
         c = new e();
         c.h.baseQuads = 3;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).scale2D(1.452).translate(-0.0625, 0.15625);
         c.h.matrix = d;
         a.h.mh = c;
         c = new e();
         c.h.baseQuads = 1;
         c.h.useItem = !0;
         d = new T().translate(-0.5, -0.5).scale2D(1.12).translate(-0.125, 0.5625);
         c.h.matrix = d;
         a.h.MustacheCap = c;
         this.frames = a;
         this.entity = b;
         X.call(this, b, 0, 0);
       };
       r["renderers.armor.Q_Helmet"] = eb;
       eb.__name__ = "renderers.armor.Q_Helmet";
       eb.__super__ = X;
       eb.prototype = v(X.prototype, {
         update: function () {
           if (null != this.itemData && null != this.frames.h[this.itemData[0]]) {
             H.__cast(this.entity, ja).currentMatrix.multiply(this.frames.h[this.itemData[0]].h.matrix.values).multiply(this.matrix.values);
             null != this.parentColor && (H.__cast(this.entity, ja).attributeMultipliers.h.color = [this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide ? 0 : 1)]);
             if (null != this.itemRenderer)
               "pk" == this.itemData[0] && (H.__cast(this.itemRenderer, ae).state = 2),
                 this.itemRenderer.update(),
                 "mh" == this.itemData[0] && null != this.itemData[3] && "enderdragon" == g.makeDynamicMap(this.itemData[3]).h.type && H.__cast(this.itemRenderer, se).updateMouth(this.dragonHeadAnimationCache / 50);
             else if ("ShadesCap" == this.itemData[0]) {
               var b = y.getTexture(this.frames.h[this.itemData[0]].h.texture),
                 a = this.entity,
                 c = this.quadPositions[0],
                 d = this.destination,
                 f = new h(b.x, b.y);
               b = new h(b.width, b.height);
               var l = new h(1, 1),
                 k = new e(),
                 m = w.repeatArray([this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide ? 0 : 1)], 6);
               k.h.color = m;
               a.updateQuad(c, d, f, b, l, null, null, k);
             }
             null != this.parentColor && ((a = H.__cast(this.entity, ja).attributeMultipliers), Object.prototype.hasOwnProperty.call(a.h, "color") && delete a.h.color);
             H.__cast(this.entity, ja).currentMatrix.reset();
           }
         },
         setItem: function (b, a, c, d) {
           null == d && (d = !1);
           if (null == b || null == this.frames.h[b[0]]) return this.remove(), this;
           this.matrix = c;
           this.hide = d;
           if (b[0] != this.itemData[0] || !m.Instance.game.sameExtras(b, this.itemData)) {
             this.destroy();
             this.itemData = O.clone(b);
             H.__cast(this.entity, ja).overrideEmptySearchIndex = a + 1;
             this.itemRenderer = 1 == this.frames.h[this.itemData[0]].h.useItem ? Za.createInstance(q.getItemRenderer(this.itemData[0]), [this.entity, 0, 0]).fromItem(this.itemData) : null;
             b = a = this.entity.nearestConsecutiveEmpty(this.frames.h[this.itemData[0]].h.baseQuads);
             for (a += this.frames.h[this.itemData[0]].h.baseQuads; b < a; ) this.quadPositions.push(b++);
             this.update();
             b = 0;
             for (a = this.quadPositions; b < a.length; ) this.entity.updateQuad(a[b++], null, null, null, new h());
             H.__cast(this.entity, ja).overrideEmptySearchIndex = -1;
           }
           return this;
         },
         destroy: function () {
           null != this.itemRenderer && this.itemRenderer.destroy();
           X.prototype.destroy.call(this);
         },
         remove: function () {
           this.destroy();
           this.itemRenderer = null;
           this.itemData = g.emptyItem();
         },
         __class__: eb,
       });
       var sb = function (b) {
         this.hide1 = this.hide2 = !1;
         this.colorUV = [];
         this.parentColor = [1, 1, 1, 1];
         this.matrix2 = new T();
         this.matrix1 = new T();
         this.itemData = g.emptyItem();
         var a = new e(),
           c = new e();
         c.h.baseQuads = 4;
         c.h.texture = "leather_pants";
         a.h.LeatherPants = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "iron_leggings";
         a.h.IronPants = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "diamond_leggings";
         a.h.DiamondPants = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "gold_leggings";
         a.h.GoldPants = c;
         c = new e();
         c.h.baseQuads = 2;
         c.h.texture = "dragon_scale_leggings";
         a.h.DragonPants = c;
         this.frames = a;
         this.entity = b;
         X.call(this, b, 0, 0);
       };
       r["renderers.armor.Q_Leggings"] = sb;
       sb.__name__ = "renderers.armor.Q_Leggings";
       sb.__super__ = X;
       sb.prototype = v(X.prototype, {
         update: function () {
           if (null != this.itemData && null != this.frames.h[this.itemData[0]]) {
             H.__cast(this.entity, ja).currentMatrix.translate(-0.275, -0.45).multiply(this.matrix1.values);
             var b = this.entity;
             var a = 1;
             var c = this.quadPositions[0],
               d = this.destination,
               f = new h(this.textureClip.x, this.textureClip.y),
               g = new h(this.textureClip.width, this.textureClip.height),
               k = new h(1, 1),
               m = new e(),
               n = w.repeatArray([this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide1 ? 0 : 1)], 6);
             m.h.color = n;
             b.updateQuad(c, d, f, g, k, null, null, m);
             null != this.textureColorClip &&
               ((b = this.entity),
               (a = 2),
               (c = this.quadPositions[1]),
               (d = this.destination),
               (f = new h(this.textureColorClip.x, this.textureColorClip.y)),
               (g = new h(this.textureColorClip.width, this.textureColorClip.height)),
               (k = new h(1, 1)),
               (m = new e()),
               (n = w.repeatArray([this.colorUV[0] * this.parentColor[0], this.colorUV[1] * this.parentColor[1], this.colorUV[2] * this.parentColor[2], this.colorUV[3] * this.parentColor[3] * (this.hide1 ? 0 : 1)], 6)),
               (m.h.color = n),
               b.updateQuad(c, d, f, g, k, null, null, m));
             H.__cast(this.entity, ja).currentMatrix.reset().translate(-0.275, -0.45).multiply(this.matrix2.values);
             b = this.entity;
             c = this.quadPositions[a++];
             d = this.destination;
             f = new h(this.textureClip.x, this.textureClip.y);
             g = new h(this.textureClip.width, this.textureClip.height);
             k = new h(1, 1);
             m = new e();
             n = w.repeatArray([this.parentColor[0], this.parentColor[1], this.parentColor[2], this.parentColor[3] * (this.hide2 ? 0 : 1)], 6);
             m.h.color = n;
             b.updateQuad(c, d, f, g, k, null, null, m);
             null != this.textureColorClip &&
               ((b = this.entity),
               (c = this.quadPositions[a++]),
               (d = this.destination),
               (f = new h(this.textureColorClip.x, this.textureColorClip.y)),
               (g = new h(this.textureColorClip.width, this.textureColorClip.height)),
               (k = new h(1, 1)),
               (m = new e()),
               (n = w.repeatArray([this.colorUV[0] * this.parentColor[0], this.colorUV[1] * this.parentColor[1], this.colorUV[2] * this.parentColor[2], this.colorUV[3] * this.parentColor[3] * (this.hide2 ? 0 : 1)], 6)),
               (m.h.color = n),
               b.updateQuad(c, d, f, g, k, null, null, m));
             H.__cast(this.entity, ja).currentMatrix.reset();
           }
         },
         setItem: function (b, a, c, d, f, g) {
           null == g && (g = !1);
           null == f && (f = !1);
           if (null == b || null == this.frames.h[b[0]]) return this.remove(), this;
           this.matrix1 = c;
           this.matrix2 = d;
           this.hide1 = f;
           this.hide2 = g;
           if (b[0] != this.itemData[0] || !m.Instance.game.sameExtras(b, this.itemData)) {
             this.destroy();
             this.itemData = O.clone(b);
             a = c = this.entity.nearestConsecutiveEmpty(this.frames.h[b[0]].h.baseQuads, a + 1);
             for (c += this.frames.h[b[0]].h.baseQuads; a < c; ) this.quadPositions.push(a++);
             "LeatherPants" == b[0]
               ? ((this.textureClip = y.getTexture(this.frames.h[b[0]].h.texture, "base")),
                 (this.textureColorClip = y.getTexture(this.frames.h[b[0]].h.texture, "color")),
                 null != b[3] &&
                   ((b = H.__cast(b[3], e).h.type),
                   null != b && Object.prototype.hasOwnProperty.call(V.colors.h, b)
                     ? Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6))
                     : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6))))
               : ((this.textureClip = y.getTexture(this.frames.h[b[0]].h.texture)), (this.textureColorClip = null));
             this.update();
             a = 0;
             for (c = this.quadPositions; a < c.length; ) this.entity.updateQuad(c[a++], null, null, null, new h());
           }
           return this;
         },
         destroy: function () {
           X.prototype.destroy.call(this);
         },
         remove: function () {
           this.destroy();
           this.itemData = g.emptyItem();
         },
         __class__: sb,
       });
       var af = function (b, a, c) {
         this.variation = "0";
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Anvil"] = af;
       af.__name__ = "renderers.blocks.Q_Anvil";
       af.__super__ = X;
       af.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.variation = null == b.states1 ? "0" : E.string(Math.min(2, b.states1 - 1));
           this.textureClip = y.getTexture(this.textureID, this.variation);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] && ((b = H.__cast(b[3], e).h.damage), (this.variation = null == b ? "0" : E.string(Math.min(2, b - 1))));
           this.textureClip = y.getTexture(this.textureID, this.variation);
           return this;
         },
         __class__: af,
       });
       var Zd = function (b, a, c) {
         this.colorUV = [];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_ArmorLeather"] = Zd;
       Zd.__name__ = "renderers.blocks.Q_ArmorLeather";
       Zd.__super__ = X;
       Zd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           if (0 < this.colorUV.length) {
             var b = this.quadPositions[1],
               a = new h(this.textureClipColor.x, this.textureClipColor.y),
               c = new h(this.textureClipColor.width, this.textureClipColor.height),
               d = new h(1, 1),
               f = new e();
             f.h.color = this.colorUV;
             this.entity.updateQuad(b, this.destination, a, c, d, null, null, f);
           } else this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClipColor.x, this.textureClipColor.y), new h(), new h());
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] &&
             ((b = H.__cast(b[3], e).h.type),
             null != b && Object.prototype.hasOwnProperty.call(V.colors.h, b)
               ? Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6))
               : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6)));
           this.textureClip = y.getTexture(this.textureID, "base");
           this.textureClipColor = y.getTexture(this.textureID, "color");
           return this;
         },
         __class__: Zd,
       });
       var Ve = function (b, a, c) {
         this.colorUV = [];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_ArmorLeather_Boots"] = Ve;
       Ve.__name__ = "renderers.blocks.Q_ArmorLeather_Boots";
       Ve.__super__ = X;
       Ve.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length &&
             (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(4)), this.quadPositions.push(this.quadPositions[0] + 1), this.quadPositions.push(this.quadPositions[0] + 2), this.quadPositions.push(this.quadPositions[0] + 3));
           this.entity.updateQuad(
             this.quadPositions[0],
             new M(this.destination.x - 0.5 + 0.125, this.destination.y - 0.0625),
             new h(this.textureClip.x, this.textureClip.y),
             new h(this.textureClip.width, this.textureClip.height),
             new h(0.75, 0.75)
           );
           var b = this.textureClip.x + this.textureClip.width;
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x + 0.5 + 0.125, this.destination.y - 0.0625), new h(b, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(0.75, 0.75));
           if (0 < this.colorUV.length) {
             b = this.entity;
             var a = this.quadPositions[2],
               c = new M(this.destination.x - 0.5 + 0.125, this.destination.y - 0.0625),
               d = new h(this.textureClipColor.x, this.textureClipColor.y),
               f = new h(this.textureClipColor.width, this.textureClipColor.height),
               g = new h(0.75, 0.75),
               k = new e();
             k.h.color = this.colorUV;
             b.updateQuad(a, c, d, f, g, null, null, k);
             b = this.entity;
             a = this.quadPositions[3];
             c = new M(this.destination.x + 0.5 + 0.125, this.destination.y - 0.0625);
             d = new h(this.textureClipColor.x + this.textureClip.width, this.textureClipColor.y);
             f = new h(-this.textureClipColor.width, this.textureClipColor.height);
             g = new h(0.75, 0.75);
             k = new e();
             k.h.color = this.colorUV;
             b.updateQuad(a, c, d, f, g, null, null, k);
           } else
             this.entity.updateQuad(this.quadPositions[2], new M(this.destination.x - 0.5 + 0.125, this.destination.y - 0.0625), new h(this.textureClipColor.x, this.textureClipColor.y), new h(), new h()),
               (b = this.textureClipColor.x + this.textureClip.width),
               this.entity.updateQuad(this.quadPositions[3], new M(this.destination.x + 0.5 + 0.125, this.destination.y - 0.0625), new h(b, this.textureClipColor.y), new h(), new h());
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] &&
             ((b = H.__cast(b[3], e).h.type),
             null != b && Object.prototype.hasOwnProperty.call(V.colors.h, b)
               ? Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6))
               : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6)));
           this.textureClip = y.getTexture(this.textureID, "base");
           this.textureClipColor = y.getTexture(this.textureID, "color");
           return this;
         },
         __class__: Ve,
       });
       var Ue = function (b, a, c) {
         this.colorUV = [];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_ArmorLeather_Pants"] = Ue;
       Ue.__name__ = "renderers.blocks.Q_ArmorLeather_Pants";
       Ue.__super__ = X;
       Ue.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length &&
             (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(4)), this.quadPositions.push(this.quadPositions[0] + 1), this.quadPositions.push(this.quadPositions[0] + 2), this.quadPositions.push(this.quadPositions[0] + 3));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
           if (0 < this.colorUV.length) {
             var b = this.quadPositions[2],
               a = new h(this.textureClipColor.x, this.textureClipColor.y),
               c = new h(this.textureClipColor.width, this.textureClipColor.height),
               d = new h(1, 1),
               f = new e();
             f.h.color = this.colorUV;
             this.entity.updateQuad(b, this.destination, a, c, d, null, null, f);
             b = this.quadPositions[3];
             a = new h(this.textureClipColor.x + this.textureClip.width, this.textureClipColor.y);
             c = new h(-this.textureClipColor.width, this.textureClipColor.height);
             d = new h(1, 1);
             f = new e();
             f.h.color = this.colorUV;
             this.entity.updateQuad(b, this.destination, a, c, d, null, null, f);
           } else
             this.entity.updateQuad(this.quadPositions[2], this.destination, new h(this.textureClipColor.x, this.textureClipColor.y), new h(), new h()),
               this.entity.updateQuad(this.quadPositions[3], this.destination, new h(this.textureClipColor.x + this.textureClip.width, this.textureClipColor.y), new h(), new h());
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] &&
             ((b = H.__cast(b[3], e).h.type),
             null != b && Object.prototype.hasOwnProperty.call(V.colors.h, b)
               ? Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6))
               : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6)));
           this.textureClip = y.getTexture(this.textureID, "base");
           this.textureClipColor = y.getTexture(this.textureID, "color");
           return this;
         },
         __class__: Ue,
       });
       var ed = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Armor_Boots"] = ed;
       ed.__name__ = "renderers.blocks.Q_Armor_Boots";
       ed.__super__ = X;
       ed.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(
             this.quadPositions[0],
             new M(this.destination.x - 0.5 + 0.125, this.destination.y - 0.0625),
             new h(this.textureClip.x, this.textureClip.y),
             new h(this.textureClip.width, this.textureClip.height),
             new h(0.75, 0.75)
           );
           var b = this.textureClip.x + this.textureClip.width;
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x + 0.5 + 0.125, this.destination.y - 0.0625), new h(b, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(0.75, 0.75));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: ed,
       });
       var dd = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Armor_Leggings"] = dd;
       dd.__name__ = "renderers.blocks.Q_Armor_Leggings";
       dd.__super__ = X;
       dd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: dd,
       });
       var dc = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Backdrop"] = dc;
       dc.__name__ = "renderers.blocks.Q_Backdrop";
       dc.__super__ = X;
       dc.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           var b = this.entity,
             a = this.quadPositions[0],
             c = this.destination,
             d = new h(this.textureClip.x, this.textureClip.y),
             f = new h(this.textureClip.width, this.textureClip.height),
             g = new h(1, 1),
             k = new e(),
             m = w.repeatArray([0.6, 0.6, 0.6, 1], 6);
           k.h.color = m;
           b.updateQuad(a, c, d, f, g, null, null, k);
         },
         __class__: dc,
       });
       var fd = function (b, a, c) {
         this.variation = this.color = "";
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Glass"] = fd;
       fd.__name__ = "renderers.blocks.Q_Glass";
       fd.__super__ = X;
       fd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           if ("stained" == this.variation) {
             var b = w.repeatArray([V.colors.h[this.color].h.r, V.colors.h[this.color].h.g, V.colors.h[this.color].h.b, 1], 6),
               a = this.quadPositions[0],
               c = new h(this.textureClip.x, this.textureClip.y),
               d = new h(this.textureClip.width, this.textureClip.height),
               f = new h(1, 1),
               g = new e();
             g.h.color = b;
             this.entity.updateQuad(a, this.destination, c, d, f, null, null, g);
           } else this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.variation = "";
           null != b.states1 && Object.prototype.hasOwnProperty.call(V.colors.h, b.states1) && ((this.color = b.states1), (this.variation = "stained"));
           this.textureClip = y.getTexture(this.textureID, this.variation);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.variation = "";
           null != b[3] && ((b = H.__cast(b[3], e).h.type), Object.prototype.hasOwnProperty.call(V.colors.h, b) && ((this.color = b), (this.variation = "stained")));
           this.textureClip = y.getTexture(this.textureID, this.variation);
           return this;
         },
         __class__: fd,
       });
       var Cf = function (b, a, c) {
         fd.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Backdrop_Glass"] = Cf;
       Cf.__name__ = "renderers.blocks.Q_Backdrop_Glass";
       Cf.__super__ = fd;
       Cf.prototype = v(fd.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           var b = "stained" == this.variation ? w.repeatArray([0.6 * V.colors.h[this.color].h.r, 0.6 * V.colors.h[this.color].h.g, 0.6 * V.colors.h[this.color].h.b, 1], 6) : w.repeatArray([0.6, 0.6, 0.6, 1], 6);
           var a = this.quadPositions[0],
             c = new h(this.textureClip.x, this.textureClip.y),
             d = new h(this.textureClip.width, this.textureClip.height),
             f = new h(1, 1),
             g = new e();
           g.h.color = b;
           this.entity.updateQuad(a, this.destination, c, d, f, null, null, g);
         },
         __class__: Cf,
       });
       var Lb = function (b, a, c) {
         this.worldLocation = new h(0, 0);
         this.color = "";
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Wool"] = Lb;
       Lb.__name__ = "renderers.blocks.Q_Wool";
       Lb.__super__ = X;
       Lb.prototype = v(X.prototype, {
         update: function () {
           if (0 < this.quadPositions.length) this.frameEvent();
           else if ("rainbow" == this.color) {
             var b = this.quadPositions,
               a = this.entity,
               c = this.destination,
               d = new h(this.textureClip.x, this.textureClip.y),
               f = new h(this.textureClip.width, this.textureClip.height),
               g = new h(1, 1),
               k = new e(),
               n = w.repeatArray(
                 [
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 5 - (30 * this.worldLocation.y) / 7) / 19) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 - (30 * this.worldLocation.x) / 4 - (30 * this.worldLocation.y) / 9) / 25) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 3 + (30 * this.worldLocation.y) / 5) / 16) / 2 + 0.5,
                   1,
                 ],
                 6
               );
             k.h.color = n;
             b.push(a.addQuad(c, d, f, !0, g, null, null, k));
           } else
             "" != this.color
               ? ((b = this.quadPositions),
                 (a = this.entity),
                 (c = this.destination),
                 (d = new h(this.textureClip.x, this.textureClip.y)),
                 (f = new h(this.textureClip.width, this.textureClip.height)),
                 (g = new h(1, 1)),
                 (k = new e()),
                 (n = w.repeatArray([V.colors.h[this.color].h.r, V.colors.h[this.color].h.g, V.colors.h[this.color].h.b, 1], 6)),
                 (k.h.color = n),
                 b.push(a.addQuad(c, d, f, !0, g, null, null, k)))
               : this.quadPositions.push(this.entity.addQuad(this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), !0, new h(1, 1)));
         },
         frameEvent: function () {
           if ("rainbow" == this.color) {
             var b = this.entity,
               a = this.quadPositions[0],
               c = this.destination,
               d = new h(this.textureClip.x, this.textureClip.y),
               f = new h(this.textureClip.width, this.textureClip.height),
               g = new h(1, 1),
               k = new e(),
               n = w.repeatArray(
                 [
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 5 - (30 * this.worldLocation.y) / 7) / 19) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 - (30 * this.worldLocation.x) / 4 - (30 * this.worldLocation.y) / 9) / 25) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 3 + (30 * this.worldLocation.y) / 5) / 16) / 2 + 0.5,
                   1,
                 ],
                 6
               );
             k.h.color = n;
             b.updateQuad(a, c, d, f, g, null, null, k);
           } else
             "" != this.color
               ? ((b = this.entity),
                 (a = this.quadPositions[0]),
                 (c = this.destination),
                 (d = new h(this.textureClip.x, this.textureClip.y)),
                 (f = new h(this.textureClip.width, this.textureClip.height)),
                 (g = new h(1, 1)),
                 (k = new e()),
                 (n = w.repeatArray([V.colors.h[this.color].h.r, V.colors.h[this.color].h.g, V.colors.h[this.color].h.b, 1], 6)),
                 (k.h.color = n),
                 b.updateQuad(a, c, d, f, g, null, null, k))
               : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           null != b.states1 && Object.prototype.hasOwnProperty.call(V.colors.h, b.states1) && ((this.color = b.states1), "rainbow" == this.color && (this.hasFrameEvent = !0));
           null != b.x && (this.worldLocation.x = b.x);
           null != b.y && (this.worldLocation.y = b.y);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] && ((b = H.__cast(b[3], e).h.type), Object.prototype.hasOwnProperty.call(V.colors.h, b) && ((this.color = b), "rainbow" == this.color && (this.hasFrameEvent = !0)));
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Lb,
       });
       var Df = function (b, a, c) {
         Lb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Backdrop_Wool"] = Df;
       Df.__name__ = "renderers.blocks.Q_Backdrop_Wool";
       Df.__super__ = Lb;
       Df.prototype = v(Lb.prototype, {
         update: function () {
           if (0 < this.quadPositions.length) this.frameEvent();
           else if ("" != this.color) {
             var b = this.quadPositions,
               a = this.entity,
               c = this.destination,
               d = new h(this.textureClip.x, this.textureClip.y),
               f = new h(this.textureClip.width, this.textureClip.height),
               g = new h(1, 1),
               k = new e(),
               m = w.repeatArray([0.6 * V.colors.h[this.color].h.r, 0.6 * V.colors.h[this.color].h.g, 0.6 * V.colors.h[this.color].h.b, 1], 6);
             k.h.color = m;
             b.push(a.addQuad(c, d, f, !0, g, null, null, k));
           } else this.quadPositions.push(this.entity.addQuad(this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), !0, new h(1, 1)));
         },
         frameEvent: function () {
           if ("rainbow" == this.color) {
             var b = this.entity,
               a = this.quadPositions[0],
               c = this.destination,
               d = new h(this.textureClip.x, this.textureClip.y),
               f = new h(this.textureClip.width, this.textureClip.height),
               g = new h(1, 1),
               k = new e(),
               n = w.repeatArray(
                 [
                   0.4 * (Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 5 - (30 * this.worldLocation.y) / 7) / 19) / 2 + 0.5),
                   0.4 * (Math.sin((m.Instance.game.world.tick / 2 - (30 * this.worldLocation.x) / 4 - (30 * this.worldLocation.y) / 9) / 25) / 2 + 0.5),
                   0.4 * (Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 3 + (30 * this.worldLocation.y) / 5) / 16) / 2 + 0.5),
                   1,
                 ],
                 6
               );
             k.h.color = n;
             b.updateQuad(a, c, d, f, g, null, null, k);
           } else
             "" != this.color
               ? ((b = this.entity),
                 (a = this.quadPositions[0]),
                 (c = this.destination),
                 (d = new h(this.textureClip.x, this.textureClip.y)),
                 (f = new h(this.textureClip.width, this.textureClip.height)),
                 (g = new h(1, 1)),
                 (k = new e()),
                 (n = w.repeatArray([0.6 * V.colors.h[this.color].h.r, 0.6 * V.colors.h[this.color].h.g, 0.6 * V.colors.h[this.color].h.b, 1], 6)),
                 (k.h.color = n),
                 b.updateQuad(a, c, d, f, g, null, null, k))
               : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         __class__: Df,
       });
       var wf = function (b, a, c) {
         Lb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Balloon"] = wf;
       wf.__name__ = "renderers.blocks.Q_Balloon";
       wf.__super__ = Lb;
       wf.prototype = v(Lb.prototype, {
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           var a = "";
           this.color = "";
           null != b[3] && ((b = H.__cast(b[3], e).h.type), Object.prototype.hasOwnProperty.call(V.colors.h, b) ? ((this.color = b), "rainbow" == this.color && (this.hasFrameEvent = !0)) : "ghast" == b && (a = "ghast"));
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         __class__: wf,
       });
       var Qd = function (b, a, c) {
         this.visible = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Barrier"] = Qd;
       Qd.__name__ = "renderers.blocks.Q_Barrier";
       Qd.__super__ = X;
       Qd.prototype = v(X.prototype, {
         update: function () {
           0 < this.quadPositions.length
             ? this.visible
               ? this.entity.updateQuad(this.quadPositions[0], this.destination, null, null, new h(1, 1))
               : this.entity.updateQuad(this.quadPositions[0], this.destination, null, null, new h(0, 0))
             : this.visible
             ? this.quadPositions.push(this.entity.addQuad(this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), !0, new h(1, 1)))
             : this.quadPositions.push(this.entity.addQuad(this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), !0, new h(0, 0)));
         },
         fromItem: function (b) {
           this.visible = !0;
           return X.prototype.fromItem.call(this, b);
         },
         __class__: Qd,
       });
       var wd = function (b, a, c) {
         this.isItem = !1;
         this.colorUV = [];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Bed"] = wd;
       wd.__name__ = "renderers.blocks.Q_Bed";
       wd.__super__ = X;
       wd.prototype = v(X.prototype, {
         update: function () {
           this.isItem ? this.updateItem() : this.updateBlock();
         },
         updateBlock: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           if (0 < this.colorUV.length) {
             var b = this.quadPositions[1],
               a = new h(this.textureClipSheets.x, this.textureClipSheets.y),
               c = new h(this.textureClipSheets.width, this.textureClipSheets.height),
               d = new h(1, 1),
               f = new e();
             f.h.color = this.colorUV;
             this.entity.updateQuad(b, this.destination, a, c, d, null, null, f);
           } else this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClipSheets.x, this.textureClipSheets.y), new h(this.textureClipSheets.width, this.textureClipSheets.height), new h(1, 1));
         },
         updateItem: function () {
           0 == this.quadPositions.length &&
             (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(4)), this.quadPositions.push(this.quadPositions[0] + 1), this.quadPositions.push(this.quadPositions[0] + 2), this.quadPositions.push(this.quadPositions[0] + 3));
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y + 0.25), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(0.5, 0.5));
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x + 0.5, this.destination.y + 0.25), new h(this.textureClip2.x, this.textureClip2.y), new h(this.textureClip2.width, this.textureClip2.height), new h(0.5, 0.5));
           if (0 < this.colorUV.length) {
             var b = this.entity,
               a = this.quadPositions[2],
               c = new M(this.destination.x, this.destination.y + 0.25),
               d = new h(this.textureClipSheets.x, this.textureClipSheets.y),
               f = new h(this.textureClipSheets.width, this.textureClipSheets.height),
               g = new h(0.5, 0.5),
               k = new e();
             k.h.color = this.colorUV;
             b.updateQuad(a, c, d, f, g, null, null, k);
             b = this.entity;
             a = this.quadPositions[3];
             c = new M(this.destination.x + 0.5, this.destination.y + 0.25);
             d = new h(this.textureClipSheets2.x, this.textureClipSheets2.y);
             f = new h(this.textureClipSheets2.width, this.textureClipSheets2.height);
             g = new h(0.5, 0.5);
             k = new e();
             k.h.color = this.colorUV;
             b.updateQuad(a, c, d, f, g, null, null, k);
           } else
             this.entity.updateQuad(
               this.quadPositions[2],
               new M(this.destination.x, this.destination.y + 0.25),
               new h(this.textureClipSheets.x, this.textureClipSheets.y),
               new h(this.textureClipSheets.width, this.textureClipSheets.height),
               new h(0.5, 0.5)
             ),
               this.entity.updateQuad(
                 this.quadPositions[3],
                 new M(this.destination.x + 0.5, this.destination.y + 0.25),
                 new h(this.textureClipSheets2.x, this.textureClipSheets2.y),
                 new h(this.textureClipSheets2.width, this.textureClipSheets2.height),
                 new h(0.5, 0.5)
               );
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           null != b.states1 && Object.prototype.hasOwnProperty.call(V.colors.h, b.states1) && (this.colorUV = w.repeatArray([V.colors.h[b.states1].h.r, V.colors.h[b.states1].h.g, V.colors.h[b.states1].h.b, 1], 6));
           this.textureClip = y.getTexture(this.textureID, "frame_" + ("bed1" == b.type ? "left" : "right"));
           this.textureClipSheets = y.getTexture(this.textureID, "sheets_" + ("bed1" == b.type ? "left" : "right"));
           this.isItem = !1;
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           null != b[3] && ((b = H.__cast(b[3], e).h.type), Object.prototype.hasOwnProperty.call(V.colors.h, b) && (this.colorUV = w.repeatArray([V.colors.h[b].h.r, V.colors.h[b].h.g, V.colors.h[b].h.b, 1], 6)));
           this.textureClip = y.getTexture(this.textureID, "frame_left");
           this.textureClipSheets = y.getTexture(this.textureID, "sheets_left");
           this.textureClip2 = y.getTexture(this.textureID, "frame_right");
           this.textureClipSheets2 = y.getTexture(this.textureID, "sheets_right");
           this.isItem = !0;
           return this;
         },
         __class__: wd,
       });
       var Ze = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_BrewingStand"] = Ze;
       Ze.__name__ = "renderers.blocks.Q_BrewingStand";
       Ze.__super__ = X;
       Ze.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "0";
           if (null != b.toBrew) {
             a = 0;
             b = b.toBrew;
             if (null != b && null != b.h.output) {
               var c = b.h.output[0];
               m.Instance.game.isEmptyItem(c) || (a = 1);
               c = b.h.output[1];
               m.Instance.game.isEmptyItem(c) || ++a;
               c = b.h.output[2];
               m.Instance.game.isEmptyItem(c) || ++a;
             }
             a = null == a ? "null" : "" + a;
           }
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "0");
           return this;
         },
         __class__: Ze,
       });
       var Vd = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Cactus"] = Vd;
       Vd.__name__ = "renderers.blocks.Q_Cactus";
       Vd.__super__ = X;
       Vd.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "";
           "ct" != m.Instance.game.world.getFG(b.x, b.y + 1) && (a = "top");
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         __class__: Vd,
       });
       var fe = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Cake"] = fe;
       fe.__name__ = "renderers.blocks.Q_Cake";
       fe.__super__ = X;
       fe.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "0";
           null != b.states1 && (a = E.string(Math.floor(((b.states1 - 1) * q.get(b.type, "maxState")) / 7)));
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "0");
           return this;
         },
         __class__: fe,
       });
       var Td = function (b, a, c) {
         this.horizontal = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_CanPlaceSideways"] = Td;
       Td.__name__ = "renderers.blocks.Q_CanPlaceSideways";
       Td.__super__ = X;
       Td.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.horizontal
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           null != b.states1 && "2" == b.states1.toString() && (this.horizontal = !0);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Td,
       });
       var hf = function (b, a, c) {
         this.isItem = !1;
         Lb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Carpet"] = hf;
       hf.__name__ = "renderers.blocks.Q_Carpet";
       hf.__super__ = Lb;
       hf.prototype = v(Lb.prototype, {
         update: function () {
           if (0 < this.quadPositions.length) this.frameEvent();
           else if ("rainbow" == this.color) {
             var b = this.quadPositions,
               a = this.entity,
               c = new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0)),
               d = new h(this.textureClip.x, this.textureClip.y + 0.875),
               f = new h(this.textureClip.width, 0.125 * this.textureClip.height),
               g = new h(1, 0.125),
               k = new e(),
               n = w.repeatArray(
                 [
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 5 - (30 * this.worldLocation.y) / 7) / 19) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 - (30 * this.worldLocation.x) / 4 - (30 * this.worldLocation.y) / 9) / 25) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 3 + (30 * this.worldLocation.y) / 5) / 16) / 2 + 0.5,
                   1,
                 ],
                 6
               );
             k.h.color = n;
             b.push(a.addQuad(c, d, f, !0, g, null, null, k));
           } else
             "" != this.color
               ? ((b = this.quadPositions),
                 (a = this.entity),
                 (c = new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0))),
                 (d = new h(this.textureClip.x, this.textureClip.y + 0.875)),
                 (f = new h(this.textureClip.width, 0.125 * this.textureClip.height)),
                 (g = new h(1, 0.125)),
                 (k = new e()),
                 (n = w.repeatArray([V.colors.h[this.color].h.r, V.colors.h[this.color].h.g, V.colors.h[this.color].h.b, 1], 6)),
                 (k.h.color = n),
                 b.push(a.addQuad(c, d, f, !0, g, null, null, k)))
               : ((b = this.textureClip.x),
                 (a = this.textureClip.y + 0.875),
                 (c = this.textureClip.width),
                 (d = 0.125 * this.textureClip.height),
                 this.quadPositions.push(this.entity.addQuad(new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0)), new h(b, a), new h(c, d), !0, new h(1, 0.125))));
         },
         frameEvent: function () {
           if ("rainbow" == this.color) {
             var b = this.entity,
               a = this.quadPositions[0],
               c = new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0)),
               d = new h(this.textureClip.x, this.textureClip.y + 0.875),
               f = new h(this.textureClip.width, 0.125 * this.textureClip.height),
               g = new h(1, 0.125),
               k = new e(),
               n = w.repeatArray(
                 [
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 5 - (30 * this.worldLocation.y) / 7) / 19) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 - (30 * this.worldLocation.x) / 4 - (30 * this.worldLocation.y) / 9) / 25) / 2 + 0.5,
                   Math.sin((m.Instance.game.world.tick / 2 + (30 * this.worldLocation.x) / 3 + (30 * this.worldLocation.y) / 5) / 16) / 2 + 0.5,
                   1,
                 ],
                 6
               );
             k.h.color = n;
             b.updateQuad(a, c, d, f, g, null, null, k);
           } else
             "" != this.color
               ? ((b = this.entity),
                 (a = this.quadPositions[0]),
                 (c = new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0))),
                 (d = new h(this.textureClip.x, this.textureClip.y + 0.875)),
                 (f = new h(this.textureClip.width, 0.125 * this.textureClip.height)),
                 (g = new h(1, 0.125)),
                 (k = new e()),
                 (n = w.repeatArray([V.colors.h[this.color].h.r, V.colors.h[this.color].h.g, V.colors.h[this.color].h.b, 1], 6)),
                 (k.h.color = n),
                 b.updateQuad(a, c, d, f, g, null, null, k))
               : ((b = this.textureClip.x),
                 (a = this.textureClip.y + 0.875),
                 (c = this.textureClip.width),
                 (d = 0.125 * this.textureClip.height),
                 this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y + 0.875 + (this.isItem ? -0.4375 : 0)), new h(b, a), new h(c, d), new h(1, 0.125)));
         },
         fromItem: function (b) {
           this.isItem = !0;
           return Lb.prototype.fromItem.call(this, b);
         },
         __class__: hf,
       });
       var Mc = function (b, a, c) {
         this.exposed = !1;
         this.state = 0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Cauldron"] = Mc;
       Mc.__name__ = "renderers.blocks.Q_Cauldron";
       Mc.__super__ = X;
       Mc.prototype = v(X.prototype, {
         update: function () {
           if (0 < this.quadPositions.length)
             if ((this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1)), this.exposed)) {
               var b = y.getTexture(this.textureID, "background");
               this.entity.updateQuad(this.quadPositions[1], this.destination, new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
               b = y.getTexture(this.textureID, "water");
               var a = b.x,
                 c = b.y + (0.75 - this.state / 4) * b.height,
                 d = b.width;
               b = (b.height * this.state) / 4;
               var e = this.state / 4;
               this.entity.updateQuad(this.quadPositions[2], new M(this.destination.x, this.destination.y + (0.75 - this.state / 4)), new h(a, c), new h(d, b), new h(1, e));
             } else this.entity.updateQuad(this.quadPositions[1], this.destination, null, new h()), this.entity.updateQuad(this.quadPositions[2], this.destination, null, new h());
           else
             (a = this.entity.nearestConsecutiveEmpty(3)),
               this.quadPositions.push(a),
               this.quadPositions.push(a + 1),
               this.quadPositions.push(a + 2),
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1)),
               this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClip.x, this.textureClip.y), new h()),
               this.entity.updateQuad(this.quadPositions[2], this.destination, new h(this.textureClip.x, this.textureClip.y), new h());
         },
         __class__: Mc,
       });
       var lf = function (b, a, c) {
         this.rotation = this.targetRotation = 0;
         this.randomize = !0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Clock"] = lf;
       lf.__name__ = "renderers.blocks.Q_Clock";
       lf.__super__ = X;
       lf.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           (this.randomize = m.Instance.game.world.sceneNum != U.sceneNums.h.OVERWORLD)
             ? (0 == (G.toFloat(m.Instance.tick) % G.toFloat(8) | 0) && (this.targetRotation = Math.random() * Math.PI * 2),
               this.targetRotation < this.rotation - Math.PI ? (this.rotation -= 2 * Math.PI) : this.targetRotation > this.rotation + Math.PI && (this.rotation += 2 * Math.PI),
               (this.rotation += (this.targetRotation - this.rotation) / 10))
             : (this.rotation = (-m.Instance.game.world.tim / 100) * Math.PI * 2 + Math.PI / 2);
           this.entity.updateQuad(
             this.quadPositions[0],
             null,
             new h(this.textureClip.x, this.textureClip.y),
             new h(this.textureClip.width, this.textureClip.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 1, 1), new T().translate(-0.5, -0.5).rotate2D(this.rotation).scale2D(1.08).translate(0.5, 0.5).scale2D(1).translate(this.destination.x, this.destination.y))
           );
           this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClipFrame.x, this.textureClipFrame.y), new h(this.textureClipFrame.width, this.textureClipFrame.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.hasFrameEvent = !0;
           this.textureClip = y.getTexture(this.textureID, "dial");
           this.textureClipFrame = y.getTexture(this.textureID, "frame");
           return this;
         },
         __class__: lf,
       });
       var mf = function (b, a, c) {
         this.rotation = this.targetRotation = 0;
         this.randomize = !0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Compass"] = mf;
       mf.__name__ = "renderers.blocks.Q_Compass";
       mf.__super__ = X;
       mf.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           (this.randomize = m.Instance.game.world.sceneNum != U.sceneNums.h.OVERWORLD)
             ? (0 == (G.toFloat(m.Instance.tick) % G.toFloat(8) | 0) && (this.targetRotation = Math.random() * Math.PI * 2),
               this.targetRotation < this.rotation - Math.PI ? (this.rotation -= 2 * Math.PI) : this.targetRotation > this.rotation + Math.PI && (this.rotation += 2 * Math.PI),
               (this.rotation += (this.targetRotation - this.rotation) / 10))
             : (this.rotation = Math.atan2(-(m.Instance.game.world.spawnPoint.y - m.Instance.game.world.worldY), m.Instance.game.world.spawnPoint.x - m.Instance.game.world.worldX));
           this.entity.updateQuad(
             this.quadPositions[0],
             null,
             new h(this.textureClip.x, this.textureClip.y),
             new h(this.textureClip.width, this.textureClip.height),
             null,
             ba.quadMatrixHelper(new t(0, 0, 1, 1), new T().translate(-0.5, -0.5).rotate2D(this.rotation).translate(0.5, 0.5).scale2D(1).translate(this.destination.x, this.destination.y))
           );
           this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClipFrame.x, this.textureClipFrame.y), new h(this.textureClipFrame.width, this.textureClipFrame.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.hasFrameEvent = !0;
           this.textureClip = y.getTexture(this.textureID, "dial");
           this.textureClipFrame = y.getTexture(this.textureID, "frame");
           return this;
         },
         __class__: mf,
       });
       var yb = function (b, a, c) {
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Torch"] = yb;
       yb.__name__ = "renderers.blocks.Q_Torch";
       yb.__super__ = X;
       yb.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           3 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1))
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 1;
           null != b.states1 && (this.state = b.states1);
           this.textureClip = y.getTexture(this.textureID, 2 == this.state || 3 == this.state ? "wall" : "floor");
           return this;
         },
         __class__: yb,
       });
       var Rf = function (b, a, c) {
         this.isItem = !1;
         this.worldLocation = new h(0, 0);
         this.gradientQuadPositions = [];
         yb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_CoralLantern"] = Rf;
       Rf.__name__ = "renderers.blocks.Q_CoralLantern";
       Rf.__super__ = yb;
       Rf.prototype = v(yb.prototype, {
         update: function () {
           if (!this.isItem && 0 == this.gradientQuadPositions.length) {
             var b = m.Instance.game.worldGradientEntity.nearestConsecutiveEmpty(2);
             this.gradientQuadPositions[0] = b;
             this.gradientQuadPositions[1] = b + 1;
             b = m.Instance.game.worldGradientEntity;
             var a = this.gradientQuadPositions[0],
               c = new M(this.worldLocation.x + 0.5 - 6.89, -this.worldLocation.y - 0.5 - 6.89),
               d = new h(),
               f = new h(1, 1),
               g = new h(13.78, 13.78),
               k = new e(),
               n = w.repeatArray([1, 0.38, 1, 0.3], 6);
             k.h.colori = n;
             n = w.repeatArray([1, 0.38, 1, 0], 6);
             k.h.coloro = n;
             b.updateQuad(a, c, d, f, g, null, null, k);
             b = m.Instance.game.worldGradientEntity;
             a = this.gradientQuadPositions[1];
             c = new M(this.worldLocation.x + 0.5 - 1.5, -this.worldLocation.y - 0.5 - 1.5);
             d = new h();
             f = new h(1, 1);
             g = new h(3, 3);
             k = new e();
             n = w.repeatArray([1, 0.38, 1, 0.3], 6);
             k.h.colori = n;
             n = w.repeatArray([1, 0.38, 1, 0], 6);
             k.h.coloro = n;
             b.updateQuad(a, c, d, f, g, null, null, k);
           }
           yb.prototype.update.call(this);
         },
         destroy: function () {
           for (var b = 0, a = this.gradientQuadPositions.length; b < a; ) ++b, m.Instance.game.worldGradientEntity.removeQuad(this.gradientQuadPositions.pop(), !0);
           yb.prototype.destroy.call(this);
         },
         fromBlock: function (b) {
           this.worldLocation.set(b.x, b.y);
           this.isItem = !1;
           return yb.prototype.fromBlock.call(this, b);
         },
         fromItem: function (b) {
           this.isItem = !0;
           return yb.prototype.fromItem.call(this, b);
         },
         __class__: Rf,
       });
       var Fb = function (b, a, c) {
         this.isItem = this.flip = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Foliage"] = Fb;
       Fb.__name__ = "renderers.blocks.Q_Foliage";
       Fb.__super__ = X;
       Fb.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1)), (this.flip = 0.5 > Math.random()));
           this.isItem || !this.flip
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.isItem = !0;
           return X.prototype.fromItem.call(this, b);
         },
         __class__: Fb,
       });
       var rc = function (b, a, c) {
         this.facesRight = 0.5 > Math.random();
         Fb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Crop"] = rc;
       rc.__name__ = "renderers.blocks.Q_Crop";
       rc.__super__ = Fb;
       rc.prototype = v(Fb.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.facesRight
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "crop_0";
           null != b.wheat && (a = "crop_" + E.string(Math.floor(((b.wheat - 1) * q.get(b.type, "maxGrowState")) / 7)));
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "crop_0");
           return this;
         },
         __class__: rc,
       });
       var re = function (b, a, c) {
         rc.call(this, b, a, c);
       };
       r["renderers.blocks.Q_CropStem"] = re;
       re.__name__ = "renderers.blocks.Q_CropStem";
       re.__super__ = rc;
       re.prototype = v(rc.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "crop_0";
           null != b.wheat &&
             ((a = "crop_" + E.string(Math.floor(((b.wheat - 1) * q.get(b.type, "maxGrowState")) / 7))),
             null != b.states1 &&
               (-1 == b.states1
                 ? ((this.facesRight = !1), 7 == b.wheat && m.Instance.game.world.getFG(b.x - 1, b.y) == q.get(b.type, "associatedCropBlock") && (a = "crop_attached"))
                 : 1 == b.states1 && ((this.facesRight = !0), 7 == b.wheat && m.Instance.game.world.getFG(b.x + 1, b.y) == q.get(b.type, "associatedCropBlock") && (a = "crop_attached"))));
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "crop_0");
           return this;
         },
         __class__: re,
       });
       var Sd = function (b, a, c) {
         this.isItem = !1;
         this.rotation = Math.floor(4 * Math.random());
         this.state = 2;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Dirt"] = Sd;
       Sd.__name__ = "renderers.blocks.Q_Dirt";
       Sd.__super__ = X;
       Sd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.isItem || 0 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : 1 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
             : 2 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0])
             : 3 == this.rotation &&
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]);
           if (1 == this.state) {
             var b = y.getTexture(this.textureID, "grass");
             this.entity.updateQuad(this.quadPositions[1], this.destination, new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
           } else this.entity.updateQuad(this.quadPositions[1], this.destination, new h(), new h(), new h());
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 2;
           null != b.states1 && "1" == E.string(b.states1) && (this.state = 1);
           this.isItem = !1;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.isItem = !0;
           this.state = 2;
           "dtg" == b[0] && (this.state = 1);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Sd,
       });
       var kc = function (b, a, c) {
         this.state = 2;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Piston"] = kc;
       kc.__name__ = "renderers.blocks.Q_Piston";
       kc.__super__ = X;
       kc.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           1 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : 2 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
             : 3 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0])
             : 4 == this.state &&
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]);
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           null != b.states1 && (this.state = E.parseInt(b.states1.toString()));
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: kc,
       });
       var pe = function (b, a, c) {
         kc.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Dispenser"] = pe;
       pe.__name__ = "renderers.blocks.Q_Dispenser";
       pe.__super__ = kc;
       pe.prototype = v(kc.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           1 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : 2 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1))
             : 3 == this.state
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
             : 4 == this.state &&
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]);
         },
         __class__: pe,
       });
       var cc = function (b, a, c) {
         this.flip = this.isItem = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Door"] = cc;
       cc.__name__ = "renderers.blocks.Q_Door";
       cc.__super__ = X;
       cc.prototype = v(X.prototype, {
         update: function () {
           this.isItem ? this.updateItem() : this.updateBlock();
         },
         updateBlock: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.flip
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1))
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         updateItem: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x + 0.25, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(0.5, 0.5));
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x + 0.25, this.destination.y + 0.5), new h(this.textureClip2.x, this.textureClip2.y), new h(this.textureClip2.width, this.textureClip2.height), new h(0.5, 0.5));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           "top" == q.get(b.type, "blockAssociation")
             ? (this.flip = Object.prototype.hasOwnProperty.call(m.Instance.game.world.states.h, "blockX" + b.x + "Y" + (b.y - 1)) && 2 == m.Instance.game.world.states.h["blockX" + b.x + "Y" + (b.y - 1)])
             : (this.flip = null != b.states1 && 2 == b.states1);
           this.isItem = !1;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.flip = !1;
           this.isItem = !0;
           this.textureClip = y.getTexture(this.textureID, "open_top");
           this.textureClip2 = y.getTexture(this.textureID, "open_bottom");
           return this;
         },
         __class__: cc,
       });
       var Nf = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_EnchantmentTable"] = Nf;
       Nf.__name__ = "renderers.blocks.Q_EnchantmentTable";
       Nf.__super__ = X;
       Nf.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           var b = y.getTexture("enchantment_table", "book_4");
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x, this.destination.y - 0.625, 0), new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
         },
         __class__: Nf,
       });
       var Ef = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_EnderPearl"] = Ef;
       Ef.__name__ = "renderers.blocks.Q_EnderPearl";
       Ef.__super__ = X;
       Ef.prototype = v(X.prototype, {
         fromItem: function (b) {
           null != b[3] && "teleporter" == E.string(g.makeDynamicMap(b[3]).h.nameChange).toLowerCase() ? (this.textureID = "teleporter") : this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Ef,
       });
       var vd = function (b, a, c) {
         this.worldLocation = new h(0, 0);
         this.attachLeft = this.attachRight = !0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Fence"] = vd;
       vd.__name__ = "renderers.blocks.Q_Fence";
       vd.__super__ = X;
       vd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           if (this.attachLeft != this.attachRight && y.hasTexture(this.textureID, "end") && 1 != q.get(m.Instance.game.world.getFG(this.worldLocation.x, this.worldLocation.y - 1), "walkThroughBlockHit"))
             (this.textureClip = y.getTexture(this.textureID, "end")),
               this.attachLeft
                 ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x + this.textureClip.width, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1))
                 : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           else {
             var b = this.textureClip.x + (this.attachLeft ? 0 : 0.4375) * this.textureClip.width,
               a = (1 - ((this.attachLeft ? 0 : 0.4375) + (this.attachRight ? 0 : 0.4375))) * this.textureClip.width,
               c = this.attachLeft ? 0 : 0.4375,
               d = this.attachRight ? 0 : 0.4375;
             this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x + (this.attachLeft ? 0 : 0.4375), this.destination.y), new h(b, this.textureClip.y), new h(a, this.textureClip.height), new h(1 - (c + d), 1));
           }
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.gateConnects = q.get(b.type, "blockAttach");
           this.worldLocation = new h(b.x, b.y);
           if (1 == q.get(m.Instance.game.world.getFG(b.x - 1, b.y), "walkThroughBlockHit")) {
             var a = this.gateConnects;
             var c = m.Instance.game.world.getFG(b.x - 1, b.y);
             a = !Object.prototype.hasOwnProperty.call(a.h, c);
           } else a = !1;
           this.attachLeft = a ? !1 : !0;
           1 == q.get(m.Instance.game.world.getFG(b.x + 1, b.y), "walkThroughBlockHit") ? ((a = this.gateConnects), (c = m.Instance.game.world.getFG(b.x + 1, b.y)), (a = !Object.prototype.hasOwnProperty.call(a.h, c))) : (a = !1);
           this.attachRight = a ? !1 : !0;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.attachLeft = this.attachRight = !0;
           this.gateConnects = q.get(b[0], "blockAttach");
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: vd,
       });
       var Ac = function (b, a, c) {
         this.randomTexture = "1";
         this.litBottom = this.litLeft = this.litRight = this.litTop = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Fire"] = Ac;
       Ac.__name__ = "renderers.blocks.Q_Fire";
       Ac.__super__ = X;
       Ac.prototype = v(X.prototype, {
         update: function () {
           if (0 == this.quadPositions.length) {
             var b = this.entity.nearestConsecutiveEmpty(4);
             this.quadPositions.push(b);
             this.quadPositions.push(b + 1);
             this.quadPositions.push(b + 2);
             this.quadPositions.push(b + 3);
             this.randomTexture = E.string(1 + Math.floor(4 * Math.random()));
           } else 0 == m.Instance.game.world.tick % 2 && (this.randomTexture = E.string(1 + Math.floor(4 * Math.random())));
           b = this.destination.x;
           var a = this.destination.y,
             c = y.getTexture(this.textureID, this.randomTexture);
           this.litTop
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(c.x, c.y), new h(c.width, c.height), null, [b + 1, a + 0.4, 0, b + 1, a, 0, b, a + 0.4, 0, b, a + 0.4, 0, b + 1, a, 0, b, a, 0], null, Ac.alphaReduction)
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(c.x, c.y), new h(c.width, c.height), new h());
           this.litLeft
             ? ((c = y.getTexture(this.textureID, E.string(1 + Math.floor(4 * Math.random())))),
               this.entity.updateQuad(
                 this.quadPositions[1],
                 this.destination,
                 new h(c.x, c.y),
                 new h(c.width, c.height),
                 null,
                 [b + 0.6, a - 0.3, 0, b, a, 0, b + 0.6, a + 1 - 0.3, 0, b + 0.6, a + 1 - 0.3, 0, b, a, 0, b, a + 1, 0],
                 null,
                 Ac.alphaReduction
               ))
             : this.entity.updateQuad(this.quadPositions[1], this.destination, new h(c.x, c.y), new h(c.width, c.height), new h());
           this.litRight
             ? ((c = y.getTexture(this.textureID, E.string(1 + Math.floor(4 * Math.random())))),
               this.entity.updateQuad(
                 this.quadPositions[2],
                 this.destination,
                 new h(c.x, c.y),
                 new h(c.width, c.height),
                 null,
                 [b + 0.4, a + 1 - 0.3, 0, b + 1, a + 1, 0, b + 0.4, a - 0.3, 0, b + 0.4, a - 0.3, 0, b + 1, a + 1, 0, b + 1, a, 0],
                 null,
                 Ac.alphaReduction
               ))
             : this.entity.updateQuad(this.quadPositions[2], this.destination, new h(c.x, c.y), new h(c.width, c.height), new h());
           this.litBottom
             ? ((c = y.getTexture(this.textureID, E.string(1 + Math.floor(4 * Math.random())))),
               this.entity.updateQuad(this.quadPositions[3], this.destination, new h(c.x, c.y), new h(c.width, c.height), new h(1, 1), null, null, Ac.alphaReduction))
             : this.entity.updateQuad(this.quadPositions[3], this.destination, new h(c.x, c.y), new h(c.width, c.height), new h());
         },
         setLit: function (b, a, c, d) {
           this.litBottom = b;
           this.litLeft = a;
           this.litRight = c;
           this.litTop = d;
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.hasFrameEvent = !0;
           this.litBottom = m.Instance.game.world.canBeOnFire(b.x, b.y - 1);
           this.litLeft = m.Instance.game.world.canBeOnFire(b.x - 1, b.y);
           this.litRight = m.Instance.game.world.canBeOnFire(b.x + 1, b.y);
           this.litTop = m.Instance.game.world.canBeOnFire(b.x, b.y + 1);
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.hasFrameEvent = !1;
           this.litBottom = !0;
           this.litTop = this.litRight = this.litLeft = !1;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Ac,
       });
       var oe = function (b, a, c) {
         this.inHand = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_FishingRod"] = oe;
       oe.__name__ = "renderers.blocks.Q_FishingRod";
       oe.__super__ = X;
       oe.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0], !0);
           this.textureClip = y.getTexture(this.textureID, this.inHand ? "using" : "");
           return this;
         },
         __class__: oe,
       });
       var gd = function (b, a, c) {
         this.isItem = !1;
         this.state = 0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_FrostedIce"] = gd;
       gd.__name__ = "renderers.blocks.Q_FrostedIce";
       gd.__super__ = X;
       gd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
           if (0 == this.state) this.entity.updateQuad(this.quadPositions[1], this.destination, new h(), new h(), new h());
           else {
             var b = y.getTexture("break", E.string(this.state + 1));
             this.entity.updateQuad(this.quadPositions[1], this.destination, new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
           }
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 0;
           null != b.states1 && (this.state = E.parseInt(b.states1.toString()));
           this.textureClip = y.getTexture(this.textureID);
           this.isItem = !1;
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.state = 2;
           this.textureClip = y.getTexture(this.textureID);
           this.isItem = !0;
           return this;
         },
         __class__: gd,
       });
       var Xe = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Furnace"] = Xe;
       Xe.__name__ = "renderers.blocks.Q_Furnace";
       Xe.__super__ = X;
       Xe.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = !1;
           null != b.toSmelt && Object.prototype.hasOwnProperty.call(H.__cast(b.toSmelt, e).h, "fuelTimer") && 0 < H.__cast(b.toSmelt, e).h.fuelTimer && (a = !0);
           this.textureClip = y.getTexture(this.textureID, a ? "on" : "off");
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "off");
           return this;
         },
         __class__: Xe,
       });
       var Xd = function (b, a, c) {
         this.attachLeft = this.attachRight = !0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Gate"] = Xd;
       Xd.__name__ = "renderers.blocks.Q_Gate";
       Xd.__super__ = X;
       Xd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           var b = this.textureClip.x + (this.attachLeft ? 0 : 0.1875) * this.textureClip.width,
             a = (1 - ((this.attachLeft ? 0 : 0.1875) + (this.attachRight ? 0 : 0.1875))) * this.textureClip.width,
             c = this.attachLeft ? 0 : 0.1875,
             d = this.attachRight ? 0 : 0.1875;
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x + (this.attachLeft ? 0 : 0.1875), this.destination.y), new h(b, this.textureClip.y), new h(a, this.textureClip.height), new h(1 - (c + d), 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.gateConnects = q.get(b.type, "blockAttach");
           if (1 == q.get(m.Instance.game.world.getFG(b.x - 1, b.y), "walkThroughBlockHit")) {
             var a = this.gateConnects;
             var c = m.Instance.game.world.getFG(b.x - 1, b.y);
             a = !Object.prototype.hasOwnProperty.call(a.h, c);
           } else a = !1;
           this.attachLeft = a ? !1 : !0;
           1 == q.get(m.Instance.game.world.getFG(b.x + 1, b.y), "walkThroughBlockHit") ? ((a = this.gateConnects), (c = m.Instance.game.world.getFG(b.x + 1, b.y)), (a = !Object.prototype.hasOwnProperty.call(a.h, c))) : (a = !1);
           this.attachRight = a ? !1 : !0;
           a = !1;
           if (null == b.states1 || 1 == b.states1) a = !0;
           this.textureClip = y.getTexture(this.textureID, a ? "open" : "closed");
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.attachLeft = this.attachRight = !0;
           this.gateConnects = q.get(b[0], "blockAttach");
           this.textureClip = y.getTexture(this.textureID, "open");
           return this;
         },
         __class__: Xd,
       });
       var zc = function (b, a, c) {
         this.rotation = this.width = this.alpha = 0;
         this.matrix = new T();
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_HealingCrystal"] = zc;
       zc.__name__ = "renderers.blocks.Q_HealingCrystal";
       zc.__super__ = X;
       zc.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(3)), this.quadPositions.push(this.quadPositions[0] + 1), this.quadPositions.push(this.quadPositions[0] + 2));
           var b = y.getTexture("ehc_beam");
           this.matrix
             .reset()
             .translate(0, -0.5)
             .scale(this.width, -0.64)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .translate(0.5, 0.5)
             .translate(this.destination.x, this.destination.y, this.destination.z);
           var a = this.entity,
             c = this.quadPositions[0],
             d = new h(b.x, b.y),
             f = new h(b.width, b.height),
             g = ba.quadMatrixHelper(new t(0, 0, 1, 1), this.matrix),
             k = [
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               0,
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               1,
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.width * m.Instance.game.zoom) / 256,
               0,
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.width * m.Instance.game.zoom) / 256,
               0,
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25,
               1,
               -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + 0.25 + (this.width * m.Instance.game.zoom) / 256,
               1,
             ],
             n = new e(),
             p = w.repeatArray([1, 1, 1, 0.5 * this.alpha], 6);
           n.h.color = p;
           a.updateQuad(c, null, d, f, null, g, k, n);
           this.matrix
             .reset()
             .translate(0, -0.5)
             .scale(this.width, 0.64)
             .rotate2D((-this.rotation / 180) * Math.PI)
             .translate(0.5, 0.5)
             .translate(this.destination.x, this.destination.y, this.destination.z);
           a = this.entity;
           c = this.quadPositions[1];
           d = new h(b.x, b.y);
           f = new h(b.width, b.height);
           g = ba.quadMatrixHelper(new t(0, 0, 1, 1), this.matrix);
           k = [
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25),
             0,
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25),
             1,
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.width * m.Instance.game.zoom) / 256,
             0,
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.width * m.Instance.game.zoom) / 256,
             0,
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25),
             1,
             -m.Instance.game.world.tick / ((40 * m.Instance.get_fps()) / 25) + (this.width * m.Instance.game.zoom) / 256,
             1,
           ];
           n = new e();
           p = w.repeatArray([1, 1, 1, this.alpha], 6);
           n.h.color = p;
           a.updateQuad(c, null, d, f, null, g, k, n);
           this.entity.updateQuad(this.quadPositions[2], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         __class__: zc,
       });
       var qc = function (b, a, c) {
         this.state2 = 0;
         this.state1 = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Lever"] = qc;
       qc.__name__ = "renderers.blocks.Q_Lever";
       qc.__super__ = X;
       qc.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           2 == this.state1
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0])
             : 3 == this.state1
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1])
             : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state1 = 1;
           this.state2 = 0;
           null != b.states1 && (this.state1 = E.parseInt(b.states1.toString()));
           null != b.states2 && (this.state2 = E.parseInt(b.states2.toString()));
           this.textureClip = y.getTexture(this.textureID, 0 < this.state2 ? "on" : "off");
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "off");
           return this;
         },
         __class__: qc,
       });
       var Lf = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_LilyPad"] = Lf;
       Lf.__name__ = "renderers.blocks.Q_LilyPad";
       Lf.__super__ = X;
       Lf.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1)), (this.flip = 0.5 > Math.random()));
           if (this.flip) {
             var b = this.textureClip.x + this.textureClip.width;
             this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y + 0.125), new h(b, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
           } else this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y + 0.125), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         __class__: Lf,
       });
       var Nc = function (b, a, c) {
         this.isItem = !1;
         this.liquidStates = 0;
         this.worldLocation = new h(0, 0);
         this.water = [10, 10];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Liquid"] = Nc;
       Nc.__name__ = "renderers.blocks.Q_Liquid";
       Nc.__super__ = X;
       Nc.prototype = v(X.prototype, {
         update: function () {
           if (0 == this.quadPositions.length) this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           else if (0 != m.Instance.game.world.tick % 4 && !this.isItem) return;
           if (this.isItem) this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width / 5, this.textureClip.height / 5), new h(1, 1));
           else {
             var b = this.destination.x,
               a = this.destination.y,
               c = this.textureClip,
               d = 0,
               e = 0;
             9 > this.water[0] && (d = Math.pow(1 - ((this.water[0] - (10 - this.liquidStates)) / (8 - (10 - this.liquidStates))) * 0.775, 0.5));
             9 > this.water[1] && (e = Math.pow(1 - ((this.water[1] - (10 - this.liquidStates)) / (8 - (10 - this.liquidStates))) * 0.775, 0.5));
             var g = (this.worldLocation.x % 4) * 0.25,
               k = ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25 + 0.25 * d,
               n = (this.worldLocation.x % 4) * 0.25,
               p = 0.25 + ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25,
               q = 0.25 + (this.worldLocation.x % 4) * 0.25,
               t = ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25 + 0.25 * e,
               r = 0.25 + (this.worldLocation.x % 4) * 0.25,
               w = ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25 + 0.25 * e,
               y = (this.worldLocation.x % 4) * 0.25,
               x = 0.25 + ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25,
               D = 0.25 + (this.worldLocation.x % 4) * 0.25,
               E = 0.25 + ((Math.floor(16 * -this.worldLocation.y - m.Instance.game.world.tick / 16) / 16) % 4) * 0.25;
             this.entity.updateQuad(
               this.quadPositions[0],
               new M(b, a),
               new h(c.x, c.y),
               new h(c.width, c.height),
               new h(1, 1),
               [b, a + d, 0, b, a + 1, 0, b + 1, a + e, 0, b + 1, a + e, 0, b, a + 1, 0, b + 1, a + 1, 0],
               [g, k, n, p, q, t, r, w, y, x, D, E]
             );
           }
         },
         setWater: function (b) {
           this.water[0] = b[0];
           this.water[1] = b[1];
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.hasFrameEvent = !0;
           null != b.water && (this.water = b.water);
           this.worldLocation = new h(b.x, b.y);
           this.liquidStates = q.get(b.type, "liquidStates");
           this.textureClip = y.getTexture(this.textureID);
           this.isItem = !1;
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.isItem = !0;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Nc,
       });
       var sf = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Magma"] = sf;
       sf.__name__ = "renderers.blocks.Q_Magma";
       sf.__super__ = X;
       sf.prototype = v(X.prototype, {
         update: function () {
           0 < this.quadPositions.length
             ? ((this.textureClip = y.getTexture(this.textureID, 1 + (Math.floor(m.Instance.game.world.tick / 20) % 4))),
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1)))
             : ((this.hasFrameEvent = !0),
               (this.textureClip = y.getTexture(this.textureID, 1 + (Math.floor(m.Instance.game.world.tick / 20) % 4))),
               this.quadPositions.push(this.entity.addQuad(this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), !0, new h(1, 1))));
         },
         __class__: sf,
       });
       var ge = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Minecart"] = ge;
       ge.__name__ = "renderers.blocks.Q_Minecart";
       ge.__super__ = X;
       ge.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x - 0.5, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(2, 1));
         },
         __class__: ge,
       });
       var Bd = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Minecart_Block"] = Bd;
       Bd.__name__ = "renderers.blocks.Q_Minecart_Block";
       Bd.__super__ = X;
       Bd.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y), new h(this.textureClipBlock.x, this.textureClipBlock.y), new h(this.textureClipBlock.width, this.textureClipBlock.height), new h(1, 1));
           this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x - 0.5, this.destination.y + 0.125), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(2, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID);
           this.textureClipBlock = y.getTexture(q.get(b[0], "secondaryTextureID"));
           return this;
         },
         __class__: Bd,
       });
       var se = function (b, a, c) {
         this.isItem = !1;
         this.dragonMPosition = 0;
         this.flipped = !1;
         this.variation = "default";
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_MobHead"] = se;
       se.__name__ = "renderers.blocks.Q_MobHead";
       se.__super__ = X;
       se.prototype = v(X.prototype, {
         update: function () {
           if (0 == this.quadPositions.length)
             if ("enderdragon" == this.variation) {
               var b = this.entity.nearestConsecutiveEmpty(3);
               this.quadPositions.push(b);
               this.quadPositions.push(b + 1);
               this.quadPositions.push(b + 2);
             } else this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           else if (!this.isItem) {
             this.frameEvent();
             return;
           }
           b = this.destination.x;
           var a = this.destination.y;
           if ("enderdragon" == this.variation)
             if (
               ((this.hasFrameEvent = !0),
               (this.jawMatrix = new T()),
               (this.pos = y.getTexture(this.textureID, this.variation + "_base")),
               (this.posJaw = y.getTexture(this.textureID, this.variation + "_jaw")),
               (this.posNose = y.getTexture(this.textureID, this.variation + "_nose")),
               this.flipped)
             ) {
               var c = this.pos.x + this.pos.width;
               this.entity.updateQuad(this.quadPositions[0], new M(b - 0.875, a), new h(c, this.pos.y), new h(-this.pos.width, this.pos.height), new h(2, 1));
               this.frameEvent();
               c = this.posNose.x + this.posNose.width;
               this.entity.updateQuad(this.quadPositions[2], new M(b - 0.875 + 1, a), new h(c, this.posNose.y), new h(-this.posNose.width, this.posNose.height), new h(1, 1));
             } else
               this.entity.updateQuad(this.quadPositions[0], new M(b - 0.125, a), new h(this.pos.x, this.pos.y), new h(this.pos.width, this.pos.height), new h(2, 1)),
                 this.frameEvent(),
                 this.entity.updateQuad(this.quadPositions[2], new M(b - 0.125, a), new h(this.posNose.x, this.posNose.y), new h(this.posNose.width, this.posNose.height), new h(1, 1));
           else this.loadFromTexture(this.variation);
         },
         fromBlock: function (b) {
           var a = this;
           this.setBlockTextureID(b.type);
           var c = (this.variation = "default");
           null != b.states1 && (this.variation = c = b.states1);
           switch (this.variation) {
             case "creeper":
             case "default":
             case "enderdragon":
             case "skeleton":
             case "zombie":
               break;
             default:
               (this.variation = "default"),
                 m.Instance.game.getMobHead(
                   c,
                   function () {
                     a.variation = c;
                     a.loadFromTexture(c);
                   },
                   null,
                   function () {
                     c = a.variation = "default";
                     a.loadFromTexture("default");
                   }
                 );
           }
           this.flipped = !1;
           null != b.states2 && (this.flipped = 2 == b.states2);
           this.isItem = !1;
           this.worldLocation = new h(b.x, b.y);
           return this;
         },
         fromItem: function (b) {
           var a = this;
           this.setBlockTextureID(b[0]);
           var c = this.variation,
             d = (this.variation = "default");
           null != b[3] && (this.variation = d = H.__cast(b[3], e).h.type);
           c != this.variation && this.destroy();
           switch (this.variation) {
             case "creeper":
             case "default":
             case "enderdragon":
             case "skeleton":
             case "zombie":
               break;
             default:
               (this.variation = "default"),
                 m.Instance.game.getMobHead(
                   d,
                   function () {
                     a.variation = d;
                     a.destroy();
                     a.loadFromTexture(d);
                   },
                   null,
                   function () {
                     d = a.variation = "default";
                     a.destroy();
                     a.loadFromTexture("default");
                   }
                 );
           }
           this.isItem = !0;
           this.dragonMPosition = 0;
           this.flipped = !1;
           return this;
         },
         updateMouth: function (b) {
           null == b && (b = 0);
           this.dragonMPosition = 50 * b;
           this.frameEvent();
         },
         loadFromTexture: function (b) {
           if (0 != this.quadPositions.length)
             if (((b = y.getTexture(this.textureID, b)), this.flipped)) {
               var a = b.x + b.width,
                 c = (1 / b.width) * b.height * 1.4976;
               this.entity.updateQuad(
                 this.quadPositions[0],
                 new M(this.destination.x - 0.24880000000000002, this.destination.y + (1 - b.height / b.width) - (b.height / b.width) * 0.49760000000000004),
                 new h(a, b.y),
                 new h(-b.width, b.height),
                 new h(1.4976, c)
               );
             } else
               (a = (1 / b.width) * b.height * 1.4976),
                 this.entity.updateQuad(
                   this.quadPositions[0],
                   new M(this.destination.x - 0.24880000000000002, this.destination.y + (1 - b.height / b.width) - (b.height / b.width) * 0.49760000000000004),
                   new h(b.x, b.y),
                   new h(b.width, b.height),
                   new h(1.4976, a)
                 );
         },
         frameEvent: function () {
           if ("enderdragon" == this.variation) {
             if (null != this.worldLocation) {
               if (0 < m.Instance.game.world.getSignal(this.worldLocation.x, this.worldLocation.y - 1) || 0 < m.Instance.game.world.getSignal(this.worldLocation.x + (this.flipped ? 1 : -1), this.worldLocation.y)) {
                 var b = Math.max(m.Instance.game.world.getSignal(this.worldLocation.x, this.worldLocation.y - 1), m.Instance.game.world.getSignal(this.worldLocation.x + (this.flipped ? 1 : -1), this.worldLocation.y));
                 this.dragonMPosition += b / 8;
               } else 0 != Math.floor(this.dragonMPosition) && (this.dragonMPosition = 25 > this.dragonMPosition ? this.dragonMPosition - 0.5 : this.dragonMPosition + 0.5);
               50 <= this.dragonMPosition && (this.dragonMPosition %= 50);
             }
             if (this.flipped) {
               this.jawMatrix
                 .reset()
                 .scale(1, 1)
                 .translate(-0.25, -0.875)
                 .rotate(-0.08333333333333333 * Math.PI * (0.5 * Math.sin((this.dragonMPosition / 50) * Math.PI * 2 + (3 * Math.PI) / 2) + 0.5), new M(0, 0, 1))
                 .translate(0.25, 0.875)
                 .translate(this.destination.x - 0.875 + 1, this.destination.y);
               b = this.jawMatrix.apply(new M());
               var a = this.jawMatrix.apply(new M(0, 1)),
                 c = this.jawMatrix.apply(new M(1, 0)),
                 d = this.jawMatrix.apply(new M(1, 1));
               this.entity.updateQuad(this.quadPositions[1], null, new h(this.posJaw.x + this.posJaw.width, this.posJaw.y), new h(-this.posJaw.width, this.posJaw.height), null, [
                 b.x,
                 b.y,
                 0,
                 a.x,
                 a.y,
                 0,
                 c.x,
                 c.y,
                 0,
                 c.x,
                 c.y,
                 0,
                 a.x,
                 a.y,
                 0,
                 d.x,
                 d.y,
                 0,
               ]);
             } else
               this.jawMatrix
                 .reset()
                 .scale(1, 1)
                 .translate(-0.75, -0.875)
                 .rotate(0.08333333333333333 * Math.PI * (0.5 * Math.sin((this.dragonMPosition / 50) * Math.PI * 2 + (3 * Math.PI) / 2) + 0.5), new M(0, 0, 1))
                 .translate(0.75, 0.875)
                 .translate(this.destination.x - 0.125, this.destination.y),
                 (b = this.jawMatrix.apply(new M())),
                 (a = this.jawMatrix.apply(new M(0, 1))),
                 (c = this.jawMatrix.apply(new M(1, 0))),
                 (d = this.jawMatrix.apply(new M(1, 1))),
                 this.entity.updateQuad(this.quadPositions[1], null, new h(this.posJaw.x, this.posJaw.y), new h(this.posJaw.width, this.posJaw.height), null, [b.x, b.y, 0, a.x, a.y, 0, c.x, c.y, 0, c.x, c.y, 0, a.x, a.y, 0, d.x, d.y, 0]);
           }
         },
         __class__: se,
       });
       var uf = function (b, a, c) {
         this.isItem = !1;
         this.worldLocation = new h(0, 0);
         this.rotSpeed = 0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Portal"] = uf;
       uf.__name__ = "renderers.blocks.Q_Portal";
       uf.__super__ = X;
       uf.prototype = v(X.prototype, {
         update: function () {
           if (0 == this.quadPositions.length) {
             var b = this.entity.nearestConsecutiveEmpty(2);
             this.quadPositions.push(b);
             this.quadPositions.push(b + 1);
           } else if (!this.isItem) {
             this.frameEvent();
             return;
           }
           this.textureClip = y.getTexture(this.textureID);
           b = y.getTexture(this.textureID, "gradient");
           this.rotSpeed = (((0 == (this.worldLocation.x + this.worldLocation.y) % 2 ? -3 : 3) / 180) * Math.PI) / 2;
           var a = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed),
             c = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed),
             d = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             e = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             g = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             k = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             n = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             p = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             q = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             t = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             r = 0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI),
             w = 0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI);
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [
             a,
             c,
             d,
             e,
             g,
             k,
             n,
             p,
             q,
             t,
             r,
             w,
           ]);
           this.isItem
             ? this.entity.updateQuad(this.quadPositions[1], new M(), new h(), new h())
             : this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x, this.destination.y - 1), new h(b.x, b.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         frameEvent: function () {
           this.entity.updateQuad(this.quadPositions[0], null, null, null, null, null, [
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed),
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + (3 * Math.PI) / 2),
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI / 2),
             0.5 + 0.5 * Math.cos(m.Instance.game.world.tick * this.rotSpeed + Math.PI),
             0.5 + 0.5 * Math.sin(m.Instance.game.world.tick * this.rotSpeed + Math.PI),
           ]);
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.hasFrameEvent = !0;
           null != b.x && (this.worldLocation.x = b.x);
           null != b.y && (this.worldLocation.y = b.y);
           this.textureClip = y.getTexture(this.textureID);
           this.isItem = !1;
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.isItem = !0;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: uf,
       });
       var Gf = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_PortalFrame"] = Gf;
       Gf.__name__ = "renderers.blocks.Q_PortalFrame";
       Gf.__super__ = X;
       Gf.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "";
           null != b.states1 && 2 == b.states1 && (a = "eye");
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         __class__: Gf,
       });
       var Sf = function (b, a, c) {
         this.splash = !1;
         this.colorUV = [];
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Potion"] = Sf;
       Sf.__name__ = "renderers.blocks.Q_Potion";
       Sf.__super__ = X;
       Sf.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           if (0 < this.colorUV.length) {
             var b = this.quadPositions[0],
               a = new h(this.textureClipContents.x, this.textureClipContents.y),
               c = new h(this.textureClipContents.width, this.textureClipContents.height),
               d = new h(1, 1),
               f = new e();
             f.h.color = this.colorUV;
             this.entity.updateQuad(b, this.destination, a, c, d, null, null, f);
           } else this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClipContents.x, this.textureClipContents.y), new h(), new h());
           this.entity.updateQuad(this.quadPositions[1], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.splash = !1;
           if (null != b[3]) {
             var a = H.__cast(b[3], e).h.type;
             b = H.__cast(b[3], e).h.category;
             null != a && Object.prototype.hasOwnProperty.call(m.Instance.game.potionData.h, a)
               ? (this.colorUV = "empty" == a ? w.repeatArray([0, 0, 0, 0], 6) : w.repeatArray([m.Instance.game.potionData.h[a].h.r, m.Instance.game.potionData.h[a].h.g, m.Instance.game.potionData.h[a].h.b, 1], 6))
               : (this.colorUV = w.repeatArray([0, 0, 0, 0], 6));
             this.splash = "splash" == b;
           }
           this.textureClip = y.getTexture(this.textureID, this.splash ? "splash" : "");
           this.textureClipContents = y.getTexture(this.textureID, (this.splash ? "splash_" : "") + "contents");
           return this;
         },
         __class__: Sf,
       });
       var ae = function (b, a, c) {
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Pumpkin"] = ae;
       ae.__name__ = "renderers.blocks.Q_Pumpkin";
       ae.__super__ = X;
       ae.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           if (1 == this.state)
             this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1)),
               this.entity.updateQuad(this.quadPositions[1], this.destination, new h(), new h(), new h());
           else {
             var b = y.getTexture(this.textureID, "face_" + (this.state - 1));
             this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
             this.entity.updateQuad(this.quadPositions[1], this.destination, new h(b.x, b.y), new h(b.width, b.height), new h(1, 1));
           }
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           null != b.states1 && (this.state = E.parseInt(b.states1.toString()));
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: ae,
       });
       var id = function (b, a, c) {
         this.powered = !1;
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Rail"] = id;
       id.__name__ = "renderers.blocks.Q_Rail";
       id.__super__ = X;
       id.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           if (2 == this.state) {
             var b = this.textureClip.x + this.textureClip.width;
             this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y - 0.13333333333333333), new h(b, this.textureClip.y), new h(-this.textureClip.width, this.textureClip.height), new h(1, 1));
           } else
             3 == this.state
               ? this.entity.updateQuad(
                   this.quadPositions[0],
                   new M(this.destination.x, this.destination.y - 0.13333333333333333),
                   new h(this.textureClip.x, this.textureClip.y),
                   new h(this.textureClip.width, this.textureClip.height),
                   new h(1, 1)
                 )
               : this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 1;
           if (null != b.states1) {
             var a = b.states1;
             this.state = E.parseInt(a[0].toString());
             1 == q.get(b.type, "poweredTypeRail") && (this.powered = 0 < a[1][0]);
           }
           this.textureClip = y.getTexture(this.textureID, (this.powered ? "on_" : "off_") + (1 == this.state ? "straight" : "slope"));
           return this;
         },
         __class__: id,
       });
       var ud = function (b, a, c) {
         this.rotation = 0;
         this.isItem = !1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_RandomRotation"] = ud;
       ud.__name__ = "renderers.blocks.Q_RandomRotation";
       ud.__super__ = X;
       ud.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1)), (this.rotation = Math.floor(4 * Math.random())));
           this.isItem || 0 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1))
             : 1 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0])
             : 2 == this.rotation
             ? this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0])
             : 3 == this.rotation &&
               this.entity.updateQuad(this.quadPositions[0], this.destination, new h(this.textureClip.x, this.textureClip.y), new h(this.textureClip.width, this.textureClip.height), new h(1, 1), null, [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]);
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.isItem = !0;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: ud,
       });
       var Re = function (b, a, c) {
         this.colorMultiplier = 1;
         this.power = 0;
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Redstone"] = Re;
       Re.__name__ = "renderers.blocks.Q_Redstone";
       Re.__super__ = X;
       Re.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           if (3 == this.state)
             var b = this.entity,
               a = this.quadPositions[0],
               c = this.destination,
               d = new h(this.textureClip.x + this.textureClip.width, this.textureClip.y),
               f = new h(-this.textureClip.width, this.textureClip.height),
               g = new h(1, 1),
               k = new e(),
               m = w.repeatArray([this.colorMultiplier, 1, 1, 1], 6);
           else
             (b = this.entity),
               (a = this.quadPositions[0]),
               (c = this.destination),
               (d = new h(this.textureClip.x, this.textureClip.y)),
               (f = new h(this.textureClip.width, this.textureClip.height)),
               (g = new h(1, 1)),
               (k = new e()),
               (m = w.repeatArray([this.colorMultiplier, 1, 1, 1], 6));
           k.h.color = m;
           b.updateQuad(a, c, d, f, g, null, null, k);
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           1 == q.get(m.Instance.game.world.getFG(b.x - 1, b.y + 1), "walkThroughBlock") && "rsd" == m.Instance.game.world.getFG(b.x - 1, b.y + 1)
             ? 1 == q.get(m.Instance.game.world.getFG(b.x + 1, b.y + 1), "walkThroughBlock") && "rsd" == m.Instance.game.world.getFG(b.x + 1, b.y + 1)
               ? (this.state = 4)
               : (this.state = 2)
             : 1 == q.get(m.Instance.game.world.getFG(b.x + 1, b.y + 1), "walkThroughBlock") && "rsd" == m.Instance.game.world.getFG(b.x + 1, b.y + 1)
             ? (this.state = 3)
             : (this.state = 1);
           this.power = null != b.hasSignal ? b.hasSignal[0] / 10 : 0;
           this.colorMultiplier = 0 < this.power ? 0.5 * this.power + 0.5 : 0.4;
           this.textureClip = y.getTexture(this.textureID, 1 == this.state ? "floor" : 4 == this.state ? "walls" : "wall");
           return this;
         },
         __class__: Re,
       });
       var Bf = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_RedstoneLamp"] = Bf;
       Bf.__name__ = "renderers.blocks.Q_RedstoneLamp";
       Bf.__super__ = X;
       Bf.prototype = v(X.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = !1;
           null != b.hasSignal && 0 != b.hasSignal[0] && (a = !0);
           this.textureClip = y.getTexture(this.textureID, a ? "on" : "off");
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.textureClip = y.getTexture(this.textureID, "off");
           return this;
         },
         __class__: Bf,
       });
       var yd = function (b, a, c) {
         yb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Rope"] = yd;
       yd.__name__ = "renderers.blocks.Q_Rope";
       yd.__super__ = yb;
       yd.prototype = v(yb.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           1 == q.get(m.Instance.game.world.getFG(b.x, b.y + 1), "walkThroughBlock") && "rp" != m.Instance.game.world.getFG(b.x, b.y + 1)
             ? 1 == q.get(m.Instance.game.world.getFG(b.x + 1, b.y), "walkThroughBlock")
               ? (this.state = 3)
               : (this.state = 2)
             : (this.state = 1);
           this.textureClip = y.getTexture(this.textureID, 2 == this.state || 3 == this.state ? "wall" : "straight");
           return this;
         },
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           this.state = 1;
           this.textureClip = y.getTexture(this.textureID, "straight");
           return this;
         },
         __class__: yd,
       });
       var yf = function (b, a, c) {
         Fb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Shrub"] = yf;
       yf.__name__ = "renderers.blocks.Q_Shrub";
       yf.__super__ = Fb;
       yf.prototype = v(Fb.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           var a = "";
           "sd" == m.Instance.game.world.getFG(b.x, b.y - 1) && (a = "desert");
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         __class__: yf,
       });
       var Mb = function (b, a, c) {
         this.isItem = !1;
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Slab"] = Mb;
       Mb.__name__ = "renderers.blocks.Q_Slab";
       Mb.__super__ = X;
       Mb.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           var b = this.textureClip.x,
             a = this.textureClip.y + (1 == this.state ? 0.5 : 0) * this.textureClip.height,
             c = this.textureClip.width,
             d = this.textureClip.height / 2;
           this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y + (1 == this.state ? 0.5 : 0) + (this.isItem ? -0.25 : 0)), new h(b, a), new h(c, d), new h(1, 0.5));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 2;
           if (null == b.states1 || 1 == b.states1) this.state = 1;
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         fromItem: function (b) {
           this.isItem = !0;
           return X.prototype.fromItem.call(this, b);
         },
         __class__: Mb,
       });
       var Of = function (b, a, c) {
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_SpawnEgg"] = Of;
       Of.__name__ = "renderers.blocks.Q_SpawnEgg";
       Of.__super__ = X;
       Of.prototype = v(X.prototype, {
         fromItem: function (b) {
           this.setBlockTextureID(b[0]);
           var a = "";
           null != b[3] && ((b = H.__cast(b[3], e).h.type), y.hasTexture(this.textureID, b) && (a = b));
           this.textureClip = y.getTexture(this.textureID, a);
           return this;
         },
         __class__: Of,
       });
       var Nb = function (b, a, c) {
         this.state = 1;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_Stairs"] = Nb;
       Nb.__name__ = "renderers.blocks.Q_Stairs";
       Nb.__super__ = X;
       Nb.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && (this.quadPositions.push(this.entity.nearestConsecutiveEmpty(2)), this.quadPositions.push(this.quadPositions[0] + 1));
           if (1 == this.state) {
             var b = this.textureClip.x + 0.5 * this.textureClip.width,
               a = this.textureClip.width / 2,
               c = this.textureClip.height / 2;
             this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x + 0.5, this.destination.y), new h(b, this.textureClip.y), new h(a, c), new h(0.5, 0.5));
             b = this.textureClip.x;
             a = this.textureClip.y + 0.5 * this.textureClip.height;
             c = this.textureClip.width;
             var d = this.textureClip.height / 2;
             this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x, this.destination.y + 0.5), new h(b, a), new h(c, d), new h(1, 0.5));
           } else
             2 == this.state
               ? ((b = this.textureClip.width / 2),
                 (a = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(b, a), new h(0.5, 0.5)),
                 (b = this.textureClip.x),
                 (a = this.textureClip.y + 0.5 * this.textureClip.height),
                 (c = this.textureClip.width),
                 (d = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x, this.destination.y + 0.5), new h(b, a), new h(c, d), new h(1, 0.5)))
               : 3 == this.state
               ? ((b = this.textureClip.width),
                 (a = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(b, a), new h(1, 0.5)),
                 (b = this.textureClip.x + 0.5 * this.textureClip.width),
                 (a = this.textureClip.y + 0.5 * this.textureClip.height),
                 (c = this.textureClip.width / 2),
                 (d = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x + 0.5, this.destination.y + 0.5), new h(b, a), new h(c, d), new h(0.5, 0.5)))
               : 4 == this.state &&
                 ((b = this.textureClip.width),
                 (a = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[0], new M(this.destination.x, this.destination.y), new h(this.textureClip.x, this.textureClip.y), new h(b, a), new h(1, 0.5)),
                 (b = this.textureClip.x),
                 (a = this.textureClip.y + 0.5 * this.textureClip.height),
                 (c = this.textureClip.width / 2),
                 (d = this.textureClip.height / 2),
                 this.entity.updateQuad(this.quadPositions[1], new M(this.destination.x, this.destination.y + 0.5), new h(b, a), new h(c, d), new h(0.5, 0.5)));
         },
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 1;
           null != b.states1 && (this.state = E.parseInt(b.states1.toString()));
           this.textureClip = y.getTexture(this.textureID);
           return this;
         },
         __class__: Nb,
       });
       var de = function (b, a, c) {
         this.fusePercentage = 0;
         X.call(this, b, a, c);
       };
       r["renderers.blocks.Q_TNT"] = de;
       de.__name__ = "renderers.blocks.Q_TNT";
       de.__super__ = X;
       de.prototype = v(X.prototype, {
         update: function () {
           0 == this.quadPositions.length && this.quadPositions.push(this.entity.nearestConsecutiveEmpty(1));
           var b = 0 == Math.floor((100 * this.fusePercentage) / 5) % 2 ? 1 : 1.3,
             a = 1 + 0.5 * w.clamp(0, 1, (this.fusePercentage - 0.8) / 0.2),
             c = this.entity,
             d = this.quadPositions[0],
             f = new M(this.destination.x - (a - 1) / 2, this.destination.y - (a - 1) / 2, this.destination.z),
             g = new h(this.textureClip.x, this.textureClip.y),
             k = new h(this.textureClip.width, this.textureClip.height);
           a = new h(a, a);
           var m = new e();
           b = w.repeatArray([b, b, b, 1], 6);
           m.h.color = b;
           c.updateQuad(d, f, g, k, a, null, null, m);
         },
         __class__: de,
       });
       var hd = function (b, a, c) {
         this.powered = !0;
         yb.call(this, b, a, c);
       };
       r["renderers.blocks.Q_TorchRedstone"] = hd;
       hd.__name__ = "renderers.blocks.Q_TorchRedstone";
       hd.__super__ = yb;
       hd.prototype = v(yb.prototype, {
         fromBlock: function (b) {
           this.setBlockTextureID(b.type);
           this.state = 1;
           null != b.states1 && (this.state = b.states1);
           this.powered = !0;
           2 == this.state
             ? 0 != m.Instance.game.world.getSignal(b.x - 1, b.y) && (this.powered = !1)
             : 3 == this.state
             ? 0 != m.Instance.game.world.getSignal(b.x + 1, b.y) && (this.powered = !1)
             : 0 != m.Instance.game.world.getSignal(b.x, b.y - 1) && (this.powered = !1);
           this.textureClip = y.getTexture(this.textureID, (2 == this.state || 3 == this.state ? "wall_" : "floor_") + (this.powered ? "on" : "off"));
           return this;
         },
         __class__: hd,
       });
       var lh = function (b) {
         this.scrollPosition = 0;
         this.fadeDirection = !0;
         this.titleWidth = this.fade = 0;
         this.titleHeight = 78;
         this.scene = b;
         var a = this.titleHeight * P.getImage("title_logo").width,
           c = P.getImage("title_logo").height;
         this.titleWidth = G.toFloat(a) / G.toFloat(c);
         this.backgroundEntity = new ma([], ba.createQuad(1, 1), Na.getShader());
         this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(b.get_width(), b.get_height());
         Na.setupEntity(this.backgroundEntity, P.getImage("stone_brick_blur"));
         this.backgroundEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.backgroundEntity.isTransparent = !0;
         this.backgroundEntity.layer = -2;
         this.vignetteEntity = new ma([], ba.createQuad(1, 1), ob.getShader());
         ob.setupEntity(this.vignetteEntity, [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], new F(0), new F(-1543503872), new t(0.5, 0.5, 0, 0.6));
         this.vignetteEntity.isTransparent = !0;
         this.vignetteEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.DST_ALPHA, p.gl.ONE];
         this.vignetteEntity.transform.reset().translate(0.5, 0.5).scale(b.get_width(), b.get_height());
         this.vignetteEntity.layer = -1;
         this.fadeInEntity = new ma([], ba.createQuad(1, 1), Ub.getShader());
         this.fadeInEntity.isTransparent = !0;
         this.fadeInEntity.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.DST_ALPHA, p.gl.ONE];
         this.fadeInEntity.transform.reset().translate(0.5, 0.5).scale(b.get_width(), b.get_height());
         this.fadeInEntity.layer = 1;
       };
       r["screens.Menu_EnderCredits"] = lh;
       lh.__name__ = "screens.Menu_EnderCredits";
       lh.prototype = {
         resize: function () {
           this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.vignetteEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           this.fadeInEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
         },
         run: function (b) {
           if (this.fadeDirection) {
             if (1 > this.fade) this.fade += 1 / ((30 * m.Instance.get_fps()) / 25);
             else if (1 == m.Instance.keyDown(27) || 1 == m.Instance.keyDown(13)) this.fadeDirection = !1;
             -800 > this.scrollPosition && (this.fadeDirection = !1);
           } else 0 < this.fade ? (this.fade -= 1 / ((30 * m.Instance.get_fps()) / 25)) : m.Instance.set_frame("game");
           this.backgroundEntity.setUniform("texClip", [0, (b / 158) * 32, this.scene.get_width(), this.scene.get_height()]);
           this.scene.draw(this.backgroundEntity);
           this.scene.draw(this.vignetteEntity);
           this.scrollPosition -= 1 / (m.Instance.get_fps() / 25);
           b = this.scene;
           var a = P.getImage("title_logo"),
             c = new h(this.scene.get_width() / 2 - this.titleWidth / 2, this.scene.get_height() + (this.scrollPosition * this.scene.get_height()) / 414),
             d = this.titleHeight,
             e = P.getImage("title_logo").height;
           b.draw2D(a, c, null, null, null, null, G.toFloat(d) / G.toFloat(e));
           b = R.get(
             "endCredits",
             "Congratulations!\n\nYou have restored peace in The\nEnder. You have done what is\nright. The endermen were in need\nand they couldn't ask for your\nhelp, but now, the ender dragon is\ngone and the lives of the\nendermen have been restored. No\nlonger will they stare into your\neyes and hope for belief.\n\nThis benevolent act of heroism will\nstay with you forever. However,\nyour adventure does not end\nhere. The story will always\ncontinue...\n\nTo be continued...",
             new h(this.scene.get_width() / 2 - this.titleWidth / 2 + 20, this.scene.get_height() + 100 + (this.scrollPosition * this.scene.get_height()) / 414),
             x.get_volter(),
             F.white,
             2.1
           );
           this.scene.draw(b);
           this.fadeInEntity.setUniform("color", [0, 0, 0, 1 - this.fade]);
           this.scene.draw(this.fadeInEntity);
         },
         __class__: lh,
       };
       var nd = function (b) {
         this.errorTimer = 0;
         this.error = "";
         this.worldIDsToRestore = [];
         this.waitingForSave = !1;
         this.worldsBackedUp = this.totalWorlds = this.worldsFailed = 0;
         this.savingBackup = this.loadingBackup = !1;
         this.replaceSettings = !0;
         this.duplicateWorldOptionDisabled = !1;
         this.duplicateWorldOption = "add";
         this.textInstance = 0;
         this.loadBackupFrame = 1;
         this.backupSaveText = this.backupLoadText = this.backupLoadText2 = "";
         this.faqScrollPosition = this.faqScrollMouseOffset = 0;
         this.useBonusChest = !1;
         this.cheatsEnabled = !0;
         this.useCheats = !1;
         this.gameType = "survival";
         this.worldSeed = "";
         this.worldName = "New World";
         this.deleteAnimation = 0;
         this.newerUpdateConfirmation = this.deleteAnimationEnabled = !1;
         this.worldToSelect = "";
         this.selectedWorldListIndex = 0;
         this.worldListStrings = [];
         this.orderedWorldList = [];
         this.currentFrame = 1;
         this.pickCrackPosition = new h();
         this.jumper1Rotation = this.jumper2Rotation = this.jumper1Time = this.jumper2Time = this.mouseAnimation = 0;
         this.versionDialogFrame = 1;
         this.newsURL = "";
         this.scene = b;
         this.titleHeight = 78;
         var a = this.titleHeight * P.getImage("title_logo").width,
           c = P.getImage("title_logo").height;
         this.titleWidth = G.toFloat(a) / G.toFloat(c);
         this.titleDropShadow = new fb(0, 0);
         this.titleDropShadow.setup2D(this.titleWidth + 30, this.titleHeight + 30, new F(0));
         b = this.titleDropShadow;
         var d = P.getImage("title_logo"),
           f = new h(15, 15),
           g = new F(-872415232);
         a = this.titleHeight;
         c = P.getImage("title_logo").height;
         b.draw2D(d, f, null, null, g, null, G.toFloat(a) / G.toFloat(c));
         this.titleDropShadowImage = new sa().fromScene(this.titleDropShadow);
         this.titleDropShadowImage = this.titleDropShadowImage.blurFilter(15, 15);
         this.mainMenuButtonEntity = new da(P.getImage("ui"));
         this.mainMenuButtonEntity.add9Slice(new t(), new t(), new t());
         this.mainMenuButtonShadow = new da(P.getImage("ui"));
         this.mainMenuButtonShadow.add9Slice(new t(), new t(), new t());
         this.mainMenuButtonShadow.isTransparent = !0;
         this.blackBoxWithRadius = new da(P.getImage("ui"));
         this.blackBoxWithRadius.add9Slice(new t(), new t(), new t());
         this.blackBoxWithRadius.isTransparent = !0;
         this.jumperBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         null == this.jumpTexts && this.setJumpTexts();
         this.jumper1 = new nc(x.get_volter(), "", new F(-16711936));
         this.jumper1Scene = new fb(0, 0);
         this.jumper1Scene.setup2D(220, 30, new F(65280));
         this.jumper1BlurImage = new sa().fromScene(this.jumper1Scene);
         this.resetJumper1();
         this.jumper2 = new nc(x.get_volter(), "", new F(-16711936));
         this.jumper2Scene = new fb(0, 0);
         this.jumper2Scene.setup2D(220, 30, new F(65280));
         this.jumper2BlurImage = new sa().fromScene(this.jumper2Scene);
         this.resetJumper2();
         this.pickCrackEntity = new da(P.getImage("pick_crack"));
         this.pickCrackEntity.isTransparent = !0;
         this.pickCrackEntity.layer = 31;
         this.pickCrackEntity.customBlendFunc = [p.gl.ONE, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         b = P.getImage("ui");
         d = Fa.getShader(xa.NORMAL);
         a = new e();
         c = w.repeatArray([1], 24);
         a.h.color = c;
         c = w.repeatArray([0], 24);
         a.h.colorOffset = c;
         this.buttonEntity = new da(b, null, d, a);
         this.buttonEntity.isTransparent = !0;
         b = P.getImage("ui");
         d = Fa.getShader(xa.NORMAL);
         a = new e();
         c = w.repeatArray([1], 24);
         a.h.color = c;
         c = w.repeatArray([0], 24);
         a.h.colorOffset = c;
         this.buttonEntityForTheDeleteButton = new da(b, null, d, a);
         this.buttonEntityForTheDeleteButton.layer = 3;
         this.buttonEntityForTheDeleteButton.isTransparent = !0;
         b = P.getImage("ui");
         d = Fa.getShader(xa.NORMAL);
         a = new e();
         c = w.repeatArray([1], 24);
         a.h.color = c;
         c = w.repeatArray([0], 24);
         a.h.colorOffset = c;
         this.dialog = new da(b, null, d, a);
         this.dialog.layer = 5;
         this.dialog.isTransparent = !0;
         this.dialog.customBlendFunc = [p.gl.SRC_ALPHA, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
       };
       r["screens.Menu_Main"] = nd;
       nd.__name__ = "screens.Menu_Main";
       nd.prototype = {
         setJumpTexts: function (b) {
           if (null != b) this.jumpTexts = b;
           else {
             var a = new Date();
             b = a.getDate();
             var c = a.getMonth() + 1;
             a = a.getFullYear();
             this.jumpTexts =
               25 == b && 12 == c
                 ? ["Merry", "Christmas", "Ho Ho Ho", "Coal please"]
                 : 3 == b && 9 == c
                 ? ["Happy", "Birthday", "Zanzlanz", a - 1996]
                 : 1 == b && 1 == c
                 ? ["Happy", "New", "Year", a]
                 : 1 == b && 4 == c
                 ? ["Happy", "April", "Fools"]
                 : 1 == b && 6 == c
                 ? ["Happy", "Birthday", "Notch", a - 1979]
                 : "Now in Haxe;Beta;Flash free;Also try Minecraft;Also try Terraria;Sheep stache;Notch;Chicken shades;Neatobuckets;Pixels;Now in low-res;Now in 2D;Hay there;Darude;Drop the beet;Fishy fishy;Woof;Whee;Oooh;Aaah;Cake;Pie;Lemons;Lol;Enchanting;Afro;:);Mooshrooms;Rotten flesh;Rawr;Flaming chickens;Minecraft;Terraria;Dragons;Spooky;Odd;WOOHOO;Redstone;Dungeons;Ssssss;Oink;Moo;1.30.3b_1;Zanzlanz;Mine Blocks;Dirt;Lava;Jumping text;Cactus cake;Hearts;Caves;Mine;Blocks;Craft;World;Ender;Nether;Diamonds;Iron;Coal;Gold".split(
                     ";"
                   );
           }
         },
         setNews: function (b, a) {
           this.newsURL = a;
           this.newsLoaderBG = new nc(x.get_volter(), "", new F(-16777216));
           this.newsLoaderBG.setText(b);
           this.newsLoaderBG.transform
             .reset()
             .scale(2, 2, 2)
             .translate(this.scene.get_width() / 2 - (this.newsLoaderBG.calculatedWidth / 2) * 2, 108);
           this.newsLoader = new nc(x.get_volter(), "", new F(-2302756));
           this.newsLoader.setText(b);
           this.newsLoader.transform
             .reset()
             .scale(2, 2, 2)
             .translate(this.scene.get_width() / 2 - (this.newsLoader.calculatedWidth / 2) * 2, 106);
         },
         resize: function () {
           null != this.newsLoaderBG &&
             (this.newsLoaderBG.transform
               .reset()
               .scale(2, 2, 2)
               .translate(this.scene.get_width() / 2 - (this.newsLoaderBG.calculatedWidth / 2) * 2, 108),
             this.newsLoader.transform
               .reset()
               .scale(2, 2, 2)
               .translate(this.scene.get_width() / 2 - (this.newsLoader.calculatedWidth / 2) * 2, 106));
         },
         gotoAndStop: function (b) {
           this.currentFrame = b;
           2 == b
             ? ((this.newerUpdateConfirmation = !1), this.updateWorldList())
             : 3 == b
             ? ((this.worldName = "New World"),
               null != W.fields.h.worldName && W.fields.h.worldName.input.set_text(this.worldName),
               (this.worldSeed = E.string(Math.floor(1e6 * Math.random()))),
               null != W.fields.h.worldSeed && W.fields.h.worldSeed.input.set_text(this.worldSeed),
               (this.gameType = "survival"),
               (this.useCheats = !1),
               (this.cheatsEnabled = !0),
               (this.useBonusChest = !1))
             : 6 == b
             ? (this.faqScrollPosition = 0)
             : 7 == b
             ? (null == m.Instance.settings && (m.Instance.settings = new fh(this.scene)), (m.Instance.settings.backCallback = B(this, this.settingsBackCallback)), m.Instance.settings.gotoAndStop(1))
             : 9 == b && (this.resetSaveText(), this.resetLoadText());
         },
         run: function () {
           if (null != P.getSound("mainSong_0").buffer) {
             var b = ya.musicChannel;
             var a = P.getSound("mainSong_0");
             b = null == b.h.__keys__[a.__id__];
           } else b = !1;
           b && P.getSound("mainSong_0").play(1, 0, 0, 73.851, 1e9);
           b = this.scene;
           a = P.getImage("main_menu_bg");
           var c = new t(G.toFloat(m.Instance.tick) / G.toFloat(5), 0, this.scene.get_width(), this.scene.get_height()),
             d = new F(2147483647),
             e = new F(1052688),
             h = this.scene.get_height() + 10,
             g = P.getImage("main_menu_bg").height;
           b.draw2D(a, null, c, null, d, e, G.toFloat(h) / G.toFloat(g));
           this.buttonEntity.clearPool();
           this.prepareVersionDialog();
           this.textInstance = 0;
           switch (this.currentFrame) {
             case 1:
               this.runMainFrame();
               break;
             case 2:
               this.runWorldsFrame();
               break;
             case 3:
               this.runGenerateFrame();
               break;
             case 5:
               this.runCreditsFrame();
               break;
             case 6:
               this.runFAQFrame();
               break;
             case 7:
               this.runSettingsFrame();
               break;
             case 9:
               this.runBackupsFrame();
           }
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
           this.renderVersion();
           this.renderVersionDialog();
           this.renderMouseEffect();
         },
         renderMouseEffect: function () {
           1 == m.Instance.mouseDown() && (this.mouseAnimation = 1);
           1 == m.Instance.mouseUp() && (this.mouseAnimation = 2);
           0 < this.mouseAnimation &&
             (this.pickCrackEntity.setColor(new F().fromRGB(1, 1, 1, Math.max(1, 18 - this.mouseAnimation) / 16)),
             2 > this.mouseAnimation
               ? ((m.Instance.cursor = null),
                 this.pickCrackEntity.updateQuad(0, null, new h(), new h(), null),
                 this.pickCrackEntity.updateQuad(
                   1,
                   null,
                   new h(76, 0),
                   new h(16, 16),
                   null,
                   ba.quadMatrixHelper(
                     new t(0, 0, 16, 16),
                     new T()
                       .translate(-7, -8)
                       .rotate2D(-0.08333333333333333 * Math.PI)
                       .scale2D(2)
                       .translate(18.95 + m.Instance.mouse.x, -13.85 + m.Instance.mouse.y)
                   )
                 ))
               : (2 == this.mouseAnimation && this.pickCrackPosition.set(m.Instance.mouse.x, m.Instance.mouse.y),
                 this.pickCrackEntity.updateQuad(0, null, new h(), new h(75, 32), null, ba.quadMatrixHelper(new t(0, 0, 75, 32), new T().translate(-33, -15).scale2D(0.5).translate(this.pickCrackPosition.x, this.pickCrackPosition.y))),
                 this.pickCrackEntity.updateQuad(
                   1,
                   null,
                   new h(76, 0),
                   new h(16, 16),
                   null,
                   ba.quadMatrixHelper(
                     new t(0, 0, 16, 16),
                     new T()
                       .translate(-7, -8)
                       .rotate2D(0.04055555555555555 * Math.PI)
                       .scale2D(2)
                       .translate(12.3 + m.Instance.mouse.x, -8.05 + m.Instance.mouse.y)
                   )
                 ),
                 this.mouseAnimation++),
             16 < this.mouseAnimation && (this.mouseAnimation = 0),
             this.scene.draw(this.pickCrackEntity));
         },
         sortWorlds: function (b, a) {
           if (Object.prototype.hasOwnProperty.call(b.data.h, "date")) {
             if (!Object.prototype.hasOwnProperty.call(a.data.h, "date") || b.data.h.date > a.data.h.date) return -1;
           } else if (!Object.prototype.hasOwnProperty.call(a.data.h, "date")) return 0;
           return 1;
         },
         updateWorldList: function () {
           this.selectedWorldListIndex = 0;
           this.newerUpdateConfirmation = !1;
           this.worldListStrings = [];
           this.orderedWorldList = [];
           for (var b = J.worldList.h, a = Object.keys(b), c = a.length, d = 0; d < c; ) {
             var e = a[d++];
             this.orderedWorldList.push({ id: e, data: b[e] });
           }
           this.orderedWorldList.sort(B(this, this.sortWorlds));
           b = 0;
           for (a = this.orderedWorldList; b < a.length; )
             (c = a[b]),
               ++b,
               (d = c.data.h.name),
               Object.prototype.hasOwnProperty.call(c.data.h, "seed") && (d += " (Seed " + E.string(c.data.h.seed) + ")"),
               c.id == this.worldToSelect && (this.selectedWorldListIndex = this.worldListStrings.length),
               this.worldListStrings.push(d);
         },
         runWorldsFrame: function () {
           var b = this;
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2 - 9, 16), null, null, null, null, 0.6);
           this.scene.draw2D(P.getImage("title_logo"), new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2, 24), null, null, null, null, (0.6 * this.titleHeight) / G.toFloat(P.getImage("title_logo").height));
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 222, this.scene.get_height() / 2 - 207 + 126, 444, 60), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 222, this.scene.get_height() / 2 - 207 + 205, 444, 103), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 276 + 389, this.scene.get_height() / 2 - 207 + 326, 110, 48), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
           this.text("Select a saved game, or create a new one!", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 93, 2, !0, F.black);
           this.text("Select a saved game, or create a new one!", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 91, 2, !0, F.white);
           this.buttonEntityForTheDeleteButton.clearPool();
           var a = m.addSimpleButtonBetter("worldsCreateWorld", this.buttonEntity, (this.scene.get_width() / 2 - 103) | 0, (this.scene.get_height() / 2 - 207 + 141) | 0, 206, 34, 1.77, function () {
             b.errorTimer = 0;
             b.gotoAndStop(3);
           })
             ? R.get("worldsCreateWorld", "Create new world", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 160.77), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)
             : R.get("worldsCreateWorld", "Create new world", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 159), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.drawDropdown();
           0 < this.errorTimer && (this.errorTimer--, 0 == this.errorTimer && (this.error = ""));
           "" != this.error &&
             ((a = R.get("errord", this.error, new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 264), x.get_volter(), F.black, 1.7777777777777777, Q.CENTER, 1.5)),
             (a.layer = 2),
             this.scene.draw(a),
             (a = R.get("error", this.error, new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 263), x.get_volter(), new F(-1), 1.7777777777777777, Q.CENTER, 1.5)),
             (a.layer = 2),
             this.scene.draw(a));
           W.dropdown(
             this.buttonEntity,
             "worldList",
             this.worldListStrings,
             this.selectedWorldListIndex,
             (this.scene.get_width() / 2 - 276 + 65) | 0,
             (this.scene.get_height() / 2 - 207 + 225) | 0,
             275,
             function (a, d) {
               b.selectedWorldListIndex = a;
               b.deleteAnimationEnabled = !1;
               b.newerUpdateConfirmation = !1;
             },
             0 == this.worldListStrings.length
           );
           0 == this.worldListStrings.length &&
             ((a = R.get("worldListPrompt", "There are no saved worlds.", new h(this.scene.get_width() / 2 - 276 + 71, this.scene.get_height() / 2 - 207 + 230), x.get_volter(), new F(-13421773), 1.3, Q.LEFT, 1.5)),
             (a.layer = 2),
             this.scene.draw(a));
           a = m.addSimpleButtonBetter(
             "worldsEnter",
             this.buttonEntity,
             (this.scene.get_width() / 2 - 276 + 369) | 0,
             (this.scene.get_height() / 2 - 207 + 220) | 0,
             118,
             34,
             1.77,
             function () {
               b.errorTimer = 0;
               if (!b.newerUpdateConfirmation && U.versionToNumber(b.orderedWorldList[b.selectedWorldListIndex].data.h.version) > U.versionToNumber("1.30.5")) {
                 b.error = "That is from a newer update. Are you sure?";
                 var a = m.Instance.get_fps();
                 b.errorTimer = 5 * a;
                 b.newerUpdateConfirmation = !0;
               } else
                 (b.errorTimer = 0),
                   new U(
                     b.orderedWorldList[b.selectedWorldListIndex].data.h.data,
                     function (a) {
                       m.Instance.game = new g(a, b.scene);
                       m.Instance.set_frame("game");
                       J.worldList.h[b.orderedWorldList[b.selectedWorldListIndex].id].h.version = "1.30.5";
                       a = J.worldList.h[b.orderedWorldList[b.selectedWorldListIndex].id];
                       var c = new Date().getTime();
                       a.h.date = c;
                       J.save();
                       ya.stopAll();
                       b.gotoAndStop(1);
                     },
                     function (a) {
                       b.error = "Sorry, can't load; save format invalid.";
                       a = m.Instance.get_fps();
                       b.errorTimer = 5 * a;
                     }
                   );
             },
             0 == this.worldListStrings.length
           )
             ? R.get("worldsEnter", "Enter world", new h(this.scene.get_width() / 2 - 276 + 430.77, this.scene.get_height() / 2 - 207 + 239.77), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)
             : R.get(
                 "worldsEnter",
                 "Enter world",
                 new h(this.scene.get_width() / 2 - 276 + 429, this.scene.get_height() / 2 - 207 + 238),
                 x.get_volter(),
                 0 == this.worldListStrings.length ? new F(-8947849) : F.white,
                 1.7777777777777777,
                 Q.CENTER,
                 1.5
               );
           a.layer = 2;
           this.scene.draw(a);
           this.deleteAnimation = this.deleteAnimationEnabled ? Math.min(1, this.deleteAnimation + 4 / m.Instance.get_fps()) : Math.max(0, this.deleteAnimation - 4 / m.Instance.get_fps());
           0 < this.worldListStrings.length &&
             (0 < this.deleteAnimation
               ? ((a = R.get(
                   "worldsDeletePrompt",
                   "Are you sure?",
                   new h(this.scene.get_width() / 2 - 276 + 151, this.scene.get_height() / 2 - 207 + 282 - 20 * w.interpolateSine(this.deleteAnimation) + 1),
                   x.get_volter(),
                   F.white,
                   1.7777777777777777,
                   Q.CENTER,
                   1.5
                 )),
                 a.set_mask(new t(-200, 0, 400, 10 * w.interpolateSine(this.deleteAnimation))),
                 this.scene.draw(a),
                 (a = m.addSimpleButtonBetter("worldsDeleteCancel", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 70) | 0, (this.scene.get_height() / 2 - 207 + 272) | 0, 76, 26, 1.77, function () {
                   b.deleteAnimationEnabled = !1;
                 })
                   ? R.get("worldsDeleteCancel", "Cancel", new h(this.scene.get_width() / 2 - 276 + 110.77, this.scene.get_height() / 2 - 207 + 288.77), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)
                   : R.get("worldsDeleteCancel", "Cancel", new h(this.scene.get_width() / 2 - 276 + 109, this.scene.get_height() / 2 - 207 + 287), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)),
                 (a.layer = 2),
                 this.scene.draw(a),
                 (a = m.addSimpleButtonBetter(
                   "worldsDeleteConfirm",
                   this.buttonEntityForTheDeleteButton,
                   (this.scene.get_width() / 2 - 276 + 70 + 82 * w.interpolateSine(this.deleteAnimation)) | 0,
                   (this.scene.get_height() / 2 - 207 + 272) | 0,
                   76,
                   26,
                   1.77,
                   function () {
                     if (1 == b.deleteAnimation) {
                       b.deleteAnimationEnabled = !1;
                       b.deleteAnimation = 0;
                       new Qc(b.orderedWorldList[b.selectedWorldListIndex].data.h.data, "Mine_Blocks", function (a) {
                         a.destroy();
                       });
                       var a = b.orderedWorldList[b.selectedWorldListIndex].id,
                         d = J.worldList;
                       Object.prototype.hasOwnProperty.call(d.h, a) && delete d.h[a];
                       J.save();
                       b.updateWorldList();
                       b.selectedWorldListIndex = 0;
                     }
                   }
                 )
                   ? R.get(
                       "worldsDeleteConfirm",
                       "Delete!",
                       new h(this.scene.get_width() / 2 - 276 + 70 + 82 * w.interpolateSine(this.deleteAnimation) + 41.77, this.scene.get_height() / 2 - 207 + 287.77),
                       x.get_volter(),
                       F.white,
                       1.7777777777777777,
                       Q.CENTER,
                       1.5
                     )
                   : R.get(
                       "worldsDeleteConfirm",
                       "Delete!",
                       new h(this.scene.get_width() / 2 - 276 + 70 + 82 * w.interpolateSine(this.deleteAnimation) + 40, this.scene.get_height() / 2 - 207 + 286),
                       x.get_volter(),
                       F.white,
                       1.7777777777777777,
                       Q.CENTER,
                       1.5
                     )),
                 (a.layer = 4))
               : ((this.deleteAnimation = 0),
                 (this.deleteAnimationEnabled = !1),
                 (a = m.addSimpleButtonBetter(
                   "worldsDeleteIntent",
                   this.buttonEntity,
                   (this.scene.get_width() / 2 - 276 + 70) | 0,
                   (this.scene.get_height() / 2 - 207 + 272) | 0,
                   76,
                   26,
                   1.77,
                   function () {
                     b.deleteAnimationEnabled = !0;
                   },
                   0 == this.worldListStrings.length
                 )
                   ? R.get("worldsDeleteIntent", "Delete", new h(this.scene.get_width() / 2 - 276 + 110.77, this.scene.get_height() / 2 - 207 + 288.77), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)
                   : R.get(
                       "worldsDeleteIntent",
                       "Delete",
                       new h(this.scene.get_width() / 2 - 276 + 109, this.scene.get_height() / 2 - 207 + 287),
                       x.get_volter(),
                       0 == this.worldListStrings.length ? new F(-8947849) : F.white,
                       1.7777777777777777,
                       Q.CENTER,
                       1.5
                     )),
                 (a.layer = 2)),
             this.scene.draw(a),
             (a = m.addSimpleButtonBetter(
               "worldsSaveToFile",
               this.buttonEntity,
               (this.scene.get_width() / 2 - 276 + 369 - 108) | 0,
               (this.scene.get_height() / 2 - 207 + 272) | 0,
               100,
               26,
               1.77,
               function () {
                 b.errorTimer = 0;
                 new Qc(b.orderedWorldList[b.selectedWorldListIndex].data.h.data, "Mine_Blocks", function (a) {
                   a.removeSaveOnExitListener();
                   if (Object.prototype.hasOwnProperty.call(a.data.h, "data")) {
                     a = a.data.h.data;
                     a.fileInfo = {
                       name: b.orderedWorldList[b.selectedWorldListIndex].data.h.name,
                       version: b.orderedWorldList[b.selectedWorldListIndex].data.h.version,
                       seed: b.orderedWorldList[b.selectedWorldListIndex].data.h.seed,
                       data: b.orderedWorldList[b.selectedWorldListIndex].data.h.data,
                       fileTimestamp: b.orderedWorldList[b.selectedWorldListIndex].data.h.date,
                     };
                     a = JSON.stringify(a);
                     for (var c = "", e = 0, h = a.length; e < h; ) {
                       var g = e++;
                       g = I.cca(a, g) + (((5 * g) % 33) + 1);
                       c += String.fromCodePoint(g);
                     }
                     gb.saveString(c, E.string(b.orderedWorldList[b.selectedWorldListIndex].data.h.name) + ".mbw");
                   } else (b.error = "This world has no save data and cannot load."), (a = m.Instance.get_fps()), (b.errorTimer = 5 * a);
                 });
               },
               0 == this.worldListStrings.length
             )
               ? R.get("worldsSaveToFile", "Save to file", new h(this.scene.get_width() / 2 - 276 + 369 - 108 + 52.77, this.scene.get_height() / 2 - 207 + 288.77), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)
               : R.get(
                   "worldsSaveToFile",
                   "Save to file",
                   new h(this.scene.get_width() / 2 - 276 + 369 - 108 + 51, this.scene.get_height() / 2 - 207 + 287),
                   x.get_volter(),
                   0 == this.worldListStrings.length ? new F(-8947849) : F.white,
                   1.4444444444444444,
                   Q.CENTER,
                   1.5
                 )),
             (a.layer = 2),
             this.scene.draw(a));
           a = m.addSimpleButtonBetter("worldsLoadFromFile", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 369) | 0, (this.scene.get_height() / 2 - 207 + 272) | 0, 118, 26, 1.77, null)
             ? R.get("worldsLoadFromFile", "Load from file", new h(this.scene.get_width() / 2 - 276 + 430.77, this.scene.get_height() / 2 - 207 + 288.77), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)
             : R.get("worldsLoadFromFile", "Load from file", new h(this.scene.get_width() / 2 - 276 + 429, this.scene.get_height() / 2 - 207 + 287), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           "worldsLoadFromFile" == m.Instance.getUIHover() && m.Instance.uiIsDown
             ? (m.Instance.callOnMouseUp.h.worldsLoadFromFile = B(this, this.loadFile))
             : ((a = m.Instance.callOnMouseUp), Object.prototype.hasOwnProperty.call(a.h, "worldsLoadFromFile") && delete a.h.worldsLoadFromFile);
           a = m.addSimpleButtonBetter("worldsBackups", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 487 - 86) | 0, (this.scene.get_height() / 2 - 207 + 338) | 0, 86, 26, 1.77, function () {
             b.gotoAndStop(9);
           })
             ? R.get("worldsBackups", "Backup", new h(this.scene.get_width() / 2 - 276 + 487 - 43 + 2.77, this.scene.get_height() / 2 - 207 + 353.77), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)
             : R.get("worldsBackups", "Backup", new h(this.scene.get_width() / 2 - 276 + 487 - 43 + 1, this.scene.get_height() / 2 - 207 + 352), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("worldsBack", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 63) | 0, (this.scene.get_height() / 2 - 207 + 338) | 0, 72, 26, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("worldsBack", "Back", new h(this.scene.get_width() / 2 - 276 + 101.77, this.scene.get_height() / 2 - 207 + 353.77), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)
             : R.get("worldsBack", "Back", new h(this.scene.get_width() / 2 - 276 + 100, this.scene.get_height() / 2 - 207 + 352), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           this.buttonEntityForTheDeleteButton.resetUnusedQuads();
           this.scene.draw(this.buttonEntityForTheDeleteButton);
         },
         runGenerateFrame: function () {
           var b = this;
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2 - 9, 16), null, null, null, null, 0.6);
           this.scene.draw2D(P.getImage("title_logo"), new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2, 24), null, null, null, null, (0.6 * this.titleHeight) / G.toFloat(P.getImage("title_logo").height));
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 222, this.scene.get_height() / 2 - 207 + 78, 444, 300), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 206, this.scene.get_height() / 2 - 207 + 154, 412, 102), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
           this.text("Create new world", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 89, 2, !0, F.white);
           var a = R.get("worldCreationNameLabel", "World name:", new h(this.scene.get_width() / 2 - 276 + 77, this.scene.get_height() / 2 - 207 + 124), x.get_volter(), F.white, 1.7777777777777777, Q.LEFT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.textfield(
             this.buttonEntity,
             "worldName",
             this.worldName,
             (this.scene.get_width() / 2 - 276 + 194) | 0,
             (this.scene.get_height() / 2 - 207 + 119) | 0,
             282,
             2,
             function (a) {
               b.worldName = a;
             },
             50
           );
           a = R.get("worldCreationSeedLabel", "Seed:", new h(this.scene.get_width() / 2 - 276 + 186, this.scene.get_height() / 2 - 207 + 168), x.get_volter(), F.white, 1.4444444444444444, Q.RIGHT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.textfield(
             this.buttonEntity,
             "worldSeed",
             this.worldSeed,
             (this.scene.get_width() / 2 - 276 + 194) | 0,
             (this.scene.get_height() / 2 - 207 + 162) | 0,
             180,
             1.8,
             function (a) {
               b.worldSeed = a;
             },
             30
           );
           W.radio(
             this.buttonEntity,
             "gameType1",
             this.gameType,
             "survival",
             (this.scene.get_width() / 2 - 276 + 196) | 0,
             (this.scene.get_height() / 2 - 207 + 192) | 0,
             function () {
               b.gameType = "survival";
               b.useCheats = !1;
               b.cheatsEnabled = !0;
             },
             !1,
             85
           );
           a = R.get("gameTypeSurvival", "Survival", new h(this.scene.get_width() / 2 - 276 + 216, this.scene.get_height() / 2 - 207 + 194), x.get_volter(), F.white, 1.4444444444444444, Q.LEFT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.radio(
             this.buttonEntity,
             "gameType2",
             this.gameType,
             "creative",
             (this.scene.get_width() / 2 - 276 + 286) | 0,
             (this.scene.get_height() / 2 - 207 + 192) | 0,
             function () {
               b.gameType = "creative";
               b.useCheats = !0;
               b.cheatsEnabled = !0;
             },
             !1,
             85
           );
           a = R.get("gameTypeCreative", "Creative", new h(this.scene.get_width() / 2 - 276 + 306, this.scene.get_height() / 2 - 207 + 194), x.get_volter(), F.white, 1.4444444444444444, Q.LEFT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.radio(
             this.buttonEntity,
             "gameType3",
             this.gameType,
             "hardcore",
             (this.scene.get_width() / 2 - 276 + 376) | 0,
             (this.scene.get_height() / 2 - 207 + 192) | 0,
             function () {
               b.gameType = "hardcore";
               b.useCheats = !1;
               b.cheatsEnabled = !1;
             },
             !1,
             85
           );
           a = R.get("gameTypeHardcore", "Hardcore", new h(this.scene.get_width() / 2 - 276 + 396, this.scene.get_height() / 2 - 207 + 194), x.get_volter(), F.white, 1.4444444444444444, Q.LEFT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           a = R.get(
             "worldCreationCheatsLabel",
             "Cheats:",
             new h(this.scene.get_width() / 2 - 276 + 186, this.scene.get_height() / 2 - 207 + 213),
             x.get_volter(),
             this.cheatsEnabled ? F.white : new F(-6710887),
             1.4444444444444444,
             Q.RIGHT,
             1.5
           );
           a.layer = 2;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "cheats",
             this.useCheats,
             (this.scene.get_width() / 2 - 276 + 196) | 0,
             (this.scene.get_height() / 2 - 207 + 212) | 0,
             function () {
               b.useCheats = !b.useCheats;
             },
             !this.cheatsEnabled
           );
           a = R.get("worldCreationBonusChestLabel", "Bonus chest:", new h(this.scene.get_width() / 2 - 276 + 186, this.scene.get_height() / 2 - 207 + 234), x.get_volter(), F.white, 1.4444444444444444, Q.RIGHT, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "bonusChest",
             this.useBonusChest,
             (this.scene.get_width() / 2 - 276 + 196) | 0,
             (this.scene.get_height() / 2 - 207 + 233) | 0,
             function () {
               b.useBonusChest = !b.useBonusChest;
             },
             !1
           );
           a = m.addSimpleButtonBetter("createWorldCreate", this.buttonEntity, (this.scene.get_width() / 2 - 84) | 0, (this.scene.get_height() / 2 - 207 + 274) | 0, 168, 50, 1.77, function () {
             var a = O.trim(b.worldName);
             "" == a
               ? ((b.worldName = "New World"), W.fields.h.worldName.input.set_text(b.worldName))
               : ((a = a.replace(/[\\/<>:"|?* ]/g, "_")),
                 Object.prototype.hasOwnProperty.call(J.worldList.h, a)
                   ? ((b.worldName += "_"), W.fields.h.worldName.input.set_text(b.worldName))
                   : new U(
                       a,
                       function (c) {
                         var d = J.worldList,
                           h = new e();
                         h.h.seed = c.seedNum;
                         h.h.version = "1.30.5";
                         h.h.name = b.worldName;
                         h.h.data = a;
                         var k = new Date().getTime();
                         h.h.date = k;
                         d.h[a] = g.makeDynamicMap(h);
                         b.gotoAndStop(1);
                         m.Instance.set_frame("game");
                         m.Instance.game = new g(c, b.scene);
                         ya.stopAll();
                         J.save();
                       },
                       function (c) {
                         var d = J.worldList,
                           h = new e();
                         h.h.seed = b.worldSeed;
                         h.h.version = "1.30.5";
                         h.h.name = b.worldName;
                         h.h.data = a;
                         var k = new Date().getTime();
                         h.h.date = k;
                         d.h[a] = g.makeDynamicMap(h);
                         b.gotoAndStop(1);
                         m.Instance.set_frame("game");
                         m.Instance.game = new g(c, b.scene, !0, b.worldSeed, b.useCheats, "creative" == b.gameType ? 1 : 0, "hardcore" == b.gameType, b.useBonusChest);
                         ya.stopAll();
                         J.save();
                       }
                     ));
           })
             ? R.get("createWorldCreate", "Create world!", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 302.77), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5)
             : R.get("createWorldCreate", "Create world!", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 301), x.get_volter(), F.white, 1.7777777777777777, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("createWorldBack", this.buttonEntity, (this.scene.get_width() / 2 - 84) | 0, (this.scene.get_height() / 2 - 207 + 335) | 0, 168, 26, 1.77, function () {
             b.gotoAndStop(2);
           })
             ? R.get("createWorldBack", "Cancel", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 350.77), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)
             : R.get("createWorldBack", "Cancel", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 349), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
         },
         runCreditsFrame: function () {
           var b = this;
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2 - 9, 16), null, null, null, null, 0.6);
           this.scene.draw2D(P.getImage("title_logo"), new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2, 24), null, null, null, null, (0.6 * this.titleHeight) / G.toFloat(P.getImage("title_logo").height));
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.update9Slice(0, new t(this.scene.get_width() / 2 - 246, this.scene.get_height() / 2 - 207 + 80, 496, 264), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
           var a = m.addSimpleButtonBetter("creditsBack", this.buttonEntity, (this.scene.get_width() / 2 + 246 - 90) | 0, (this.scene.get_height() / 2 - 207 + 355) | 0, 90, 30, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("creditsBack", "Great!", new h(this.scene.get_width() / 2 + 246 - 45 + 2.77, this.scene.get_height() / 2 - 207 + 372.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("creditsBack", "Great!", new h(this.scene.get_width() / 2 + 246 - 45 + 1, this.scene.get_height() / 2 - 207 + 371), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 2;
           this.scene.draw(a);
           this.text("Created by me, Zanzlanz! Hi there! :D", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 96, 2, !0);
           var c = this.text("zanzlanz.com", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 116, 1.5555555555555556, !0, new F(-256)).calculatedWidth;
           m.buttonBehavior(
             "creditsZanzlanzLink",
             !1,
             (this.scene.get_width() / 2 - (14 * c) / 9 / 2) | 0,
             (this.scene.get_height() / 2 - 207 + 116) | 0,
             ((14 * c) / 9) | 0,
             ((14 * x.get_volter().height) / 9) | 0,
             function () {
               cb.open("https://zanzlanz.com");
             },
             !1
           );
           a = this.buttonEntity;
           var d = new M(this.scene.get_width() / 2 - (14 * c) / 9 / 2 - 1, this.scene.get_height() / 2 - 207 + 116 + (14 * x.get_volter().height) / 9 - 2),
             f = new h(96, 0),
             g = new h(1, 1);
           c = new h((14 * c) / 9, 1);
           var k = new e(),
             n = w.repeatArray([1, 1, 0, 1], 6);
           k.h.color = n;
           a.addQuad(d, f, g, !0, c, null, null, k);
           this.text("Prodevus helped with the art!", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 148, 2, !0);
           this.text("Such as mobs, UI, branding, and the default skin.", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 168, 1.5555555555555556, !0);
           this.text("Mine Blocks is a fan game of Minecraft!", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 200, 2, !0);
           c = this.text("minecraft.net", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 221, 1.5555555555555556, !0, new F(-256)).calculatedWidth;
           m.buttonBehavior(
             "creditsMinecraftLink",
             !1,
             (this.scene.get_width() / 2 - (14 * c) / 9 / 2) | 0,
             (this.scene.get_height() / 2 - 207 + 221) | 0,
             ((14 * c) / 9) | 0,
             ((14 * x.get_volter().height) / 9) | 0,
             function () {
               cb.open("https://minecraft.net");
             },
             !1
           );
           a = this.buttonEntity;
           d = new M(this.scene.get_width() / 2 - (14 * c) / 9 / 2 - 1, this.scene.get_height() / 2 - 207 + 221 + (14 * x.get_volter().height) / 9 - 2);
           f = new h(96, 0);
           g = new h(1, 1);
           c = new h((14 * c) / 9, 1);
           k = new e();
           n = w.repeatArray([1, 1, 0, 1], 6);
           k.h.color = n;
           a.addQuad(d, f, g, !0, c, null, null, k);
           this.text(
             "This is not an official Minecraft product.\nMine Blocks is not approved by or associated with Mojang.\nBut, according to Mojang's Brand Guidelines, it's all good! Thanks Mojang! <3",
             this.scene.get_width() / 2,
             this.scene.get_height() / 2 - 207 + 253,
             1,
             !0,
             new F(-2236963)
           );
           this.text("Huge thanks to my supporters, including you, for playing!", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 295, 1.5555555555555556, !0);
           c = this.text("zanzlanz.com/supporters", this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 313, 1.5555555555555556, !0, new F(-256)).calculatedWidth;
           m.buttonBehavior(
             "creditsSupportersLink",
             !1,
             (this.scene.get_width() / 2 - (14 * c) / 9 / 2) | 0,
             (this.scene.get_height() / 2 - 207 + 313) | 0,
             ((14 * c) / 9) | 0,
             ((14 * x.get_volter().height) / 9) | 0,
             function () {
               cb.open("https://zanzlanz.com/supporters");
             },
             !1
           );
           a = this.buttonEntity;
           d = new M(this.scene.get_width() / 2 - (14 * c) / 9 / 2 - 1, this.scene.get_height() / 2 - 207 + 313 + (14 * x.get_volter().height) / 9 - 2);
           f = new h(96, 0);
           g = new h(1, 1);
           c = new h((14 * c) / 9, 1);
           k = new e();
           n = w.repeatArray([1, 1, 0, 1], 6);
           k.h.color = n;
           a.addQuad(d, f, g, !0, c, null, null, k);
         },
         runFAQFrame: function () {
           var b = this;
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2 - 9, 16), null, null, null, null, 0.6);
           this.scene.draw2D(P.getImage("title_logo"), new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2, 24), null, null, null, null, (0.6 * this.titleHeight) / G.toFloat(P.getImage("title_logo").height));
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.update9Slice(0, new t(this.scene.get_width() / 2 - 246, this.scene.get_height() / 2 - 207 + 80, 496, 264), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
           var a = m.addSimpleButtonBetter("faqBack", this.buttonEntity, (this.scene.get_width() / 2 + 246 - 90) | 0, (this.scene.get_height() / 2 - 207 + 355) | 0, 90, 30, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("faqBack", "Gotcha!", new h(this.scene.get_width() / 2 + 246 - 45 + 2.77, this.scene.get_height() / 2 - 207 + 372.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("faqBack", "Gotcha!", new h(this.scene.get_width() / 2 + 246 - 45 + 1, this.scene.get_height() / 2 - 207 + 371), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 2;
           this.scene.draw(a);
           var c = (this.scene.get_height() / 2 - 207 + 86) | 0;
           this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 276 + 36, c, 450, 250), new t(69, 217, 5, 5), new t(2, 2, 1, 1), 0, null, 2);
           0 == m.Instance.mouseDown() &&
             new t(this.scene.get_width() / 2 - 276 + 36, c, 450, 250).containsPoint(m.Instance.mouse) &&
             (0 < m.Instance.mouseWheelDelta ? (this.faqScrollPosition = Math.max(0, this.faqScrollPosition - 16)) : 0 > m.Instance.mouseWheelDelta && (this.faqScrollPosition = Math.min(990, this.faqScrollPosition + 16)));
           a = m.buttonBehavior("achievementsScrollUp", !1, (this.scene.get_width() / 2 - 276 + 520 - 30) | 0, c | 0, 30, 20, null, !1);
           this.buttonEntity.addQuad(new M((this.scene.get_width() / 2 - 276 + 520 - 30) | 0, c | 0), new h(78 + 15 * a, 196), new h(15, 10), !0, new h(30, 20));
           2 == a && (this.faqScrollPosition = Math.max(0, this.faqScrollPosition - 8));
           a = m.buttonBehavior("achievementsScrollDown", !1, (this.scene.get_width() / 2 - 276 + 520 - 30) | 0, (c + 250 - 20) | 0, 30, 20, null, !1);
           this.buttonEntity.addQuad(new M((this.scene.get_width() / 2 - 276 + 520 - 30) | 0, (c + 250 - 20) | 0), new h(78 + 15 * a, 232), new h(15, 10), !0, new h(30, 20));
           2 == a && (this.faqScrollPosition = Math.min(990, this.faqScrollPosition + 8));
           a = (206 * Math.min(1, 250 / 1240)) | 0;
           var d = new t((this.scene.get_width() / 2 - 276 + 520 - 30) | 0, c + 22 + Math.min(206 - a, (206 * this.faqScrollPosition) / 1240), 30, a + 1);
           a = m.buttonBehavior("achievementsScrollbar", !1, d.x | 0, d.y | 0, d.width | 0, d.height | 0, null, !1);
           G.gt(m.Instance.mouseDown(), 0) &&
             "achievementsScrollbar" == m.Instance.getUIHover() &&
             (1 == m.Instance.mouseDown() && (this.faqScrollMouseOffset = m.Instance.mouse.y - d.y), (a = 2), (this.faqScrollPosition = w.clamp(0, 990, ((m.Instance.mouse.y - this.faqScrollMouseOffset - (c + 22)) / 206) * 1240)));
           this.buttonEntity.add9Slice(d, new t(78 + 15 * a, 206, 15, 16), new t(1, 2, 13, 11), 0, null, 2);
           this.buttonEntity.addQuad(new M(d.x, (d.get_centerY() | 0) - 10), new h(78 + 15 * a, 222), new h(15, 10), !0, new h(30, 20));
           d = c + 8 - (this.faqScrollPosition | 0);
           for (var e = 0, g = nd.faq.length; e < g; ) {
             var k = e++;
             if (d > c + 250) break;
             a = R.get("faqQuestion" + k, "Question: " + nd.faq[k].question, new h(this.scene.get_width() / 2 - 276 + 46, d), x.get_volter(), new F(-6728448), 2);
             a.setWordWrap(220);
             a.setUniform("mask", [0, (c + 2 - d) / 2, this.scene.get_width(), 122]);
             a.layer = 2;
             d += 2 * a.calculatedHeight;
             d >= c && this.scene.draw(a);
             a = R.get("faqAnswer" + k, "Answer: " + nd.faq[k].answer, new h(this.scene.get_width() / 2 - 276 + 46, d), x.get_volter(), F.black, 2);
             a.setWordWrap(220);
             a.setUniform("mask", [0, (c + 2 - d) / 2, this.scene.get_width(), 122]);
             a.layer = 2;
             d += 2 * a.calculatedHeight + 16;
             d >= c && this.scene.draw(a);
           }
         },
         runSettingsFrame: function () {
           m.Instance.settings.run();
         },
         settingsBackCallback: function () {
           this.gotoAndStop(1);
         },
         resetSaveText: function () {
           for (var b = 0, a = Object.keys(J.worldList.h).length, c = 0; c < a; ) ++c, ++b;
           this.backupSaveText = "This will save your " + b + " world" + (1 != b ? "s" : "") + " and current settings to a .MBWB file.";
         },
         resetLoadText: function () {
           1 == this.loadBackupFrame && (this.backupLoadText = "After you click this, you can choose what to restore.");
         },
         runBackupsFrame: function () {
           var b = this;
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2 - 9, 16), null, null, null, null, 0.6);
           this.scene.draw2D(P.getImage("title_logo"), new h(this.scene.get_width() / 2 - (0.6 * this.titleWidth) / 2, 24), null, null, null, null, (0.6 * this.titleHeight) / G.toFloat(P.getImage("title_logo").height));
           var a = m.addSimpleButtonBetter("backupsBack", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 507 - 100) | 0, (this.scene.get_height() / 2 - 207 + 355) | 0, 100, 30, 1.77, function () {
             b.gotoAndStop(2);
           })
             ? R.get("backupsBack", "Back", new h(this.scene.get_width() / 2 - 276 + 507 - 50 + 2.77, this.scene.get_height() / 2 - 207 + 372.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("backupsBack", "Back", new h(this.scene.get_width() / 2 - 276 + 507 - 50 + 1, this.scene.get_height() / 2 - 207 + 371), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 2;
           this.scene.draw(a);
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 234, this.scene.get_height() / 2 - 207 + 108, 468, 70), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           a = m.addSimpleButtonBetter("backupsSave", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 58) | 0, (this.scene.get_height() / 2 - 207 + 126) | 0, 146, 36, 1.77, function () {
             b.loadBackupFrame = 1;
             b.savingBackup = !0;
             var a = J.touchControls,
               d = J.hideGUI,
               e = J.focusPause,
               h = J.showArmor,
               g = J.soundVol,
               m = J.songVol,
               n = J.qual,
               p = J.particles,
               q = J.spaceJump,
               t = J.useRightClickKey,
               r = O.objectifyObjectsInMap(J.keyBindings);
             b.finalData = { settings: { touchControls: a, hideGUI: d, focusPause: e, showArmor: h, soundVol: g, songVol: m, qual: n, particles: p, spaceJump: q, useRightClickKey: t, keyBindings: r }, worlds: {} };
             b.totalWorlds = b.orderedWorldList.length;
             b.worldsBackedUp = 0;
             b.worldsFailed = 0;
             b.updateWorldList();
           })
             ? R.get("backupsSave", "Save everything", new h(this.scene.get_width() / 2 - 276 + 133.77, this.scene.get_height() / 2 - 207 + 146.77), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)
             : R.get("backupsSave", "Save everything", new h(this.scene.get_width() / 2 - 276 + 132, this.scene.get_height() / 2 - 207 + 145), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5);
           a.layer = 2;
           this.scene.draw(a);
           a = R.get("backupsSavePrompt", this.backupSaveText, new h(this.scene.get_width() / 2 - 276 + 223, this.scene.get_height() / 2 - 207 + 130), x.get_volter(), F.white, 1.5555555555555556, Q.LEFT, 1.5);
           a.layer = 2;
           a.setWordWrap(194);
           this.scene.draw(a);
           this.runBackupProcess();
           1 == this.loadBackupFrame
             ? (this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 234, this.scene.get_height() / 2 - 207 + 190, 468, 70), new t(0, 16, 16, 16), new t(6, 6, 4, 4)),
               (a = m.addSimpleButtonBetter("backupsLoad", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 58) | 0, (this.scene.get_height() / 2 - 207 + 208) | 0, 146, 36, 1.77, function () {
                 b.loadBackupFile();
               })
                 ? R.get("backupsLoad", "Load everything", new h(this.scene.get_width() / 2 - 276 + 133.77, this.scene.get_height() / 2 - 207 + 228.77), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)
                 : R.get("backupsLoad", "Load everything", new h(this.scene.get_width() / 2 - 276 + 132, this.scene.get_height() / 2 - 207 + 227), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)),
               (a.layer = 2),
               this.scene.draw(a),
               (a = R.get("backupsLoadPrompt", this.backupLoadText, new h(this.scene.get_width() / 2 - 276 + 223, this.scene.get_height() / 2 - 207 + 212), x.get_volter(), F.white, 1.5555555555555556, Q.LEFT, 1.5)),
               (a.layer = 2),
               a.setWordWrap(177))
             : (this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 234, this.scene.get_height() / 2 - 207 + 190, 468, 151), new t(0, 16, 16, 16), new t(6, 6, 4, 4)),
               (a = R.get("backupsLoadPrompt2", this.backupLoadText2, new h(this.scene.get_width() / 2 - 276 + 63, this.scene.get_height() / 2 - 207 + 208), x.get_volter(), F.white, 1.5555555555555556, Q.LEFT, 1.5)),
               (a.layer = 2),
               this.scene.draw(a),
               W.radio(
                 this.buttonEntity,
                 "duplicateWorldOptions1",
                 this.duplicateWorldOption,
                 "add",
                 (this.scene.get_width() / 2 - 276 + 60) | 0,
                 (this.scene.get_height() / 2 - 207 + 234) | 0,
                 function () {
                   b.duplicateWorldOption = "add";
                 },
                 this.duplicateWorldOptionDisabled,
                 236
               ),
               (a = R.get(
                 "duplicateWorldOptions1",
                 "Add the duplicate worlds",
                 new h(this.scene.get_width() / 2 - 276 + 90, this.scene.get_height() / 2 - 207 + 235),
                 x.get_volter(),
                 this.duplicateWorldOptionDisabled ? new F(-8947849) : F.white,
                 1.5555555555555556,
                 Q.LEFT,
                 1.5
               )),
               (a.layer = 2),
               this.scene.draw(a),
               W.radio(
                 this.buttonEntity,
                 "duplicateWorldOptions2",
                 this.duplicateWorldOption,
                 "skip",
                 (this.scene.get_width() / 2 - 276 + 60) | 0,
                 (this.scene.get_height() / 2 - 207 + 255) | 0,
                 function () {
                   b.duplicateWorldOption = "skip";
                 },
                 this.duplicateWorldOptionDisabled,
                 236
               ),
               (a = R.get(
                 "duplicateWorldOptions2",
                 "Skip the duplicate worlds",
                 new h(this.scene.get_width() / 2 - 276 + 90, this.scene.get_height() / 2 - 207 + 256),
                 x.get_volter(),
                 this.duplicateWorldOptionDisabled ? new F(-8947849) : F.white,
                 1.5555555555555556,
                 Q.LEFT,
                 1.5
               )),
               (a.layer = 2),
               this.scene.draw(a),
               W.radio(
                 this.buttonEntity,
                 "duplicateWorldOptions3",
                 this.duplicateWorldOption,
                 "replace",
                 (this.scene.get_width() / 2 - 276 + 60) | 0,
                 (this.scene.get_height() / 2 - 207 + 276) | 0,
                 function () {
                   b.duplicateWorldOption = "replace";
                 },
                 this.duplicateWorldOptionDisabled,
                 236
               ),
               (a = R.get(
                 "duplicateWorldOptions3",
                 "Replace duplicate worlds",
                 new h(this.scene.get_width() / 2 - 276 + 90, this.scene.get_height() / 2 - 207 + 277),
                 x.get_volter(),
                 this.duplicateWorldOptionDisabled ? new F(-8947849) : F.white,
                 1.5555555555555556,
                 Q.LEFT,
                 1.5
               )),
               (a.layer = 2),
               this.scene.draw(a),
               W.checkbox(
                 this.buttonEntity,
                 "replaceSettings",
                 this.replaceSettings,
                 (this.scene.get_width() / 2 - 276 + 321) | 0,
                 (this.scene.get_height() / 2 - 207 + 234) | 0,
                 function () {
                   b.replaceSettings = !b.replaceSettings;
                 },
                 !1,
                 167
               ),
               (a = R.get("replaceSettings", "Replace settings", new h(this.scene.get_width() / 2 - 276 + 349, this.scene.get_height() / 2 - 207 + 235), x.get_volter(), F.white, 1.5555555555555556, Q.LEFT, 1.5)),
               (a.layer = 2),
               this.scene.draw(a),
               (a = m.addSimpleButtonBetter("backupsLoadCancel", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 265) | 0, (this.scene.get_height() / 2 - 207 + 301) | 0, 66, 26, 1.77, function () {
                 b.loadBackupFrame = 1;
               })
                 ? R.get("backupsLoadCancel", "Cancel", new h(this.scene.get_width() / 2 - 276 + 300.77, this.scene.get_height() / 2 - 207 + 316.77), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)
                 : R.get("backupsLoadCancel", "Cancel", new h(this.scene.get_width() / 2 - 276 + 299, this.scene.get_height() / 2 - 207 + 315), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)),
               (a.layer = 2),
               this.scene.draw(a),
               (a = m.addSimpleButtonBetter("backupsLoadRestore", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 348) | 0, (this.scene.get_height() / 2 - 207 + 301) | 0, 148, 26, 1.77, function () {
                 b.replaceSettings &&
                   (Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "touchControls") && (J.touchControls = Z.field(Z.field(b.finalData, "settings"), "touchControls")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "hideGUI") && (J.hideGUI = Z.field(Z.field(b.finalData, "settings"), "hideGUI")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "focusPause") && (J.focusPause = Z.field(Z.field(b.finalData, "settings"), "focusPause")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "showArmor") && (J.showArmor = Z.field(Z.field(b.finalData, "settings"), "showArmor")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "soundVol") && (J.soundVol = Z.field(Z.field(b.finalData, "settings"), "soundVol")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "songVol") && (J.songVol = Z.field(Z.field(b.finalData, "settings"), "songVol")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "qual") && (J.qual = Z.field(Z.field(b.finalData, "settings"), "qual")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "particles") && (J.particles = Z.field(Z.field(b.finalData, "settings"), "particles")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "spaceJump") && (J.spaceJump = Z.field(Z.field(b.finalData, "settings"), "spaceJump")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "useRightClickKey") && (J.useRightClickKey = Z.field(Z.field(b.finalData, "settings"), "useRightClickKey")),
                   Object.prototype.hasOwnProperty.call(Z.field(b.finalData, "settings"), "keyBindings") && (J.keyBindings = O.mappifyObjectsInMap(Z.field(Z.field(b.finalData, "settings"), "keyBindings"))));
                 b.loadingBackup = !0;
                 b.loadBackupFrame = 1;
               })
                 ? R.get("backupsLoadRestore", "Restore backup", new h(this.scene.get_width() / 2 - 276 + 424.77, this.scene.get_height() / 2 - 207 + 316.77), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)
                 : R.get("backupsLoadRestore", "Restore backup", new h(this.scene.get_width() / 2 - 276 + 423, this.scene.get_height() / 2 - 207 + 315), x.get_volter(), F.white, 1.5555555555555556, Q.CENTER, 1.5)),
               (a.layer = 2));
           this.scene.draw(a);
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
         },
         runMainFrame: function () {
           this.scene.draw2D(this.titleDropShadowImage, new h(this.scene.get_width() / 2 - this.titleWidth / 2 - 15, 14));
           var b = this.scene,
             a = P.getImage("title_logo"),
             c = new h(this.scene.get_width() / 2 - this.titleWidth / 2, 24),
             d = this.titleHeight,
             e = P.getImage("title_logo").height;
           b.draw2D(a, c, null, null, null, null, G.toFloat(d) / G.toFloat(e));
           null != this.newsLoader &&
             (this.scene.draw(this.newsLoaderBG),
             this.scene.draw(this.newsLoader),
             "" != this.newsURL &&
               new t(this.newsLoader.transform.getX(), this.newsLoader.transform.getY(), 2 * this.newsLoader.calculatedWidth, 2 * this.newsLoader.calculatedHeight).containsPoint(m.Instance.mouse) &&
               ((m.Instance.cursor = Ua.POINTER), 1 == m.Instance.mouseUp() && cb.open(this.newsURL)));
           this.mainMenu_main(new h(this.scene.get_width() / 2, this.scene.get_height() / 2 + 16));
           this.renderJumpers();
         },
         text: function (b, a, c, d, e, g) {
           null == e && (e = !1);
           null == d && (d = 2);
           this.textInstance++;
           b = R.get("menuTextFrame" + this.currentFrame + "Text" + this.textInstance, b, new h(a, c + (e ? (d * x.get_volter().height) / 2 : 0)), x.get_volter(), null == g ? F.white : g, d, e ? Q.CENTER : Q.LEFT, 1.5);
           b.isTransparent = !0;
           b.layer = 2;
           this.scene.draw(b);
           return b;
         },
         renderVersion: function () {
           var b = this;
           if (
             0 <
             m.buttonBehavior(
               "versionButton",
               1 != this.currentFrame,
               0,
               this.scene.get_height() - 20,
               120,
               20,
               function () {
                 b.versionDialogFrame = 2;
               },
               !1
             )
           ) {
             var a = this.buttonEntity,
               c = new t(0, this.scene.get_height() - 34, 120, 34),
               d = new t(7, 16, 9, 9),
               f = new t(1, 7, 1, 1),
               g = new e(),
               k = w.repeatArray([0, 0, 0, 3], 6);
             g.h.color = k;
             a.add9Slice(c, d, f, 0, g);
             a = R.get("versionPrompt", "Click to show updates", new h(2, this.scene.get_height() - 30), x.get_volter(), F.white, 1);
             a.layer = 2;
             this.scene.draw(a);
           }
           a = R.get("version", "1.30.3b_1", new h(2, this.scene.get_height() - (13 * x.get_volter().height) / 8), x.get_volter(), F.white, 1.625);
           a.layer = 2;
           this.scene.draw(a);
         },
         prepareVersionDialog: function () {
           var b = this;
           if (2 == this.versionDialogFrame) {
             m.addSimpleButtonBetter("versionLetsGo", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 334) | 0, 210, 36, 1.77, function () {
               b.versionDialogFrame = 1;
             });
             var a = R.get("versionWatchAnnouncement", "Watch the announcement video!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 236), x.get_volter(), F.white, 2, Q.CENTER);
             m.buttonBehavior(
               "versionWatchAnnouncement",
               !1,
               (this.scene.get_width() / 2 - a.calculatedWidth) | 0,
               ((this.scene.get_height() / 2 - 207) | 0) + 225,
               2 * a.calculatedWidth,
               22,
               function () {
                 cb.open("https://www.youtube.com/watch?v=WjRFmWiivWM");
               },
               !1
             );
             a = R.get("versionReadChangelog", "Read the full changelog!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 277), x.get_volter(), F.white, 2, Q.CENTER);
             m.buttonBehavior(
               "versionReadChangelog",
               !1,
               (this.scene.get_width() / 2 - a.calculatedWidth) | 0,
               ((this.scene.get_height() / 2 - 207) | 0) + 266,
               2 * a.calculatedWidth,
               22,
               function () {
                 cb.open("https://zanzlanz.com/n/95");
               },
               !1
             );
             ("versionLetsGo" == m.Instance.getUIHover() && "versionWatchAnnouncement" == m.Instance.getUIHover() && "versionReadChangelog" == m.Instance.getUIHover()) || m.Instance.setUIHover("versionDialog", !1);
           } else
             3 == this.versionDialogFrame
               ? (m.addSimpleButtonBetter("updatePlayNewVersion", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 301 - 5) | 0, 210, 36, 1.77, function () {
                   cb.open("https://mineblocks.com/1");
                 }),
                 m.addSimpleButtonBetter("updateContinueOldVersion", this.dialog, (this.scene.get_width() / 2 - 55) | 0, (this.scene.get_height() / 2 - 207 + 343 - 5) | 0, 110, 24, 1.77, function () {
                   b.versionDialogFrame = 1;
                 }),
                 ("updatePlayNewVersion" == m.Instance.getUIHover() && "updateContinueOldVersion" == m.Instance.getUIHover()) || m.Instance.setUIHover("versionDialog", !1))
               : 4 == this.versionDialogFrame &&
                 (m.addSimpleButtonBetter("closeMessageFromZanzlanz", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 319) | 0, 210, 36, 1.77, function () {
                   b.versionDialogFrame = 1;
                 }),
                 "closeMessageFromZanzlanz" != m.Instance.getUIHover() && m.Instance.setUIHover("versionDialog", !1));
         },
         renderVersionDialog: function () {
           if (2 == this.versionDialogFrame) {
             this.dialog.clearPool();
             var b = this.dialog,
               a = new M(),
               c = new h(96, 0),
               d = new h(1, 1),
               f = new h(this.scene.get_width(), this.scene.get_height()),
               g = new e(),
               k = w.repeatArray([0, 0, 0, 0.5], 6);
             g.h.color = k;
             b.addQuad(a, c, d, !0, f, null, null, g);
             this.dialog.add9Slice(new t(this.scene.get_width() / 2 - 276 + 5 - 7, this.scene.get_height() / 2 - 207 + 44 - 4, 556, 295), new t(0, 32, 32, 32), new t(14, 14, 4, 4));
             b = this.dialog;
             a = new t(this.scene.get_width() / 2 - 276 + 5, this.scene.get_height() / 2 - 207 + 44, 542, 281);
             c = new t(0, 16, 16, 16);
             d = new t(6, 6, 4, 4);
             g = new e();
             k = w.repeatArray([0, 0, 0, 5], 6);
             g.h.color = k;
             k = w.repeatArray([0.06274509803921569, 0.11372549019607843, 0.23137254901960785, 0], 6);
             g.h.colorOffset = k;
             b.add9Slice(a, c, d, 0, g);
             b = this.dialog;
             a = new t(this.scene.get_width() / 2 - 266 + 5, this.scene.get_height() / 2 - 207 + 91, 522, 223);
             c = new t(0, 16, 16, 16);
             d = new t(6, 6, 4, 4);
             g = new e();
             k = w.repeatArray([0, 0, 0, 5], 6);
             g.h.color = k;
             k = w.repeatArray([0.09803921568627451, 0.24313725490196078, 0.5529411764705883, 0], 6);
             g.h.colorOffset = k;
             b.add9Slice(a, c, d, 0, g);
             f = R.get("versionTitleBG", "Welcome to Mine Blocks 1.30.3b_1!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 71), x.get_volter(), new F(-11385597), 3, Q.CENTER);
             f.layer = 7;
             this.scene.draw(f);
             f = R.get("versionTitleFG", "Welcome to Mine Blocks 1.30.3b_1!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 71 - 3), x.get_volter(), new F(-11264), 3, Q.CENTER);
             f.layer = 7;
             this.scene.draw(f);
             f = R.get("versionTitleShine", "Welcome to Mine Blocks 1.30.3b_1!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 71 - 3), x.get_volter(), F.white, 3, Q.CENTER);
             f.layer = 7;
             f.set_mask(new t(-f.calculatedWidth / 2, 3.5, f.calculatedWidth, 2.5));
             this.scene.draw(f);
             f = R.get(
               "versionTitleDescription",
               "Woah! Mine Blocks is no longer a Flash game!\n\nThis is a complete remake of the original\nMine Blocks, but with lots of bug fixes!\n1.30.3b_1 includes 42 extra improvements :)",
               new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 160),
               x.get_volter(),
               F.white,
               2,
               Q.CENTER
             );
             f.layer = 7;
             this.scene.draw(f);
             f = R.get(
               "versionWatchAnnouncement",
               "Watch the announcement video!",
               new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 236),
               x.get_volter(),
               "versionWatchAnnouncement" == m.Instance.getUIHover() ? new F(-5570561) : new F(-16711681),
               2,
               Q.CENTER
             );
             f.layer = 7;
             this.scene.draw(f);
             b = this.dialog;
             a = new M(this.scene.get_width() / 2 - f.calculatedWidth, this.scene.get_height() / 2 - 207 + 245, 0);
             c = new h(96, 0);
             d = new h(1, 1);
             f = new h(2 * f.calculatedWidth, 2);
             g = new e();
             k = w.repeatArray(["versionWatchAnnouncement" == m.Instance.getUIHover() ? 0.67 : 0, 1, 1, 1], 6);
             g.h.color = k;
             b.addQuad(a, c, d, !0, f, null, null, g);
             f = R.get("versionOr", "or", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 257), x.get_volter(), F.white, 2, Q.CENTER);
             f.layer = 7;
             this.scene.draw(f);
             f = R.get(
               "versionReadChangelog",
               "Read the full changelog!",
               new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 277),
               x.get_volter(),
               "versionReadChangelog" == m.Instance.getUIHover() ? new F(-86) : new F(-256),
               2,
               Q.CENTER
             );
             f.layer = 7;
             this.scene.draw(f);
             b = this.dialog;
             a = new M(this.scene.get_width() / 2 - f.calculatedWidth, this.scene.get_height() / 2 - 207 + 286, 0);
             c = new h(96, 0);
             d = new h(1, 1);
             f = new h(2 * f.calculatedWidth, 2);
             g = new e();
             k = w.repeatArray([1, 1, "versionReadChangelog" == m.Instance.getUIHover() ? 0.67 : 0, 1], 6);
             g.h.color = k;
             b.addQuad(a, c, d, !0, f, null, null, g);
             f = m.addSimpleButtonBetter("versionLetsGo", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 334) | 0, 210, 36, 1.77, function () {})
               ? R.get("versionLetsGo", "Let's go!", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 354.77), x.get_volter(), F.white, 2, Q.CENTER)
               : R.get("versionLetsGo", "Let's go!", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 353), x.get_volter(), F.white, 2, Q.CENTER);
             f.layer = 7;
             this.scene.draw(f);
             this.dialog.resetUnusedQuads();
             this.scene.draw(this.dialog);
           } else
             3 == this.versionDialogFrame
               ? (this.dialog.clearPool(),
                 (b = this.dialog),
                 (a = new M()),
                 (c = new h(96, 0)),
                 (d = new h(1, 1)),
                 (f = new h(this.scene.get_width(), this.scene.get_height())),
                 (g = new e()),
                 (k = w.repeatArray([0, 0, 0, 0.5], 6)),
                 (g.h.color = k),
                 b.addQuad(a, c, d, !0, f, null, null, g),
                 (b = this.dialog),
                 (a = new t(this.scene.get_width() / 2 - 165, this.scene.get_height() / 2 - 207 + 55, 330, 322)),
                 (c = new t(0, 16, 16, 16)),
                 (d = new t(6, 6, 4, 4)),
                 (g = new e()),
                 (k = w.repeatArray([0, 0, 0, 5], 6)),
                 (g.h.color = k),
                 b.add9Slice(a, c, d, 0, g),
                 (f = R.get("updateTitle", "HURRAY!\nAn update is available!", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 88), x.get_volter(), F.white, 2, Q.CENTER)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get("updateCurrentVersion", "You are viewing:", new h(this.scene.get_width() / 2 - 276 + 305, this.scene.get_height() / 2 - 207 + 123), x.get_volter(), new F(-26368), 2, Q.RIGHT)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get("updateCurrentVersionVersion", "1.30.3b_1", new h(this.scene.get_width() / 2 - 276 + 312, this.scene.get_height() / 2 - 207 + 123), x.get_volter(), new F(-26368), 2, Q.LEFT)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get("updateNewVersion", "Newest version:", new h(this.scene.get_width() / 2 - 276 + 305, this.scene.get_height() / 2 - 207 + 152), x.get_volter(), new F(-256), 2, Q.RIGHT)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get(
                   "updateNewVersionVersion",
                   ("1" != I.substr(m.Instance.newestVersion, 0, 1) ? "1." : "") + m.Instance.newestVersion,
                   new h(this.scene.get_width() / 2 - 276 + 312, this.scene.get_height() / 2 - 207 + 152),
                   x.get_volter(),
                   new F(-256),
                   2,
                   Q.LEFT
                 )),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get("updateDescription", m.Instance.newestVersionHas, new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 189), x.get_volter(), F.white, 1.4444444444444444, Q.CENTER, 1.5)),
                 (f.layer = 7),
                 f.transform
                   .reset()
                   .scale2D(1.4444444444444444)
                   .setPosition(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 189),
                 f.setWordWrap(211),
                 this.scene.draw(f),
                 (f = m.addSimpleButtonBetter("updatePlayNewVersion", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 301 - 5) | 0, 210, 36, 1.77, function () {})
                   ? R.get("updatePlayNewVersion", "Play new version", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 301 - 5 + 20.77), x.get_volter(), F.white, 2, Q.CENTER)
                   : R.get("updatePlayNewVersion", "Play new version", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 301 - 5 + 19), x.get_volter(), F.white, 2, Q.CENTER)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = m.addSimpleButtonBetter("updateContinueOldVersion", this.dialog, (this.scene.get_width() / 2 - 55) | 0, (this.scene.get_height() / 2 - 207 + 343 - 5) | 0, 110, 24, 1.77, function () {})
                   ? R.get("updateContinueOldVersion", "Close", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 343 - 5 + 14.77), x.get_volter(), F.white, 1.3333333333333333, Q.CENTER, 1.5)
                   : R.get("updateContinueOldVersion", "Close", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 343 - 5 + 13), x.get_volter(), F.white, 1.3333333333333333, Q.CENTER, 1.5)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 this.dialog.resetUnusedQuads(),
                 this.scene.draw(this.dialog))
               : 4 == this.versionDialogFrame &&
                 (this.dialog.clearPool(),
                 (b = this.dialog),
                 (a = new M()),
                 (c = new h(96, 0)),
                 (d = new h(1, 1)),
                 (f = new h(this.scene.get_width(), this.scene.get_height())),
                 (g = new e()),
                 (k = w.repeatArray([0, 0, 0, 0.5], 6)),
                 (g.h.color = k),
                 b.addQuad(a, c, d, !0, f, null, null, g),
                 (b = this.dialog),
                 (a = new t(this.scene.get_width() / 2 - 165, this.scene.get_height() / 2 - 207 + 55, 330, 322)),
                 (c = new t(0, 16, 16, 16)),
                 (d = new t(6, 6, 4, 4)),
                 (g = new e()),
                 (k = w.repeatArray([0, 0, 0, 5], 6)),
                 (g.h.color = k),
                 b.add9Slice(a, c, d, 0, g),
                 (f = R.get("messageFromZanzlanzTitle", "A message from Zanzlanz!", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 80), x.get_volter(), F.white, 2, Q.CENTER)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = R.get("messageFromZanzlanzMessage", m.Instance.newestVersionHas, new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 102), x.get_volter(), new F(-256), 1.5555555555555556, Q.CENTER, 1.5)),
                 (f.layer = 7),
                 f.transform
                   .reset()
                   .scale2D(1.5555555555555556)
                   .setPosition(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 102),
                 f.setWordWrap(196),
                 this.scene.draw(f),
                 (f = R.get("messageFromZanzlanzThanks", "Thanks for reading!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 298), x.get_volter(), new F(-13421773), 1.6666666666666667, Q.CENTER, 1.5)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 (f = m.addSimpleButtonBetter("closeMessageFromZanzlanz", this.dialog, (this.scene.get_width() / 2 - 105) | 0, (this.scene.get_height() / 2 - 207 + 319) | 0, 210, 36, 1.77, function () {})
                   ? R.get("closeMessageFromZanzlanz", "Close message", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 339.77), x.get_volter(), F.white, 2, Q.CENTER)
                   : R.get("closeMessageFromZanzlanz", "Close message", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 338), x.get_volter(), F.white, 2, Q.CENTER)),
                 (f.layer = 7),
                 this.scene.draw(f),
                 this.dialog.resetUnusedQuads(),
                 this.scene.draw(this.dialog));
         },
         resetJumper1: function () {
           this.jumper1.setText(this.jumpTexts[Math.floor(Math.random() * this.jumpTexts.length)] + "!");
           this.jumper1Scene.clear();
           this.jumper1.transform
             .reset()
             .scale(2, 2, 2)
             .setPosition(this.jumper1Scene.get_width() / 2 - this.jumper1.calculatedWidth, this.jumper1Scene.get_height() / 2 - this.jumper1.calculatedHeight);
           this.jumper1Scene.draw(this.jumper1, !0);
           this.jumper1Rotation = ((10 * Math.random() - 5) / 180) * Math.PI;
         },
         resetJumper2: function () {
           this.jumper2.setText(this.jumpTexts[Math.floor(Math.random() * this.jumpTexts.length)] + "!");
           this.jumper2Scene.clear();
           this.jumper2.transform
             .reset()
             .scale(2, 2, 2)
             .setPosition(this.jumper2Scene.get_width() / 2 - this.jumper2.calculatedWidth, this.jumper2Scene.get_height() / 2 - this.jumper2.calculatedHeight);
           this.jumper2Scene.draw(this.jumper2, !0);
           this.jumper2Rotation = ((10 * Math.random() - 5) / 180) * Math.PI;
         },
         renderJumpers: function () {
           this.jumper1Time++;
           40 == this.jumper1Time && (this.jumper1Time += Math.floor(40 * Math.random()));
           90 <= this.jumper1Time && ((this.jumper1Time = 0), this.resetJumper1());
           var b = 1 - Math.pow(this.jumper1Time - 20, 2) / 400;
           if (40 >= this.jumper1Time) {
             var a = this.jumper1BlurImage.blurFilter(Math.max(1, 15 - 15 * b), Math.max(1, 15 - 15 * b), He.LOW, !0);
             a.smoothing = !0;
             this.scene.draw2DEntity.customBlendFunc = this.jumperBlendFunc;
             this.scene.draw2D(a, new h(this.scene.get_width() / 2 - 192 - this.jumper1Scene.get_width() / 2, this.scene.get_height() + 20 - 100 * b), null, null, null, new F(65280), 1, !1, 0, !0, !0, this.jumper1Rotation);
             this.scene.draw2DEntity.customBlendFunc = null;
           }
           this.jumper2Time++;
           40 == this.jumper2Time && (this.jumper2Time += Math.floor(40 * Math.random()));
           90 <= this.jumper2Time && ((this.jumper2Time = 0), this.resetJumper2());
           b = 1 - Math.pow(this.jumper2Time - 20, 2) / 400;
           40 >= this.jumper2Time &&
             ((a = this.jumper2BlurImage.blurFilter(Math.max(1, 15 - 15 * b), Math.max(1, 15 - 15 * b), He.LOW, !0)),
             (a.smoothing = !0),
             (this.scene.draw2DEntity.customBlendFunc = this.jumperBlendFunc),
             this.scene.draw2D(a, new h(this.scene.get_width() / 2 + 192 - this.jumper2Scene.get_width() / 2, this.scene.get_height() + 20 - 100 * b), null, null, null, new F(65280), 1, !1, 0, !0, !0, this.jumper2Rotation),
             (this.scene.draw2DEntity.customBlendFunc = null));
         },
         loadBackupFile: function () {
           gb.open(["mbwb"], B(this, this.openBackup));
         },
         openBackup: function (b, a) {
           try {
             this.finalData = JSON.parse(b);
           } catch (f) {
             this.backupLoadText = "Error loading backup.";
             return;
           }
           this.resetLoadText();
           this.loadBackupFrame = 2;
           this.worldsFailed = this.worldsBackedUp = this.totalWorlds = 0;
           this.worldIDsToRestore = [];
           a = b = 0;
           for (var c = Z.fields(Z.field(this.finalData, "worlds")); a < c.length; ) {
             var d = c[a];
             ++a;
             this.totalWorlds++;
             this.worldIDsToRestore.push(d);
             Object.prototype.hasOwnProperty.call(J.worldList.h, d) && ++b;
           }
           this.replaceSettings = !0;
           0 < b
             ? ((this.duplicateWorldOption = "add"), (this.duplicateWorldOptionDisabled = !1), (this.backupLoadText2 = b + " world" + (1 == b ? "" : "s") + " already exist" + (1 == b ? "s" : "") + ". What would you like to do?"))
             : ((this.duplicateWorldOption = "none"), (this.duplicateWorldOptionDisabled = !0), (this.backupLoadText2 = "Awesome. Ready to restore when you are!"));
         },
         runBackupProcess: function () {
           var b = this;
           if (this.savingBackup)
             if (this.worldsBackedUp >= this.totalWorlds) {
               var a = new Date();
               gb.saveString(
                 JSON.stringify(this.finalData),
                 "Mine-Blocks-Backup-" +
                   I.substr(E.string(a.getFullYear()), -2, 2) +
                   (10 <= a.getMonth() + 1 ? E.string(a.getMonth() + 1) : "0" + (a.getMonth() + 1)) +
                   (10 <= a.getDate() ? E.string(a.getDate()) : "0" + a.getDate()) +
                   "-" +
                   (10 <= a.getHours() ? E.string(a.getHours()) : "0" + a.getHours()) +
                   (10 <= a.getMinutes() ? E.string(a.getMinutes()) : "0" + a.getMinutes()) +
                   (10 <= a.getSeconds() ? E.string(a.getSeconds()) : "0" + a.getSeconds()) +
                   ".mbwb"
               );
               this.resetSaveText();
               this.savingBackup = !1;
             } else
               (this.backupSaveText = "Please wait, creating backup...\nReading world " + (this.worldsBackedUp + 1) + " of " + this.totalWorlds + "."),
                 this.waitingForSave ||
                   ((this.waitingForSave = !0),
                   new Qc(this.orderedWorldList[this.worldsBackedUp].data.h.data, "Mine_Blocks", function (a) {
                     a.removeSaveOnExitListener();
                     if (Object.prototype.hasOwnProperty.call(a.data.h, "data")) {
                       a = a.data.h.data;
                       a.fileInfo = {
                         name: b.orderedWorldList[b.worldsBackedUp].data.h.name,
                         version: b.orderedWorldList[b.worldsBackedUp].data.h.version,
                         seed: b.orderedWorldList[b.worldsBackedUp].data.h.seed,
                         fileTimestamp: b.orderedWorldList[b.worldsBackedUp].data.h.date,
                       };
                       a = JSON.stringify(a);
                       for (var c = "", d = 0, e = a.length; d < e; ) {
                         var f = d++;
                         f = I.cca(a, f) + (((5 * f) % 33) + 1);
                         c += String.fromCodePoint(f);
                       }
                       Z.field(b.finalData, "worlds")[b.orderedWorldList[b.worldsBackedUp].id] = c;
                       b.waitingForSave = !1;
                       b.worldsBackedUp++;
                     } else (b.waitingForSave = !1), b.worldsBackedUp++, b.worldsFailed++;
                   }));
           else if (this.loadingBackup)
             if (this.worldsBackedUp >= this.totalWorlds)
               (this.loadingBackup = !1), (this.backupLoadText = this.worldsBackedUp - this.worldsFailed + " of " + this.totalWorlds + " world" + (1 == this.totalWorlds ? "" : "s") + " successfully restored!"), this.resetSaveText();
             else if (((this.backupLoadText = "Please wait, restoring backup...\nReading world " + (this.worldsBackedUp + 1) + " of " + this.totalWorlds + "."), !this.waitingForSave)) {
               this.waitingForSave = !0;
               for (var c = 0; ; ) {
                 ++c;
                 a = [this.worldIDsToRestore[this.worldsBackedUp] + (1 == c ? "" : null == c ? "null" : "" + c)];
                 if (Object.prototype.hasOwnProperty.call(J.worldList.h, a[0]))
                   if ("add" == this.duplicateWorldOption) continue;
                   else if ("skip" == this.duplicateWorldOption) {
                     this.worldsBackedUp++;
                     this.waitingForSave = !1;
                     break;
                   }
                 c = Z.field(Z.field(this.finalData, "worlds"), this.worldIDsToRestore[this.worldsBackedUp]);
                 var d = [],
                   f = "";
                 try {
                   for (var h = 0, g = c.length; h < g; ) {
                     var m = h++,
                       n = I.cca(c, m) - (((5 * m) % 33) + 1);
                     f += String.fromCodePoint(n);
                   }
                   d[0] = JSON.parse(f);
                 } catch (Ba) {
                   this.waitingForSave = !1;
                   this.worldsBackedUp++;
                   this.worldsFailed++;
                   break;
                 }
                 new Qc(
                   a[0],
                   "Mine_Blocks",
                   (function (a, c, d) {
                     return function (f) {
                       f.removeSaveOnExitListener();
                       a[0].data = d[0];
                       var h = J.worldList,
                         g = O.mappifyObjectsInMap(a[0]);
                       h.h[d[0]] = g;
                       J.save();
                       Z.deleteField(c[0], "fileInfo");
                       h = new e();
                       h.h.data = c[0];
                       f.data = h;
                       f.save();
                       b.updateWorldList();
                       b.worldsBackedUp++;
                       b.waitingForSave = !1;
                     };
                   })([Z.field(d[0], "fileInfo")], d, a)
                 );
                 break;
               }
             }
         },
         loadFile: function () {
           gb.open(["mbw"], B(this, this.openFile));
         },
         openFile: function (b, a) {
           var c = this;
           this.errorTimer = 0;
           var d = "";
           try {
             for (var f = 0, h = b.length; f < h; ) {
               var g = f++,
                 n = I.cca(b, g) - (((5 * g) % 33) + 1);
               d += String.fromCodePoint(n);
             }
             var p = JSON.parse(d);
           } catch (xc) {
             this.error = "Sorry, can't load; the file seems invalid.";
             this.errorTimer = 5 * m.Instance.get_fps();
             return;
           }
           var q = null;
           try {
             q = new U().fromFileData(b, !1);
           } catch (xc) {
             this.error = "Sorry, can't load; the file seems corrupt.";
             this.errorTimer = 5 * m.Instance.get_fps();
             return;
           }
           if (null == q) (this.error = "Sorry, can't load; the file seems corrupt."), (this.errorTimer = 5 * m.Instance.get_fps());
           else {
             var t = Z.field(p, "fileInfo");
             for (b = 0; ; )
               if ((++b, (d = [E.string(Z.field(t, "data")) + (1 == b ? "" : null == b ? "null" : "" + b)]), !Object.prototype.hasOwnProperty.call(J.worldList.h, d[0]))) {
                 new Qc(
                   d[0],
                   "Mine_Blocks",
                   (function (b) {
                     return function (d) {
                       d.removeSaveOnExitListener();
                       var f = I.substr(a.split("/").pop().split("\\").pop().split(".mbw").join("").split(".MBW").join(""), 0, 50);
                       t.name = f;
                       t.data = b[0];
                       f = J.worldList;
                       var h = O.mappifyObjectsInMap(t);
                       f.h[b[0]] = h;
                       J.save();
                       Z.deleteField(p, "fileInfo");
                       f = new e();
                       f.h.data = q.worldData;
                       d.data = f;
                       d.save();
                       c.worldToSelect = b[0];
                       c.updateWorldList();
                     };
                   })(d)
                 );
                 break;
               }
           }
         },
         mainMenu_main: function (b) {
           var a = this;
           this.blackBoxWithRadius.clearPool();
           this.blackBoxWithRadius.update9Slice(0, new t(b.x - 230, b.y - 93, 460, 186), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
           this.blackBoxWithRadius.resetUnusedQuads();
           this.scene.draw(this.blackBoxWithRadius);
           this.mainMenuButtonEntity.setUniform("color", [1.5, 1.5, 1.5, 1]);
           this.mainMenuButtonEntity.setUniform("colorOffset", [-0.1, -0.1, -0.1, 0]);
           this.mainMenuButton(
             this.scene,
             "Play!",
             new t(b.x, b.y - 50, 81, 18),
             function () {
               a.gotoAndStop(2);
             },
             3
           );
           this.mainMenuButtonEntity.setUniform("color", [1, 1, 1, 1]);
           this.mainMenuButtonEntity.setUniform("colorOffset", [0, 0, 0, 0]);
           this.mainMenuButton(
             this.scene,
             "Settings/Skins",
             new t(b.x - 122, b.y + 9, 88, 18),
             function () {
               a.gotoAndStop(7);
             },
             2
           );
           this.scene.draw2D(P.getImage("spinning_diamond"), new h(b.x - 24, b.y - 6), new t(81 * -(Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(4)) % 3), 0, 81, 56), null, null, null, 0.5925925925925926);
           this.mainMenuButton(
             this.scene,
             "Credits",
             new t(b.x + 122, b.y + 9, 88, 18),
             function () {
               a.gotoAndStop(5);
             },
             2
           );
           this.mainMenuButton(
             this.scene,
             "Help - FAQ",
             new t(b.x - 96, b.y + 59, 88, 18),
             function () {
               a.gotoAndStop(6);
             },
             2
           );
           this.mainMenuButton(
             this.scene,
             "Help - Wiki",
             new t(b.x + 96, b.y + 59, 88, 18),
             function () {
               cb.open("https://mineblocks.com/1/wiki");
             },
             2
           );
           b = new t(this.scene.get_width() / 2 + -98.4, this.scene.get_height() - 86, 49.2, 43.05);
           0 <
           m.buttonBehavior(
             "twitterLink",
             !1,
             b.x | 0,
             b.y | 0,
             b.width | 0,
             b.height | 0,
             function () {
               cb.open("https://twitter.com/Mine_Blocks");
             },
             !1
           )
             ? this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y - 2), new t(0, 0, 80, 70), null, null, null, 0.615)
             : this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y), new t(0, 0, 80, 70), null, null, null, 0.615);
           b.x += b.width;
           b.set_width(43.05);
           0 <
           m.buttonBehavior(
             "facebookLink",
             !1,
             b.x | 0,
             b.y | 0,
             b.width | 0,
             b.height | 0,
             function () {
               cb.open("https://facebook.com/MineBlocks");
             },
             !1
           )
             ? this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y - 2), new t(80, 0, 70, 70), null, null, null, 0.615)
             : this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y), new t(80, 0, 70, 70), null, null, null, 0.615);
           b.x += b.width;
           b.set_width(52.89);
           0 <
           m.buttonBehavior(
             "youtubeLink",
             !1,
             b.x | 0,
             b.y | 0,
             b.width | 0,
             b.height | 0,
             function () {
               cb.open("https://youtube.com/Zanzlanz");
             },
             !1
           )
             ? this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y - 2), new t(150, 0, 86, 70), null, null, null, 0.615)
             : this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y), new t(150, 0, 86, 70), null, null, null, 0.615);
           b.x += b.width;
           b.set_width(52.275);
           0 <
           m.buttonBehavior(
             "discordLink",
             !1,
             b.x | 0,
             b.y | 0,
             b.width | 0,
             b.height | 0,
             function () {
               cb.open("https://discord.gg/dcgZvCR");
             },
             !1
           )
             ? this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y - 2), new t(236, 0, 85, 70), null, null, null, 0.615)
             : this.scene.draw2D(P.getImage("things_to_other_places"), new h(b.x, b.y), new t(236, 0, 85, 70), null, null, null, 0.615);
           0 <
           m.buttonBehavior(
             "zanzlanzLink",
             !1,
             (this.scene.get_width() / 2 - 62) | 0,
             (this.scene.get_height() - 37) | 0,
             124,
             20,
             function () {
               cb.open("https://zanzlanz.com");
             },
             !1
           )
             ? this.scene.draw2D(P.getImage("zanzlanz_title"), new h(this.scene.get_width() / 2 - 62, this.scene.get_height() - 37 - 1), null, null, null, null, 0.6813186813186813)
             : this.scene.draw2D(P.getImage("zanzlanz_title"), new h(this.scene.get_width() / 2 - 62, this.scene.get_height() - 37), null, null, null, null, 0.6813186813186813);
         },
         mainMenuButton: function (b, a, c, d, e) {
           null == e && (e = 1);
           this.mainMenuButtonEntity.transform.reset().scale(e, e, e).setPosition(c.x, c.y);
           this.mainMenuButtonShadow.transform.reset().setPosition(c.x, c.y);
           var f = 0;
           if (new t(c.x - (c.width / 2) * e, c.y - (c.height / 2) * e, c.width * e, c.height * e).containsPoint(m.Instance.mouse)) {
             var g = m.Instance.getUIHover() == a;
             m.Instance.setUIHover(a);
             if (m.Instance.getUIHover() == a) {
               m.Instance.cursor = Ua.POINTER;
               if (G.gt(m.Instance.mouseDown(), 0)) {
                 m.Instance.setUIDown(!0);
                 f = 16;
                 var n = R.get(a, a, new h(c.x + e, c.y + e), x.get_volter(), F.black, e, Q.CENTER);
               } else m.Instance.setUIDown(!1), (f = 32), (n = R.get(a, a, new h(c.x, c.y), x.get_volter(), F.black, e, Q.CENTER));
               g && 1 == m.Instance.mouseUp() && null != d && d();
             } else n = R.get(a, a, new h(c.x, c.y), x.get_volter(), F.black, e, Q.CENTER);
           } else (n = R.get(a, a, new h(c.x, c.y), x.get_volter(), F.black, e, Q.CENTER)), m.Instance.getUIHover() == a && m.Instance.setUIHover("");
           this.mainMenuButtonShadow.update9Slice(0, new t(Math.floor((-c.width * e) / 2 - 7), (-c.height * e) / 2 - 4, c.width * e + 13, c.height * e + 13), new t(0, 32, 32, 32), new t(14, 14, 4, 4));
           this.mainMenuButtonEntity.update9Slice(0, new t(Math.floor(-c.width / 2), -c.height / 2, c.width, c.height), new t(f, 0, 16, 16), new t(4, 4, 8, 8));
           b.draw(this.mainMenuButtonShadow, !0);
           b.draw(this.mainMenuButtonEntity, !0);
           b.draw(n);
         },
         __class__: nd,
       };
       var lc = function (b) {
         this.generatingTipNum = this.achievementsScrollPosition = this.achievementsScrollMouseOffset = 0;
         this.statis = "Generating world...";
         this.generatingTimer = 0;
         this.currentFrame = 1;
         this.loadingBar = 0;
         this.game = b;
         this.scene = b.scene;
         this.backgroundEntity = new ma([], ba.createQuad(1, 1), Yb.getShader());
         this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
         this.backgroundEntity.isTransparent = !0;
         this.backgroundEntity.layer = 22;
         this.spinningDiamond = new ma([], ba.createQuad(1, 1), Na.getShader());
         Na.setupEntity(this.spinningDiamond, P.getImage("spinning_diamond"), new t(0, 0, 81, 56));
         this.spinningDiamond.isTransparent = !0;
         this.spinningDiamond.layer = 23;
         this.diamondBurst = new ma([], ba.createQuad(1, 1), Na.getShader());
         Na.setupEntity(this.diamondBurst, P.getImage("diamond_burst"), new t(0, 0, 552, 414), new F(2013265919));
         this.diamondBurst.isTransparent = !0;
         this.diamondBurst.layer = 26;
         b = P.getImage("ui");
         var a = Fa.getShader(xa.NORMAL),
           c = new e(),
           d = w.repeatArray([1], 24);
         c.h.color = d;
         d = w.repeatArray([0], 24);
         c.h.colorOffset = d;
         this.buttonEntity = new da(b, null, a, c);
         this.buttonEntity.isTransparent = !0;
         this.buttonEntity.layer = 24;
       };
       r["screens.Menu_Pause"] = lc;
       lc.__name__ = "screens.Menu_Pause";
       lc.addMenuButton = function (b, a, c, d, f, h, g, n, p) {
         null == p && (p = !1);
         var l = 0;
         b = m.buttonBehavior(b, p, c, d, f, h, n);
         2 == b ? (l = 16) : 1 == b && (l = 32);
         a.add9Slice(new t(c, d, f, h), new t(l, 0, 16, 16), new t(4, 4, 8, 8));
         c = new t(c, d, f, h);
         l = new t(l, 0, 16, 16);
         d = new t(4, 4, 8, 8);
         p ? ((p = new e()), (f = w.repeatArray([0.6, 0.6, 0.6, 1], 6)), (p.h.color = f), (f = w.repeatArray([0.4, 0.4, 0.4, 0], 6)), (p.h.colorOffset = f)) : (p = null);
         a.add9Slice(c, l, d, 0, p, g);
         return 2 == b;
       };
       lc.prototype = {
         gotoAndStop: function (b) {
           this.currentFrame != b &&
             (m.Instance.setUIHover("", !1),
             1 == b
               ? (this.game.pawsed = !1)
               : 2 == b
               ? ((this.generatingTipNum = Math.floor(Math.random() * lc.generatingTips.length)),
                 (this.generatingTimer = 0),
                 this.backgroundEntity.setAttrib("color", [0, 0, 0.5686274509803921, 1, 0, 0, 0, 1, 0, 0, 0.5686274509803921, 1, 0, 0, 0.5686274509803921, 1, 0, 0, 0, 1, 0, 0, 0, 1]))
               : 4 == b
               ? (null == m.Instance.settings && (m.Instance.settings = new fh(this.scene)), (m.Instance.settings.backCallback = B(this, this.settingsBackCallback)), m.Instance.settings.gotoAndStop(1))
               : (3 == b && this.game.world.threadedSave(),
                 this.backgroundEntity.setAttrib("color", [
                   0.5686274509803921,
                   0.6352941176470588,
                   0.807843137254902,
                   0.75,
                   0.23921568627450981,
                   0.30980392156862746,
                   0.4666666666666667,
                   0.83,
                   0.5686274509803921,
                   0.6352941176470588,
                   0.807843137254902,
                   0.75,
                   0.5686274509803921,
                   0.6352941176470588,
                   0.807843137254902,
                   0.75,
                   0.23921568627450981,
                   0.30980392156862746,
                   0.4666666666666667,
                   0.83,
                   0.23921568627450981,
                   0.30980392156862746,
                   0.4666666666666667,
                   0.83,
                 ])),
             (this.currentFrame = b));
         },
         resize: function () {
           this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
           null != m.Instance.settings && m.Instance.settings.resize();
         },
         run: function () {
           switch (this.currentFrame) {
             case 2:
               this.runGeneratingFrame();
               break;
             case 3:
               this.runPauseFrame();
               break;
             case 4:
               this.runSettingsFrame();
               break;
             case 5:
               this.runHelp();
               break;
             case 6:
               this.runAchievements();
               break;
             case 7:
               this.runScreenshot();
           }
         },
         runGeneratingFrame: function () {
           this.scene.draw(this.backgroundEntity);
           var b = R.get("generatingPleaseWait", "Please wait!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 118), x.get_volter(), F.white, 2, Q.CENTER);
           this.scene.draw(b);
           b.layer = 25;
           b = R.get("generatingTitle", this.statis, new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 152), x.get_volter(), F.white, 3, Q.CENTER);
           this.scene.draw(b);
           b.layer = 25;
           this.spinningDiamond.setUniform("texClip", [81 * -(Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(4)) % 3), 0, 81, 56]);
           this.spinningDiamond.transform
             .reset()
             .scale(81, 56)
             .scale2D(0.9592592592592593)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 213);
           this.scene.draw(this.spinningDiamond);
           this.diamondBurst.transform
             .reset()
             .scale(552, 414)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2);
           this.scene.draw(this.diamondBurst);
           this.buttonEntity.clearPool();
           b = Math.round(168 * this.loadingBar);
           167 == b && (b = 168);
           this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 84, this.scene.get_height() / 2 - 207 + 264, 168, 10), new t(0, 207, 3, 5), new t(1, 1, 1, 3), 0, null, 2);
           4 < b && this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 84, this.scene.get_height() / 2 - 207 + 264, b, 10), new t(3, 207, 168 == b ? 4 : 3, 5), new t(1, 1, 1, 3), 0, null, 2);
           this.generatingTimer++;
           20 < this.generatingTimer &&
             ((b = R.get("generatingTip", lc.generatingTips[this.generatingTipNum], new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 336), x.get_volter(), new F(-10066330), 1.8, Q.CENTER, 1.5)),
             this.scene.draw(b),
             (b.layer = 25));
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         runPauseFrame: function () {
           var b = this;
           this.scene.draw(this.backgroundEntity);
           var a = R.get("pauseTextBG", "Paused", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 64), x.get_volter(), F.black, 5, Q.CENTER);
           this.scene.draw(a);
           a.layer = 25;
           a = R.get("pauseText", "Paused", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 60), x.get_volter(), F.white, 5, Q.CENTER);
           this.scene.draw(a);
           a.layer = 25;
           this.spinningDiamond.setUniform("texClip", [81 * -(Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(4)) % 3), 0, 81, 56]);
           this.spinningDiamond.transform
             .reset()
             .scale(81, 56)
             .scale2D(0.9592592592592593)
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 128);
           this.scene.draw(this.spinningDiamond);
           this.buttonEntity.clearPool();
           a = lc.addMenuButton("pauseBackToGame", this.buttonEntity, (this.scene.get_width() / 2 - 146) | 0, (this.scene.get_height() / 2 - 207 + 176) | 0, 292, 50, 2.5, function () {
             b.game.pawsed = !1;
             b.gotoAndStop(1);
           })
             ? R.get("pauseBackToGame", "Back to Game", new h(this.scene.get_width() / 2 + 2.5, this.scene.get_height() / 2 - 207 + 205.5), x.get_volter(), new F(-16764160), 3.5, Q.CENTER, 0)
             : R.get("pauseBackToGame", "Back to Game", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 203), x.get_volter(), new F(-16764160), 3.5, Q.CENTER, 0);
           a.layer = 25;
           this.scene.draw(a);
           a = lc.addMenuButton("pauseHelp", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 46) | 0, (this.scene.get_height() / 2 - 207 + 237) | 0, 150, 39, 1.925, function () {
             cb.open("https://mineblocks.com/1/wiki");
           })
             ? R.get("pauseHelp", "Wiki/Help", new h(this.scene.get_width() / 2 - 276 + 122.925, this.scene.get_height() / 2 - 207 + 257.925), x.get_volter(), F.black, 2, Q.CENTER, 0)
             : R.get("pauseHelp", "Wiki/Help", new h(this.scene.get_width() / 2 - 276 + 121, this.scene.get_height() / 2 - 207 + 256), x.get_volter(), F.black, 2, Q.CENTER, 0);
           a.layer = 25;
           this.scene.draw(a);
           a = lc.addMenuButton("pauseSettings", this.buttonEntity, (this.scene.get_width() / 2 - 75) | 0, (this.scene.get_height() / 2 - 207 + 237) | 0, 150, 39, 1.925, function () {
             b.gotoAndStop(4);
           })
             ? R.get("pauseSettings", "Options", new h(this.scene.get_width() / 2 + 1.925, this.scene.get_height() / 2 - 207 + 257.925), x.get_volter(), F.black, 2, Q.CENTER, 0)
             : R.get("pauseSettings", "Options", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 256), x.get_volter(), F.black, 2, Q.CENTER, 0);
           a.layer = 25;
           this.scene.draw(a);
           a = lc.addMenuButton("pauseAchievements", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 357) | 0, (this.scene.get_height() / 2 - 207 + 237) | 0, 150, 39, 1.925, function () {
             b.gotoAndStop(6);
           })
             ? R.get("pauseAchievements", "Achievements", new h(this.scene.get_width() / 2 - 276 + 433.925, this.scene.get_height() / 2 - 207 + 257.925), x.get_volter(), F.black, 2, Q.CENTER, 0)
             : R.get("pauseAchievements", "Achievements", new h(this.scene.get_width() / 2 - 276 + 432, this.scene.get_height() / 2 - 207 + 256), x.get_volter(), F.black, 2, Q.CENTER, 0);
           a.layer = 25;
           this.scene.draw(a);
           a = lc.addMenuButton("pauseQuit", this.buttonEntity, (this.scene.get_width() / 2 - 126) | 0, (this.scene.get_height() / 2 - 207 + 287) | 0, 252, 46, 2.5, function () {
             b.game.exit();
           })
             ? R.get("pauseQuit", "Save and Quit", new h(this.scene.get_width() / 2 + 2.5, this.scene.get_height() / 2 - 207 + 312.5), x.get_volter(), new F(-13434880), 2.625, Q.CENTER, 0)
             : R.get("pauseQuit", "Save and Quit", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 310), x.get_volter(), new F(-13434880), 2.625, Q.CENTER, 0);
           a.layer = 25;
           this.scene.draw(a);
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         runSettingsFrame: function () {
           this.scene.draw(this.backgroundEntity);
           m.Instance.settings.run();
         },
         settingsBackCallback: function () {
           this.gotoAndStop(3);
         },
         runHelp: function () {
           this.scene.draw(this.backgroundEntity);
         },
         runAchievements: function () {
           var b = this;
           this.scene.draw(this.backgroundEntity);
           this.buttonEntity.clearPool();
           var a = R.get("achievementTitle", "Achievements", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 29), x.get_volter(), F.white, 2, Q.CENTER);
           this.scene.draw(a);
           a.layer = 28;
           a = m.addSimpleButtonBetter("achievementsBack", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 397) | 0, (this.scene.get_height() / 2 - 207 + 347) | 0, 90, 36, 1.77, function () {
             b.gotoAndStop(3);
           })
             ? R.get("achievementsBack", "Close", new h(this.scene.get_width() / 2 - 276 + 444.77, this.scene.get_height() / 2 - 207 + 367.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("achievementsBack", "Close", new h(this.scene.get_width() / 2 - 276 + 443, this.scene.get_height() / 2 - 207 + 366), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 28;
           this.scene.draw(a);
           var c = (this.scene.get_height() / 2 - 207 + 56) | 0,
             d = 22 * g.achievements.length + 16,
             e = !1;
           if (this.game.world.gamemode == U.gamemodes.h.CREATIVE || this.game.world.gamemode == U.gamemodes.h.SPECTATOR) (d += 22), (e = !0);
           1 == this.game.world.cheats && 1 == m.Instance.API.loggedIn && (d += e ? 11 : 22);
           this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 276 + 66, c, 386, 270), new t(69, 217, 5, 5), new t(2, 2, 1, 1), 0, null, 2);
           0 == m.Instance.mouseDown() &&
             new t(this.scene.get_width() / 2 - 276 + 66, c, 386, 270).containsPoint(m.Instance.mouse) &&
             (0 < m.Instance.mouseWheelDelta
               ? (this.achievementsScrollPosition = Math.max(0, this.achievementsScrollPosition - 16))
               : 0 > m.Instance.mouseWheelDelta && (this.achievementsScrollPosition = Math.min(d - 270, this.achievementsScrollPosition + 16)));
           var l = m.buttonBehavior("achievementsScrollUp", !1, (this.scene.get_width() / 2 - 276 + 486 - 30) | 0, c | 0, 30, 20, null, !1);
           this.buttonEntity.addQuad(new M((this.scene.get_width() / 2 - 276 + 486 - 30) | 0, c | 0), new h(78 + 15 * l, 196), new h(15, 10), !0, new h(30, 20));
           2 == l && (this.achievementsScrollPosition = Math.max(0, this.achievementsScrollPosition - 8));
           l = m.buttonBehavior("achievementsScrollDown", !1, (this.scene.get_width() / 2 - 276 + 486 - 30) | 0, (c + 270 - 20) | 0, 30, 20, null, !1);
           this.buttonEntity.addQuad(new M((this.scene.get_width() / 2 - 276 + 486 - 30) | 0, (c + 270 - 20) | 0), new h(78 + 15 * l, 232), new h(15, 10), !0, new h(30, 20));
           2 == l && (this.achievementsScrollPosition = Math.min(d - 270, this.achievementsScrollPosition + 8));
           l = (226 * Math.min(1, 270 / Math.max(1, d))) | 0;
           a = new t((this.scene.get_width() / 2 - 276 + 486 - 30) | 0, c + 22 + Math.min(226 - l, (226 * this.achievementsScrollPosition) / d), 30, l + 1);
           l = m.buttonBehavior("achievementsScrollbar", !1, a.x | 0, a.y | 0, a.width | 0, a.height | 0, null, !1);
           G.gt(m.Instance.mouseDown(), 0) &&
             "achievementsScrollbar" == m.Instance.getUIHover() &&
             (1 == m.Instance.mouseDown() && (this.achievementsScrollMouseOffset = m.Instance.mouse.y - a.y),
             (l = 2),
             (this.achievementsScrollPosition = w.clamp(0, d - 270, ((m.Instance.mouse.y - this.achievementsScrollMouseOffset - (c + 22)) / 226) * d)));
           this.buttonEntity.add9Slice(a, new t(78 + 15 * l, 206, 15, 16), new t(1, 2, 13, 11), 0, null, 2);
           this.buttonEntity.addQuad(new M(a.x, (a.get_centerY() | 0) - 10), new h(78 + 15 * l, 222), new h(15, 10), !0, new h(30, 20));
           d = c + 8 - (this.achievementsScrollPosition | 0) - 22;
           this.game.world.gamemode == U.gamemodes.h.CREATIVE
             ? ((d += 22),
               (a = R.get("achievementDisclaimer1", "(You will not get achievements while in creative mode.)", new h(this.scene.get_width() / 2 - 276 + 76, d), x.get_volter(), F.black, 1)),
               a.setUniform("mask", [0, c + 2 - d, this.scene.get_width(), 264]),
               (a.layer = 28),
               this.scene.draw(a))
             : this.game.world.gamemode == U.gamemodes.h.SPECTATOR &&
               ((d += 22),
               (a = R.get("achievementDisclaimer1", "(You will not get achievements while in spectator mode.)", new h(this.scene.get_width() / 2 - 276 + 76, d), x.get_volter(), F.black, 1)),
               a.setUniform("mask", [0, c + 2 - d, this.scene.get_width(), 264]),
               (a.layer = 28),
               this.scene.draw(a));
           1 == this.game.world.cheats &&
             1 == m.Instance.API.loggedIn &&
             ((d += e ? 11 : 22),
             (a = R.get("achievementDisclaimer2", "(Website medals will not be awarded when cheats are enabled.)", new h(this.scene.get_width() / 2 - 276 + 76, d), x.get_volter(), F.black, 1)),
             a.setUniform("mask", [0, c + 2 - d, this.scene.get_width(), 264]),
             (a.layer = 28),
             this.scene.draw(a));
           e = 0;
           for (l = g.achievements.length; e < l; )
             if (((a = e++), (d += 22), !(d < c - 16 || d > c + 270))) {
               if (1 == this.game.world.achieve[a]) {
                 var k = Math.max(0, c + 2 - (d + 2)) | 0,
                   n = new t(this.scene.get_width() / 2 - 276 + 76, d + 2 + k, 18, Math.max(0, 14 - k));
                 n.set_height(w.clamp(0, n.height, c + 2 + 264 - n.y));
                 var p = n.width / 2,
                   q = n.height / 2;
                 this.buttonEntity.addQuad(new M(n.x, n.y), new h(69, 208 + k / 2), new h(p, q), !0, new h(n.width, n.height));
               } else
                 (k = Math.max(0, c + 2 - (d + 8)) | 0),
                   (n = new t(this.scene.get_width() / 2 - 276 + 80, d + 8 + k, 8, Math.max(0, 4 - k))),
                   n.set_height(w.clamp(0, n.height, c + 2 + 264 - n.y)),
                   (p = n.width / 2),
                   (q = n.height / 2),
                   this.buttonEntity.addQuad(new M(n.x, n.y), new h(69, 215 + k / 2), new h(p, q), !0, new h(n.width, n.height));
               a = R.get("achievementName" + a, g.achievements[a], new h(this.scene.get_width() / 2 - 276 + 100, d), x.get_volter(), new F(1 == this.game.world.achieve[a] ? -16733696 : -5636096), 2);
               a.setUniform("mask", [0, (c + 2 - d) / 2, this.scene.get_width(), 132]);
               this.scene.draw(a);
               a.layer = 28;
             }
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         setScreenshot: function (b) {
           null != this.screenshot && this.screenshot.destroy();
           this.screenshot = b.clone(!0);
           b = 0;
           for (var a = this.screenshot.width; b < a; )
             for (var c = b++, d = 0, e = this.screenshot.height; d < e; ) {
               var h = d++;
               this.screenshot.setPixel(c, h, -16777216 + (this.screenshot.getPixel(c, h) & 16777215));
             }
           null == this.screenshotEntity &&
             ((this.screenshotEntity = new ma([], ba.createQuad(1, 1), Na.getShader())),
             Na.setupEntity(this.screenshotEntity, this.screenshot, new t(0, 0, G.toFloat(this.screenshot.width), G.toFloat(this.screenshot.height))),
             (this.screenshotEntity.isTransparent = !0),
             (this.screenshotEntity.layer = 25));
           this.screenshotEntity.setTextureBuffer("texture", this.screenshot);
           this.screenshotEntity.setUniform("texClip", [0, 0, this.screenshot.width, this.screenshot.height]);
           this.screenshotEntity.setUniform("texSize", [this.screenshot.width, this.screenshot.height]);
         },
         runScreenshot: function () {
           var b = this;
           this.scene.draw(this.backgroundEntity);
           var a = R.get("screenshotTitle", "Screenshot", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 67), x.get_volter(), F.white, 2, Q.CENTER);
           this.scene.draw(a);
           a.layer = 28;
           a = G.toFloat(this.screenshot.height) / G.toFloat(this.screenshot.width);
           this.screenshotEntity.transform
             .reset()
             .scale(1, a)
             .scale2D(Math.min(276, G.toFloat(207 * this.screenshot.width) / G.toFloat(this.screenshot.height)))
             .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 189);
           this.scene.draw(this.screenshotEntity);
           this.buttonEntity.clearPool();
           a = this.buttonEntity;
           var c = new t(this.scene.get_width() / 2 - 185, this.scene.get_height() / 2 - 207 + 44, 370, 310),
             d = new t(0, 16, 16, 16),
             f = new t(6, 6, 4, 4),
             g = new e(),
             k = w.repeatArray([1, 1, 1, 2], 6);
           g.h.color = k;
           a.add9Slice(c, d, f, 0, g);
           a = m.addSimpleButtonBetter("screenshotSave", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 140) | 0, (this.scene.get_height() / 2 - 207 + 304) | 0, 138, 36, 1.77, function () {
             var a = new Date();
             a =
               "Mine-Blocks-" +
               I.substr(E.string(a.getFullYear()), -2, 2) +
               (10 <= a.getMonth() + 1 ? E.string(a.getMonth() + 1) : "0" + (a.getMonth() + 1)) +
               (10 <= a.getDate() ? E.string(a.getDate()) : "0" + a.getDate()) +
               "-" +
               a.getHours() +
               (10 <= a.getMinutes() ? E.string(a.getMinutes()) : "0" + a.getMinutes()) +
               (10 <= a.getSeconds() ? E.string(a.getSeconds()) : "0" + a.getSeconds()) +
               ".png";
             b.screenshot.updateImageFromTexture();
             gb.saveBytes(b.screenshot.data.encode(ah.PNG), a);
           })
             ? R.get("screenshotSave", "Save to file", new h(this.scene.get_width() / 2 - 276 + 209.77, this.scene.get_height() / 2 - 207 + 324.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("screenshotSave", "Save to file", new h(this.scene.get_width() / 2 - 276 + 208, this.scene.get_height() / 2 - 207 + 323), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 28;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("screenshotBack", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 337) | 0, (this.scene.get_height() / 2 - 207 + 304) | 0, 76, 36, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("screenshotBack", "Close", new h(this.scene.get_width() / 2 - 276 + 377.77, this.scene.get_height() / 2 - 207 + 324.77), x.get_volter(), F.white, 2, Q.CENTER)
             : R.get("screenshotBack", "Close", new h(this.scene.get_width() / 2 - 276 + 376, this.scene.get_height() / 2 - 207 + 323), x.get_volter(), F.white, 2, Q.CENTER);
           a.layer = 28;
           this.scene.draw(a);
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         __class__: lc,
       };
       var mh = function (b) {
         this.scene = b;
         this.backgroundEntity = new ma([], ba.createQuad(1, 1), Ub.getShader());
         Ub.setupEntity(this.backgroundEntity, new F(-16300172));
         this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(b.get_width(), b.get_height());
         this.backgroundEntity.layer = -2;
         b = P.getImage("ui");
         var a = Fa.getShader(xa.NORMAL),
           c = new e(),
           d = w.repeatArray([1], 24);
         c.h.color = d;
         d = w.repeatArray([0], 24);
         c.h.colorOffset = d;
         this.buttonEntity = new da(b, null, a, c);
         this.buttonEntity.isTransparent = !0;
         this.buttonEntity.layer = -1;
       };
       r["screens.Menu_Respawn"] = mh;
       mh.__name__ = "screens.Menu_Respawn";
       mh.prototype = {
         resize: function () {
           this.backgroundEntity.transform.reset().translate(0.5, 0.5).scale(this.scene.get_width(), this.scene.get_height());
         },
         run: function () {
           this.scene.draw(this.backgroundEntity);
           var b = R.get("deathText", "You died! " + (m.Instance.game.world.hardcore ? "Spectate?" : "Respawn?"), new h(this.scene.get_width() / 2, 45), x.get_volter(), F.white, 2.5, Q.CENTER, 1.5);
           this.scene.draw(b);
           this.buttonEntity.clearPool();
           b = m.addSimpleButtonBetter("respawn", this.buttonEntity, (this.scene.get_width() / 2 - 175) | 0, 73, 165, 28, 1.77, function () {
             m.Instance.set_frame("game");
           })
             ? R.get("respawn", m.Instance.game.world.hardcore ? "Spectate" : "Respawn", new h(this.scene.get_width() / 2 - 175 + 83, 89), x.get_volter(), F.white, 2.25, Q.CENTER, 1.5)
             : R.get("respawn", m.Instance.game.world.hardcore ? "Spectate" : "Respawn", new h(this.scene.get_width() / 2 - 175 + 82, 88), x.get_volter(), F.white, 2.25, Q.CENTER, 1.5);
           this.scene.draw(b);
           b = m.addSimpleButtonBetter("mainMenu", this.buttonEntity, (this.scene.get_width() / 2 + 10) | 0, 73, 165, 28, 1.77, function () {
             m.Instance.set_frame("menu");
           })
             ? R.get("mainMenu", "Main menu", new h(this.scene.get_width() / 2 + 93, 89), x.get_volter(), F.white, 2.25, Q.CENTER, 1.5)
             : R.get("mainMenu", "Main menu", new h(this.scene.get_width() / 2 + 92, 88), x.get_volter(), F.white, 2.25, Q.CENTER, 1.5);
           this.scene.draw(b);
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         __class__: mh,
       };
       var fh = function (b) {
         this.skinViewerFrames = [
           { name: "Idle", time: 0, frames: [0] },
           { name: "Move", time: 6, frames: [1, 2, 3, 4, 5] },
           { name: "Sneak", time: 16, frames: [6, 7] },
           { name: "Jump", time: 0, frames: [8] },
           { name: "Mine", time: 6, frames: [9, 10, 11, 12, 13] },
           { name: "Hurt", time: 0, frames: [14] },
           { name: "Sit", time: 0, frames: [15] },
           { name: "Cart", time: 0, frames: [16] },
         ];
         this.viewerCache = new e();
         this.skinPreviewerFrame = 1;
         this.selectedNum = 0;
         this.morePages = !0;
         this.currentSearch = this.searchEntry = "";
         this.currentCat = "featured";
         this.skinPage = 1;
         this.skinUploaded = this.skinUploadFailed = !1;
         this.skinNameCapitalization = this.authorCapitalization = !0;
         this.skinNameEntry = this.authorEntry = "";
         this.skinUploadFrame = 1;
         this.walkAnimation = this.walkAnimation2 = 0;
         this.skinFrame = 1;
         this.keyValues = [
           -2,
           65,
           66,
           67,
           68,
           69,
           70,
           71,
           72,
           73,
           74,
           75,
           76,
           77,
           78,
           79,
           80,
           81,
           82,
           83,
           84,
           85,
           86,
           87,
           88,
           89,
           90,
           32,
           16,
           37,
           39,
           38,
           40,
           13,
           17,
           9,
           191,
           220,
           187,
           188,
           190,
           189,
           112,
           113,
           114,
           115,
           116,
           117,
           118,
           119,
           120,
           122,
           123,
           124,
           125,
           126,
         ];
         this.keyNames = "None A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Space Shift Left Right Up Down Enter Ctrl Tab / \\ = , . - F1 F2 F3 F4 F5 F6 F7 F8 F9 F11 F12 F13 F14 F15".split(" ");
         this.currentResults = [];
         this.bindKey = "";
         this.particleOptions = ["None", "Some", "Lots"];
         this.qualityOptions = ["Low", "Medium", "High"];
         var a = new e();
         a.h.peaceful = 0;
         a.h.easy = 1;
         a.h.normal = 2;
         a.h.hard = 3;
         this.difficultyToInt = a;
         this.difficultyOptions = ["Peaceful", "Easy", "Normal", "Hard"];
         this.currentFrame = 0;
         this.scene = b;
         this.blackBoxWithRadius = new da(P.getImage("ui"));
         this.blackBoxWithRadius.isTransparent = !0;
         this.blackBoxWithRadius.layer = 26;
         b = P.getImage("ui");
         var c = Fa.getShader(xa.NORMAL);
         a = new e();
         var d = w.repeatArray([1], 24);
         a.h.color = d;
         d = w.repeatArray([0], 24);
         a.h.colorOffset = d;
         this.buttonEntity = new da(b, null, c, a);
         this.buttonEntity.isTransparent = !0;
         this.buttonEntity.layer = 27;
         P.getImage("skin_upload_progress").set_premultiplied(!1);
         this.skinUploadProgressEntity = new da(P.getImage("skin_upload_progress"));
         this.skinUploadProgressEntity.customBlendFunc = [p.gl.ONE, p.gl.ONE_MINUS_SRC_ALPHA, p.gl.ONE, p.gl.ONE];
         this.skinUploadProgressEntity.isTransparent = !0;
         this.skinUploadProgressEntity.layer = 27;
         this.gotoAndStop(1);
       };
       r["screens.Menu_Settings"] = fh;
       fh.__name__ = "screens.Menu_Settings";
       fh.prototype = {
         gotoAndStop: function (b) {
           this.currentFrame != b && (m.Instance.setUIHover("", !1), (this.currentFrame = b), this.resize(), (this.bindKey = ""));
         },
         callBackCallback: function () {
           J.save();
           this.gotoAndStop(1);
           this.backCallback();
         },
         resize: function () {
           1 == this.currentFrame
             ? (this.blackBoxWithRadius.clearPool(!1, !0),
               this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 276 + 57, this.scene.get_height() / 2 - 207 + 90, 438, 66), new t(0, 16, 16, 16), new t(6, 6, 4, 4)),
               this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 276 + 57, this.scene.get_height() / 2 - 207 + 174, 438, 167), new t(0, 16, 16, 16), new t(6, 6, 4, 4)))
             : (this.blackBoxWithRadius.clearPool(!1, !0), this.blackBoxWithRadius.add9Slice(new t(this.scene.get_width() / 2 - 276 + 57, this.scene.get_height() / 2 - 207 + 74, 438, 267), new t(0, 16, 16, 16), new t(6, 6, 4, 4)));
         },
         run: function () {
           switch (this.currentFrame) {
             case 1:
               this.runSettingsFrame();
               break;
             case 2:
               this.runKeybindingsFrame();
               break;
             case 3:
               this.runSkinsFrame();
           }
         },
         runSettingsFrame: function () {
           var b = this;
           this.scene.draw(this.blackBoxWithRadius);
           W.drawDropdown();
           var a = R.get("settingsText", "Options", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 52), x.get_volter(), F.white, 3, Q.CENTER);
           this.scene.draw(a);
           a.layer = 28;
           this.buttonEntity.clearPool();
           a = m.addSimpleButtonBetter("settingsChangeSkin", this.buttonEntity, (this.scene.get_width() / 2 - 184 - 15) | 0, (this.scene.get_height() / 2 - 207 + 105) | 0, 184, 36, 1.77, function () {
             b.gotoAndStop(3);
             b.gotoSkinFrame(1);
           })
             ? R.get("settingsChangeSkin", "Character skin", new h(this.scene.get_width() / 2 - 184 - 15 + 93, this.scene.get_height() / 2 - 207 + 124), x.get_volter(), F.white, 2, Q.CENTER, 0)
             : R.get("settingsChangeSkin", "Character skin", new h(this.scene.get_width() / 2 - 184 - 15 + 92, this.scene.get_height() / 2 - 207 + 123), x.get_volter(), F.white, 2, Q.CENTER, 0);
           a.layer = 28;
           this.scene.draw(a);
           m.addSimpleButtonBetter("settingsChangeControls", this.buttonEntity, (this.scene.get_width() / 2 + 15) | 0, (this.scene.get_height() / 2 - 207 + 105) | 0, 184, 36, 1.77, function () {
             b.gotoAndStop(2);
           });
           a = R.get("settingsChangeControls", "Controls", new h(this.scene.get_width() / 2 + 108, this.scene.get_height() / 2 - 207 + 124), x.get_volter(), F.white, 2, Q.CENTER, 0);
           a.layer = 28;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("settingsBackToMenu", this.buttonEntity, (this.scene.get_width() / 2 + 134 - 66) | 0, (this.scene.get_height() / 2 - 207 + 359) | 0, 132, 30, 1.77, function () {
             b.callBackCallback();
           })
             ? R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 136.77, this.scene.get_height() / 2 - 207 + 376.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
             : R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 135, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           var c = (this.scene.get_width() / 2 - 276 + 57) | 0,
             d = (this.scene.get_height() / 2 - 207 + 188) | 0;
           a = R.get("settingsHeaderSFX", "SFX volume", new h(c + 118, d), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.numericStepper(this.buttonEntity, "settingsSFX", J.soundVol, c + 118 + 6, d - 3, 35, 0, 100, 5, function (a) {
             J.soundVol = a | 0;
           });
           a = R.get("settingsHeaderVolume", "Music volume", new h(c + 118, d + 30), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.numericStepper(this.buttonEntity, "musicSFX", J.songVol, c + 118 + 6, d + 30 - 3, 35, 0, 100, 5, function (a) {
             J.songVol = a | 0;
             ya.set_musicVolume(J.songVol / 100);
           });
           a = R.get("settingsHeaderFocus", "Focus pause", new h(c + 118, d + 60), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "focusPause",
             J.focusPause,
             c + 118 + 6,
             d + 60 + 1,
             function () {
               J.focusPause = !J.focusPause;
             },
             !1
           );
           a = R.get("settingsHeaderArmor", "Show armor", new h(c + 118, d + 90), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "showArmor",
             J.showArmor,
             c + 118 + 6,
             d + 90 + 1,
             function () {
               J.showArmor = !J.showArmor;
             },
             !1
           );
           a = R.get("settingsHeaderHUD", "Show HUD", new h(c + 118, d + 120), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "showHUD",
             !J.hideGUI,
             c + 118 + 6,
             d + 120 + 1,
             function () {
               J.hideGUI = !J.hideGUI;
             },
             !1
           );
           a = R.get("settingsHeaderTouch", "Touch controls", new h(c + 318, d), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.checkbox(this.buttonEntity, "touchControls", J.touchControls, c + 318 + 6, d + 1, function () {
             J.touchControls = !J.touchControls;
           });
           var e = "game" == m.Instance.frame && !m.Instance.game.world.hardcore;
           a = R.get("settingsHeaderDifficulty", "Difficulty", new h(c + 318, d + 30), x.get_volter(), e ? F.white : new F(-6710887), 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.dropdown(
             this.buttonEntity,
             "difficulty",
             this.difficultyOptions,
             "game" == m.Instance.frame ? (m.Instance.game.world.hardcore ? 3 : this.difficultyToInt.h[m.Instance.game.world.difficulty]) : 2,
             c + 318 + 6,
             d + 30 - 3,
             75,
             function (a, b) {
               m.Instance.game.world.difficulty = b.toLowerCase();
             },
             !e
           );
           a = R.get("settingsHeaderPassiveMobs", "Passive mobs", new h(c + 318, d + 60), x.get_volter(), e ? F.white : new F(-6710887), 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.checkbox(
             this.buttonEntity,
             "passiveMobs",
             !e || m.Instance.game.getGameRule("passivemobs"),
             c + 318 + 6,
             d + 60 + 1,
             function () {
               var a = m.Instance.game.world.gameRules,
                 b = 1 != m.Instance.game.getGameRule("passivemobs");
               a.h.passivemobs = b;
             },
             !e
           );
           a = R.get("settingsHeaderQuality", "Quality", new h(c + 318, d + 90), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.dropdown(this.buttonEntity, "quality", this.qualityOptions, J.qual - 1, c + 318 + 6, d + 90 - 3, 75, function (a, b) {
             J.qual = a + 1;
           });
           a = R.get("settingsHeaderParticles", "Particles", new h(c + 318, d + 120), x.get_volter(), F.white, 1.7, Q.RIGHT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           W.dropdown(this.buttonEntity, "particles", this.particleOptions, J.particles - 1, c + 318 + 6, d + 120 - 3, 75, function (a, b) {
             J.particles = a + 1;
           });
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         runKeybindingsFrame: function () {
           var b = this;
           this.scene.draw(this.blackBoxWithRadius);
           var a = R.get("keybindingsText", "Key bindings", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 46), x.get_volter(), F.white, 3, Q.CENTER);
           this.scene.draw(a);
           a.layer = 28;
           this.buttonEntity.clearPool();
           a = m.addSimpleButtonBetter("settingsBackToSettings", this.buttonEntity, (this.scene.get_width() / 2 - 134 - 66) | 0, (this.scene.get_height() / 2 - 207 + 359) | 0, 132, 30, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("settingsBackToSettings", "Settings", new h(this.scene.get_width() / 2 - 134 + 2.77, this.scene.get_height() / 2 - 207 + 376.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
             : R.get("settingsBackToSettings", "Settings", new h(this.scene.get_width() / 2 - 134 + 1, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("settingsReset", this.buttonEntity, (this.scene.get_width() / 2 - 46) | 0, (this.scene.get_height() / 2 - 207 + 364) | 0, 92, 21, 1.77, function () {
             J.resetKeyBindings();
           })
             ? R.get("settingsReset", "Use default", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 376), x.get_volter(), new F(-3407872), 1, Q.CENTER)
             : R.get("settingsReset", "Use default", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), new F(-3407872), 1, Q.CENTER);
           a.layer = 28;
           this.scene.draw(a);
           a = m.addSimpleButtonBetter("settingsBackToMenu", this.buttonEntity, (this.scene.get_width() / 2 + 134 - 66) | 0, (this.scene.get_height() / 2 - 207 + 359) | 0, 132, 30, 1.77, function () {
             b.bindKey = "";
             b.callBackCallback();
           })
             ? R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 136.77, this.scene.get_height() / 2 - 207 + 376.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
             : R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 135, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           if ("" != this.bindKey) {
             a = -1;
             for (var c = m.Instance.getIsDown().keys(); c.hasNext(); ) {
               a = this.keyCodeToInt(c.next());
               break;
             }
             if (0 <= a) {
               c = !1;
               for (var d = Object.keys(J.keyBindings.h), f = d.length, l = 0; l < f; ) {
                 var k = d[l++];
                 k != this.bindKey &&
                   J.keyBindings.h[k].h.id == a &&
                   (("down" != k && "down2" != k) || ("down" != this.bindKey && "down2" != this.bindKey)) &&
                   (0 != J.useRightClickKey || ("secondClick" != k && "altClick" != k) || ("secondClick" != this.bindKey && "altClick" != this.bindKey)) &&
                   (c = !0);
               }
               1 != c && ((c = J.keyBindings), (d = this.bindKey), (f = new e()), (f.h.id = a), (a = this.getKeyNameOfID(a)), (f.h.name = a), (c.h[d] = g.makeDynamicMap(f)), (this.bindKey = ""));
             }
           }
           this.keybindButton("inventory", "Open inventory", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 91) | 0);
           this.keybindButton("dropItem", "Drop item", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 121) | 0);
           this.keybindButton("tasks", "Open task list", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 151) | 0);
           this.keybindButton("openHelp", "Open help", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 181) | 0);
           this.keybindButton("commands", "Commands", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 211) | 0);
           this.keybindButton("gui", "Hide/show GUI", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 241) | 0);
           this.keybindButton("screenshot", "Take screenshot", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 271) | 0);
           this.keybindButton("pick", "Pick block", (this.scene.get_width() / 2 - 276 + 72) | 0, (this.scene.get_height() / 2 - 207 + 301) | 0);
           this.keybindButton("left", "Move left", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 91) | 0);
           this.keybindButton("right", "Move right", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 121) | 0);
           this.keybindButton("up", "Jump", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 151) | 0);
           W.checkbox(
             this.buttonEntity,
             "useSpacebar",
             J.spaceJump,
             (this.scene.get_width() / 2 - 276 + 389) | 0,
             (this.scene.get_height() / 2 - 207 + 155) | 0,
             function () {
               J.spaceJump = !J.spaceJump;
             },
             !1,
             90
           );
           a = R.get("keybindJumpSpacebarLabel", "Spacebar", new h(((this.scene.get_width() / 2 - 276 + 271) | 0) + 140, ((this.scene.get_height() / 2 - 207 + 151) | 0) + 5), x.get_volter(), F.white, 1.4, Q.LEFT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           this.keybindButton("down", "Sneak", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 181) | 0);
           this.keybindButton("down2", "Fly downwards", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 211) | 0);
           this.keybindButton("secondClick", "", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 241) | 0);
           W.checkbox(
             this.buttonEntity,
             "useToRightClick",
             J.useRightClickKey,
             (this.scene.get_width() / 2 - 276 + 339) | 0,
             (this.scene.get_height() / 2 - 207 + 245) | 0,
             function () {
               J.useRightClickKey = !J.useRightClickKey;
               if (J.useRightClickKey) {
                 if (J.keyBindings.h.secondClick.h.id == J.keyBindings.h.altClick.h.id) {
                   var a = new e();
                   a.h.id = -2;
                   a.h.name = "None";
                   J.keyBindings.h.altClick = g.makeDynamicMap(a);
                 }
               } else -2 == J.keyBindings.h.altClick.h.id && ((a = new e()), (a.h.id = J.keyBindings.h.secondClick.h.id), (a.h.name = J.keyBindings.h.secondClick.h.name), (J.keyBindings.h.altClick = g.makeDynamicMap(a)));
             },
             !1,
             152
           );
           a = R.get("keybindsecondClickLabel", "Use for right-click", new h(((this.scene.get_width() / 2 - 276 + 271) | 0) + 90, ((this.scene.get_height() / 2 - 207 + 241) | 0) + 5), x.get_volter(), F.white, 1.4, Q.LEFT, 1.5);
           a.layer = 28;
           this.scene.draw(a);
           this.keybindButton("altClick", "Alt. click action", (this.scene.get_width() / 2 - 276 + 271) | 0, (this.scene.get_height() / 2 - 207 + 271) | 0);
           this.buttonEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
         },
         keybindButton: function (b, a, c, d) {
           var e = this;
           var g = this.getKeyName(b);
           this.bindKey == b && (g = G.gt(20, G.toFloat(m.Instance.tick) % G.toFloat(40) | 0) ? "> " + g + " <" : ">" + g + "<");
           g = m.addSimpleButtonBetter("keybind" + b, this.buttonEntity, c, d, 60, 22, 1, function () {
             e.bindKey = b;
           })
             ? R.get("keybind" + b, g, new h(c + 30 + 1 + 1, d + 11 + 1 + 1), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5)
             : R.get("keybind" + b, g, new h(c + 30 + 1, d + 11 + 1), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5);
           g.layer = 28;
           this.scene.draw(g);
           "" != a && ((g = R.get("keybind" + b + "Label", a, new h(c + 60 + 8, d + 5), x.get_volter(), F.white, 1.4, Q.LEFT, 1.5)), (g.layer = 28), this.scene.draw(g));
         },
         getKeyName: function (b) {
           return null == J.keyBindings.h[b] ? "None" : this.getKeyNameOfID(J.keyBindings.h[b].h.id);
         },
         getKeyNameOfID: function (b) {
           if (null == this.keyObject) {
             this.keyObject = new Ma();
             for (var a = 0, c = this.keyNames.length; a < c; ) {
               var d = a++;
               this.keyObject.h[this.keyValues[d]] = this.keyNames[d];
             }
           }
           return this.keyObject.h[b];
         },
         keyCodeToInt: function (b) {
           if (null == this.keyToIntObject) {
             this.keyToIntObject = new Ma();
             for (var a = J.intToKey.keys(); a.hasNext(); ) {
               var c = a.next();
               this.keyToIntObject.h[J.intToKey.h[c]] = c;
             }
           }
           return null == this.keyToIntObject.h[b] ? -2 : this.keyToIntObject.h[b];
         },
         runSkinsFrame: function () {
           var b = this;
           if (null == this.skinViewerManager) {
             this.skinViewerManager = new ec();
             var a = this.skinViewerManager.skinTexture,
               c = Fa.getShader(xa.NORMAL),
               d = new e(),
               f = w.repeatArray([1], 24);
             d.h.color = f;
             f = w.repeatArray([0], 24);
             d.h.colorOffset = f;
             this.skinPreviewEntity = new da(a, null, c, d);
             this.skinPreviewEntity.isTransparent = !0;
             this.skinPreviewEntity.layer = 28;
             a = ka.frames.skin;
             c = Fa.getShader(xa.NORMAL);
             d = new e();
             f = w.repeatArray([1], 24);
             d.h.color = f;
             f = w.repeatArray([0], 24);
             d.h.colorOffset = f;
             this.mainSkinEntity = new da(a, null, c, d);
             this.mainSkinEntity.isTransparent = !0;
             this.mainSkinEntity.layer = 28;
           }
           this.scene.draw(this.blackBoxWithRadius);
           var g = R.get("skinsText", "Skins", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 52), x.get_volter(), F.white, 3, Q.CENTER);
           g.layer = 28;
           this.scene.draw(g);
           this.buttonEntity.clearPool();
           this.skinPreviewEntity.clearPool();
           if (1 == this.skinFrame) {
             g = m.addSimpleButtonBetter("skinsDatabase", this.buttonEntity, (this.scene.get_width() / 2 + 72 - 98) | 0, (this.scene.get_height() / 2 - 207 + 127 - 16) | 0, 196, 32, 1.77, function () {
               b.gotoSkinFrame(2);
             })
               ? R.get("skinsDatabase", "Skin database", new h(this.scene.get_width() / 2 + 74.77, this.scene.get_height() / 2 - 207 + 129.77), x.get_volter(), F.white, 2, Q.CENTER)
               : R.get("skinsDatabase", "Skin database", new h(this.scene.get_width() / 2 + 73, this.scene.get_height() / 2 - 207 + 128), x.get_volter(), F.white, 2, Q.CENTER);
             g.layer = 28;
             this.scene.draw(g);
             m.addSimpleButtonBetter("skinsUpload", this.buttonEntity, (this.scene.get_width() / 2 + 72 - 72) | 0, (this.scene.get_height() / 2 - 207 + 163 - 16) | 0, 144, 32, 1.77, function () {
               b.gotoSkinFrame(3);
             })
               ? (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 + 72 - 60 + 1.77, this.scene.get_height() / 2 - 207 + 163 - 9 + 1.77), new h(9, 176), new h(32, 26), !0, new h(19.6, 16.2)),
                 (g = R.get("skinsUpload", "Upload skin", new h(this.scene.get_width() / 2 + 86.77, this.scene.get_height() / 2 - 207 + 165.77), x.get_volter(), F.white, 1.6, Q.CENTER, 1.5)))
               : (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 + 72 - 60, this.scene.get_height() / 2 - 207 + 163 - 9), new h(9, 176), new h(32, 26), !0, new h(19.6, 16.2)),
                 (g = R.get("skinsUpload", "Upload skin", new h(this.scene.get_width() / 2 + 85, this.scene.get_height() / 2 - 207 + 164), x.get_volter(), F.white, 1.6, Q.CENTER, 1.5)));
             g.layer = 28;
             this.scene.draw(g);
             g = m.addSimpleButtonBetter("skinsDefault", this.buttonEntity, (this.scene.get_width() / 2 + 72 - 72) | 0, (this.scene.get_height() / 2 - 207 + 231 - 16) | 0, 144, 32, 1.77, function () {
               ka.loadDefault(!0, ka.frames);
             })
               ? R.get("skinsDefault", "Use default skin", new h(this.scene.get_width() / 2 + 74.77, this.scene.get_height() / 2 - 207 + 233.77), x.get_volter(), F.white, 1.6, Q.CENTER, 1.5)
               : R.get("skinsDefault", "Use default skin", new h(this.scene.get_width() / 2 + 73, this.scene.get_height() / 2 - 207 + 232), x.get_volter(), F.white, 1.6, Q.CENTER, 1.5);
             g.layer = 28;
             this.scene.draw(g);
             g = R.get("skinsDownloadDefault", "Download default skin", new h(this.scene.get_width() / 2 + 73, this.scene.get_height() / 2 - 207 + 261), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5);
             if (
               0 <
               m.buttonBehavior(
                 "skinsDownloadDefault",
                 !1,
                 (this.scene.get_width() / 2 + 72 - (1.3 * g.calculatedWidth) / 2) | 0,
                 (this.scene.get_height() / 2 - 207 + 260 - 8) | 0,
                 (1.3 * g.calculatedWidth) | 0,
                 16,
                 function () {
                   cb.open("https://mineblocks.com/1/skins/download");
                 },
                 !1
               )
             ) {
               g.setColor(new F(-3355444));
               a = this.buttonEntity;
               c = new M(this.scene.get_width() / 2 + 72 - (1.3 * g.calculatedWidth) / 2, this.scene.get_height() / 2 - 207 + 266);
               var k = new h(96, 0),
                 n = new h(1, 1),
                 p = new h(1.3 * g.calculatedWidth, 1);
               d = new e();
               f = w.repeatArray([0.8, 0.8, 0.8, 1], 6);
               d.h.color = f;
               a.addQuad(c, k, n, !0, p, null, null, d);
             } else
               g.setColor(F.white),
                 (a = this.buttonEntity),
                 (c = this.scene.get_width() / 2 + 72 - (1.3 * g.calculatedWidth) / 2),
                 (k = this.scene.get_height() / 2 - 207 + 266),
                 (n = 1.3 * g.calculatedWidth),
                 a.addQuad(new M(c, k), new h(96, 0), new h(1, 1), !0, new h(n, 1));
             g.layer = 28;
             this.scene.draw(g);
             this.mainSkinEntity.clearPool();
             this.drawSkinViewer("main", this.mainSkinEntity, new h(0, 0), (this.scene.get_width() / 2 - 276 + 98) | 0, (this.scene.get_height() / 2 - 207 + 98) | 0, 114);
             this.mainSkinEntity.resetUnusedQuads();
             this.scene.draw(this.mainSkinEntity);
           } else if (2 == this.skinFrame)
             if (
               ((g = m.addSimpleButtonBetter("skinsBackToSkins", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 65) | 0, (this.scene.get_height() / 2 - 207 + 278) | 0, 146, 22, 1.77, function () {
                 b.gotoSkinFrame(1);
               })
                 ? R.get("skinsBackToSkins", "Back to skin menu", new h(this.scene.get_width() / 2 - 276 + 140.77, this.scene.get_height() / 2 - 207 + 291.77), x.get_volter(), F.white, 1.4, Q.CENTER, 1.5)
                 : R.get("skinsBackToSkins", "Back to skin menu", new h(this.scene.get_width() / 2 - 276 + 139, this.scene.get_height() / 2 - 207 + 290), x.get_volter(), F.white, 1.4, Q.CENTER, 1.5)),
               (g.layer = 28),
               this.scene.draw(g),
               (d = this.currentCat),
               W.radio(
                 this.buttonEntity,
                 "skinCategory1",
                 this.currentCat,
                 "featured",
                 (this.scene.get_width() / 2 - 276 + 73) | 0,
                 (this.scene.get_height() / 2 - 207 + 86) | 0,
                 function () {
                   b.currentCat = "featured";
                 },
                 !1,
                 82
               ),
               (g = R.get("skinCategory1", "Featured", new h(this.scene.get_width() / 2 - 276 + 91, this.scene.get_height() / 2 - 207 + 88), x.get_volter(), F.white, 1.45, Q.LEFT, 1.5)),
               (g.layer = 28),
               this.scene.draw(g),
               W.radio(
                 this.buttonEntity,
                 "skinCategory2",
                 this.currentCat,
                 "new",
                 (this.scene.get_width() / 2 - 276 + 165) | 0,
                 (this.scene.get_height() / 2 - 207 + 86) | 0,
                 function () {
                   b.currentCat = "new";
                 },
                 !1,
                 50
               ),
               (g = R.get("skinCategory2", "New", new h(this.scene.get_width() / 2 - 276 + 183, this.scene.get_height() / 2 - 207 + 88), x.get_volter(), F.white, 1.45, Q.LEFT, 1.5)),
               (g.layer = 28),
               this.scene.draw(g),
               W.radio(
                 this.buttonEntity,
                 "skinCategory3",
                 this.currentCat,
                 "best",
                 (this.scene.get_width() / 2 - 276 + 222) | 0,
                 (this.scene.get_height() / 2 - 207 + 86) | 0,
                 function () {
                   b.currentCat = "best";
                 },
                 !1,
                 50
               ),
               (g = R.get("skinCategory3", "Best", new h(this.scene.get_width() / 2 - 276 + 240, this.scene.get_height() / 2 - 207 + 88), x.get_volter(), F.white, 1.45, Q.LEFT, 1.5)),
               (g.layer = 28),
               this.scene.draw(g),
               this.currentCat != d && ((this.skinPage = 1), this.loadPublicSkins()),
               W.textfield(this.buttonEntity, "skinSearch", this.searchEntry, (this.scene.get_width() / 2 - 276 + 325) | 0, (this.scene.get_height() / 2 - 207 + 83) | 0, 153, 1.45, function (a) {
                 b.searchEntry = a;
               }),
               "" == this.searchEntry &&
                 ((g = R.get("skinSearchPlaceholder", "Search", new h(this.scene.get_width() / 2 - 276 + 329, this.scene.get_height() / 2 - 207 + 87), x.get_volter(), new F(-12303292), 1.45, Q.LEFT, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g)),
               1 == m.Instance.keyUp(13) &&
                 ("search" == this.currentCat
                   ? this.currentSearch != this.searchEntry && ((this.currentSearch = this.searchEntry), (this.skinPage = 1), this.loadPublicSkins())
                   : ((this.currentCat = "search"), (this.currentSearch = this.searchEntry), (this.skinPage = 1), this.loadPublicSkins())),
               1 == this.skinPreviewerFrame)
             )
               this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 147, this.scene.get_height() / 2 - 207 + 126, 294, 126), new t(0, 16, 16, 16), new t(6, 6, 4, 4)),
                 this.buttonEntity.addQuad(
                   new M(),
                   new h(41, 176),
                   new h(32, 32),
                   !0,
                   null,
                   ba.quadMatrixHelper(
                     new t(0, 0, 32, 32),
                     new T()
                       .translate(-16, -16)
                       .rotate2D(((30 * -Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(5))) / 180) * Math.PI)
                       .translate(this.scene.get_width() / 2 - 276 + 198, this.scene.get_height() / 2 - 207 + 170)
                   )
                 ),
                 (g = R.get("skinLoading", "Loading...", new h(this.scene.get_width() / 2 - 276 + 227, this.scene.get_height() / 2 - 207 + 156), x.get_volter(), F.white, 3)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = R.get(
                   "skinLoadingSubtext",
                   "If this takes too long, it might\nmean you don't have a connection\nto MineBlocks.com.",
                   new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 218),
                   x.get_volter(),
                   F.white,
                   1.4,
                   Q.CENTER,
                   1.5
                 )),
                 (g.layer = 28),
                 this.scene.draw(g);
             else if (2 == this.skinPreviewerFrame)
               (g = R.get(
                 "skinError",
                 "Couldn't connect to skin database!\n\nCheck your internet connection and make sure\nyou can access MineBlocks.com.",
                 new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 200),
                 x.get_volter(),
                 new F(-30720),
                 1.6,
                 Q.CENTER,
                 1.5
               )),
                 (g.layer = 28),
                 this.scene.draw(g);
             else if (3 == this.skinPreviewerFrame) {
               for (d = 0; 4 > d; ) {
                 var q = [d++];
                 null != this.currentResults[q[0]] &&
                   (this.drawSkinViewer(
                     "list" + q[0],
                     this.skinPreviewEntity,
                     this.skinViewerManager.getTextureSlot(this.currentResults[q[0]].id).rect.get_position(),
                     (this.scene.get_width() / 2 - 276 + 70 + 108 * q[0]) | 0,
                     (this.scene.get_height() / 2 - 207 + 116) | 0,
                     82,
                     !1
                   ),
                   (g = m.addSimpleButtonBetter(
                     "skinListView" + q[0],
                     this.buttonEntity,
                     (this.scene.get_width() / 2 - 276 + 70 + 108 * q[0]) | 0,
                     (this.scene.get_height() / 2 - 207 + 227.9438202247191) | 0,
                     82,
                     22,
                     1.77,
                     (function (a) {
                       return function () {
                         b.selectedNum = a[0];
                         b.skinPreviewerFrame = 4;
                         null != b.viewerCache.h.details && (b.viewerCache.h.details.animation = 0);
                       };
                     })(q),
                     !1
                   )
                     ? R.get("skinListView" + q[0], "View", new h(this.scene.get_width() / 2 - 276 + 70 + 108 * q[0] + 43.77, this.scene.get_height() / 2 - 207 + 240.71382022471911), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
                     : R.get("skinListView" + q[0], "View", new h(this.scene.get_width() / 2 - 276 + 70 + 108 * q[0] + 42, this.scene.get_height() / 2 - 207 + 238.9438202247191), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)),
                   (g.layer = 28),
                   this.scene.draw(g));
               }
               this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 61, this.scene.get_height() / 2 - 207 + 257, 122, 37), new t(0, 16, 16, 16), new t(6, 6, 4, 4));
               d = m.buttonBehavior("skinLeftArrow", !1, (this.scene.get_width() / 2 - 50) | 0, (this.scene.get_height() / 2 - 207 + 265) | 0, 16, 20, function () {
                 1 < b.skinPage && (b.skinPage--, b.loadPublicSkins());
               });
               this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 50, this.scene.get_height() / 2 - 207 + 265), new h(75 + 16 * d, 176), new h(16, 20), !0);
               d = m.buttonBehavior("skinRightArrow", !1, (this.scene.get_width() / 2 + 50 - 16) | 0, (this.scene.get_height() / 2 - 207 + 265) | 0, 16, 20, function () {
                 b.morePages && (b.skinPage++, b.loadPublicSkins());
               });
               this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 + 50 - 16, this.scene.get_height() / 2 - 207 + 265), new h(75 + 16 * d, 176), new h(16, 20), !0, null, null, [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1]);
               g = R.get("skinPage", "Page " + this.skinPage, new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 276), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5);
               g.layer = 28;
               this.scene.draw(g);
             } else
               4 == this.skinPreviewerFrame &&
                 ((g = m.addSimpleButtonBetter("skinsBackToSkins", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 65) | 0, (this.scene.get_height() / 2 - 207 + 278) | 0, 146, 22, 1.77, function () {
                   b.gotoSkinFrame(1);
                 })
                   ? R.get("skinsBackToSkins", "Back to skin menu", new h(this.scene.get_width() / 2 - 276 + 140.77, this.scene.get_height() / 2 - 207 + 291.77), x.get_volter(), F.white, 1.4, Q.CENTER, 1.5)
                   : R.get("skinsBackToSkins", "Back to skin menu", new h(this.scene.get_width() / 2 - 276 + 139, this.scene.get_height() / 2 - 207 + 290), x.get_volter(), F.white, 1.4, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 this.buttonEntity.add9Slice(new t(this.scene.get_width() / 2 - 195, this.scene.get_height() / 2 - 207 + 107, 390, 167), new t(0, 16, 16, 16), new t(6, 6, 4, 4)),
                 this.drawSkinViewer(
                   "details",
                   this.skinPreviewEntity,
                   this.skinViewerManager.getTextureSlot(this.currentResults[this.selectedNum].id).rect.get_position(),
                   (this.scene.get_width() / 2 - 276 + 89) | 0,
                   (this.scene.get_height() / 2 - 207 + 115) | 0,
                   98,
                   !0
                 ),
                 (g = R.get("skinNameHeader", "Skin name:", new h(this.scene.get_width() / 2 - 276 + 200, this.scene.get_height() / 2 - 207 + 115), x.get_volter(), new F(-3750202), 1.2, Q.LEFT, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 W.dynamicText(this.buttonEntity, "skinName", this.currentResults[this.selectedNum].name, (this.scene.get_width() / 2 - 276 + 200 - 1) | 0, (this.scene.get_height() / 2 - 207 + 126) | 0, 260, 2),
                 (g = R.get("skinAuthorHeader", "Author:", new h(this.scene.get_width() / 2 - 276 + 200, this.scene.get_height() / 2 - 207 + 150), x.get_volter(), new F(-3750202), 1.2, Q.LEFT, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 W.dynamicText(this.buttonEntity, "skinAuthor", this.currentResults[this.selectedNum].author, (this.scene.get_width() / 2 - 276 + 200 - 1) | 0, (this.scene.get_height() / 2 - 207 + 161) | 0, 260, 2),
                 (g = R.get("skinIDHeader", "Skin ID:", new h(this.scene.get_width() / 2 - 276 + 200, this.scene.get_height() / 2 - 207 + 183), x.get_volter(), new F(-3750202), 1.2, Q.LEFT, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 W.dynamicText(this.buttonEntity, "skinID", E.string(this.currentResults[this.selectedNum].id), (this.scene.get_width() / 2 - 276 + 200 - 1) | 0, (this.scene.get_height() / 2 - 207 + 194) | 0, 95, 2),
                 (g = R.get("skinDateHeader", "Upload date:", new h(this.scene.get_width() / 2 - 276 + 305, this.scene.get_height() / 2 - 207 + 183), x.get_volter(), new F(-3750202), 1.2, Q.LEFT, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 W.dynamicText(this.buttonEntity, "skinDate", this.currentResults[this.selectedNum].dateString, (this.scene.get_width() / 2 - 276 + 305 - 1) | 0, (this.scene.get_height() / 2 - 207 + 194) | 0, 155, 2),
                 (g = m.addSimpleButtonBetter(
                   "skinUse",
                   this.buttonEntity,
                   (this.scene.get_width() / 2 - 276 + 200) | 0,
                   (this.scene.get_height() / 2 - 207 + 218) | 0,
                   128,
                   26,
                   1.77,
                   function () {
                     ka.getSkinFrom("https://mineblocks.com/1/skins/" + b.currentResults[b.selectedNum].id + ".png", ka.frames, 0, function (a) {
                       ka.msg = "You are now using '" + b.currentResults[b.selectedNum].name + "' as your skin!";
                       ka.saveSkinData();
                       b.mainSkinEntity.set_texture(ka.frames.skin);
                       null != m.Instance.game && m.Instance.game.characterPool.setUniform("texSize2", [ka.frames.skin.width, ka.frames.skin.height]);
                     });
                   },
                   !1
                 )
                   ? R.get("skinUse", "Use this skin!", new h(this.scene.get_width() / 2 - 276 + 265.77, this.scene.get_height() / 2 - 207 + 233.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
                   : R.get("skinUse", "Use this skin!", new h(this.scene.get_width() / 2 - 276 + 264, this.scene.get_height() / 2 - 207 + 232), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = m.addSimpleButtonBetter(
                   "skinDownload",
                   this.buttonEntity,
                   (this.scene.get_width() / 2 - 276 + 200 - 3 + 135) | 0,
                   (this.scene.get_height() / 2 - 207 + 218) | 0,
                   128,
                   26,
                   1.77,
                   function () {
                     cb.open("https://mineblocks.com/1/skin/" + b.currentResults[b.selectedNum].id);
                   },
                   !1
                 )
                   ? R.get("skinDownload", "Download/View", new h(this.scene.get_width() / 2 - 276 + 200 - 3 + 201.77, this.scene.get_height() / 2 - 207 + 233.77), x.get_volter(), F.white, 1.55, Q.CENTER, 1.5)
                   : R.get("skinDownload", "Download/View", new h(this.scene.get_width() / 2 - 276 + 200 - 3 + 200, this.scene.get_height() / 2 - 207 + 232), x.get_volter(), F.white, 1.55, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = m.addSimpleButtonBetter(
                   "skinBackToList",
                   this.buttonEntity,
                   (this.scene.get_width() / 2 - 276 + 330 - 60) | 0,
                   (this.scene.get_height() / 2 - 207 + 248) | 0,
                   120,
                   20,
                   1.77,
                   function () {
                     b.skinPreviewerFrame = 3;
                   },
                   !1
                 )
                   ? R.get("skinBackToList", "Back to skin list", new h(this.scene.get_width() / 2 - 276 + 332.77, this.scene.get_height() / 2 - 207 + 260.77), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5)
                   : R.get("skinBackToList", "Back to skin list", new h(this.scene.get_width() / 2 - 276 + 331, this.scene.get_height() / 2 - 207 + 259), x.get_volter(), F.white, 1.3, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g));
           else if (3 == this.skinFrame)
             if (1 == this.skinUploadFrame)
               (g = R.get("skinDownloadInstructions", "If you need the default skin, click the link below:", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 100), x.get_volter(), F.white, 1.4, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = R.get("skinsDownloadDefault", "Download default skin", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 123), x.get_volter(), F.white, 1.6, Q.CENTER, 1.5)),
                 0 <
                 m.buttonBehavior(
                   "skinsDownloadDefault",
                   !1,
                   (this.scene.get_width() / 2 - (1.6 * g.calculatedWidth) / 2) | 0,
                   (this.scene.get_height() / 2 - 207 + 122 - 8) | 0,
                   (1.6 * g.calculatedWidth) | 0,
                   16,
                   function () {
                     cb.open("https://mineblocks.com/1/skins/download");
                   },
                   !1
                 )
                   ? (g.setColor(new F(-3355444)),
                     (a = this.buttonEntity),
                     (c = new M(this.scene.get_width() / 2 - (1.6 * g.calculatedWidth) / 2, this.scene.get_height() / 2 - 207 + 129)),
                     (k = new h(96, 0)),
                     (n = new h(1, 1)),
                     (p = new h(1.6 * g.calculatedWidth, 1)),
                     (d = new e()),
                     (f = w.repeatArray([0.8, 0.8, 0.8, 1], 6)),
                     (d.h.color = f),
                     a.addQuad(c, k, n, !0, p, null, null, d))
                   : (g.setColor(F.white),
                     (a = this.buttonEntity),
                     (c = this.scene.get_width() / 2 - (1.6 * g.calculatedWidth) / 2),
                     (k = this.scene.get_height() / 2 - 207 + 129),
                     (n = 1.6 * g.calculatedWidth),
                     a.addQuad(new M(c, k), new h(96, 0), new h(1, 1), !0, new h(n, 1))),
                 (g.layer = 28),
                 this.scene.draw(g),
                 m.addSimpleButtonBetter("skinsLoadSkinImage", this.buttonEntity, (this.scene.get_width() / 2 - 116.5) | 0, (this.scene.get_height() / 2 - 207 + 182 - 18) | 0, 233, 36, 1.77, function () {
                   b.loadSkinForUse();
                 })
                   ? (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 95 + 1.77, this.scene.get_height() / 2 - 207 + 182 - 9 + 1.77), new h(9, 202), new h(32, 26), !0, new h(19.6, 16.2)),
                     (g = R.get("skinsLoadSkinImage", "Load skin image", new h(this.scene.get_width() / 2 + 14.77, this.scene.get_height() / 2 - 207 + 184.77), x.get_volter(), F.white, 2, Q.CENTER)))
                   : (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 95, this.scene.get_height() / 2 - 207 + 182 - 9), new h(9, 202), new h(32, 26), !0, new h(19.6, 16.2)),
                     (g = R.get("skinsLoadSkinImage", "Load skin image", new h(this.scene.get_width() / 2 + 13, this.scene.get_height() / 2 - 207 + 183), x.get_volter(), F.white, 2, Q.CENTER))),
                 (g.layer = 28),
                 this.scene.draw(g),
                 m.addSimpleButtonBetter("skinsSubmitToDatabase", this.buttonEntity, (this.scene.get_width() / 2 - 116.5) | 0, (this.scene.get_height() / 2 - 207 + 227 - 18) | 0, 233, 36, 1.77, function () {
                   b.loadSkinForDatabase();
                 })
                   ? (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 112 + 1.77, this.scene.get_height() / 2 - 207 + 227 - 9 + 1.77), new h(9, 176), new h(32, 26), !0, new h(19.6, 16.2)),
                     (g = R.get("skinsSubmitToDatabase", "Submit to Database", new h(this.scene.get_width() / 2 + 12.77, this.scene.get_height() / 2 - 207 + 229.77), x.get_volter(), F.white, 2, Q.CENTER)))
                   : (this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 112, this.scene.get_height() / 2 - 207 + 227 - 9), new h(9, 176), new h(32, 26), !0, new h(19.6, 16.2)),
                     (g = R.get("skinsSubmitToDatabase", "Submit to Database", new h(this.scene.get_width() / 2 + 11, this.scene.get_height() / 2 - 207 + 228), x.get_volter(), F.white, 2, Q.CENTER))),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = m.addSimpleButtonBetter("skinsSubmitCancel", this.buttonEntity, (this.scene.get_width() / 2 - 54) | 0, (this.scene.get_height() / 2 - 207 + 284 - 12) | 0, 108, 24, 1.77, function () {
                   b.gotoSkinFrame(1);
                 })
                   ? R.get("skinsSubmitCancel", "Cancel", new h(this.scene.get_width() / 2 + 2.77, this.scene.get_height() / 2 - 207 + 287.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
                   : R.get("skinsSubmitCancel", "Cancel", new h(this.scene.get_width() / 2 + 1, this.scene.get_height() / 2 - 207 + 286), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)),
                 (g.layer = 28),
                 this.scene.draw(g);
             else {
               this.skinUploadProgressEntity.clearPool();
               for (d = 0; 6 > d; ) {
                 g = d++;
                 if (0 == g)
                   (a = this.skinUploadProgressEntity),
                     (c = this.scene.get_width() / 2 + 68 * (-3 + g)),
                     (k = this.scene.get_height() / 2 - 207 + 88),
                     (n = this.skinUploadFrame - 1 > g ? 20 : 0),
                     a.addQuad(new M(c, k), new h(0, n), new h(68, 20));
                 else if (5 == g)
                   (p = this.skinUploadProgressEntity),
                     (a = this.scene.get_width() / 2 + 68 * (-3 + g)),
                     (n = this.scene.get_height() / 2 - 207 + 88),
                     (c = this.skinUploadFrame - 1 > g ? 20 : 0),
                     p.addQuad(new M(a, n), new h(136, c), new h(68, 20));
                 else {
                   p = this.skinUploadProgressEntity;
                   q = this.scene.get_width() / 2 + 68 * (-3 + g);
                   var r = this.scene.get_height() / 2 - 207 + 88;
                   n = this.skinUploadFrame - 1 > g ? 20 : 0;
                   p.addQuad(new M(q, r), new h(68, n), new h(68, 20));
                 }
                 g = R.get("skinStep" + g, "1 2 3 4 5 DONE!".split(" ")[g], new h(this.scene.get_width() / 2 + 68 * (-3 + g) + 34, this.scene.get_height() / 2 - 207 + 98), x.get_volter(), F.black, 2, Q.CENTER);
                 g.layer = 28;
                 this.scene.draw(g);
               }
               this.skinUploadProgressEntity.addQuad(new M(this.scene.get_width() / 2 + 68 * (-3 + (this.skinUploadFrame - 2)) - 6, this.scene.get_height() / 2 - 207 + 88 - 10), new h(204, 0), new h(81, 40));
               q = !1;
               if (2 == this.skinUploadFrame) {
                 q = !0;
                 g = R.get("skinStep1Instruction", "Check all animations for errors", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 125), x.get_volter(), F.white, 2, Q.CENTER);
                 g.layer = 28;
                 this.scene.draw(g);
                 this.skinUploadBlocksClip.clearPool();
                 this.skinUploadSkinClip.clearPool();
                 G.gt(G.toFloat(m.Instance.tick) % G.toFloat(200) | 0, 50) ? (this.walkAnimation++, this.walkAnimation2++) : (this.walkAnimation2 = 0);
                 r = new t();
                 r.set(this.scene.get_width() / 2 - 205, this.scene.get_height() / 2 - 207 + 142, 70, 110);
                 for (d = 0; 4 > d; )
                   (g = d++),
                     this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - (this.walkAnimation % 32), 86, 32, 32), y.getTexture("dirt"), r),
                     this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - (this.walkAnimation % 32), 86, 32, 32), y.getTexture("dirt", "grass"), r),
                     (a = this.skinUploadBlocksClip),
                     (c = new t(32 * g - (this.walkAnimation % 32), 54, 32, 32)),
                     (k = y.getTexture("glass", "stained")),
                     (p = new e()),
                     (f = w.repeatArray(
                       [0.5 * Math.sin(0.7 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.8 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.9 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 1],
                       6
                     )),
                     (p.h.color = f),
                     this.addClippedQuad(a, c, k, r, p),
                     (n = this.skinUploadBlocksClip),
                     (p = new t(32 * g - (this.walkAnimation % 32), 22, 32, 32)),
                     (a = y.getTexture("glass", "stained")),
                     (c = new e()),
                     (f = w.repeatArray(
                       [0.5 * Math.sin(0.8 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.9 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.7 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 1],
                       6
                     )),
                     (c.h.color = f),
                     this.addClippedQuad(n, p, a, r, c),
                     (n = this.skinUploadBlocksClip),
                     (c = new t(32 * g - (this.walkAnimation % 32), -10, 32, 32)),
                     (p = y.getTexture("glass", "stained")),
                     (a = new e()),
                     (g = w.repeatArray(
                       [0.5 * Math.sin(0.9 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.7 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 0.5 * Math.sin(0.8 * (g + Math.floor(this.walkAnimation / 32))) + 0.5, 1],
                       6
                     )),
                     (a.h.color = g),
                     this.addClippedQuad(n, c, p, r, a);
                 G.gte(50, G.toFloat(m.Instance.tick) % G.toFloat(200) | 0)
                   ? this.skinUploadSkinClip.addQuad(new M(35 + r.x + 24, 20 + r.y), qb.idle, new h(16, 22), !0, new h(-48, 66))
                   : ((a = 16 * (Math.floor((this.walkAnimation2 / 6.2) % 5) + 1)), this.skinUploadSkinClip.addQuad(new M(35 + r.x + 24, 20 + r.y), new h(a, 0), new h(16, 22), !0, new h(-48, 66)));
                 r.set(this.scene.get_width() / 2 - 205 + 80, this.scene.get_height() / 2 - 207 + 142, 70, 110);
                 for (d = 0; 4 > d; )
                   (g = d++),
                     this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(2)) % 32), 86, 32, 32), y.getTexture("dirt"), r),
                     this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(2)) % 32), 86, 32, 32), y.getTexture("dirt", "grass"), r),
                     (a = this.skinUploadBlocksClip),
                     (c = new t(32 * g - (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(2)) % 32), 54, 32, 32)),
                     (k = y.getTexture("glass", "stained")),
                     (p = new e()),
                     (f = w.repeatArray(
                       [
                         0.5 * Math.sin(0.7 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.8 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.9 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         1,
                       ],
                       6
                     )),
                     (p.h.color = f),
                     this.addClippedQuad(a, c, k, r, p),
                     (n = this.skinUploadBlocksClip),
                     (p = new t(32 * g - (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(2)) % 32), 22, 32, 32)),
                     (a = y.getTexture("glass", "stained")),
                     (c = new e()),
                     (f = w.repeatArray(
                       [
                         0.5 * Math.sin(0.8 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.9 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.7 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         1,
                       ],
                       6
                     )),
                     (c.h.color = f),
                     this.addClippedQuad(n, p, a, r, c),
                     (n = this.skinUploadBlocksClip),
                     (c = new t(32 * g - (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(2)) % 32), -10, 32, 32)),
                     (p = y.getTexture("glass", "stained")),
                     (a = new e()),
                     (g = w.repeatArray(
                       [
                         0.5 * Math.sin(0.9 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.7 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         0.5 * Math.sin(0.8 * (g + Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(64)))) + 0.5,
                         1,
                       ],
                       6
                     )),
                     (a.h.color = g),
                     this.addClippedQuad(n, c, p, r, a);
                 a = 16 * (Math.floor((G.toFloat(m.Instance.tick) / G.toFloat(12)) % 2) + 6);
                 this.skinUploadSkinClip.addQuad(new M(35 + r.x + 24, 20 + r.y), new h(a, 0), new h(16, 22), !0, new h(-48, 66));
                 r.set(this.scene.get_width() / 2 - 205 + 160, this.scene.get_height() / 2 - 207 + 142, 70, 110);
                 a = this.buttonEntity;
                 c = new M(r.x, r.y);
                 k = new h(96, 0);
                 n = new h(1, 1);
                 p = new h(r.width, r.height);
                 d = new e();
                 f = w.repeatArray([0.4588235294117647, 0.7294117647058823, 0.8509803921568627, 1], 6);
                 d.h.color = f;
                 a.addQuad(c, k, n, !0, p, null, null, d);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(0, 86, 32, 32), y.getTexture("dirt"), r);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(0, 86, 32, 32), y.getTexture("dirt", "grass"), r);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(32, 86, 32, 32), y.getTexture("dirt"), r);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(32, 86, 32, 32), y.getTexture("dirt", "grass"), r);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(64, 86, 32, 32), y.getTexture("dirt"), r);
                 this.addClippedQuad(this.skinUploadBlocksClip, new t(64, 86, 32, 32), y.getTexture("dirt", "grass"), r);
                 d = Math.floor(Math.max(0, 60 - Math.pow(G.toFloat(G.toFloat(m.Instance.tick) % G.toFloat(100) | 0) / G.toFloat(2) - 25, 2) / 2));
                 0 == d
                   ? G.gt(100, G.toFloat(m.Instance.tick) % G.toFloat(200) | 0) && G.gt((G.toFloat(m.Instance.tick) % G.toFloat(100) | 0) - 50, 0) && G.gt(36, (G.toFloat(m.Instance.tick) % G.toFloat(100) | 0) - 50)
                     ? this.skinUploadSkinClip.addQuad(new M(35 + r.x + 24, 20 + r.y - d), new h(224, 0), new h(16, 22), !0, new h(-48, 66))
                     : this.skinUploadSkinClip.addQuad(new M(35 + r.x + 24, 20 + r.y - d), new h(0, 0), new h(16, 22), !0, new h(-48, 66))
                   : this.addClippedQuad(this.skinUploadSkinClip, new t(11, 20 - d, 48, 66), new t(128, 0, 16, 22), r, null, !0);
                 r.set(this.scene.get_width() / 2 - 205 + 240, this.scene.get_height() / 2 - 207 + 142, 70, 110);
                 a = this.buttonEntity;
                 c = new M(r.x, r.y);
                 k = new h(96, 0);
                 n = new h(1, 1);
                 p = new h(r.width, r.height);
                 d = new e();
                 f = w.repeatArray([0.4588235294117647, 0.7294117647058823, 0.8509803921568627, 1], 6);
                 d.h.color = f;
                 a.addQuad(c, k, n, !0, p, null, null, d);
                 for (d = 0; 3 > d; )
                   (g = d++),
                     1 < g
                       ? (this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 86, 32, 32), y.getTexture("dirt"), r),
                         this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 54, 32, 32), y.getTexture("dirt"), r),
                         this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 22, 32, 32), y.getTexture("dirt"), r),
                         this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 22, 32, 32), y.getTexture("dirt", "grass"), r))
                       : (this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 86, 32, 32), y.getTexture("dirt"), r),
                         this.addClippedQuad(this.skinUploadBlocksClip, new t(32 * g - 3, 86, 32, 32), y.getTexture("dirt", "grass"), r));
                 a = 16 * (Math.floor((G.toFloat(m.Instance.tick) / G.toFloat(6)) % 5) + 9);
                 this.skinUploadSkinClip.addQuad(new M(61 + r.x, 20 + r.y), new h(a, 0), new h(16, 22), !0, new h(-48, 66));
                 this.skinUploadPig.transform
                   .reset()
                   .scale(-3, 3)
                   .translate(30 + r.get_right(), 56 + r.y);
                 this.skinUploadSkinClip.addQuad(new M(48 + r.get_right(), r.y), new h(240, 0), new h(16, 22), !0, new h(-48, 66));
                 this.skinUploadBlocksClip.addQuad(new M(r.get_right() + 50 - 14, 73 + r.y), y.getTexture("minecart").get_position(), y.getTexture("minecart").get_size(), !0, new h().add(y.getTexture("minecart").get_size()).multiply(2.5));
                 this.skinUploadSkinClip.addQuad(new M(48 + r.get_right() + 50, 44 + r.y), new h(256, 0), new h(16, 22), !0, new h(-48, 66));
                 this.skinUploadBlocksClip.resetUnusedQuads();
                 this.skinUploadSkinClip.resetUnusedQuads();
                 this.scene.draw(this.skinUploadBlocksClip);
                 this.scene.draw(this.skinUploadPig);
                 this.scene.draw(this.skinUploadSkinClip);
               } else
                 3 == this.skinUploadFrame
                   ? ((q = !0),
                     (g = R.get("skinStep2Instruction", "Check for missing eyes or weird boxes", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 125), x.get_volter(), F.white, 2, Q.CENTER)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     this.skinUploadSkinClip.clearPool(),
                     (r = new t(this.scene.get_width() / 2 - 205, this.scene.get_height() / 2 - 207 + 142, 410, 110)),
                     (g = (Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(10)) % 8) / 8),
                     (a = this.buttonEntity),
                     (c = new M(r.x, r.y)),
                     (k = new h(73, 176)),
                     (n = new h(2, 2)),
                     (p = r.get_size()),
                     (d = new e()),
                     (f = w.repeatArray([0.7803921568627451, 0.6470588235294118, 0.5098039215686274, 1], 6)),
                     (d.h.color = f),
                     a.addQuad(c, k, n, !0, p, null, [-g, g, -g, g + 13.75, -g + 51.25, g, -g + 51.25, g, -g, g + 13.75, -g + 51.25, g + 13.75], d),
                     this.addClippedQuad(this.skinUploadSkinClip, new t(-64 + r.width / 4 - 32, -24, 128, 176), new t(0, 0, 16, 22), r, null, !0),
                     this.addClippedQuad(this.skinUploadSkinClip, new t(-64 + (r.width / 4) * 2, -48, 128, 176), new t(128, 0, 16, 22), r, null, !0),
                     this.addClippedQuad(this.skinUploadSkinClip, new t((r.width / 4) * 3 + -32, -72, 128, 176), new t(224, 0, 16, 22), r, null, !0),
                     this.skinUploadSkinClip.resetUnusedQuads(),
                     this.scene.draw(this.skinUploadSkinClip))
                   : 4 == this.skinUploadFrame
                   ? ((q = !1),
                     (g = R.get("skinStep3Instruction", "Name of skin:", new h(this.scene.get_width() / 2 - 276 + 81, this.scene.get_height() / 2 - 207 + 128), x.get_volter(), F.white, 2, Q.LEFT)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     W.textfield(
                       this.buttonEntity,
                       "skinNameEntry",
                       this.skinNameEntry,
                       (this.scene.get_width() / 2 - 276 + 81) | 0,
                       (this.scene.get_height() / 2 - 207 + 155) | 0,
                       206,
                       2,
                       function (a) {
                         b.skinNameEntry = a;
                       },
                       25,
                       "a-zA-Z0-9.!_@#$&()+/\\'\\\": "
                     ),
                     (g = R.get("skinStep3English", "Use English, please.", new h(this.scene.get_width() / 2 - 276 + 81, this.scene.get_height() / 2 - 207 + 183), x.get_volter(), F.white, 1.7, Q.LEFT, 1.5)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (d = "Auto-capitalize"),
                     0 != O.trim(this.skinNameEntry).length &&
                       ((g = this.autocap(this.skinNameEntry)),
                       (d = 'Use "' + g + '"'),
                       this.skinNameCapitalization ? 3 <= g.length && 27 >= g.length && (q = !0) : 3 <= O.trim(this.skinNameEntry).length && 27 >= O.trim(this.skinNameEntry).length && (q = !0)),
                     (g = R.get("skinStep3Autocapitalize", d, new h(this.scene.get_width() / 2 - 276 + 106, this.scene.get_height() / 2 - 207 + 212), x.get_volter(), F.white, 1.7, Q.LEFT, 1.5)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     W.checkbox(
                       this.buttonEntity,
                       "skinNameCapitalization",
                       this.skinNameCapitalization,
                       (this.scene.get_width() / 2 - 276 + 81) | 0,
                       (this.scene.get_height() / 2 - 207 + 212) | 0,
                       function () {
                         b.skinNameCapitalization = !b.skinNameCapitalization;
                       },
                       !1,
                       (1.7 * g.calculatedWidth + 25) | 0
                     ))
                   : 5 == this.skinUploadFrame
                   ? ((q = !1),
                     (g = R.get("skinStep4Instruction", "Your author name:", new h(this.scene.get_width() / 2 - 276 + 81, this.scene.get_height() / 2 - 207 + 141), x.get_volter(), F.white, 2, Q.LEFT)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     W.textfield(
                       this.buttonEntity,
                       "authorNameEntry",
                       this.authorEntry,
                       (this.scene.get_width() / 2 - 276 + 81) | 0,
                       (this.scene.get_height() / 2 - 207 + 167) | 0,
                       206,
                       2,
                       function (a) {
                         b.authorEntry = a;
                       },
                       24
                     ),
                     (g = R.get("skinStep4OR", "OR", new h(this.scene.get_width() / 2 - 276 + 310, this.scene.get_height() / 2 - 207 + 170), x.get_volter(), F.white, 1.7, Q.LEFT, 1.5)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     W.checkbox(
                       this.buttonEntity,
                       "skinNameAnonymous",
                       "Anonymous" == this.authorEntry,
                       (this.scene.get_width() / 2 - 276 + 355) | 0,
                       (this.scene.get_height() / 2 - 207 + 169) | 0,
                       function () {
                         b.authorEntry = "Anonymous" == b.authorEntry ? "" : "Anonymous";
                         W.fields.h.authorNameEntry.input.set_text(b.authorEntry);
                       },
                       !1,
                       122
                     ),
                     (g = R.get("skinStep4Anonymous", "Anonymous", new h(this.scene.get_width() / 2 - 276 + 382, this.scene.get_height() / 2 - 207 + 170), x.get_volter(), F.white, 1.7, Q.LEFT, 1.5)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (d = "Auto-capitalize"),
                     0 != O.trim(this.authorEntry).length &&
                       ((g = this.autocap(this.authorEntry)),
                       (d = 'Use "' + g + '"'),
                       this.skinNameCapitalization ? 3 <= g.length && 24 >= g.length && (q = !0) : 3 <= O.trim(this.authorEntry).length && 24 >= O.trim(this.authorEntry).length && (q = !0)),
                     (g = R.get("skinStep4Autocapitalize", d, new h(this.scene.get_width() / 2 - 276 + 106, this.scene.get_height() / 2 - 207 + 212), x.get_volter(), F.white, 1.7, Q.LEFT, 1.5)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     W.checkbox(
                       this.buttonEntity,
                       "skinNameCapitalization",
                       this.authorCapitalization,
                       (this.scene.get_width() / 2 - 276 + 81) | 0,
                       (this.scene.get_height() / 2 - 207 + 212) | 0,
                       function () {
                         b.authorCapitalization = !b.authorCapitalization;
                       },
                       !1,
                       (1.7 * g.calculatedWidth + 25) | 0
                     ))
                   : 6 == this.skinUploadFrame
                   ? ((q = !0),
                     (g = R.get("skinStep5Instruction", "Does everything look perfect?", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 125), x.get_volter(), F.white, 2, Q.CENTER)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (g = R.get("skinStep5Subtitle", "Please don't submit if it's not finished!", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 144), x.get_volter(), F.white, 1.45, Q.CENTER)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (g = R.get(
                       "skinStep5Title",
                       this.skinNameCapitalization ? this.autocap(this.skinNameEntry) : this.skinNameEntry,
                       new h(this.scene.get_width() / 2 - 276 + 234, this.scene.get_height() / 2 - 207 + 166),
                       x.get_volter(),
                       F.white,
                       2,
                       Q.LEFT
                     )),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (g = R.get("skinStep5By", "By", new h(this.scene.get_width() / 2 - 276 + 234, this.scene.get_height() / 2 - 207 + 189), x.get_volter(), new F(-3355444), 2, Q.LEFT)),
                     (g.layer = 28),
                     this.scene.draw(g),
                     (g = R.get(
                       "skinStep5Author",
                       this.authorCapitalization ? this.autocap(this.authorEntry) : this.authorEntry,
                       new h(this.scene.get_width() / 2 - 276 + 266, this.scene.get_height() / 2 - 207 + 189),
                       x.get_volter(),
                       F.white,
                       2,
                       Q.LEFT
                     )),
                     (g.layer = 28),
                     this.scene.draw(g),
                     this.skinUploadSkinClip.clearPool(),
                     (r = new t(this.scene.get_width() / 2 - 205, this.scene.get_height() / 2 - 207 + 142, 410, 110)),
                     (a = 16 * (Math.floor((G.toFloat(m.Instance.tick) / 6.2) % 5) + 1)),
                     this.skinUploadSkinClip.addQuad(new M(149 + r.x, 12 + r.y), new h(a, 0), new h(16, 22), !0, new h(-48, 66)),
                     (a = 272),
                     (c = 22),
                     this.skinUploadSkinClip.addQuad(new M(r.x + r.width / 2 - 136, r.y + r.height - 22), new h(), new h(272, 22), !0, new h(a, c)),
                     this.skinUploadSkinClip.resetUnusedQuads(),
                     this.scene.draw(this.skinUploadSkinClip))
                   : 7 == this.skinUploadFrame &&
                     (this.skinUploaded
                       ? ((g = this.skinUploadFailed
                           ? R.get("skinStep7Instruction", "Sorry, an error occurred when uploading your skin.", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 178), x.get_volter(), F.white, 2, Q.CENTER)
                           : R.get(
                               "skinStep7Instruction",
                               "Whoohoo!\nYour skin has been submitted.\n\nIt will now be moderated by staff,\nbefore showing up publicly.\n\nIt may take a while! :)",
                               new h(this.scene.get_width() / 2 - 276 + 73, this.scene.get_height() / 2 - 207 + 118),
                               x.get_volter(),
                               F.white,
                               2,
                               Q.LEFT
                             )),
                         (g.layer = 28),
                         this.scene.draw(g),
                         m.addSimpleButtonBetter("skinUploadFinalBack", this.buttonEntity, (this.scene.get_width() / 2 - 77) | 0, (this.scene.get_height() / 2 - 207 + 265) | 0, 154, 36, 1.77, function () {
                           b.gotoSkinFrame(1);
                         }),
                         (g = R.get("skinUploadNext", "Back to Skins", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 284), x.get_volter(), F.white, 2, Q.CENTER)))
                       : (this.buttonEntity.addQuad(
                           new M(),
                           new h(41, 176),
                           new h(32, 32),
                           !0,
                           null,
                           ba.quadMatrixHelper(
                             new t(0, 0, 32, 32),
                             new T()
                               .translate(-16, -16)
                               .rotate2D(((30 * -Math.floor(G.toFloat(m.Instance.tick) / G.toFloat(5))) / 180) * Math.PI)
                               .scale2D(2)
                               .translate(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 197)
                           )
                         ),
                         (g = R.get("skinUploading", "Submitting...", new h(this.scene.get_width() / 2, this.scene.get_height() / 2 - 207 + 251), x.get_volter(), F.white, 2, Q.CENTER))),
                     (g.layer = 28),
                     this.scene.draw(g));
               7 > this.skinUploadFrame &&
                 ((g = m.addSimpleButtonBetter("skinUploadPrevious", this.buttonEntity, (this.scene.get_width() / 2 - 276 + 67) | 0, (this.scene.get_height() / 2 - 207 + 265) | 0, 154, 36, 1.77, function () {
                   b.gotoSkinUploadFrame(b.skinUploadFrame - 1);
                 })
                   ? R.get("skinUploadPrevious", "Back", new h(this.scene.get_width() / 2 - 276 + 145.77, this.scene.get_height() / 2 - 207 + 285.77), x.get_volter(), F.white, 2, Q.CENTER)
                   : R.get("skinUploadPrevious", "Back", new h(this.scene.get_width() / 2 - 276 + 144, this.scene.get_height() / 2 - 207 + 284), x.get_volter(), F.white, 2, Q.CENTER)),
                 (g.layer = 28),
                 this.scene.draw(g),
                 (g = m.addSimpleButtonBetter(
                   "skinUploadNext",
                   this.buttonEntity,
                   (this.scene.get_width() / 2 + 276 - 67 - 154) | 0,
                   (this.scene.get_height() / 2 - 207 + 265) | 0,
                   154,
                   36,
                   1.77,
                   function () {
                     if (6 == b.skinUploadFrame) {
                       var a = ic.encode(b.skinForDatabase.data.encode(ah.PNG)),
                         c = Math.floor(1e13 * Math.random());
                       b.skinUploaded = !1;
                       b.skinUploadFailed = !1;
                       var d = b.authorCapitalization ? b.autocap(b.authorEntry) : b.authorEntry,
                         f = b.skinNameCapitalization ? b.autocap(b.skinNameEntry) : b.skinNameEntry,
                         h = new e();
                       h.h.Filedata = a;
                       cb.send(
                         "https://mineblocks.com/1/scripts/skinUpload?version=3&id=" + c + "&author=" + d + "&title=" + f + "&public=1",
                         !0,
                         h,
                         function (a) {
                           a = cb.stringifyVariables(a);
                           a = decodeURIComponent(a.split("+").join(" "));
                           "-" == I.substr(a, 0, 1)
                             ? ((ka.msg = "An error occurred! " + I.substr(a, 1, a.length - 1) + "."), (b.skinUploadFailed = !0))
                             : ka.getSkinFrom("https://mineblocks.com/1/skins/" + E.parseInt(a.split(":")[0]) + ".png", ka.frames, -1);
                           b.skinUploaded = !0;
                         },
                         function (a) {
                           ka.msg = "Error uploading skin! " + a;
                           b.skinUploadFailed = !0;
                         }
                       );
                       b.gotoSkinUploadFrame(7);
                     } else b.gotoSkinUploadFrame(b.skinUploadFrame + 1);
                   },
                   !q
                 )
                   ? R.get("skinUploadNext", 6 == this.skinUploadFrame ? "Submit!" : "Next", new h(this.scene.get_width() / 2 + 276 - 67 - 77 + 1.77, this.scene.get_height() / 2 - 207 + 285.77), x.get_volter(), F.white, 2, Q.CENTER)
                   : R.get(
                       "skinUploadNext",
                       6 == this.skinUploadFrame ? "Submit!" : "Next",
                       new h(this.scene.get_width() / 2 + 276 - 67 - 77, this.scene.get_height() / 2 - 207 + 284),
                       x.get_volter(),
                       q ? F.white : new F(-8947849),
                       2,
                       Q.CENTER
                     )),
                 (g.layer = 28),
                 this.scene.draw(g),
                 m.addSimpleButtonBetter("skinUploadSubmit", this.buttonEntity, (this.scene.get_width() / 2 - 33) | 0, (this.scene.get_height() / 2 - 207 + 265) | 0, 66, 36, 1.77, function () {
                   b.loadSkinForDatabase();
                 })
                   ? this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 9.8 + 1.77, this.scene.get_height() / 2 - 207 + 275.77), new h(9, 202), new h(32, 26), !0, new h(19.6, 16.2))
                   : this.buttonEntity.addQuad(new M(this.scene.get_width() / 2 - 9.8, this.scene.get_height() / 2 - 207 + 274), new h(9, 202), new h(32, 26), !0, new h(19.6, 16.2)),
                 (g.layer = 28),
                 this.scene.draw(g));
               this.skinUploadProgressEntity.resetUnusedQuads();
               this.scene.draw(this.skinUploadProgressEntity);
             }
           g = R.get("skinsStatus", ka.msg, new h(this.scene.get_width() / 2 - 207, this.scene.get_height() / 2 - 207 + 306), x.get_volter(), new F(-256), 1.3, Q.LEFT, 1.5);
           g.layer = 28;
           g.setWordWrap(318);
           this.scene.draw(g);
           g = m.addSimpleButtonBetter("settingsBackToSettings", this.buttonEntity, (this.scene.get_width() / 2 - 134 - 66) | 0, (this.scene.get_height() / 2 - 207 + 359) | 0, 132, 30, 1.77, function () {
             b.gotoAndStop(1);
           })
             ? R.get("settingsBackToSettings", "Settings", new h(this.scene.get_width() / 2 - 134 + 2.77, this.scene.get_height() / 2 - 207 + 376.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
             : R.get("settingsBackToSettings", "Settings", new h(this.scene.get_width() / 2 - 134 + 1, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5);
           g.layer = 28;
           this.scene.draw(g);
           g = m.addSimpleButtonBetter("settingsBackToMenu", this.buttonEntity, (this.scene.get_width() / 2 + 134 - 66) | 0, (this.scene.get_height() / 2 - 207 + 359) | 0, 132, 30, 1.77, function () {
             b.bindKey = "";
             b.callBackCallback();
           })
             ? R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 136.77, this.scene.get_height() / 2 - 207 + 376.77), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5)
             : R.get("settingsBackToMenu", "Back to menu", new h(this.scene.get_width() / 2 + 135, this.scene.get_height() / 2 - 207 + 375), x.get_volter(), F.white, 1.7, Q.CENTER, 1.5);
           g.layer = 28;
           this.scene.draw(g);
           this.buttonEntity.resetUnusedQuads();
           this.skinPreviewEntity.resetUnusedQuads();
           this.scene.draw(this.buttonEntity);
           this.scene.draw(this.skinPreviewEntity);
         },
         gotoSkinFrame: function (b) {
           this.skinFrame != b &&
             ((this.viewerCache = new e()), 2 == b && ((this.skinPage = 1), (this.currentCat = "featured"), (this.currentSearch = this.searchEntry = ""), this.loadPublicSkins()), 3 == b && this.gotoSkinUploadFrame(1), (this.skinFrame = b));
         },
         gotoSkinUploadFrame: function (b) {
           this.skinUploadFrame = b;
           if (1 == b)
             (this.authorEntry = this.skinNameEntry = ""),
               null != W.fields.h.authorNameEntry && W.fields.h.authorNameEntry.input.set_text(this.authorEntry),
               null != W.fields.h.skinNameEntry && W.fields.h.skinNameEntry.input.set_text(this.skinNameEntry),
               (this.authorCapitalization = this.skinNameCapitalization = !0);
           else if (2 == b && null == this.skinUploadBlocksClip) {
             b = y.blockTextures;
             var a = Fa.getShader(),
               c = new e(),
               d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.skinUploadBlocksClip = new da(b, La.NORMAL, a, c);
             this.skinUploadBlocksClip.isTransparent = !0;
             this.skinUploadBlocksClip.layer = 28;
             b = this.skinForDatabase;
             a = Fa.getShader();
             c = new e();
             d = w.repeatArray([1], 24);
             c.h.color = d;
             d = w.repeatArray([0], 24);
             c.h.colorOffset = d;
             this.skinUploadSkinClip = new da(b, La.NORMAL, a, c);
             this.skinUploadSkinClip.forceNoCulling = !0;
             this.skinUploadSkinClip.isTransparent = !0;
             this.skinUploadSkinClip.layer = 28;
             this.skinUploadPig = P.getImage("mobs").toEntity(new t(0, 63, 20, 15));
             this.skinUploadPig.forceNoCulling = !0;
             this.skinUploadPig.isTransparent = !0;
             this.skinUploadPig.layer = 28;
           }
         },
         loadPublicSkins: function () {
           var b = this,
             a = new e();
           a.h.page = E.string(this.skinPage);
           a.h.type = E.string(this.currentCat);
           "search" == this.currentCat && (a.h.key = this.currentSearch);
           this.morePages = !1;
           cb.send(
             "https://mineblocks.com/1/scripts/getSkins",
             !1,
             a,
             function (a) {
               null == a.h.s
                 ? (b.skinPreviewerFrame = 2)
                 : ((b.currentResults = []),
                   null != a.h.id1 && b.currentResults.push({ id: E.parseInt(a.h.id1), name: a.h.n1, author: a.h.a1, dateString: b.toSkinDateString(a.h.date1) }),
                   null != a.h.id2 && b.currentResults.push({ id: E.parseInt(a.h.id2), name: a.h.n2, author: a.h.a2, dateString: b.toSkinDateString(a.h.date2) }),
                   null != a.h.id3 && b.currentResults.push({ id: E.parseInt(a.h.id3), name: a.h.n3, author: a.h.a3, dateString: b.toSkinDateString(a.h.date3) }),
                   null != a.h.id4 && b.currentResults.push({ id: E.parseInt(a.h.id4), name: a.h.n4, author: a.h.a4, dateString: b.toSkinDateString(a.h.date4) }),
                   null != a.h.id5 && (b.morePages = !0),
                   (b.skinPreviewerFrame = 3));
             },
             function (a) {
               b.skinPreviewerFrame = 2;
             }
           );
         },
         loadSkinForUse: function () {
           var b = this;
           gb.openBytes(["png"], function (a, c) {
             a = ua.loadFromBase64(ic.encode(a), "image/png");
             a.onComplete(function (a) {
               if (null == a) ka.msg = "Error! Skin failed to load.";
               else if (272 != a.width || (22 != a.height && 44 != a.height)) ka.msg = "Error! Wrong dimensions. Skin must be 272x22 or 272x44.";
               else {
                 var c = new sa();
                 c.fromData(a);
                 ka.frames.skin.copyPixels(c, null, null, null, null, !1);
                 ka.msg = "Skin loaded!";
                 ka.addTransparency(ka.frames);
                 ka.saveSkinData();
                 b.gotoSkinFrame(1);
               }
             });
             a.onError(function (a) {
               ka.msg = "Skin failed to load.";
             });
           });
         },
         loadSkinForDatabase: function () {
           var b = this;
           gb.openBytes(["png"], function (a, c) {
             a = ua.loadFromBase64(ic.encode(a), "image/png");
             a.onComplete(function (a) {
               null == a
                 ? (ka.msg = "Error! Skin failed to load.")
                 : 272 != a.width || (22 != a.height && 44 != a.height)
                 ? (ka.msg = "Error! Wrong dimensions. Skin must be 272x22 or 272x44.")
                 : (null == b.skinForDatabase && (b.skinForDatabase = new sa(272, 22)), (a = new sa().fromData(a)), b.skinForDatabase.copyPixels(a, null, null, null, null, !1), (ka.msg = "Skin loaded!"), b.gotoSkinUploadFrame(2));
             });
             a.onError(function (a) {
               ka.msg = "Skin failed to load.";
             });
           });
         },
         toSkinDateString: function (b) {
           b = new Date(1e3 * parseFloat(b));
           return "Jan. Feb. Mar. Apr. May June July Aug. Sep. Oct. Nov. Dec.".split(" ")[b.getMonth()] + " " + b.getDate() + ", " + b.getFullYear();
         },
         autocap: function (b) {
           for (var a = b; (b = a), (a = b.split("  ").join(" ")), a != b; );
           b = " " + a + " ";
           a = [""];
           for (var c = !1, d = 0, e = b.length; d < e; ) {
             var h = I.substr(b, d++, 1);
             "a" <= h && "z" >= h && (c = !0);
             " " == h || "-" == h || "_" == h || "" == h ? (a.push(h), a.push("")) : ("a" <= h && "z" >= h) || ("A" <= h && "Z" >= h) || ("0" <= h && "9" >= h) || "." == h ? (a[a.length - 1] += h) : (a.push(h), a.push(""));
           }
           b = "the an a to for and by with but on off of from".split(" ");
           d = 0;
           for (e = a.length; d < e; )
             (h = d++), c || (a[h] = a[h].toLowerCase()), -1 == b.indexOf(a[h]) ? (a[h] = I.substr(a[h], 0, 1).toUpperCase() + I.substr(a[h], 1, a[h].length - 1)) : (a[h] = I.substr(a[h], 0, a[h].length).toLowerCase());
           b = a.join("");
           b = b.split("Spiderman").join("Spider-Man");
           b = b.split("Dantdm").join("DanTDM");
           b = b.split("Mineblocks").join("Mine Blocks");
           b = b.split("Youtube").join("YouTube");
           b = b.split("Mineblock ").join("Mine Blocks ");
           b = b.split("MineBlock ").join("Mine Blocks ");
           b = b.split("Mine Block ").join("Mine Blocks ");
           b = b.split("Skydoesminecraft").join("SkyDoesMinecraft");
           b = b.split("Thediamondminecart").join("TheDiamondMinecart");
           b = b.split("Sethbling").join("SethBling");
           b = b.split("Rezendeevil").join("RezendeEvil");
           b = b.split("Tazercraft").join("TazerCraft");
           b = b.split("Jvnq").join("JVNQ");
           b = b.split("Pewdiepie").join("PewDiePie");
           b = b.split("Fnaf").join("FNaF");
           b = b.split("ZanzLanz").join("Zanzlanz");
           b = b.split("Zanlanz").join("Zanzlanz");
           b = b.split("Zanzlan ").join("Zanzlanz ");
           b = b.split("Zazlanz").join("Zanzlanz");
           b = b.split("Zanzlaz").join("Zanzlanz");
           b = b.split("Ironman").join("Iron Man");
           b = b.split("Creper").join("Creeper");
           b = b.split(" XD ").join(" xD ");
           b = b.split("'S ").join("'s");
           b = O.trim(b);
           return (b = I.substr(b, 0, 1).toUpperCase() + I.substr(b, 1, b.length - 1));
         },
         drawSkinViewer: function (b, a, c, d, e, g, k) {
           null == k && (k = !0);
           var f = this;
           null == this.viewerCache.h[b] && (this.viewerCache.h[b] = { animation: 0, frame: 0 });
           this.buttonEntity.addQuad(new M(d, e), new h(73, 176), new h(2, 2), !0, new h(g, g / 0.7325102880658436), null, [0, 0, 0, 14.334269662921349, 10.5, 0, 10.5, 0, 0, 14.334269662921349, 10.5, 14.334269662921349]);
           if (k) {
             var l = m.buttonBehavior(
               b,
               !1,
               d,
               (e + g / 0.7325102880658436) | 0,
               g,
               ((2.9 * g) / 17.8) | 0,
               function () {
                 f.viewerCache.h[b].animation++;
                 f.viewerCache.h[b].frame = 0;
                 f.viewerCache.h[b].animation >= f.skinViewerFrames.length && (f.viewerCache.h[b].animation = 0);
               },
               !1
             );
             this.buttonEntity.add9Slice(new t(d, e + g / 0.7325102880658436, g, (2.9 * g) / 17.8), new t(3 * l, 176, 3, 31), new t(1, 1, 1, 29));
           }
           l = this.skinViewerFrames[this.viewerCache.h[b].animation];
           k &&
             ((k = R.get("skinViewerBtn" + b, (0 == l.time ? "Frame: " : "Animation: ") + l.name, new h(d + g / 2, e + g / 0.7325102880658436 + (2.9 * g) / 17.8 / 2), x.get_volter(), new F(-13421773), (g / 114.8) * 1.3, Q.CENTER)),
             (k.layer = 28),
             this.scene.draw(k));
           0 == (G.toFloat(m.Instance.tick) % G.toFloat(l.time) | 0) && (this.viewerCache.h[b].frame++, this.viewerCache.h[b].frame >= l.frames.length && (this.viewerCache.h[b].frame = 0));
           k = c.x + 16 * l.frames[this.viewerCache.h[b].frame];
           a.addQuad(new M(d + 0.07142857142857142 * g, e + 0.07142857142857142 * g), new h(k, c.y), new h(16, 22), !0, new h(((16 * g) / 114.8) * 6.4125, ((22 * g) / 114.8) * 6.4125));
         },
         addClippedQuad: function (b, a, c, d, e, g) {
           null == g && (g = !1);
           var f = new t(a.x + d.x, a.y + d.y, a.width, a.height);
           f = f.intersection(d);
           a = new t(c.x + ((f.x - (a.x + d.x)) / a.width) * c.width, c.y + ((f.y - (a.y + d.y)) / a.height) * c.height, (f.width / a.width) * c.width, (f.height / a.height) * c.height);
           c = (g ? -1 : 1) * f.width;
           b.addQuad(new M(f.x + (g ? f.width : 0), f.y), new h(a.x, a.y), new h(a.width, a.height), !0, new h(c, f.height), null, null, e);
         },
         __class__: fh,
       };
       var xa = (D["shader.BlendMode"] = {
         __ename__: "shader.BlendMode",
         __constructs__: null,
         NORMAL: { _hx_name: "NORMAL", _hx_index: 0, __enum__: "shader.BlendMode", toString: n },
         ADD: { _hx_name: "ADD", _hx_index: 1, __enum__: "shader.BlendMode", toString: n },
         MULTIPLY: { _hx_name: "MULTIPLY", _hx_index: 2, __enum__: "shader.BlendMode", toString: n },
         SUBTRACT: { _hx_name: "SUBTRACT", _hx_index: 3, __enum__: "shader.BlendMode", toString: n },
         DARKEN: { _hx_name: "DARKEN", _hx_index: 4, __enum__: "shader.BlendMode", toString: n },
         COLOR_BURN: { _hx_name: "COLOR_BURN", _hx_index: 5, __enum__: "shader.BlendMode", toString: n },
         LINEAR_BURN: { _hx_name: "LINEAR_BURN", _hx_index: 6, __enum__: "shader.BlendMode", toString: n },
         LIGHTEN: { _hx_name: "LIGHTEN", _hx_index: 7, __enum__: "shader.BlendMode", toString: n },
         SCREEN: { _hx_name: "SCREEN", _hx_index: 8, __enum__: "shader.BlendMode", toString: n },
         COLOR_DODGE: { _hx_name: "COLOR_DODGE", _hx_index: 9, __enum__: "shader.BlendMode", toString: n },
         OVERLAY: { _hx_name: "OVERLAY", _hx_index: 10, __enum__: "shader.BlendMode", toString: n },
         SOFT_LIGHT: { _hx_name: "SOFT_LIGHT", _hx_index: 11, __enum__: "shader.BlendMode", toString: n },
         HARD_LIGHT: { _hx_name: "HARD_LIGHT", _hx_index: 12, __enum__: "shader.BlendMode", toString: n },
         VIVID_LIGHT: { _hx_name: "VIVID_LIGHT", _hx_index: 13, __enum__: "shader.BlendMode", toString: n },
         LINEAR_LIGHT: { _hx_name: "LINEAR_LIGHT", _hx_index: 14, __enum__: "shader.BlendMode", toString: n },
         PIN_LIGHT: { _hx_name: "PIN_LIGHT", _hx_index: 15, __enum__: "shader.BlendMode", toString: n },
         DIFFERENCE: { _hx_name: "DIFFERENCE", _hx_index: 16, __enum__: "shader.BlendMode", toString: n },
         EXCLUSION: { _hx_name: "EXCLUSION", _hx_index: 17, __enum__: "shader.BlendMode", toString: n },
       });
       xa.__constructs__ = [
         xa.NORMAL,
         xa.ADD,
         xa.MULTIPLY,
         xa.SUBTRACT,
         xa.DARKEN,
         xa.COLOR_BURN,
         xa.LINEAR_BURN,
         xa.LIGHTEN,
         xa.SCREEN,
         xa.COLOR_DODGE,
         xa.OVERLAY,
         xa.SOFT_LIGHT,
         xa.HARD_LIGHT,
         xa.VIVID_LIGHT,
         xa.LINEAR_LIGHT,
         xa.PIN_LIGHT,
         xa.DIFFERENCE,
         xa.EXCLUSION,
       ];
       var Fa = function () {};
       r["shader.BlockShader"] = Fa;
       Fa.__name__ = "shader.BlockShader";
       Fa.getShader = function (b) {
         if (null == b || b == xa.ADD) b = xa.NORMAL;
         if (!Fa.shaders.exists(b)) {
           var a = new $b("mine_blocks.block_shader." + D[b.__enum__].__constructs__[b._hx_index]._hx_name, Fa.getFragmentShader(b), Fa.getVertexShader());
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition");
           a.setAttrib("texClip", "float", 4);
           a.setUniform("texSize", [0, 0], "float2");
           a.setAttrib("color", "float", 4);
           a.setAttrib("colorOffset", "float", 4);
           b != xa.NORMAL && (a.setUniform("texClipBG", [0, 0, 0, 0], "float4"), a.setUniform("texSizeBG", [0, 0], "float2"));
           Fa.shaders.set(b, a);
         }
         return Fa.shaders.get(b);
       };
       Fa.getFragmentShader = function (b) {
         var a =
           "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec4 colorOffsetF;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t";
         if (b == xa.NORMAL)
           a +=
             "\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src = texture2D(texture, mod(\r\n\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize.xy,\r\n\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\t\tsrc.rgba *= colorF;\r\n\t\t\t\t\tsrc.rgb *= src.a;\r\n\t\t\t\t\t\r\n\t\t\t\t\tgl_FragColor = clamp(colorOffsetF + src, 0.0, 1.0);\r\n\t\t\t\t}\r\n\t\t\t";
         else {
           a +=
             "\r\n\t\t\t\tuniform sampler2D background;\r\n\t\t\t\t\r\n\t\t\t\tuniform vec2 texSizeBG;\r\n\t\t\t\tuniform vec4 texClipBG;\r\n\t\t\t\t\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src = texture2D(texture, mod(\r\n\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize.xy,\r\n\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tvec4 dst1 = texture2D(background, mod(\r\n\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipBG.zw, min(vec2(0.5, 0.5), texClipBG.zw-.5), max(vec2(0.5, 0.5), texClipBG.zw-.5)) + texClipBG.xy) / texSizeBG.xy,\r\n\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec3 src = src1.rgb;\r\n\t\t\t\t\tvec3 dst = dst1.rgb;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec4 mixedColor = vec4(";
           switch (b._hx_index) {
             case 1:
               a += "src + dst";
               break;
             case 2:
               a += "src * dst";
               break;
             case 3:
               a += "src - dst";
               break;
             case 4:
               a += "min(src, dst)";
               break;
             case 5:
               a +=
                 "vec3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)))";
               break;
             case 6:
               a += "(src + dst) - 1.0";
               break;
             case 7:
               a += "max(src, dst)";
               break;
             case 8:
               a += "(src + dst) - (src * dst)";
               break;
             case 9:
               a +=
                 "vec3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)))";
               break;
             case 10:
               a +=
                 "vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)))";
               break;
             case 11:
               a +=
                 "vec3((src.x <= 0.5) ? (dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x)) : (((src.x > 0.5) && (dst.x <= 0.25)) ? (dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x)) : (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y)) : (((src.y > 0.5) && (dst.y <= 0.25)) ? (dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y)) : (dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z)) : (((src.z > 0.5) && (dst.z <= 0.25)) ? (dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z)) : (dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z))))";
               break;
             case 12:
               a +=
                 "vec3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)))";
               break;
             case 13:
               a +=
                 "vec3((src.x <= 0.5) ? (1.0 - (1.0 - dst.x) / (2.0 * src.x)) : (dst.x / (2.0 * (1.0 - src.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (1.0 - (1.0 - dst.y) / (2.0 * src.y)) : (dst.y / (2.0 * (1.0 - src.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (1.0 - (1.0 - dst.z) / (2.0 * src.z)) : (dst.z / (2.0 * (1.0 - src.z))))";
               break;
             case 14:
               a += "2.0 * src + dst - 1.0";
               break;
             case 15:
               a +=
                 "vec3((src.x > 0.5) ? max(dst.x, 2.0 * (src.x - 0.5)) : min(dst.x, 2.0 * src.x),\r\n\t\t\t\t\t\t\t\t\t\t  (src.x > 0.5) ? max(dst.y, 2.0 * (src.y - 0.5)) : min(dst.y, 2.0 * src.y),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z > 0.5) ? max(dst.z, 2.0 * (src.z - 0.5)) : min(dst.z, 2.0 * src.z))";
               break;
             case 16:
               a += "abs(dst - src)";
               break;
             case 17:
               a += "src + dst - 2.0 * src * dst";
               break;
             default:
               a = "src";
           }
           a += ", src1.a);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffsetF + colorF*mixedColor, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t\t";
         }
         return a;
       };
       Fa.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\tattribute vec4 colorOffset;\r\n\t\t\tattribute vec4 color;\r\n\r\n\t\t\tvarying vec4 colorOffsetF;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\t\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\tcolorOffsetF = colorOffset;\r\n\t\t\t\tcolorF = color;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var Ab = function () {};
       r["shader.GradientRadialMultiple"] = Ab;
       Ab.__name__ = "shader.GradientRadialMultiple";
       Ab.getShader = function () {
         null == Ab.shader &&
           ((Ab.shader = new $b("mineblocks.gradientradialmultiple", Ab.getFragmentShader(), Ab.getVertexShader())),
           Ab.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uv"),
           Ab.shader.setAttrib("colori", "float", 4),
           Ab.shader.setAttrib("coloro", "float", 4),
           Ab.shader.setAttrib("position", "float", 4),
           Ab.shader.setAttrib("texClip", "float", 4));
         return Ab.shader;
       };
       Ab.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tvarying vec2 uvF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec4 coloriF;\r\n\t\t\tvarying vec4 coloroF;\r\n\t\t\tvarying vec4 positionF;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\t\t\t\tfloat distToPosition = length(uvF-positionF.xy) +texClipF.w*0.00000001; //To force texClip to exist\r\n\t\t\t\tfloat percent = clamp((distToPosition-positionF.z)/(positionF.w-positionF.z), 0.0, 1.0);\r\n\r\n\t\t\t\tgl_FragColor = vec4(coloriF*(1.0-percent) + coloroF*(percent));\r\n\t\t\t}\r\n\t\t\t";
       };
       Ab.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\r\n\t\t\tattribute vec2 uv;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\tattribute vec4 colori;\r\n\t\t\tattribute vec4 coloro;\r\n\t\t\tattribute vec4 position;\r\n\r\n\t\t\tvarying vec2 uvF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec4 coloriF;\r\n\t\t\tvarying vec4 coloroF;\r\n\t\t\tvarying vec4 positionF;\r\n\t\t\t\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tuvF = uv;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\tcoloriF = colori;\r\n\t\t\t\tcoloroF = coloro;\r\n\t\t\t\tpositionF = position;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var Cc = function () {};
       r["shader.LightingShader"] = Cc;
       Cc.__name__ = "shader.LightingShader";
       Cc.getShader = function () {
         null == Cc.shader && ((Cc.shader = new $b("mineblocks.lightingshader", Cc.getFragmentShader(), Cc.getVertexShader())), Cc.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition"));
         return Cc.shader;
       };
       Cc.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tvec4 src = texture2D(texture, uvPositionF.xy);\r\n\r\n\t\t\t\tgl_FragColor = vec4(.0, .0, .0, 1.0-src.r);\r\n\t\t\t}\r\n\t\t\t";
       };
       Cc.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\t\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var Gb = function () {};
       r["shader.ScaledText"] = Gb;
       Gb.__name__ = "shader.ScaledText";
       Gb.getShader = function () {
         null == Gb.shader &&
           ((Gb.shader = new $b("shader.ScaledText", Gb.getFragmentShader(), Gb.getVertexShader())),
           Gb.shader.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition"),
           Gb.shader.setAttrib("texClip", "float", 4),
           Gb.shader.setUniform("texSize", [0, 0], "float2"),
           Gb.shader.setUniform("color", [1, 1, 1, 1], "float4"),
           Gb.shader.setUniform("colorOffset", [0, 0, 0, 0], "float4"),
           Gb.shader.setUniform("aliasBleed", 0.4, "float"),
           Gb.shader.setUniform("mask", [-1, -1, -1, -1], "float4"));
         return Gb.shader;
       };
       Gb.getFragmentShader = function () {
         return "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec3 vertexPositionF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\tuniform vec4 colorOffset;\r\n\t\t\tuniform vec4 color;\r\n\t\t\tuniform float aliasBleed;\r\n\t\t\tuniform vec4 mask;\r\n\t\t\tuniform float scale;\r\n\r\n\t\t\tvoid main () {\r\n\t\t\t\tvec2 uv = uvPositionF * texClipF.zw + texClipF.xy;\r\n\t\t\t\t\r\n\t\t\t\tvec2 uvMod = mod(uv.xy, 1.0)*aliasBleed; // aliasBleed puts more weight on the original scale to reduce blurring\r\n\r\n\t\t\t\tvec4 src =\r\n\t\t\t\t\ttexture2D(texture, uv / texSize.xy)*(1.0-uvMod.x)*(1.0-uvMod.y)\r\n\t\t\t\t\t+texture2D(texture, (uv+vec2(.5, 0.0)) / texSize.xy)*uvMod.x*(1.0-uvMod.y)\r\n\t\t\t\t\t+texture2D(texture, (uv+vec2(0.0, .5)) / texSize.xy)*(1.0-uvMod.x)*uvMod.y\r\n\t\t\t\t\t+texture2D(texture, (uv+vec2(.5, .5)) / texSize.xy)*uvMod.x*uvMod.y;\r\n\t\t\t\t\r\n\t\t\t\tsrc.rgba = sqrt(clamp(src.rgba-.25, 0.0, 1.0));\r\n\t\t\t\t\r\n\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\tsrc.rgba *= clamp(color*vec4(1.0, 1.0, 1.0, 1.3), 0.0, 1.0); // 1.3 increases lost clarity from antialising\r\n\t\t\t\tsrc.rgb *= src.a;\r\n\r\n\t\t\t\tif(mask.z != -1.0 &&\r\n\t\t\t\t\t(  vertexPositionF.x < mask.x\r\n\t\t\t\t\t|| vertexPositionF.y < mask.y\r\n\t\t\t\t\t|| vertexPositionF.x >= mask.x+mask.z\r\n\t\t\t\t\t|| vertexPositionF.y >= mask.y+mask.w )) {\r\n\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffset+src, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t";
       };
       Gb.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\t\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec3 vertexPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\tvec3 vertexPosition2 = floor(vertexPosition.xyz + .5);\r\n\t\t\t\tvertexPositionF = vertexPosition2;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition2, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       var mc = function () {};
       r["shader.TwoTexture"] = mc;
       mc.__name__ = "shader.TwoTexture";
       mc.getShader = function (b) {
         if (null == b || b == xa.ADD) b = xa.NORMAL;
         if (!mc.shaders.exists(b)) {
           var a = new $b("mine_blocks.two_texture." + D[b.__enum__].__constructs__[b._hx_index]._hx_name, mc.getFragmentShader(b), mc.getVertexShader());
           a.setBuiltInBuffers("vertexPosition", "modelMatrix", "cameraMatrix", "projectionMatrix", "uvPosition");
           a.setUniform("texSize", [0, 0], "float2");
           a.setUniform("texSize2", [0, 0], "float2");
           a.setAttrib("texClip", "float", 4);
           a.setAttrib("color", "float", 4);
           a.setAttrib("colorOffset", "float", 4);
           a.setAttrib("texBlend", "float", 1);
           b != xa.NORMAL && (a.setUniform("texClipBG", [0, 0, 0, 0], "float4"), a.setUniform("texSizeBG", [0, 0], "float2"));
           mc.shaders.set(b, a);
         }
         return mc.shaders.get(b);
       };
       mc.getFragmentShader = function (b) {
         var a =
           "precision mediump float;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec4 colorOffsetF;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\tvarying float texBlendF;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform vec2 texSize;\r\n\t\t\t\r\n\t\t\tuniform sampler2D texture2;\r\n\t\t\tuniform vec2 texSize2;\r\n\t\t";
         if (b == xa.NORMAL)
           a +=
             "\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src = (1.0-texBlendF)*texture2D(texture, mod(\r\n\t\t\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize.xy,\r\n\t\t\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t+ (texBlendF)*texture2D(texture2, mod(\r\n\t\t\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize2.xy,\r\n\t\t\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsrc.rgb /= src.a;\r\n\t\t\t\t\tsrc.rgba *= colorF;\r\n\t\t\t\t\tsrc.rgb *= src.a;\r\n\t\t\t\t\t\r\n\t\t\t\t\tgl_FragColor = clamp(colorOffsetF + src, 0.0, 1.0);\r\n\t\t\t\t}\r\n\t\t\t";
         else {
           a +=
             "\r\n\t\t\t\tuniform sampler2D background;\r\n\t\t\t\t\r\n\t\t\t\tuniform vec2 texSizeBG;\r\n\t\t\t\tuniform vec4 texClipBG;\r\n\t\t\t\t\r\n\t\t\t\tvoid main () {\r\n\t\t\t\t\tvec4 src1 = (1.0-texBlendF)*texture2D(texture, mod(\r\n\t\t\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize.xy,\r\n\t\t\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t+ (texBlendF)*texture2D(texture2, mod(\r\n\t\t\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipF.zw, min(vec2(0.5, 0.5), texClipF.zw-.5), max(vec2(0.5, 0.5), texClipF.zw-.5)) + texClipF.xy) / texSize2.xy,\r\n\t\t\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\tvec4 dst1 = texture2D(background, mod(\r\n\t\t\t\t\t\t\t\t(clamp(mod(uvPositionF, 1.0) * texClipBG.zw, min(vec2(0.5, 0.5), texClipBG.zw-.5), max(vec2(0.5, 0.5), texClipBG.zw-.5)) + texClipBG.xy) / texSizeBG.xy,\r\n\t\t\t\t\t\t\t\t1.0)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec3 src = src1.rgb;\r\n\t\t\t\t\tvec3 dst = dst1.rgb;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvec4 mixedColor = vec4(";
           switch (b._hx_index) {
             case 1:
               a += "src + dst";
               break;
             case 2:
               a += "src * dst";
               break;
             case 3:
               a += "src - dst";
               break;
             case 4:
               a += "min(src, dst)";
               break;
             case 5:
               a +=
                 "vec3((src.x == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.x) / src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.y) / src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 0.0) ? 0.0 : (1.0 - ((1.0 - dst.z) / src.z)))";
               break;
             case 6:
               a += "(src + dst) - 1.0";
               break;
             case 7:
               a += "max(src, dst)";
               break;
             case 8:
               a += "(src + dst) - (src * dst)";
               break;
             case 9:
               a +=
                 "vec3((src.x == 1.0) ? 1.0 : min(1.0, dst.x / (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y == 1.0) ? 1.0 : min(1.0, dst.y / (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z == 1.0) ? 1.0 : min(1.0, dst.z / (1.0 - src.z)))";
               break;
             case 10:
               a +=
                 "vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)))";
               break;
             case 11:
               a +=
                 "vec3((src.x <= 0.5) ? (dst.x - (1.0 - 2.0 * src.x) * dst.x * (1.0 - dst.x)) : (((src.x > 0.5) && (dst.x <= 0.25)) ? (dst.x + (2.0 * src.x - 1.0) * (4.0 * dst.x * (4.0 * dst.x + 1.0) * (dst.x - 1.0) + 7.0 * dst.x)) : (dst.x + (2.0 * src.x - 1.0) * (sqrt(dst.x) - dst.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (dst.y - (1.0 - 2.0 * src.y) * dst.y * (1.0 - dst.y)) : (((src.y > 0.5) && (dst.y <= 0.25)) ? (dst.y + (2.0 * src.y - 1.0) * (4.0 * dst.y * (4.0 * dst.y + 1.0) * (dst.y - 1.0) + 7.0 * dst.y)) : (dst.y + (2.0 * src.y - 1.0) * (sqrt(dst.y) - dst.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (dst.z - (1.0 - 2.0 * src.z) * dst.z * (1.0 - dst.z)) : (((src.z > 0.5) && (dst.z <= 0.25)) ? (dst.z + (2.0 * src.z - 1.0) * (4.0 * dst.z * (4.0 * dst.z + 1.0) * (dst.z - 1.0) + 7.0 * dst.z)) : (dst.z + (2.0 * src.z - 1.0) * (sqrt(dst.z) - dst.z))))";
               break;
             case 12:
               a +=
                 "vec3((src.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - src.x) * (1.0 - dst.x)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - src.y) * (1.0 - dst.y)),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - src.z) * (1.0 - dst.z)))";
               break;
             case 13:
               a +=
                 "vec3((src.x <= 0.5) ? (1.0 - (1.0 - dst.x) / (2.0 * src.x)) : (dst.x / (2.0 * (1.0 - src.x))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.y <= 0.5) ? (1.0 - (1.0 - dst.y) / (2.0 * src.y)) : (dst.y / (2.0 * (1.0 - src.y))),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z <= 0.5) ? (1.0 - (1.0 - dst.z) / (2.0 * src.z)) : (dst.z / (2.0 * (1.0 - src.z))))";
               break;
             case 14:
               a += "2.0 * src + dst - 1.0";
               break;
             case 15:
               a +=
                 "vec3((src.x > 0.5) ? max(dst.x, 2.0 * (src.x - 0.5)) : min(dst.x, 2.0 * src.x),\r\n\t\t\t\t\t\t\t\t\t\t  (src.x > 0.5) ? max(dst.y, 2.0 * (src.y - 0.5)) : min(dst.y, 2.0 * src.y),\r\n\t\t\t\t\t\t\t\t\t\t  (src.z > 0.5) ? max(dst.z, 2.0 * (src.z - 0.5)) : min(dst.z, 2.0 * src.z))";
               break;
             case 16:
               a += "abs(dst - src)";
               break;
             case 17:
               a += "src + dst - 2.0 * src * dst";
               break;
             default:
               a = "src";
           }
           a += ", src1.a);\r\n\t\t\t\t\r\n\t\t\t\tgl_FragColor = clamp(colorOffsetF + colorF*mixedColor, 0.0, 1.0);\r\n\t\t\t}\r\n\t\t\t";
         }
         return a;
       };
       mc.getVertexShader = function () {
         return "precision mediump float;\r\n\t\t\tattribute vec3 vertexPosition;\r\n\t\t\tattribute vec2 uvPosition;\r\n\t\t\tattribute vec4 texClip;\r\n\t\t\tattribute vec4 colorOffset;\r\n\t\t\tattribute vec4 color;\r\n\t\t\tattribute float texBlend;\r\n\r\n\t\t\tvarying vec4 colorOffsetF;\r\n\t\t\tvarying vec4 colorF;\r\n\t\t\tvarying float texBlendF;\r\n\t\t\t\r\n\t\t\tvarying vec4 texClipF;\r\n\t\t\tvarying vec2 uvPositionF;\r\n\t\t\t\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\t\r\n\t\t\tvoid main () {\r\n\t\t\t\tuvPositionF = uvPosition;\r\n\t\t\t\ttexClipF = texClip;\r\n\t\t\t\tcolorOffsetF = colorOffset;\r\n\t\t\t\tcolorF = color;\r\n\t\t\t\ttexBlendF = texBlend;\r\n\t\t\t\t\r\n\t\t\t\tgl_Position = projectionMatrix * cameraMatrix * modelMatrix * vec4(vertexPosition, 1.0);\r\n\t\t\t}\r\n\t\t\t";
       };
       L.$haxeUID |= 0;
       "undefined" != typeof performance && "function" == typeof performance.now && (I.now = performance.now.bind(performance));
       r.Math = Math;
       null == String.fromCodePoint &&
         (String.fromCodePoint = function (b) {
           return 65536 > b ? String.fromCharCode(b) : String.fromCharCode((b >> 10) + 55232) + String.fromCharCode((b & 1023) + 56320);
         });
       String.prototype.__class__ = r.String = String;
       String.__name__ = "String";
       r.Array = Array;
       Array.__name__ = "Array";
       Date.prototype.__class__ = r.Date = Date;
       Date.__name__ = "Date";
       var bi = {},
         hi = {},
         pg = Number,
         gi = Boolean,
         ci = {},
         di = {};
       oc.count = 0;
       H.__toStr = {}.toString;
       null == ArrayBuffer.prototype.slice && (ArrayBuffer.prototype.slice = Uh.sliceImpl);
       var ai = new Uint32Array(256);
       ca.__alpha16 = ai;
       for (var Pd = 0; 256 > Pd; ) {
         var Le = Pd++;
         ca.__alpha16[Le] = Math.ceil(257.00392156862745 * Le);
       }
       ai = new Uint8Array(511);
       ca.__clamp = ai;
       for (Pd = 0; 255 > Pd; ) (Le = Pd++), (ca.__clamp[Le] = Le);
       for (Pd = 255; 511 > Pd; ) (Le = Pd++), (ca.__clamp[Le] = 255);
       ab.level = 3;
       "undefined" == typeof console && (console = {});
       null == console.log && (console.log = function () {});
       q.identifierToID = new e();
       q.blockIDList = [];
       q.dropsWith = (function (b) {
         b = new e();
         var a = new e();
         a.h.ObsidianPickaxe = 1;
         a.h.DiamondPickaxe = 1;
         a.h.GoldPickaxe = 1;
         a.h.IronPickaxe = 1;
         a.h.StonePickaxe = 1;
         a.h.WoodenPickaxe = 1;
         b.h.pickaxes = a;
         a = new e();
         a.h.ObsidianPickaxe = 1;
         a.h.DiamondPickaxe = 1;
         a.h.GoldPickaxe = 1;
         a.h.IronPickaxe = 1;
         a.h.StonePickaxe = 1;
         b.h.pickaxesPastWooden = a;
         a = new e();
         a.h.ObsidianPickaxe = 1;
         a.h.DiamondPickaxe = 1;
         a.h.GoldPickaxe = 1;
         a.h.IronPickaxe = 1;
         b.h.pickaxesPastStone = a;
         a = new e();
         a.h.ObsidianPickaxe = 1;
         a.h.DiamondPickaxe = 1;
         b.h.pickaxesPastGold = a;
         return b;
       })(this);
       q.blockData = new e();
       V.colors = (function (b) {
         b = new e();
         var a = new e();
         a.h.id = "red";
         a.h.name = "Red";
         a.h.r = 0.7450980392156863;
         a.h.g = 0;
         a.h.b = 0;
         a.h.dye = "DYE";
         var c = new e();
         c.h.blue = "purple";
         c.h.white = "pink";
         c.h.yellow = "orange";
         c.h.black = "brown";
         a.h.combines = c;
         b.h.red = a;
         a = new e();
         a.h.id = "green";
         a.h.name = "Green";
         a.h.r = 0.1607843137254902;
         a.h.g = 0.5647058823529412;
         a.h.b = 0;
         a.h.dye = "DYE";
         c = new e();
         c.h.blue = "cyan";
         c.h.white = "lightgreen";
         a.h.combines = c;
         b.h.green = a;
         a = new e();
         a.h.id = "blue";
         a.h.name = "Blue";
         a.h.r = 0;
         a.h.g = 0;
         a.h.b = 0.8235294117647058;
         a.h.dye = "ll";
         c = new e();
         c.h.red = "purple";
         c.h.green = "cyan";
         c.h.white = "lightblue";
         a.h.combines = c;
         b.h.blue = a;
         a = new e();
         a.h.id = "brown";
         a.h.name = "Brown";
         a.h.r = 0.3137254901960784;
         a.h.g = 0.2;
         a.h.b = 0.0784313725490196;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.brown = a;
         a = new e();
         a.h.id = "cyan";
         a.h.name = "Cyan";
         a.h.r = 0.1803921568627451;
         a.h.g = 0.8196078431372549;
         a.h.b = 0.5882352941176471;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.cyan = a;
         a = new e();
         a.h.id = "lightblue";
         a.h.name = "Light Blue";
         a.h.r = 0;
         a.h.g = 0.8;
         a.h.b = 1;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.lightblue = a;
         a = new e();
         a.h.id = "lightgreen";
         a.h.name = "Light Green";
         a.h.r = 0.4196078431372549;
         a.h.g = 0.788235294117647;
         a.h.b = 0;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.lightgreen = a;
         a = new e();
         a.h.id = "magenta";
         a.h.name = "Magenta";
         a.h.r = 0.7137254901960784;
         a.h.g = 0.03529411764705882;
         a.h.b = 0.45098039215686275;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.magenta = a;
         a = new e();
         a.h.id = "orange";
         a.h.name = "Orange";
         a.h.r = 1;
         a.h.g = 0.3764705882352941;
         a.h.b = 0;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.orange = a;
         a = new e();
         a.h.id = "pink";
         a.h.name = "Pink";
         a.h.r = 1;
         a.h.g = 0.6666666666666666;
         a.h.b = 0.6666666666666666;
         a.h.dye = "DYE";
         c = new e();
         c.h.purple = "magenta";
         a.h.combines = c;
         b.h.pink = a;
         a = new e();
         a.h.id = "purple";
         a.h.name = "Purple";
         a.h.r = 0.5215686274509804;
         a.h.g = 0.15294117647058825;
         a.h.b = 0.6470588235294118;
         a.h.dye = "DYE";
         c = new e();
         c.h.pink = "magenta";
         a.h.combines = c;
         b.h.purple = a;
         a = new e();
         a.h.id = "white";
         a.h.name = "White";
         a.h.r = 0.9686274509803922;
         a.h.g = 0.9686274509803922;
         a.h.b = 0.9686274509803922;
         a.h.dye = "bonem";
         c = new e();
         c.h.red = "pink";
         c.h.blue = "lightblue";
         c.h.green = "lightgreen";
         a.h.combines = c;
         b.h.white = a;
         a = new e();
         a.h.id = "yellow";
         a.h.name = "Yellow";
         a.h.r = 0.9019607843137255;
         a.h.g = 0.792156862745098;
         a.h.b = 0;
         a.h.dye = "DYE";
         c = new e();
         c.h.red = "orange";
         a.h.combines = c;
         b.h.yellow = a;
         a = new e();
         a.h.id = "lightgray";
         a.h.name = "Light Gray";
         a.h.r = 0.8;
         a.h.g = 0.8;
         a.h.b = 0.8;
         a.h.dye = "DYE";
         a.h.combines = new e();
         b.h.lightgray = a;
         a = new e();
         a.h.id = "gray";
         a.h.name = "Gray";
         a.h.r = 0.4;
         a.h.g = 0.4;
         a.h.b = 0.4;
         a.h.dye = "DYE";
         c = new e();
         c.h.white = "lightgray";
         a.h.combines = c;
         b.h.gray = a;
         a = new e();
         a.h.id = "black";
         a.h.name = "Black";
         a.h.r = 0.2;
         a.h.g = 0.2;
         a.h.b = 0.2;
         a.h.dye = "ink";
         c = new e();
         c.h.white = "gray";
         c.h.red = "brown";
         a.h.combines = c;
         b.h.black = a;
         a = new e();
         a.h.id = "rainbow";
         a.h.name = "Rainbow";
         a.h.r = 1;
         a.h.g = 1;
         a.h.b = 1;
         a.h.dye = "NON";
         a.h.combines = new e();
         b.h.rainbow = a;
         return b;
       })(this);
       g.newgroundsAchievementNames = "Mine Wood;Place Block;Open Inventory;Crafting Table;Wooden Pickaxe;Stone Pickaxe;Iron Pickaxe;Furnace;Iron Ingot;Torches;Grow Tree;Tame a Dog;Kill a Pig;Kill a Cow;Kill a Sheep;Kill a Zombie;Kill a Skeleton;Kill a Spider;Kill a Nethereye;Kill a Blaze;Kill an Enderman;Kill a Creeper;Kill a Flaming Chicken;Grow Wheat;Make Cake;Eat Food;Use a Bed;Mine Obsidian;Mine Gold;Mine Diamonds;Make Portal Stone;Go to the Nether;Open Door with Wiring;Fire a Bow;Teleport;Unlock Ender Portal;Slay the Ender Dragon;Kill a Slime;Kill a Magma Cube;Fish a Fish;Blacksmith;Kill a Zombie Pigman;Return to Sender;Brew a Potion;Breed Two Animals;Enchant an Item".split(
         ";"
       );
       g.achievements = "Mine a block of wood;Place a block;Open the inventory;Craft a crafting table;Craft a wooden pickaxe;Craft a stone pickaxe;Craft an iron pickaxe;Make a furnace;Make an iron ingot;Make some torches;Grow a tree;Tame a dog;Slay a pig;Slay a cow;Slay a sheep;Slay a zombie;Slay a skeleton;Slay a spider;Slay a nethereye;Slay a blaze;Slay an enderman;Slay a creeper;Defeat a flaming chicken;Grow a farm;Make a cake;Eat some food;Use a bed;Mine obsidian;Mine gold;Mine diamonds;Make portal stone;Travel to the nether;Open a door with wiring;Fire a bow;Teleport with enderpearl;Unlock the ender portal;Slay the ender dragon;Slay a slime;Slay a magma cube;Fish a fish;Use an anvil;Slay a zombie pigman;Slay a ghast by its fireball;Brew a potion;Breed two animals;Enchant an item".split(
         ";"
       );
       g.biomes = "forest plain water desert mountain ruins mushroom".split(" ");
       g.enchantTypes = (function (b) {
         b = new e();
         var a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.protection1 = 1;
         a.h.protection2 = 5;
         a.h.protection3 = 12;
         a.h.protection4 = 21;
         a.h.protection5 = 28;
         a.h.protectionFire1 = 6;
         a.h.protectionFire2 = 8;
         a.h.protectionFire3 = 16;
         a.h.protectionBlast1 = 3;
         a.h.protectionBlast2 = 6;
         a.h.protectionBlast3 = 14;
         a.h.protectionProjectile1 = 3;
         a.h.protectionProjectile2 = 10;
         a.h.protectionProjectile3 = 17;
         a.h.respiration1 = 6;
         a.h.respiration2 = 11;
         a.h.respiration3 = 18;
         a.h.aguaAffinity = 10;
         b.h.Caps = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.protection1 = 1;
         a.h.protection2 = 5;
         a.h.protection3 = 12;
         a.h.protection4 = 21;
         a.h.protection5 = 28;
         a.h.protectionFire1 = 6;
         a.h.protectionFire2 = 8;
         a.h.protectionFire3 = 16;
         a.h.protectionBlast1 = 3;
         a.h.protectionBlast2 = 6;
         a.h.protectionBlast3 = 14;
         a.h.protectionProjectile1 = 3;
         a.h.protectionProjectile2 = 10;
         a.h.protectionProjectile3 = 17;
         a.h.thorns1 = 9;
         a.h.thorns2 = 13;
         a.h.thorns3 = 20;
         b.h.Shirts = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.protection1 = 1;
         a.h.protection2 = 5;
         a.h.protection3 = 12;
         a.h.protection4 = 21;
         a.h.protection5 = 28;
         a.h.protectionFire1 = 6;
         a.h.protectionFire2 = 8;
         a.h.protectionFire3 = 16;
         a.h.protectionBlast1 = 3;
         a.h.protectionBlast2 = 6;
         a.h.protectionBlast3 = 14;
         a.h.protectionProjectile1 = 3;
         a.h.protectionProjectile2 = 10;
         a.h.protectionProjectile3 = 17;
         b.h.Pants = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.protection1 = 1;
         a.h.protection2 = 7;
         a.h.protection3 = 12;
         a.h.protection4 = 21;
         a.h.protection5 = 28;
         a.h.protectionFire1 = 6;
         a.h.protectionFire2 = 8;
         a.h.protectionFire3 = 16;
         a.h.protectionBlast1 = 3;
         a.h.protectionBlast2 = 6;
         a.h.protectionBlast3 = 14;
         a.h.protectionProjectile1 = 3;
         a.h.protectionProjectile2 = 10;
         a.h.protectionProjectile3 = 17;
         a.h.protectionFalling1 = 7;
         a.h.protectionFalling2 = 17;
         a.h.protectionFalling3 = 29;
         a.h.frostWalker1 = 24;
         a.h.frostWalker2 = 29;
         a.h.depthStrider1 = 14;
         a.h.depthStrider2 = 20;
         a.h.depthStrider3 = 24;
         b.h.Shoes = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.sharpness1 = 2;
         a.h.sharpness2 = 8;
         a.h.sharpness3 = 19;
         a.h.sharpness4 = 27;
         a.h.smite1 = 2;
         a.h.smite2 = 7;
         a.h.smite3 = 15;
         a.h.smite4 = 22;
         a.h.baneOfArthropods1 = 6;
         a.h.baneOfArthropods2 = 15;
         a.h.baneOfArthropods3 = 21;
         a.h.knockback1 = 8;
         a.h.knockback2 = 12;
         a.h.knockback3 = 24;
         a.h.fireAspect = 20;
         a.h.looting1 = 10;
         a.h.looting2 = 17;
         a.h.looting3 = 25;
         b.h.Swords = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.efficiency1 = 7;
         a.h.efficiency2 = 20;
         a.h.silkTouch = 23;
         a.h.fortune1 = 20;
         a.h.fortune2 = 24;
         a.h.fortune3 = 38;
         a.h.sharpness1 = 2;
         a.h.sharpness2 = 8;
         a.h.sharpness3 = 19;
         a.h.sharpness4 = 27;
         a.h.smite1 = 2;
         a.h.smite2 = 7;
         a.h.smite3 = 15;
         a.h.smite4 = 22;
         a.h.baneOfArthropods1 = 6;
         a.h.baneOfArthropods2 = 15;
         a.h.baneOfArthropods3 = 21;
         a.h.knockback1 = 8;
         a.h.knockback2 = 12;
         a.h.knockback3 = 24;
         a.h.fireAspect = 20;
         a.h.looting1 = 10;
         a.h.looting2 = 17;
         a.h.looting3 = 25;
         b.h.Axes = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.efficiency1 = 7;
         a.h.efficiency2 = 20;
         a.h.silkTouch = 14;
         a.h.fortune1 = 15;
         a.h.fortune2 = 17;
         a.h.fortune3 = 19;
         b.h.Pickaxes = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.efficiency1 = 7;
         a.h.efficiency2 = 20;
         a.h.silkTouch = 14;
         a.h.fortune1 = 15;
         a.h.fortune2 = 17;
         a.h.fortune3 = 19;
         b.h.Shovels = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         b.h.Hoes = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.efficiency1 = 7;
         a.h.efficiency2 = 20;
         a.h.silkTouch = 14;
         b.h.Shears = a;
         a = new e();
         a.h.luckOfTheSea1 = 8;
         a.h.luckOfTheSea2 = 12;
         a.h.luckOfTheSea3 = 20;
         a.h.lure1 = 4;
         a.h.lure2 = 8;
         a.h.lure3 = 15;
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         b.h.FishingRods = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         b.h.FlintAndSteel = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         b.h.CarrotOnStick = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 5;
         a.h.unbreaking3 = 13;
         a.h.unbreaking4 = 20;
         a.h.power1 = 8;
         a.h.power2 = 15;
         a.h.power3 = 26;
         a.h.punch1 = 10;
         a.h.punch2 = 20;
         a.h.flame = 20;
         a.h.infinity = 20;
         b.h.Bows = a;
         a = new e();
         a.h.unbreaking1 = 1;
         a.h.unbreaking2 = 3;
         a.h.unbreaking3 = 7;
         a.h.unbreaking4 = 10;
         b.h.Balloons = a;
         return b;
       })(this);
       g.enchantmentNames = (function (b) {
         b = new e();
         b.h.depthStrider1 = "Depth Strider I";
         b.h.depthStrider2 = "Depth Strider II";
         b.h.depthStrider3 = "Depth Strider III";
         b.h.frostWalker1 = "Frost Walker I";
         b.h.frostWalker2 = "Frost Walker II";
         b.h.unbreaking1 = "Unbreaking I";
         b.h.unbreaking2 = "Unbreaking II";
         b.h.unbreaking3 = "Unbreaking III";
         b.h.unbreaking4 = "Unbreaking IV";
         b.h.protection1 = "Protection I";
         b.h.protection2 = "Protection II";
         b.h.protection3 = "Protection III";
         b.h.protection4 = "Protection IV";
         b.h.protection5 = "Protection V";
         b.h.protectionFire1 = "Fire Protection I";
         b.h.protectionFire2 = "Fire Protection II";
         b.h.protectionFire3 = "Fire Protection III";
         b.h.protectionBlast1 = "Blast Protection I";
         b.h.protectionBlast2 = "Blast Protection II";
         b.h.protectionBlast3 = "Blast Protection III";
         b.h.protectionProjectile1 = "Projectile Protection I";
         b.h.protectionProjectile2 = "Projectile Protection II";
         b.h.protectionProjectile3 = "Projectile Protection III";
         b.h.protectionFalling1 = "Feather Falling I";
         b.h.protectionFalling2 = "Feather Falling II";
         b.h.protectionFalling3 = "Feather Falling III";
         b.h.thorns1 = "Thorns I";
         b.h.thorns2 = "Thorns II";
         b.h.thorns3 = "Thorns III";
         b.h.respiration1 = "Respiration I";
         b.h.respiration2 = "Respiration II";
         b.h.respiration3 = "Respiration III";
         b.h.aguaAffinity = "Aqua Affinity";
         b.h.sharpness1 = "Sharpness I";
         b.h.sharpness2 = "Sharpness II";
         b.h.sharpness3 = "Sharpness III";
         b.h.sharpness4 = "Sharpness IV";
         b.h.smite1 = "Smite I";
         b.h.smite2 = "Smite II";
         b.h.smite3 = "Smite III";
         b.h.smite4 = "Smite IV";
         b.h.baneOfArthropods1 = "Bane of Arthropods I";
         b.h.baneOfArthropods2 = "Bane of Arthropods II";
         b.h.baneOfArthropods3 = "Bane of Arthropods III";
         b.h.knockback1 = "Knockback I";
         b.h.knockback2 = "Knockback II";
         b.h.knockback3 = "Knockback III";
         b.h.fireAspect = "Fire Aspect";
         b.h.looting1 = "Looting I";
         b.h.looting2 = "Looting II";
         b.h.looting3 = "Looting III";
         b.h.efficiency1 = "Efficiency I";
         b.h.efficiency2 = "Efficiency II";
         b.h.silkTouch = "Silk Touch";
         b.h.fortune1 = "Fortune I";
         b.h.fortune2 = "Fortune II";
         b.h.fortune3 = "Fortune III";
         b.h.power1 = "Power I";
         b.h.power2 = "Power II";
         b.h.power3 = "Power III";
         b.h.punch1 = "Punch I";
         b.h.punch2 = "Punch II";
         b.h.flame = "Flame";
         b.h.infinity = "Infinity";
         b.h.lure1 = "Lure I";
         b.h.lure2 = "Lure II";
         b.h.lure3 = "Lure III";
         b.h.luckOfTheSea1 = "Luck of the Sea I";
         b.h.luckOfTheSea2 = "Luck of the Sea II";
         b.h.luckOfTheSea3 = "Luck of the Sea III";
         return b;
       })(this);
       J.touchControls = !1;
       J.hideGUI = !1;
       J.focusPause = !0;
       J.showArmor = !0;
       J.soundVol = 100;
       J.songVol = 50;
       J.qual = 3;
       J.particles = 3;
       J.spaceJump = !0;
       J.useRightClickKey = !1;
       J.skins = [];
       J.keyBindings = new e();
       J.version = "";
       J.worldList = new e();
       J.defaultKeyBindings = (function (b) {
         b = new e();
         var a = new e();
         a.h.id = 69;
         a.h.name = "E";
         b.h.inventory = a;
         a = new e();
         a.h.id = 113;
         a.h.name = "F2";
         b.h.screenshot = a;
         a = new e();
         a.h.id = 81;
         a.h.name = "Q";
         b.h.dropItem = a;
         a = new e();
         a.h.id = 84;
         a.h.name = "T";
         b.h.commands = a;
         a = new e();
         a.h.id = 72;
         a.h.name = "H";
         b.h.openHelp = a;
         a = new e();
         a.h.id = 82;
         a.h.name = "R";
         b.h.tasks = a;
         a = new e();
         a.h.id = 65;
         a.h.name = "A";
         b.h.left = a;
         a = new e();
         a.h.id = 68;
         a.h.name = "D";
         b.h.right = a;
         a = new e();
         a.h.id = 87;
         a.h.name = "W";
         b.h.up = a;
         a = new e();
         a.h.id = 83;
         a.h.name = "S";
         b.h.down = a;
         a = new e();
         a.h.id = 83;
         a.h.name = "S";
         b.h.down2 = a;
         a = new e();
         a.h.id = 112;
         a.h.name = "F1";
         b.h.gui = a;
         a = new e();
         a.h.id = 16;
         a.h.name = "Shift";
         b.h.secondClick = a;
         a = new e();
         a.h.id = 16;
         a.h.name = "Shift";
         b.h.altClick = a;
         a = new e();
         a.h.id = 67;
         a.h.name = "C";
         b.h.pick = a;
         return b;
       })(this);
       J.intToKey = (function (b) {
         b = new Ma();
         b.h[-2] = null;
         b.h[65] = 97;
         b.h[66] = 98;
         b.h[67] = 99;
         b.h[68] = 100;
         b.h[69] = 101;
         b.h[70] = 102;
         b.h[71] = 103;
         b.h[72] = 104;
         b.h[73] = 105;
         b.h[74] = 106;
         b.h[75] = 107;
         b.h[76] = 108;
         b.h[77] = 109;
         b.h[78] = 110;
         b.h[79] = 111;
         b.h[80] = 112;
         b.h[81] = 113;
         b.h[82] = 114;
         b.h[83] = 115;
         b.h[84] = 116;
         b.h[85] = 117;
         b.h[86] = 118;
         b.h[87] = 119;
         b.h[88] = 120;
         b.h[89] = 121;
         b.h[90] = 122;
         b.h[32] = 32;
         b.h[16] = 1073742049;
         b.h[37] = 1073741904;
         b.h[39] = 1073741903;
         b.h[38] = 1073741906;
         b.h[40] = 1073741905;
         b.h[13] = 13;
         b.h[17] = 1073742048;
         b.h[9] = 9;
         b.h[191] = 47;
         b.h[220] = 92;
         b.h[187] = 61;
         b.h[188] = 44;
         b.h[190] = 46;
         b.h[189] = 45;
         b.h[112] = 1073741882;
         b.h[113] = 1073741883;
         b.h[114] = 1073741884;
         b.h[115] = 1073741885;
         b.h[116] = 1073741886;
         b.h[117] = 1073741887;
         b.h[118] = 1073741888;
         b.h[119] = 1073741889;
         b.h[120] = 1073741890;
         b.h[122] = 1073741892;
         b.h[123] = 1073741893;
         b.h[124] = 1073741928;
         b.h[125] = 1073741929;
         b.h[126] = 1073741930;
         return b;
       })(this);
       Aa.loaded = !1;
       Aa.waitingForNG = !1;
       Wa.wordArray = "wind earth mind time energy evolve twist rise spark sense focus ether war shadow freeze zanz notch jeb ghostid jawn igp mcman dekdev adee weasel".split(" ");
       Wa.frames = (function (b) {
         b = new e();
         b.h[""] = 1;
         b.h.inventory = 2;
         b.h.craft = 3;
         b.h.smelt = 4;
         b.h.chest = 5;
         b.h.control = 6;
         b.h.j = 7;
         b.h.sign = 8;
         b.h.inventory1 = 9;
         b.h.enchant = 10;
         b.h.dispense = 11;
         b.h.chat = 12;
         b.h.anvil = 13;
         b.h.brew = 14;
         return b;
       })(this);
       $a.globallyWaitingForMouseUp = !1;
       Ob.lightningAmounts = [0, 0.6, 0.333, 0, 0.25];
       da.defaultUVs = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];
       qb.idle = new h(0, 0);
       ka.msg = "Default skin loaded!";
       ka.defaultSkin = !1;
       ka.frames = new qb(new sa(272, 22));
       ec.skinSize = new h(272, 22);
       ec.blankSlot = { skinID: -1, tickUpdated: -1, rect: new t(0, 0, 0, 0), loaded: !0, failed: !1 };
       R.entityCache = new e();
       y.TEXTURE_UNIT_SIZE = 16;
       y.state = Uc.DONE;
       y.blockTextureMap = new e();
       y.runtimeBlockTextures = [];
       y.blockTexturesUnoccupied = new Ma();
       y.blockTexturesOccupied = new Ma();
       W.fields = new e();
       W.scrollMousePosition = 0;
       U.gamemodes = (function (b) {
         b = new e();
         b.h.SURVIVAL = 0;
         b.h.CREATIVE = 1;
         b.h.ADVENTURE = 2;
         b.h.SPECTATOR = 3;
         return b;
       })(this);
       U.sceneNums = (function (b) {
         b = new e();
         b.h.OVERWORLD = 1;
         b.h.NETHER = 2;
         b.h.END = 3;
         return b;
       })(this);
       kd.lastPlayedFireSound = 0;
       jc.toCheck = [
         [0, -3],
         [1, -3],
         [-1, -3],
         [3, 1],
         [3, -1],
         [3, 0],
         [-3, -1],
         [-3, 1],
         [-3, 0],
         [1, 0],
         [0, 1],
         [1, 1],
         [2, 0],
         [2, 1],
         [1, 2],
         [0, 2],
         [2, 2],
         [-1, 0],
         [0, -1],
         [-1, -1],
         [-2, 0],
         [-2, -1],
         [-1, -2],
         [0, -2],
         [-2, -2],
         [-1, 1],
         [-2, 1],
         [-1, 2],
         [-2, 2],
         [1, -1],
         [1, -2],
         [2, -1],
         [2, -2],
       ];
       Tc.lastPlayedWaterSound = 0;
       ib.maxCartSpeed = g.migrateSpeed(20);
       Pb.DROP_SCALE = 0.375;
       Wb.frameNums = [
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         1,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         2,
         3,
         3,
         3,
         3,
         4,
         4,
         4,
         4,
         5,
         5,
         6,
         6,
         6,
         6,
         7,
         7,
         8,
         8,
         8,
         8,
         8,
         8,
         8,
         8,
         9,
         9,
         9,
         9,
         10,
         10,
         10,
         10,
         11,
         11,
         11,
         11,
       ];
       Wb.frames = [
         { y: 0, tV: !0, sV: !1 },
         { y: 1, tV: !0, sV: !1 },
         { y: 2, tV: !0, sV: !1 },
         { y: 3, tV: !0, sV: !0 },
         { y: 3, tV: !0, sV: !1 },
         { y: 3, tV: !0, sV: !0 },
         { y: 3, tV: !0, sV: !1 },
         { y: 3, tV: !1, sV: !0 },
         { y: 3, tV: !0, sV: !1 },
         { y: 3, tV: !1, sV: !1 },
         { y: 3, tV: !1, sV: !0 },
         { y: 3, tV: !0, sV: !1 },
       ];
       K.blendMob = w.repeatArray([1], 6);
       K.blendItems = w.repeatArray([0], 6);
       Xc.legs = (function (b) {
         b = new e();
         b.h.x = [-8.5, -8.9, -8.7, -8.4, -8.7];
         b.h.y = [-3.6, -4.9, -4.5, -3.8, -4.5];
         b.h.rotation = [0, 15, 7.5, 0, 7.5];
         var a = new e();
         a.h.x = [8.8, 9, 9.5, 9.5, 9.5];
         a.h.y = [-3.5, -3.6, -4.2, -4.9, -4.2];
         a.h.rotation = [0, 0, -7.5, -15, -7.5];
         var c = new e();
         c.h.x = [-8.5, -8.4, -8.7, -8.9, -8.7];
         c.h.y = [-3.6, -3.8, -4.5, -4.9, -4.5];
         c.h.rotation = [0, 0, 7.5, 15, 7.5];
         var d = new e();
         d.h.x = [8.8, 9.5, 9.5, 9, 9.5];
         d.h.y = [-3.5, -4.9, -4.2, -3.6, -4.2];
         d.h.rotation = [0, -15, -7.5, 0, -7.5];
         return [b, a, c, d];
       })(this);
       T.identity = new T([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
       Ja.animFrames = (function (b) {
         b = new e();
         b.h.jaw = [0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 4, 5];
         b.h.wing1 = [0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26];
         b.h.wing2 = [0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26];
         return b;
       })(this);
       Ja.anims = (function (b) {
         b = new e();
         var a = [
           new T().translate(-0.36666666666666664, 0.016666666666666666).scale2D(4.412704),
           new T()
             .translate(-0.2, 0.05)
             .rotate2D(0.12833333333333333 * Math.PI)
             .translate(-0.16666666666666666, -0.03333333333333333)
             .scale2D(4.412704),
           new T()
             .translate(-0.2, 0.05)
             .rotate2D(0.19722222222222222 * Math.PI)
             .translate(-0.16666666666666666, -0.03333333333333333)
             .scale2D(4.412704),
           new T()
             .translate(-0.2, 0.05)
             .rotate2D(0.11388888888888889 * Math.PI)
             .translate(-0.16666666666666666, -0.03333333333333333)
             .scale2D(4.412704),
           new T()
             .translate(-0.2, 0.05)
             .rotate2D(0.07444444444444444 * Math.PI)
             .translate(-0.16666666666666666, -0.03333333333333333)
             .scale2D(4.412704),
           new T()
             .translate(-0.2, 0.05)
             .rotate2D(0.03444444444444444 * Math.PI)
             .translate(-0.16666666666666666, -0.03333333333333333)
             .scale2D(4.412704),
         ];
         b.h.jaw = a;
         a = [
           new T().shear2D(0.9277471957, 0).scale(1, -0.247471171007).translate(0.5533333333333331, 0.31333333333333335).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.08286896857, 0).scale(1, -0.105052142379).translate(0.5533333333333331, 0.07333333333333333).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.3756611422475, 0).scale(1, 0.109963362297).translate(0.8933333333333338, -0.16333333333333336).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.1977635985466668, 0).scale(1, 0.35648383385).translate(-0.06000000000000038, -0.5733333333333334).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.8411239989466667, 0).scale(1, 0.492570189761).translate(0.09666666666666686, -0.5733333333333334).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.6087503201953334, 0).scale(1, 0.629163950213).translate(0.426666666666667, -0.65).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.651891798738, 0).scale(1, 0.763999469558).translate(0.4399999999999996, -0.9).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.436889257541, 0).scale(1, 0.890704573134).translate(0.41000000000000036, -1.01).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.256756360368, 0).scale(1, 1.00054640545).translate(0.7533333333333332, -0.92).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.441052551858, 0).scale(1, 0.949728135228).translate(0.38000000000000017, -1.01).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.656877222401, 0).scale(1, 0.87341869263).translate(0.1433333333333337, -0.98).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.929257344636, 0).scale(1, 0.769902586626).translate(0.1600000000000004, -0.87).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.29852646588, 0).scale(1, 0.645533583408).translate(0.1600000000000004, -0.6966666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.24855571758, 0).scale(1, 0.501627653499).translate(-0.21666666666666667, -0.49333333333333335).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.46874035016, 0).scale(1, 0.345791090982).translate(-0.35666666666666674, -0.38666666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.3709501666119999, 0).scale(1, 0.155904697081).translate(-0.16999999999999982, -0.10333333333333332).translate(1.5800000000000003, -0.08666666666666667),
           new T().scale(0, 0),
           new T().shear2D(1.195152872886, 0).scale(1, -0.180562080812).translate(0.3333333333333333, 0.30333333333333334).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.45210543884, 0).scale(1, -0.358124969903).translate(-0.45, 0.35).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.2278472573533332, 0).scale(1, -0.528214747607).translate(-0.26333333333333353, 0.5066666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.28455656218, 0).scale(1, -0.68431371291).translate(0.0800000000000002, 0.7100000000000001).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.919547137907, 0).scale(1, -0.826637028835).translate(0.09666666666666686, 0.8966666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.945652991022, 0).scale(1, -0.789786667345).translate(0.1300000000000002, 0.9133333333333333).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.979272350726, 0).scale(1, -0.751625258974).translate(0.11333333333333352, 0.85).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.00349676506, 0).scale(1, -0.718577258951).translate(0.1433333333333337, 0.8200000000000001).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.03905937655, 0).scale(1, -0.683234796704).translate(0.17333333333333295, 0.7966666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.00341399846, 0).scale(1, -0.448800546436).translate(0.22333333333333297, 0.5066666666666666).translate(1.5800000000000003, -0.08666666666666667),
         ];
         b.h.wing1 = a;
         a = [
           new T().shear2D(0.602376973955, 0).scale(1, -0.295701940533).translate(-1.4333333333333333, 1.1400000000000001).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.884725264556, 0).scale(1, -0.283854218179).translate(-1.4966666666666668, 0.7266666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.0020369678333334, 0).scale(1, -0.233264638304).translate(-2.0866666666666664, 0.08666666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.2546435603750001, 0).scale(1, -0.0486450428936).translate(-2.58, -0.9166666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.1966825030925, 0).scale(1, 0.162369865162).translate(-3.033333333333333, -1.45).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.2644458462933332, 0).scale(1, 0.39782780421).translate(-2.703333333333333, -2.0733333333333333).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.88784154585, 0).scale(1, 0.631141588381).translate(-2.0933333333333333, -2.856666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.229030574197, 0).scale(1, 0.839269388199).translate(-0.8166666666666667, -3.466666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.121013296765, 0).scale(1, 0.822003079118).translate(-0.03333333333333333, -3.5933333333333333).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.227194425799, 0).scale(1, 0.805473366656).translate(-0.7666666666666667, -3.5).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.34432761329, 0).scale(1, 0.779107306294).translate(-1.5766666666666667, -3.2633333333333336).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.468434229634, 0).scale(1, 0.745283121586).translate(-1.9366666666666665, -2.95).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.603238566747, 0).scale(1, 0.703851543541).translate(-2.296666666666667, -2.606666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.761795854734, 0).scale(1, 0.652288254301).translate(-3.0633333333333335, -2.17).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.945652991022, 0).scale(1, 0.595791230196).translate(-3.58, -1.8866666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.3318749515, 0).scale(1, 0.47913533981).translate(-3.453333333333333, -1.1533333333333333).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.977085673085, 0).scale(1, 0.354413937828).translate(-2.296666666666667, -0.5266666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.58579740118, 0).scale(1, 0.237858287408).translate(-2.8133333333333335, 0.07).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.46003560638, 0).scale(1, 0.100022376884).translate(-3.5966666666666667, 0.5066666666666666).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(1.59102579769, 0).scale(1, -0.0224901034999).translate(-3.393333333333333, 1.1166666666666667).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.983031406214, 0).scale(1, -0.13856071442).translate(-3.046666666666667, 1.71).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.85495578948, 0).scale(1, -0.245194580569).translate(-3.0166666666666666, 2.29).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.71940571911, 0).scale(1, -0.3549838391).translate(-2.6266666666666665, 2.4633333333333334).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.881618592363, 0).scale(1, -0.427563309689).translate(-2.3699999999999997, 2.48).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.527240188753, 0).scale(1, -0.458212945161).translate(-2.01, 2.48).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.254181316126, 0).scale(1, -0.452706609563).translate(-1.3766666666666665, 2.3633333333333337).translate(1.5800000000000003, -0.08666666666666667),
           new T().shear2D(0.487732588566, 0).scale(1, -0.361315206612).translate(-1.8666666666666667, 1.6266666666666665).translate(1.5800000000000003, -0.08666666666666667),
         ];
         b.h.wing2 = a;
         return b;
       })(this);
       Ja.pieces = (function (b) {
         b = new e();
         var a = { clip: new t(129, 165, 6, 6), movie: "t1", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.neck1 = a;
         a = { clip: new t(129, 165, 6, 6), movie: "t2", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.neck2 = a;
         a = { clip: new t(129, 165, 6, 6), movie: "t3", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.neck3 = a;
         a = { clip: new t(129, 181, 23, 15), movie: "h", thisTransform: new T().translate(-0.21666666666666667, -0.18333333333333332).scale2D(4.412704), animated: !1 };
         b.h.head = a;
         a = { clip: new t(152, 181, 12, 3), movie: "h", thisTransform: new T(), animated: !0 };
         b.h.jaw = a;
         a = { clip: new t(137, 190, 8, 4), movie: "h", thisTransform: new T().translate(-0.4666666666666667, -0.06666666666666667).scale2D(4.412704), animated: !1 };
         b.h.nose = a;
         a = { clip: new t(144, 144, 43, 14), movie: "t4", thisTransform: new T().translate(0.6166666666666667, 0.11666666666666667).scale2D(4.412704), animated: !1 };
         b.h.body = a;
         a = {
           clip: new t(129, 144, 5, 12),
           movie: "t4",
           thisTransform: new T()
             .scale2D(4.412704)
             .rotate2D(0.3333333333333333 * Math.PI)
             .translate(0.7166666666666667, 1.5766666666666669),
           animated: !1,
         };
         b.h.arm = a;
         a = {
           clip: new t(131, 156, 3, 9),
           movie: "t4",
           thisTransform: new T()
             .scale2D(4.412704)
             .rotate2D(0.08333333333333333 * Math.PI)
             .translate(1.5366666666666668, 2.3266666666666667),
           animated: !1,
         };
         b.h.hand = a;
         a = {
           clip: new t(134, 144, 10, 11),
           movie: "t4",
           thisTransform: new T()
             .scale2D(4.412704)
             .rotate2D(0.25 * Math.PI)
             .translate(5.619999999999999, 1.396666666666667),
           animated: !1,
         };
         b.h.leg = a;
         a = {
           clip: new t(136, 155, 8, 14),
           movie: "t4",
           thisTransform: new T()
             .scale2D(4.412704)
             .rotate2D(0.5 * Math.PI)
             .translate(6.760000000000001, 1.9133333333333336),
           animated: !1,
         };
         b.h.calf = a;
         a = {
           clip: new t(141, 169, 3, 12),
           movie: "t4",
           thisTransform: new T()
             .scale2D(4.412704)
             .rotate2D(0.08333333333333333 * Math.PI)
             .translate(7.669999999999999, 2.2666666666666666),
           animated: !1,
         };
         b.h.foot = a;
         a = { clip: new t(129, 165, 6, 6), movie: "t5", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail1 = a;
         a = { clip: new t(129, 165, 6, 6), movie: "t6", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail2 = a;
         a = { clip: new t(129, 171, 6, 5), movie: "t7", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail3 = a;
         a = { clip: new t(129, 171, 6, 5), movie: "t8", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail4 = a;
         a = { clip: new t(129, 171, 6, 5), movie: "t9", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail5 = a;
         a = { clip: new t(129, 171, 6, 5), movie: "t10", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail6 = a;
         a = { clip: new t(129, 176, 6, 4), movie: "t11", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail7 = a;
         a = { clip: new t(129, 176, 6, 4), movie: "t12", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail8 = a;
         a = { clip: new t(129, 176, 6, 4), movie: "t13", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail9 = a;
         a = { clip: new t(129, 176, 6, 4), movie: "t14", thisTransform: new T().scale2D(4.412704), animated: !1 };
         b.h.tail10 = a;
         a = { clip: new t(144, 158, 45, 22), movie: "t4", thisTransform: new T().scale2D(4.412704).scale(1, 0.695694), animated: !0 };
         b.h.wing1 = a;
         a = { clip: new t(189, 144, 47, 37), movie: "t4", thisTransform: new T().scale2D(4.412704).scale(1, 0.695694), animated: !0 };
         b.h.wing2 = a;
         return b;
       })(this);
       jb.appendages = (function (b) {
         b = new e();
         var a = new e();
         a.h.x = [-8.9, -7.1];
         a.h.y = [-62.8, -61.7];
         a.h.r = [7.5, 22.5];
         b.h.arm1 = a;
         a = new e();
         a.h.x = [7.5, 7];
         a.h.y = [-62.5, -61.8];
         a.h.r = [-7.7, 17.5];
         b.h.arm2 = a;
         a = new e();
         a.h.x = [-5.2, -3.2, -4, -4.7, -5.2, -4.9, -5, -3.3];
         a.h.y = [-37.8, -39.7, -40.4, -38.3, -37.9, -37.6, -38.2, -39.7];
         a.h.r = [0, 28.4, 15, 10.3, -4.7, -22.5, -14.5, 15.5];
         b.h.leg11 = a;
         a = new e();
         a.h.x = [-5.2, -12.6, -8.9, -8.4, -3.7, 2.4, -0.7, -10];
         a.h.y = [-21.1, -24.6, -21.7, -19.8, -18.8, -19.2, -21.9, -24];
         a.h.r = [0, -19.3, 10.2, -15.5, -25.2, -27.9, -64.9, -60.6];
         b.h.leg12 = a;
         a = new e();
         a.h.x = [4.3, 3.6, 3.6, 3.1, 2.5, 1.4, 2.8, 3.4];
         a.h.y = [-37.8, -37.1, -38.6, -38.9, -40.4, -39.4, -48.3, -37.9];
         a.h.r = [0, 0, 1.5, 31.5, 46.5, 25.1, 14.3, 8.1];
         b.h.leg21 = a;
         a = new e();
         a.h.x = [4.3, 3.4, 2.3, -4.6, -10.7, -6.7, -1.8, 0.6];
         a.h.y = [-21.1, -20.4, -21.1, -24.5, -29.6, -22.3, -20.8, -20];
         a.h.r = [0, -15, -43.2, -58.2, -13.2, 22.8, 8.2, -13.1];
         b.h.leg22 = a;
         return b;
       })(this);
       od.frames = [0, 0, 1, 0, 2];
       sc.frames = [0, 0, 1, 2, 3, 4];
       sc.framesWool = [0, 0, 0, 0, 1, 2];
       sc.mustacheOffset = [0, 0, -1, 0, 7, 6];
       Vc.frames = [0, 0, 1, 2, 1, 3, 0];
       Wc.legs = (function (b) {
         b = new e();
         b.h.x = [1, 0, 1, 2.2, 2.5, 2.15, 2.4, 1.05];
         b.h.y = [3.15, 1.35, 3.15, 3.8, 4.8, 4.6, 3.5, 1.9];
         b.h.rotation = [45, 46.6, 45, 47.9, 52.4, 57.4, 60.3, 53.1];
         var a = new e();
         a.h.x = [-0.35, 0.1, -0.95, -2.1, -0.35, 0.4, 0.1, -0.5];
         a.h.y = [-1.05, -1.7, -2.15, -2.5, -1.05, -0.8, -0.35, -0.85];
         a.h.rotation = [12.9, 31.5, 24.8, 20.3, 12.9, 18.7, 24.4, 29.6];
         var c = new e();
         c.h.x = [-0.3, -1.45, -2.95, -3.15, -2.9, -2.9, -0.05, -1.5];
         c.h.y = [-1, -1.15, -2.5, -2.4, -2.6, -3.3, -0.7, -1];
         c.h.rotation = [-17, -1, 9.9, 13.9, 3.5, -3.7, -17, -6];
         var d = new e();
         d.h.x = [-2.2, -2.2, -1.75, -1.05, -0.9, -0.4, -1.8, -2.5];
         d.h.y = [2.95, 2.95, 1.7, 1.1, -0.45, -2.1, -2.2, -0.7];
         d.h.rotation = [-45, -45, -38.3, -35.3, -30.9, -29.2, -34.6, -39.6];
         return [b, a, c, d];
       })(this);
       hc.headBob = [0, 1, 1, 0, -2, 0, 1, 1, 0, -2, 0];
       hc.collarType = [0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1];
       hc.tailOffset = [0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 5];
       hc.tailRotation = [45, 30, 21.3, 15, 23.3, -15, -15, -15, -15, -15, -15];
       db.frames = [0, 0, 1, 2, 1, 3, 0];
       Yc.frames = [0, 0, 1, 2, 1, 3, 0];
       Cb.USE_CACHE = !1;
       Cb.USE_ENUM_INDEX = !1;
       Cb.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
       vb.DEFAULT_RESOLVER = new Dg();
       vb.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
       ic.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
       ic.BYTES = Ka.ofString(ic.CHARS);
       zb.LEN_EXTRA_BITS_TBL = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1];
       zb.LEN_BASE_VAL_TBL = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
       zb.DIST_EXTRA_BITS_TBL = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1];
       zb.DIST_BASE_VAL_TBL = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
       zb.CODE_LENGTHS_POS = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
       vc.onCoreReady = new Mg();
       P.images = new e();
       P.sounds = new e();
       P.numImages = 0;
       P.numImagesLoaded = 0;
       P.numSounds = 0;
       P.numSoundsLoaded = 0;
       P.blankSound = new Ee();
       ya.sfxChannel = new oc();
       ya.musicChannel = new oc();
       ya.ambienceChannel = new oc();
       ya.masterVolume = 1;
       ya.sfxVolume = 1;
       ya.musicVolume = 1;
       ya.ambienceVolume = 1;
       F.white = new F(-1);
       F.black = new F(-16777216);
       F.clear = new F(0);
       ba.quadUVs = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];
       Fe.lookatDirections = [new M(1, 0, 0), new M(-1, 0, 0), new M(0, 1, 0), new M(0, -1, 0), new M(0, 0, 1), new M(0, 0, -1)];
       oa.callCount = 0;
       oa.depthMask = !1;
       oa.culling = !1;
       oa.cullFaceBack = !0;
       oa.depthTest = !1;
       gc.shaders = new Dc();
       Xb.shaders = new Dc();
       Na.shaders = new Dc();
       Gc.shaders = new e();
       ra.activeRequests = 0;
       ra.requestLimit = 17;
       ra.requestQueue = new $c();
       wa.dummyCharacter = "\u007f";
       wa.windowID = 0;
       Hc.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
       Hc.EXTENDED_DICTIONARY = (function (b) {
         b = [];
         for (var a = 0, c = Hc.DICTIONARY; a < c.length; ) for (var d = c[a++], e = 0, h = Hc.DICTIONARY; e < h.length; ) b.push(d + h[e++]);
         return b;
       })(this);
       Eb.onUpdate = new lb();
       Kc.sensorByID = new Ma();
       Kc.sensors = [];
       wb.devices = new Ma();
       wb.onConnect = new Lh();
       pb.devices = new Ma();
       pb.onConnect = new Mh();
       Ib.onCancel = new Nd();
       Ib.onEnd = new Nd();
       Ib.onMove = new Nd();
       Ib.onStart = new Nd();
       qa.cache = new Ph();
       qa.onChange = new lb();
       qa.bundlePaths = new e();
       qa.libraries = new e();
       qa.libraryPaths = new e();
       ab.throwErrors = !0;
       ta.entityMatrix = new T();
       Ac.alphaReduction = (function (b) {
         b = new e();
         b.h.color = [1, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5];
         return b;
       })(this);
       nd.faq = [
         { question: "Wait, isn't this a Flash game?", answer: "It was! But I spent 2 years remaking it as a HTML5 game." },
         { question: "When is the next update?", answer: "You can see the progress on the next update by visiting the MineBlocks.com homepage." },
         { question: "How many people are working on Mine Blocks?", answer: "Just me, Zanzlanz. :) Prodevus made some great art though! Check out the credits menu." },
         { question: "Is there multiplayer? Texture packs? Other languages?", answer: "No, sorry. Not yet at least!" },
         { question: "How do I play on mobile?", answer: "Currently, you can visit the game on MineBlocks.com from your phone to play on mobile. It's not great; the mobile controls need work." },
         { question: "Can there be mods, like Lucky Block or Herobrine?", answer: "No, sorry. Modding is currently not feasible." },
         { question: "Can I change my skin?", answer: "Yes! You can find this in the settings menu under 'Character Skin'." },
         { question: "Why isn't my submitted skin showing up?", answer: "Moderation may be a bit behind in queue. Visit MineBlocks.com/1/skins for details." },
         {
           question: "How do I improve the game's performance and reduce lag?",
           answer: "Make sure hardware acceleration is enabled in your browser, or try downloading the desktop version of the game. Otherwise, try reducing the size of the game window and setting the quality to low.",
         },
         { question: "How can I download Mine Blocks?", answer: "You can download Mine Blocks at MineBlocks.com/1/download." },
         {
           question: "Why doesn't the game save properly?",
           answer:
             "Browsers may limit save size. Make sure to backup your worlds to file often, and remove unused saves from the world list. If you are playing on Safari, the save size may be limited in embeds, so try using a different browser.",
         },
       ];
       lc.generatingTips = "If the loading bar is boring you, try talking to it,\nand maybe it'll try to go faster.{If it weren't for this loading bar,\nwould the game even load??{How many pixels might there be in this loading bar?{What if the loading bar could talk?\nWhat would it say?{Having more than one loading bar\ndoesn't speed it up. Sorry!{Minecraft has loading bars too! WOO!{The loading bar has pathfinding;\nit always seems to find the end!{Is the green part of the\nloading bar getting bigger...\nOr is the red part of the\nloading bar just getting smaller?{Really cool people call a loading bar\na \"loading rectangle.\"".split(
         "{"
       );
       Fa.shaders = new Dc();
       mc.shaders = new Dc();
       N.main();
     })("undefined" != typeof u ? u : "undefined" != typeof window ? window : "undefined" != typeof self ? self : this, "undefined" != typeof window ? window : "undefined" != typeof N ? N : "undefined" != typeof self ? self : this);
   };
   ha.lime.embed = function (L) {
     var N = {},
       aa = ha.lime.$scripts[L];
     if (!aa) throw Error('Cannot find project name "' + L + '"');
     aa(N, u);
     for (var Y in N) ha[Y] = ha[Y] || N[Y];
     (aa = N.lime || window.lime) && aa.embed && this != aa.embed && aa.embed.apply(aa, arguments);
     return N;
   };
   "function" == typeof define &&
     define.amd &&
     (define([], function () {
       return ha.lime;
     }),
     (define.__amd = define.amd),
     (define.amd = null));
 })(
   "undefined" != typeof exports ? exports : "function" == typeof define && define.amd ? {} : "undefined" != typeof window ? window : "undefined" != typeof self ? self : this,
   "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this
 );
 !(function () {
   var ha = function () {
     this.init();
   };
   ha.prototype = {
     init: function () {
       var n = this || u;
       return (
         (n._counter = 1e3),
         (n._html5AudioPool = []),
         (n.html5PoolSize = 10),
         (n._codecs = {}),
         (n._howls = []),
         (n._muted = !1),
         (n._volume = 1),
         (n._canPlayEvent = "canplaythrough"),
         (n._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null),
         (n.masterGain = null),
         (n.noAudio = !1),
         (n.usingWebAudio = !0),
         (n.autoSuspend = !0),
         (n.ctx = null),
         (n.autoUnlock = !0),
         n._setup(),
         n
       );
     },
     volume: function (n) {
       var D = this || u;
       if (((n = parseFloat(n)), D.ctx || r(), void 0 !== n && 0 <= n && 1 >= n)) {
         if (((D._volume = n), D._muted)) return D;
         D.usingWebAudio && D.masterGain.gain.setValueAtTime(n, u.ctx.currentTime);
         for (var ia = 0; ia < D._howls.length; ia++)
           if (!D._howls[ia]._webAudio)
             for (var v = D._howls[ia]._getSoundIds(), B = 0; B < v.length; B++) {
               var Da = D._howls[ia]._soundById(v[B]);
               Da && Da._node && (Da._node.volume = Da._volume * n);
             }
         return D;
       }
       return D._volume;
     },
     mute: function (n) {
       var D = this || u;
       D.ctx || r();
       D._muted = n;
       D.usingWebAudio && D.masterGain.gain.setValueAtTime(n ? 0 : D._volume, u.ctx.currentTime);
       for (var ia = 0; ia < D._howls.length; ia++)
         if (!D._howls[ia]._webAudio)
           for (var v = D._howls[ia]._getSoundIds(), B = 0; B < v.length; B++) {
             var Da = D._howls[ia]._soundById(v[B]);
             Da && Da._node && (Da._node.muted = !!n || Da._muted);
           }
       return D;
     },
     unload: function () {
       for (var n = this || u, D = n._howls.length - 1; 0 <= D; D--) n._howls[D].unload();
       return n.usingWebAudio && n.ctx && void 0 !== n.ctx.close && (n.ctx.close(), (n.ctx = null), r()), n;
     },
     codecs: function (n) {
       return (this || u)._codecs[n.replace(/^x-/, "")];
     },
     _setup: function () {
       var n = this || u;
       if (((n.state = n.ctx ? n.ctx.state || "suspended" : "suspended"), n._autoSuspend(), !n.usingWebAudio))
         if ("undefined" != typeof Audio)
           try {
             var r = new Audio();
             void 0 === r.oncanplaythrough && (n._canPlayEvent = "canplay");
           } catch (ia) {
             n.noAudio = !0;
           }
         else n.noAudio = !0;
       try {
         (r = new Audio()), r.muted && (n.noAudio = !0);
       } catch (ia) {}
       return n.noAudio || n._setupCodecs(), n;
     },
     _setupCodecs: function () {
       var n = this || u,
         r = null;
       try {
         r = "undefined" != typeof Audio ? new Audio() : null;
       } catch (Ea) {
         return n;
       }
       if (!r || "function" != typeof r.canPlayType) return n;
       var v = r.canPlayType("audio/mpeg;").replace(/^no$/, ""),
         B = n._navigator && n._navigator.userAgent.match(/OPR\/([0-6].)/g);
       B = B && 33 > parseInt(B[0].split("/")[1], 10);
       return (
         (n._codecs = {
           mp3: !(B || (!v && !r.canPlayType("audio/mp3;").replace(/^no$/, ""))),
           mpeg: !!v,
           opus: !!r.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
           ogg: !!r.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
           oga: !!r.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
           wav: !!r.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
           aac: !!r.canPlayType("audio/aac;").replace(/^no$/, ""),
           caf: !!r.canPlayType("audio/x-caf;").replace(/^no$/, ""),
           m4a: !!(r.canPlayType("audio/x-m4a;") || r.canPlayType("audio/m4a;") || r.canPlayType("audio/aac;")).replace(/^no$/, ""),
           mp4: !!(r.canPlayType("audio/x-mp4;") || r.canPlayType("audio/mp4;") || r.canPlayType("audio/aac;")).replace(/^no$/, ""),
           weba: !!r.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
           webm: !!r.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
           dolby: !!r.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
           flac: !!(r.canPlayType("audio/x-flac;") || r.canPlayType("audio/flac;")).replace(/^no$/, ""),
         }),
         n
       );
     },
     _unlockAudio: function () {
       var n = this || u,
         r = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(n._navigator && n._navigator.userAgent);
       if (!n._audioUnlocked && n.ctx && r) {
         n._audioUnlocked = !1;
         n.autoUnlock = !1;
         n._mobileUnloaded || 44100 === n.ctx.sampleRate || ((n._mobileUnloaded = !0), n.unload());
         n._scratchBuffer = n.ctx.createBuffer(1, 1, 22050);
         var v = function (r) {
           for (r = 0; r < n.html5PoolSize; r++) {
             var D = new Audio();
             D._unlocked = !0;
             n._releaseHtml5Audio(D);
           }
           for (r = 0; r < n._howls.length; r++)
             if (!n._howls[r]._webAudio) {
               D = n._howls[r]._getSoundIds();
               for (var ia = 0; ia < D.length; ia++) {
                 var B = n._howls[r]._soundById(D[ia]);
                 B && B._node && !B._node._unlocked && ((B._node._unlocked = !0), B._node.load());
               }
             }
           n._autoResume();
           var u = n.ctx.createBufferSource();
           u.buffer = n._scratchBuffer;
           u.connect(n.ctx.destination);
           void 0 === u.start ? u.noteOn(0) : u.start(0);
           "function" == typeof n.ctx.resume && n.ctx.resume();
           u.onended = function () {
             u.disconnect(0);
             n._audioUnlocked = !0;
             document.removeEventListener("touchstart", v, !0);
             document.removeEventListener("touchend", v, !0);
             document.removeEventListener("click", v, !0);
             for (var q = 0; q < n._howls.length; q++) n._howls[q]._emit("unlock");
           };
         };
         return document.addEventListener("touchstart", v, !0), document.addEventListener("touchend", v, !0), document.addEventListener("click", v, !0), n;
       }
     },
     _obtainHtml5Audio: function () {
       var n = this || u;
       if (n._html5AudioPool.length) return n._html5AudioPool.pop();
       n = new Audio().play();
       return (
         n &&
           "undefined" != typeof Promise &&
           (n instanceof Promise || "function" == typeof n.then) &&
           n.catch(function () {
             console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
           }),
         new Audio()
       );
     },
     _releaseHtml5Audio: function (n) {
       var r = this || u;
       return n._unlocked && r._html5AudioPool.push(n), r;
     },
     _autoSuspend: function () {
       var n = this;
       if (n.autoSuspend && n.ctx && void 0 !== n.ctx.suspend && u.usingWebAudio) {
         for (var r = 0; r < n._howls.length; r++) if (n._howls[r]._webAudio) for (var v = 0; v < n._howls[r]._sounds.length; v++) if (!n._howls[r]._sounds[v]._paused) return n;
         return (
           n._suspendTimer && clearTimeout(n._suspendTimer),
           (n._suspendTimer = setTimeout(function () {
             n.autoSuspend &&
               ((n._suspendTimer = null),
               (n.state = "suspending"),
               n.ctx.suspend().then(function () {
                 n.state = "suspended";
                 n._resumeAfterSuspend && (delete n._resumeAfterSuspend, n._autoResume());
               }));
           }, 3e4)),
           n
         );
       }
     },
     _autoResume: function () {
       var n = this;
       if (n.ctx && void 0 !== n.ctx.resume && u.usingWebAudio)
         return (
           "running" === n.state && n._suspendTimer
             ? (clearTimeout(n._suspendTimer), (n._suspendTimer = null))
             : "suspended" === n.state
             ? (n.ctx.resume().then(function () {
                 n.state = "running";
                 for (var r = 0; r < n._howls.length; r++) n._howls[r]._emit("resume");
               }),
               n._suspendTimer && (clearTimeout(n._suspendTimer), (n._suspendTimer = null)))
             : "suspending" === n.state && (n._resumeAfterSuspend = !0),
           n
         );
     },
   };
   var u = new ha(),
     L = function (n) {
       if (!n.src || 0 === n.src.length) return void console.error("An array of source files must be passed with any new Howl.");
       this.init(n);
     };
   L.prototype = {
     init: function (n) {
       var D = this;
       return (
         u.ctx || r(),
         (D._autoplay = n.autoplay || !1),
         (D._format = "string" != typeof n.format ? n.format : [n.format]),
         (D._html5 = n.html5 || !1),
         (D._muted = n.mute || !1),
         (D._loop = n.loop || !1),
         (D._pool = n.pool || 5),
         (D._preload = "boolean" != typeof n.preload || n.preload),
         (D._rate = n.rate || 1),
         (D._sprite = n.sprite || {}),
         (D._src = "string" != typeof n.src ? n.src : [n.src]),
         (D._volume = void 0 !== n.volume ? n.volume : 1),
         (D._xhrWithCredentials = n.xhrWithCredentials || !1),
         (D._duration = 0),
         (D._state = "unloaded"),
         (D._sounds = []),
         (D._endTimers = {}),
         (D._queue = []),
         (D._playLock = !1),
         (D._onend = n.onend ? [{ fn: n.onend }] : []),
         (D._onfade = n.onfade ? [{ fn: n.onfade }] : []),
         (D._onload = n.onload ? [{ fn: n.onload }] : []),
         (D._onloaderror = n.onloaderror ? [{ fn: n.onloaderror }] : []),
         (D._onplayerror = n.onplayerror ? [{ fn: n.onplayerror }] : []),
         (D._onpause = n.onpause ? [{ fn: n.onpause }] : []),
         (D._onplay = n.onplay ? [{ fn: n.onplay }] : []),
         (D._onstop = n.onstop ? [{ fn: n.onstop }] : []),
         (D._onmute = n.onmute ? [{ fn: n.onmute }] : []),
         (D._onvolume = n.onvolume ? [{ fn: n.onvolume }] : []),
         (D._onrate = n.onrate ? [{ fn: n.onrate }] : []),
         (D._onseek = n.onseek ? [{ fn: n.onseek }] : []),
         (D._onunlock = n.onunlock ? [{ fn: n.onunlock }] : []),
         (D._onresume = []),
         (D._webAudio = u.usingWebAudio && !D._html5),
         void 0 !== u.ctx && u.ctx && u.autoUnlock && u._unlockAudio(),
         u._howls.push(D),
         D._autoplay &&
           D._queue.push({
             event: "play",
             action: function () {
               D.play();
             },
           }),
         D._preload && D.load(),
         D
       );
     },
     load: function () {
       var n = null;
       if (u.noAudio) return void this._emit("loaderror", null, "No audio support.");
       "string" == typeof this._src && (this._src = [this._src]);
       for (var r = 0; r < this._src.length; r++) {
         var v;
         if (this._format && this._format[r]) var B = this._format[r];
         else {
           if ("string" != typeof (v = this._src[r])) {
             this._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
             continue;
           }
           (B = /^data:audio\/([^;,]+);/i.exec(v)) || (B = /\.([^.]+)$/.exec(v.split("?", 1)[0]));
           B && (B = B[1].toLowerCase());
         }
         if ((B || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'), B && u.codecs(B))) {
           n = this._src[r];
           break;
         }
       }
       return n
         ? ((this._src = n), (this._state = "loading"), "https:" === window.location.protocol && "http:" === n.slice(0, 5) && ((this._html5 = !0), (this._webAudio = !1)), new N(this), this._webAudio && Y(this), this)
         : void this._emit("loaderror", null, "No codec support for selected audio sources.");
     },
     play: function (n, r) {
       var D = this,
         v = null;
       if ("number" == typeof n) (v = n), (n = null);
       else {
         if ("string" == typeof n && "loaded" === D._state && !D._sprite[n]) return null;
         if (void 0 === n && ((n = "__default"), !D._playLock)) {
           for (var B = 0, Da = 0; Da < D._sounds.length; Da++) D._sounds[Da]._paused && !D._sounds[Da]._ended && (B++, (v = D._sounds[Da]._id));
           1 === B ? (n = null) : (v = null);
         }
       }
       var fa = v ? D._soundById(v) : D._inactiveSound();
       if (!fa) return null;
       if ((v && !n && (n = fa._sprite || "__default"), "loaded" !== D._state)) {
         fa._sprite = n;
         fa._ended = !1;
         var L = fa._id;
         return (
           D._queue.push({
             event: "play",
             action: function () {
               D.play(L);
             },
           }),
           L
         );
       }
       if (v && !fa._paused) return r || D._loadQueue("play"), fa._id;
       D._webAudio && u._autoResume();
       var q = Math.max(0, 0 < fa._seek ? fa._seek : D._sprite[n][0] / 1e3),
         N = Math.max(0, (D._sprite[n][0] + D._sprite[n][1]) / 1e3 - q),
         aa = (1e3 * N) / Math.abs(fa._rate),
         V = D._sprite[n][0] / 1e3,
         Y = (D._sprite[n][0] + D._sprite[n][1]) / 1e3,
         la = !(!fa._loop && !D._sprite[n][2]);
       fa._sprite = n;
       fa._ended = !1;
       var Ca = function () {
         fa._paused = !1;
         fa._seek = q;
         fa._start = V;
         fa._stop = Y;
         fa._loop = la;
       };
       if (q >= Y) return void D._ended(fa);
       var x = fa._node;
       if (D._webAudio)
         (v = function () {
           D._playLock = !1;
           Ca();
           D._refreshBuffer(fa);
           x.gain.setValueAtTime(fa._muted || D._muted ? 0 : fa._volume, u.ctx.currentTime);
           fa._playStart = u.ctx.currentTime;
           void 0 === x.bufferSource.start ? (fa._loop ? x.bufferSource.noteGrainOn(0, q, 86400) : x.bufferSource.noteGrainOn(0, q, N)) : fa._loop ? x.bufferSource.start(0, q, 86400) : x.bufferSource.start(0, q, N);
           aa !== 1 / 0 && (D._endTimers[fa._id] = setTimeout(D._ended.bind(D, fa), aa));
           r ||
             setTimeout(function () {
               D._emit("play", fa._id);
               D._loadQueue();
             }, 0);
         }),
           "running" === u.state ? v() : ((D._playLock = !0), D.once("resume", v), D._clearTimer(fa._id));
       else {
         var g = function () {
           x.currentTime = q;
           x.muted = fa._muted || D._muted || u._muted || x.muted;
           x.volume = fa._volume * u.volume();
           x.playbackRate = fa._rate;
           try {
             var g = x.play();
             if (
               (g && "undefined" != typeof Promise && (g instanceof Promise || "function" == typeof g.then)
                 ? ((D._playLock = !0),
                   Ca(),
                   g
                     .then(function () {
                       D._playLock = !1;
                       x._unlocked = !0;
                       r || (D._emit("play", fa._id), D._loadQueue());
                     })
                     .catch(function () {
                       D._playLock = !1;
                       D._emit("playerror", fa._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                       fa._ended = !0;
                       fa._paused = !0;
                     }))
                 : r || ((D._playLock = !1), Ca(), D._emit("play", fa._id), D._loadQueue()),
               (x.playbackRate = fa._rate),
               x.paused)
             )
               return void D._emit("playerror", fa._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
             "__default" !== n || fa._loop
               ? (D._endTimers[fa._id] = setTimeout(D._ended.bind(D, fa), aa))
               : ((D._endTimers[fa._id] = function () {
                   D._ended(fa);
                   x.removeEventListener("ended", D._endTimers[fa._id], !1);
                 }),
                 x.addEventListener("ended", D._endTimers[fa._id], !1));
           } catch (Aa) {
             D._emit("playerror", fa._id, Aa);
           }
         };
         v = (window && window.ejecta) || (!x.readyState && u._navigator.isCocoonJS);
         if (3 <= x.readyState || v) g();
         else {
           D._playLock = !0;
           var J = function () {
             g();
             x.removeEventListener(u._canPlayEvent, J, !1);
           };
           x.addEventListener(u._canPlayEvent, J, !1);
           D._clearTimer(fa._id);
         }
       }
       return fa._id;
     },
     pause: function (n, r) {
       var D = this;
       if ("loaded" !== D._state || D._playLock)
         return (
           D._queue.push({
             event: "pause",
             action: function () {
               D.pause(n);
             },
           }),
           D
         );
       for (var v = D._getSoundIds(n), B = 0; B < v.length; B++) {
         D._clearTimer(v[B]);
         var u = D._soundById(v[B]);
         if (u && !u._paused && ((u._seek = D.seek(v[B])), (u._rateSeek = 0), (u._paused = !0), D._stopFade(v[B]), u._node))
           if (D._webAudio) {
             if (!u._node.bufferSource) continue;
             void 0 === u._node.bufferSource.stop ? u._node.bufferSource.noteOff(0) : u._node.bufferSource.stop(0);
             D._cleanBuffer(u._node);
           } else (isNaN(u._node.duration) && u._node.duration !== 1 / 0) || u._node.pause();
         r || D._emit("pause", u ? u._id : null);
       }
       return D;
     },
     stop: function (n, r) {
       var D = this;
       if ("loaded" !== D._state || D._playLock)
         return (
           D._queue.push({
             event: "stop",
             action: function () {
               D.stop(n);
             },
           }),
           D
         );
       for (var v = D._getSoundIds(n), B = 0; B < v.length; B++) {
         D._clearTimer(v[B]);
         var u = D._soundById(v[B]);
         u &&
           ((u._seek = u._start || 0),
           (u._rateSeek = 0),
           (u._paused = !0),
           (u._ended = !0),
           D._stopFade(v[B]),
           u._node &&
             (D._webAudio
               ? u._node.bufferSource && (void 0 === u._node.bufferSource.stop ? u._node.bufferSource.noteOff(0) : u._node.bufferSource.stop(0), D._cleanBuffer(u._node))
               : (isNaN(u._node.duration) && u._node.duration !== 1 / 0) || ((u._node.currentTime = u._start || 0), u._node.pause())),
           r || D._emit("stop", u._id));
       }
       return D;
     },
     mute: function (n, r) {
       var D = this;
       if ("loaded" !== D._state || D._playLock)
         return (
           D._queue.push({
             event: "mute",
             action: function () {
               D.mute(n, r);
             },
           }),
           D
         );
       if (void 0 === r) {
         if ("boolean" != typeof n) return D._muted;
         D._muted = n;
       }
       for (var v = D._getSoundIds(r), B = 0; B < v.length; B++) {
         var L = D._soundById(v[B]);
         L && ((L._muted = n), L._interval && D._stopFade(L._id), D._webAudio && L._node ? L._node.gain.setValueAtTime(n ? 0 : L._volume, u.ctx.currentTime) : L._node && (L._node.muted = !!u._muted || n), D._emit("mute", L._id));
       }
       return D;
     },
     volume: function () {
       var n,
         r,
         v = this,
         B = arguments;
       if (0 === B.length) return v._volume;
       1 === B.length || (2 === B.length && void 0 === B[1]) ? (0 <= v._getSoundIds().indexOf(B[0]) ? (r = parseInt(B[0], 10)) : (n = parseFloat(B[0]))) : 2 <= B.length && ((n = parseFloat(B[0])), (r = parseInt(B[1], 10)));
       var L;
       if (!(void 0 !== n && 0 <= n && 1 >= n)) return (L = r ? v._soundById(r) : v._sounds[0]), L ? L._volume : 0;
       if ("loaded" !== v._state || v._playLock)
         return (
           v._queue.push({
             event: "volume",
             action: function () {
               v.volume.apply(v, B);
             },
           }),
           v
         );
       void 0 === r && (v._volume = n);
       r = v._getSoundIds(r);
       for (var N = 0; N < r.length; N++)
         (L = v._soundById(r[N])) &&
           ((L._volume = n), B[2] || v._stopFade(r[N]), v._webAudio && L._node && !L._muted ? L._node.gain.setValueAtTime(n, u.ctx.currentTime) : L._node && !L._muted && (L._node.volume = n * u.volume()), v._emit("volume", L._id));
       return v;
     },
     fade: function (n, r, v, B) {
       var D = this;
       if ("loaded" !== D._state || D._playLock)
         return (
           D._queue.push({
             event: "fade",
             action: function () {
               D.fade(n, r, v, B);
             },
           }),
           D
         );
       n = parseFloat(n);
       r = parseFloat(r);
       v = parseFloat(v);
       D.volume(n, B);
       for (var ia = D._getSoundIds(B), L = 0; L < ia.length; L++) {
         var N = D._soundById(ia[L]);
         if (N) {
           if ((B || D._stopFade(ia[L]), D._webAudio && !N._muted)) {
             var q = u.ctx.currentTime,
               aa = q + v / 1e3;
             N._volume = n;
             N._node.gain.setValueAtTime(n, q);
             N._node.gain.linearRampToValueAtTime(r, aa);
           }
           D._startFadeInterval(N, n, r, v, ia[L], void 0 === B);
         }
       }
       return D;
     },
     _startFadeInterval: function (n, r, v, B, u, L) {
       var D = this,
         ia = r,
         q = v - r;
       u = Math.abs(q / 0.01);
       u = Math.max(4, 0 < u ? B / u : B);
       var N = Date.now();
       n._fadeTo = v;
       n._interval = setInterval(function () {
         var u = (Date.now() - N) / B;
         N = Date.now();
         ia += q * u;
         ia = Math.max(0, ia);
         ia = Math.min(1, ia);
         ia = Math.round(100 * ia) / 100;
         D._webAudio ? (n._volume = ia) : D.volume(ia, n._id, !0);
         L && (D._volume = ia);
         ((v < r && ia <= v) || (v > r && ia >= v)) && (clearInterval(n._interval), (n._interval = null), (n._fadeTo = null), D.volume(v, n._id), D._emit("fade", n._id));
       }, u);
     },
     _stopFade: function (n) {
       var r = this._soundById(n);
       return r && r._interval && (this._webAudio && r._node.gain.cancelScheduledValues(u.ctx.currentTime), clearInterval(r._interval), (r._interval = null), this.volume(r._fadeTo, n), (r._fadeTo = null), this._emit("fade", n)), this;
     },
     loop: function () {
       var n,
         r,
         v,
         B = arguments;
       if (0 === B.length) return this._loop;
       if (1 === B.length) {
         if ("boolean" != typeof B[0]) return !!(v = this._soundById(parseInt(B[0], 10))) && v._loop;
         this._loop = n = B[0];
       } else 2 === B.length && ((n = B[0]), (r = parseInt(B[1], 10)));
       r = this._getSoundIds(r);
       for (B = 0; B < r.length; B++)
         (v = this._soundById(r[B])) &&
           ((v._loop = n), this._webAudio && v._node && v._node.bufferSource && ((v._node.bufferSource.loop = n), n && ((v._node.bufferSource.loopStart = v._start || 0), (v._node.bufferSource.loopEnd = v._stop))));
       return this;
     },
     rate: function () {
       var n,
         r,
         v = this,
         B = arguments;
       0 === B.length ? (r = v._sounds[0]._id) : 1 === B.length ? (0 <= v._getSoundIds().indexOf(B[0]) ? (r = parseInt(B[0], 10)) : (n = parseFloat(B[0]))) : 2 === B.length && ((n = parseFloat(B[0])), (r = parseInt(B[1], 10)));
       var L;
       if ("number" != typeof n) return (L = v._soundById(r)), L ? L._rate : v._rate;
       if ("loaded" !== v._state || v._playLock)
         return (
           v._queue.push({
             event: "rate",
             action: function () {
               v.rate.apply(v, B);
             },
           }),
           v
         );
       void 0 === r && (v._rate = n);
       r = v._getSoundIds(r);
       for (var N = 0; N < r.length; N++)
         if ((L = v._soundById(r[N]))) {
           v.playing(r[N]) && ((L._rateSeek = v.seek(r[N])), (L._playStart = v._webAudio ? u.ctx.currentTime : L._playStart));
           L._rate = n;
           v._webAudio && L._node && L._node.bufferSource ? L._node.bufferSource.playbackRate.setValueAtTime(n, u.ctx.currentTime) : L._node && (L._node.playbackRate = n);
           var fa = v.seek(r[N]);
           fa = (1e3 * ((v._sprite[L._sprite][0] + v._sprite[L._sprite][1]) / 1e3 - fa)) / Math.abs(L._rate);
           (!v._endTimers[r[N]] && L._paused) || (v._clearTimer(r[N]), (v._endTimers[r[N]] = setTimeout(v._ended.bind(v, L), fa)));
           v._emit("rate", L._id);
         }
       return v;
     },
     seek: function () {
       var n,
         r,
         v = this,
         B = arguments;
       0 === B.length
         ? (r = v._sounds[0]._id)
         : 1 === B.length
         ? 0 <= v._getSoundIds().indexOf(B[0])
           ? (r = parseInt(B[0], 10))
           : v._sounds.length && ((r = v._sounds[0]._id), (n = parseFloat(B[0])))
         : 2 === B.length && ((n = parseFloat(B[0])), (r = parseInt(B[1], 10)));
       if (void 0 === r) return v;
       if ("loaded" !== v._state || v._playLock)
         return (
           v._queue.push({
             event: "seek",
             action: function () {
               v.seek.apply(v, B);
             },
           }),
           v
         );
       var L = v._soundById(r);
       if (L) {
         if (!("number" == typeof n && 0 <= n)) return v._webAudio ? ((n = v.playing(r) ? u.ctx.currentTime - L._playStart : 0), L._seek + ((L._rateSeek ? L._rateSeek - L._seek : 0) + n * Math.abs(L._rate))) : L._node.currentTime;
         var N = v.playing(r);
         N && v.pause(r, !0);
         L._seek = n;
         L._ended = !1;
         v._clearTimer(r);
         v._webAudio || !L._node || isNaN(L._node.duration) || (L._node.currentTime = n);
         var fa = function () {
           v._emit("seek", r);
           N && v.play(r, !0);
         };
         if (N && !v._webAudio) {
           var aa = function () {
             v._playLock ? setTimeout(aa, 0) : fa();
           };
           setTimeout(aa, 0);
         } else fa();
       }
       return v;
     },
     playing: function (n) {
       if ("number" == typeof n) return (n = this._soundById(n)), !!n && !n._paused;
       for (n = 0; n < this._sounds.length; n++) if (!this._sounds[n]._paused) return !0;
       return !1;
     },
     duration: function (n) {
       var r = this._duration;
       n = this._soundById(n);
       return n && (r = this._sprite[n._sprite][1] / 1e3), r;
     },
     state: function () {
       return this._state;
     },
     unload: function () {
       for (var n = this._sounds, r = 0; r < n.length; r++)
         (n[r]._paused || this.stop(n[r]._id), this._webAudio) ||
           (/MSIE |Trident\//.test(u._navigator && u._navigator.userAgent) || (n[r]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),
           n[r]._node.removeEventListener("error", n[r]._errorFn, !1),
           n[r]._node.removeEventListener(u._canPlayEvent, n[r]._loadFn, !1),
           u._releaseHtml5Audio(n[r]._node)),
           delete n[r]._node,
           this._clearTimer(n[r]._id);
       r = u._howls.indexOf(this);
       0 <= r && u._howls.splice(r, 1);
       n = !0;
       for (r = 0; r < u._howls.length; r++)
         if (u._howls[r]._src === this._src || 0 <= this._src.indexOf(u._howls[r]._src)) {
           n = !1;
           break;
         }
       return aa && n && delete aa[this._src], (u.noAudio = !1), (this._state = "unloaded"), (this._sounds = []), null;
     },
     on: function (n, r, v, B) {
       n = this["_on" + n];
       return "function" == typeof r && n.push(B ? { id: v, fn: r, once: B } : { id: v, fn: r }), this;
     },
     off: function (n, r, v) {
       var D = this["_on" + n];
       if (("number" == typeof r && ((v = r), (r = null)), r || v))
         for (n = 0; n < D.length; n++) {
           var B = v === D[n].id;
           if ((r === D[n].fn && B) || (!r && B)) {
             D.splice(n, 1);
             break;
           }
         }
       else if (n) this["_on" + n] = [];
       else for (r = Object.keys(this), n = 0; n < r.length; n++) 0 === r[n].indexOf("_on") && Array.isArray(this[r[n]]) && (this[r[n]] = []);
       return this;
     },
     once: function (n, r, v) {
       return this.on(n, r, v, 1), this;
     },
     _emit: function (n, r, v) {
       for (var D = this["_on" + n], B = D.length - 1; 0 <= B; B--)
         (D[B].id && D[B].id !== r && "load" !== n) ||
           (setTimeout(
             function (n) {
               n.call(this, r, v);
             }.bind(this, D[B].fn),
             0
           ),
           D[B].once && this.off(n, D[B].fn, D[B].id));
       return this._loadQueue(n), this;
     },
     _loadQueue: function (n) {
       if (0 < this._queue.length) {
         var r = this._queue[0];
         r.event === n && (this._queue.shift(), this._loadQueue());
         n || r.action();
       }
       return this;
     },
     _ended: function (n) {
       var r = n._sprite;
       if (!this._webAudio && n._node && !n._node.paused && !n._node.ended && n._node.currentTime < n._stop) return setTimeout(this._ended.bind(this, n), 100), this;
       r = !(!n._loop && !this._sprite[r][2]);
       if ((this._emit("end", n._id), !this._webAudio && r && this.stop(n._id, !0).play(n._id), this._webAudio && r)) {
         this._emit("play", n._id);
         n._seek = n._start || 0;
         n._rateSeek = 0;
         n._playStart = u.ctx.currentTime;
         var v = (1e3 * (n._stop - n._start)) / Math.abs(n._rate);
         this._endTimers[n._id] = setTimeout(this._ended.bind(this, n), v);
       }
       return (
         this._webAudio && !r && ((n._paused = !0), (n._ended = !0), (n._seek = n._start || 0), (n._rateSeek = 0), this._clearTimer(n._id), this._cleanBuffer(n._node), u._autoSuspend()), this._webAudio || r || this.stop(n._id, !0), this
       );
     },
     _clearTimer: function (n) {
       if (this._endTimers[n]) {
         if ("function" != typeof this._endTimers[n]) clearTimeout(this._endTimers[n]);
         else {
           var r = this._soundById(n);
           r && r._node && r._node.removeEventListener("ended", this._endTimers[n], !1);
         }
         delete this._endTimers[n];
       }
       return this;
     },
     _soundById: function (n) {
       for (var r = 0; r < this._sounds.length; r++) if (n === this._sounds[r]._id) return this._sounds[r];
       return null;
     },
     _inactiveSound: function () {
       this._drain();
       for (var n = 0; n < this._sounds.length; n++) if (this._sounds[n]._ended) return this._sounds[n].reset();
       return new N(this);
     },
     _drain: function () {
       var n = this._pool,
         r = 0,
         v;
       if (!(this._sounds.length < n)) {
         for (v = 0; v < this._sounds.length; v++) this._sounds[v]._ended && r++;
         for (v = this._sounds.length - 1; 0 <= v && !(r <= n); v--) this._sounds[v]._ended && (this._webAudio && this._sounds[v]._node && this._sounds[v]._node.disconnect(0), this._sounds.splice(v, 1), r--);
       }
     },
     _getSoundIds: function (n) {
       if (void 0 === n) {
         n = [];
         for (var r = 0; r < this._sounds.length; r++) n.push(this._sounds[r]._id);
         return n;
       }
       return [n];
     },
     _refreshBuffer: function (n) {
       return (
         (n._node.bufferSource = u.ctx.createBufferSource()),
         (n._node.bufferSource.buffer = aa[this._src]),
         n._panner ? n._node.bufferSource.connect(n._panner) : n._node.bufferSource.connect(n._node),
         (n._node.bufferSource.loop = n._loop),
         n._loop && ((n._node.bufferSource.loopStart = n._start || 0), (n._node.bufferSource.loopEnd = n._stop || 0)),
         n._node.bufferSource.playbackRate.setValueAtTime(n._rate, u.ctx.currentTime),
         this
       );
     },
     _cleanBuffer: function (n) {
       var r = u._navigator && 0 <= u._navigator.vendor.indexOf("Apple");
       if (u._scratchBuffer && n.bufferSource && ((n.bufferSource.onended = null), n.bufferSource.disconnect(0), r))
         try {
           n.bufferSource.buffer = u._scratchBuffer;
         } catch (ia) {}
       return (n.bufferSource = null), this;
     },
   };
   var N = function (n) {
     this._parent = n;
     this.init();
   };
   N.prototype = {
     init: function () {
       var n = this._parent;
       return (
         (this._muted = n._muted),
         (this._loop = n._loop),
         (this._volume = n._volume),
         (this._rate = n._rate),
         (this._seek = 0),
         (this._paused = !0),
         (this._ended = !0),
         (this._sprite = "__default"),
         (this._id = ++u._counter),
         n._sounds.push(this),
         this.create(),
         this
       );
     },
     create: function () {
       var n = this._parent,
         r = u._muted || this._muted || this._parent._muted ? 0 : this._volume;
       return (
         n._webAudio
           ? ((this._node = void 0 === u.ctx.createGain ? u.ctx.createGainNode() : u.ctx.createGain()), this._node.gain.setValueAtTime(r, u.ctx.currentTime), (this._node.paused = !0), this._node.connect(u.masterGain))
           : ((this._node = u._obtainHtml5Audio()),
             (this._errorFn = this._errorListener.bind(this)),
             this._node.addEventListener("error", this._errorFn, !1),
             (this._loadFn = this._loadListener.bind(this)),
             this._node.addEventListener(u._canPlayEvent, this._loadFn, !1),
             (this._node.src = n._src),
             (this._node.preload = "auto"),
             (this._node.volume = r * u.volume()),
             this._node.load()),
         this
       );
     },
     reset: function () {
       var n = this._parent;
       return (
         (this._muted = n._muted),
         (this._loop = n._loop),
         (this._volume = n._volume),
         (this._rate = n._rate),
         (this._seek = 0),
         (this._rateSeek = 0),
         (this._paused = !0),
         (this._ended = !0),
         (this._sprite = "__default"),
         (this._id = ++u._counter),
         this
       );
     },
     _errorListener: function () {
       this._parent._emit("loaderror", this._id, this._node.error ? this._node.error.code : 0);
       this._node.removeEventListener("error", this._errorFn, !1);
     },
     _loadListener: function () {
       var n = this._parent;
       n._duration = Math.ceil(10 * this._node.duration) / 10;
       0 === Object.keys(n._sprite).length && (n._sprite = { __default: [0, 1e3 * n._duration] });
       "loaded" !== n._state && ((n._state = "loaded"), n._emit("load"), n._loadQueue());
       this._node.removeEventListener(u._canPlayEvent, this._loadFn, !1);
     },
   };
   var aa = {},
     Y = function (n) {
       var r = n._src;
       if (aa[r]) return (n._duration = aa[r].duration), void B(n);
       if (/^data:[^;]+;base64,/.test(r)) {
         for (var u = atob(r.split(",")[1]), L = new Uint8Array(u.length), N = 0; N < u.length; ++N) L[N] = u.charCodeAt(N);
         la(L.buffer, n);
       } else {
         var Y = new XMLHttpRequest();
         Y.open("GET", r, !0);
         Y.withCredentials = n._xhrWithCredentials;
         Y.responseType = "arraybuffer";
         Y.onload = function () {
           var r = (Y.status + "")[0];
           if ("0" !== r && "2" !== r && "3" !== r) return void n._emit("loaderror", null, "Failed loading audio file with status: " + Y.status + ".");
           la(Y.response, n);
         };
         Y.onerror = function () {
           n._webAudio && ((n._html5 = !0), (n._webAudio = !1), (n._sounds = []), delete aa[r], n.load());
         };
         v(Y);
       }
     },
     v = function (n) {
       try {
         n.send();
       } catch (D) {
         n.onerror();
       }
     },
     la = function (n, r) {
       var v = function () {
           r._emit("loaderror", null, "Decoding audio data failed.");
         },
         D = function (n) {
           n && 0 < r._sounds.length ? ((aa[r._src] = n), B(r, n)) : v();
         };
       "undefined" != typeof Promise && 1 === u.ctx.decodeAudioData.length ? u.ctx.decodeAudioData(n).then(D).catch(v) : u.ctx.decodeAudioData(n, D, v);
     },
     B = function (n, r) {
       r && !n._duration && (n._duration = r.duration);
       0 === Object.keys(n._sprite).length && (n._sprite = { __default: [0, 1e3 * n._duration] });
       "loaded" !== n._state && ((n._state = "loaded"), n._emit("load"), n._loadQueue());
     },
     r = function () {
       if (u.usingWebAudio) {
         try {
           "undefined" != typeof AudioContext ? (u.ctx = new AudioContext()) : "undefined" != typeof webkitAudioContext ? (u.ctx = new webkitAudioContext()) : (u.usingWebAudio = !1);
         } catch (ia) {
           u.usingWebAudio = !1;
         }
         u.ctx || (u.usingWebAudio = !1);
         var n = /iP(hone|od|ad)/.test(u._navigator && u._navigator.platform),
           r = u._navigator && u._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
         r = r ? parseInt(r[1], 10) : null;
         n && r && 9 > r && ((n = /safari/.test(u._navigator && u._navigator.userAgent.toLowerCase())), ((u._navigator && u._navigator.standalone && !n) || (u._navigator && !u._navigator.standalone && !n)) && (u.usingWebAudio = !1));
         u.usingWebAudio && ((u.masterGain = void 0 === u.ctx.createGain ? u.ctx.createGainNode() : u.ctx.createGain()), u.masterGain.gain.setValueAtTime(u._muted ? 0 : 1, u.ctx.currentTime), u.masterGain.connect(u.ctx.destination));
         u._setup();
       }
     };
   "function" == typeof define &&
     define.amd &&
     define([], function () {
       return { Howler: u, Howl: L };
     });
   "undefined" != typeof exports && ((exports.Howler = u), (exports.Howl = L));
   "undefined" != typeof window
     ? ((window.HowlerGlobal = ha), (window.Howler = u), (window.Howl = L), (window.Sound = N))
     : "undefined" != typeof global && ((global.HowlerGlobal = ha), (global.Howler = u), (global.Howl = L), (global.Sound = N));
 })();
 !(function () {
   HowlerGlobal.prototype._pos = [0, 0, 0];
   HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
   HowlerGlobal.prototype.stereo = function (u) {
     if (!this.ctx || !this.ctx.listener) return this;
     for (var L = this._howls.length - 1; 0 <= L; L--) this._howls[L].stereo(u);
     return this;
   };
   HowlerGlobal.prototype.pos = function (u, L, N) {
     return this.ctx && this.ctx.listener
       ? ((L = "number" != typeof L ? this._pos[1] : L),
         (N = "number" != typeof N ? this._pos[2] : N),
         "number" != typeof u
           ? this._pos
           : ((this._pos = [u, L, N]),
             void 0 !== this.ctx.listener.positionX
               ? (this.ctx.listener.positionX.setTargetAtTime(this._pos[0], Howler.ctx.currentTime, 0.1),
                 this.ctx.listener.positionY.setTargetAtTime(this._pos[1], Howler.ctx.currentTime, 0.1),
                 this.ctx.listener.positionZ.setTargetAtTime(this._pos[2], Howler.ctx.currentTime, 0.1))
               : this.ctx.listener.setPosition(this._pos[0], this._pos[1], this._pos[2]),
             this))
       : this;
   };
   HowlerGlobal.prototype.orientation = function (u, L, N, aa, Y, v) {
     if (!this.ctx || !this.ctx.listener) return this;
     var la = this._orientation;
     return (
       (L = "number" != typeof L ? la[1] : L),
       (N = "number" != typeof N ? la[2] : N),
       (aa = "number" != typeof aa ? la[3] : aa),
       (Y = "number" != typeof Y ? la[4] : Y),
       (v = "number" != typeof v ? la[5] : v),
       "number" != typeof u
         ? la
         : ((this._orientation = [u, L, N, aa, Y, v]),
           void 0 !== this.ctx.listener.forwardX
             ? (this.ctx.listener.forwardX.setTargetAtTime(u, Howler.ctx.currentTime, 0.1),
               this.ctx.listener.forwardY.setTargetAtTime(L, Howler.ctx.currentTime, 0.1),
               this.ctx.listener.forwardZ.setTargetAtTime(N, Howler.ctx.currentTime, 0.1),
               this.ctx.listener.upX.setTargetAtTime(u, Howler.ctx.currentTime, 0.1),
               this.ctx.listener.upY.setTargetAtTime(L, Howler.ctx.currentTime, 0.1),
               this.ctx.listener.upZ.setTargetAtTime(N, Howler.ctx.currentTime, 0.1))
             : this.ctx.listener.setOrientation(u, L, N, aa, Y, v),
           this)
     );
   };
   Howl.prototype.init = (function (u) {
     return function (L) {
       return (
         (this._orientation = L.orientation || [1, 0, 0]),
         (this._stereo = L.stereo || null),
         (this._pos = L.pos || null),
         (this._pannerAttr = {
           coneInnerAngle: void 0 !== L.coneInnerAngle ? L.coneInnerAngle : 360,
           coneOuterAngle: void 0 !== L.coneOuterAngle ? L.coneOuterAngle : 360,
           coneOuterGain: void 0 !== L.coneOuterGain ? L.coneOuterGain : 0,
           distanceModel: void 0 !== L.distanceModel ? L.distanceModel : "inverse",
           maxDistance: void 0 !== L.maxDistance ? L.maxDistance : 1e4,
           panningModel: void 0 !== L.panningModel ? L.panningModel : "HRTF",
           refDistance: void 0 !== L.refDistance ? L.refDistance : 1,
           rolloffFactor: void 0 !== L.rolloffFactor ? L.rolloffFactor : 1,
         }),
         (this._onstereo = L.onstereo ? [{ fn: L.onstereo }] : []),
         (this._onpos = L.onpos ? [{ fn: L.onpos }] : []),
         (this._onorientation = L.onorientation ? [{ fn: L.onorientation }] : []),
         u.call(this, L)
       );
     };
   })(Howl.prototype.init);
   Howl.prototype.stereo = function (u, L) {
     var N = this;
     if (!N._webAudio) return N;
     if ("loaded" !== N._state)
       return (
         N._queue.push({
           event: "stereo",
           action: function () {
             N.stereo(u, L);
           },
         }),
         N
       );
     var aa = void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
     if (void 0 === L) {
       if ("number" != typeof u) return N._stereo;
       N._stereo = u;
       N._pos = [u, 0, 0];
     }
     for (var Y = N._getSoundIds(L), v = 0; v < Y.length; v++) {
       var la = N._soundById(Y[v]);
       if (la) {
         if ("number" != typeof u) return la._stereo;
         la._stereo = u;
         la._pos = [u, 0, 0];
         la._node &&
           ((la._pannerAttr.panningModel = "equalpower"),
           (la._panner && la._panner.pan) || ha(la, aa),
           "spatial" === aa
             ? void 0 !== la._panner.positionX
               ? (la._panner.positionX.setValueAtTime(u, Howler.ctx.currentTime), la._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime), la._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime))
               : la._panner.setPosition(u, 0, 0)
             : la._panner.pan.setValueAtTime(u, Howler.ctx.currentTime));
         N._emit("stereo", la._id);
       }
     }
     return N;
   };
   Howl.prototype.pos = function (u, L, N, aa) {
     var Y = this;
     if (!Y._webAudio) return Y;
     if ("loaded" !== Y._state)
       return (
         Y._queue.push({
           event: "pos",
           action: function () {
             Y.pos(u, L, N, aa);
           },
         }),
         Y
       );
     if (((L = "number" != typeof L ? 0 : L), (N = "number" != typeof N ? -0.5 : N), void 0 === aa)) {
       if ("number" != typeof u) return Y._pos;
       Y._pos = [u, L, N];
     }
     for (var v = Y._getSoundIds(aa), la = 0; la < v.length; la++) {
       var B = Y._soundById(v[la]);
       if (B) {
         if ("number" != typeof u) return B._pos;
         B._pos = [u, L, N];
         B._node &&
           ((B._panner && !B._panner.pan) || ha(B, "spatial"),
           void 0 !== B._panner.positionX
             ? (B._panner.positionX.setValueAtTime(u, Howler.ctx.currentTime), B._panner.positionY.setValueAtTime(L, Howler.ctx.currentTime), B._panner.positionZ.setValueAtTime(N, Howler.ctx.currentTime))
             : B._panner.setPosition(u, L, N));
         Y._emit("pos", B._id);
       }
     }
     return Y;
   };
   Howl.prototype.orientation = function (u, L, N, aa) {
     var Y = this;
     if (!Y._webAudio) return Y;
     if ("loaded" !== Y._state)
       return (
         Y._queue.push({
           event: "orientation",
           action: function () {
             Y.orientation(u, L, N, aa);
           },
         }),
         Y
       );
     if (((L = "number" != typeof L ? Y._orientation[1] : L), (N = "number" != typeof N ? Y._orientation[2] : N), void 0 === aa)) {
       if ("number" != typeof u) return Y._orientation;
       Y._orientation = [u, L, N];
     }
     for (var v = Y._getSoundIds(aa), la = 0; la < v.length; la++) {
       var B = Y._soundById(v[la]);
       if (B) {
         if ("number" != typeof u) return B._orientation;
         B._orientation = [u, L, N];
         B._node &&
           (B._panner || (B._pos || (B._pos = Y._pos || [0, 0, -0.5]), ha(B, "spatial")),
           void 0 !== B._panner.orientationX
             ? (B._panner.orientationX.setValueAtTime(u, Howler.ctx.currentTime), B._panner.orientationY.setValueAtTime(L, Howler.ctx.currentTime), B._panner.orientationZ.setValueAtTime(N, Howler.ctx.currentTime))
             : B._panner.setOrientation(u, L, N));
         Y._emit("orientation", B._id);
       }
     }
     return Y;
   };
   Howl.prototype.pannerAttr = function () {
     var u,
       L,
       N = arguments;
     if (!this._webAudio) return this;
     if (0 === N.length) return this._pannerAttr;
     if (1 === N.length) {
       if ("object" != typeof N[0]) return (L = this._soundById(parseInt(N[0], 10))), L ? L._pannerAttr : this._pannerAttr;
       var aa = N[0];
       void 0 === u &&
         (aa.pannerAttr ||
           (aa.pannerAttr = {
             coneInnerAngle: aa.coneInnerAngle,
             coneOuterAngle: aa.coneOuterAngle,
             coneOuterGain: aa.coneOuterGain,
             distanceModel: aa.distanceModel,
             maxDistance: aa.maxDistance,
             refDistance: aa.refDistance,
             rolloffFactor: aa.rolloffFactor,
             panningModel: aa.panningModel,
           }),
         (this._pannerAttr = {
           coneInnerAngle: void 0 !== aa.pannerAttr.coneInnerAngle ? aa.pannerAttr.coneInnerAngle : this._coneInnerAngle,
           coneOuterAngle: void 0 !== aa.pannerAttr.coneOuterAngle ? aa.pannerAttr.coneOuterAngle : this._coneOuterAngle,
           coneOuterGain: void 0 !== aa.pannerAttr.coneOuterGain ? aa.pannerAttr.coneOuterGain : this._coneOuterGain,
           distanceModel: void 0 !== aa.pannerAttr.distanceModel ? aa.pannerAttr.distanceModel : this._distanceModel,
           maxDistance: void 0 !== aa.pannerAttr.maxDistance ? aa.pannerAttr.maxDistance : this._maxDistance,
           refDistance: void 0 !== aa.pannerAttr.refDistance ? aa.pannerAttr.refDistance : this._refDistance,
           rolloffFactor: void 0 !== aa.pannerAttr.rolloffFactor ? aa.pannerAttr.rolloffFactor : this._rolloffFactor,
           panningModel: void 0 !== aa.pannerAttr.panningModel ? aa.pannerAttr.panningModel : this._panningModel,
         }));
     } else 2 === N.length && ((aa = N[0]), (u = parseInt(N[1], 10)));
     u = this._getSoundIds(u);
     for (N = 0; N < u.length; N++)
       if ((L = this._soundById(u[N]))) {
         var Y = L._pannerAttr;
         Y = {
           coneInnerAngle: void 0 !== aa.coneInnerAngle ? aa.coneInnerAngle : Y.coneInnerAngle,
           coneOuterAngle: void 0 !== aa.coneOuterAngle ? aa.coneOuterAngle : Y.coneOuterAngle,
           coneOuterGain: void 0 !== aa.coneOuterGain ? aa.coneOuterGain : Y.coneOuterGain,
           distanceModel: void 0 !== aa.distanceModel ? aa.distanceModel : Y.distanceModel,
           maxDistance: void 0 !== aa.maxDistance ? aa.maxDistance : Y.maxDistance,
           refDistance: void 0 !== aa.refDistance ? aa.refDistance : Y.refDistance,
           rolloffFactor: void 0 !== aa.rolloffFactor ? aa.rolloffFactor : Y.rolloffFactor,
           panningModel: void 0 !== aa.panningModel ? aa.panningModel : Y.panningModel,
         };
         var v = L._panner;
         v
           ? ((v.coneInnerAngle = Y.coneInnerAngle),
             (v.coneOuterAngle = Y.coneOuterAngle),
             (v.coneOuterGain = Y.coneOuterGain),
             (v.distanceModel = Y.distanceModel),
             (v.maxDistance = Y.maxDistance),
             (v.refDistance = Y.refDistance),
             (v.rolloffFactor = Y.rolloffFactor),
             (v.panningModel = Y.panningModel))
           : (L._pos || (L._pos = this._pos || [0, 0, -0.5]), ha(L, "spatial"));
       }
     return this;
   };
   Sound.prototype.init = (function (u) {
     return function () {
       var L = this._parent;
       this._orientation = L._orientation;
       this._stereo = L._stereo;
       this._pos = L._pos;
       this._pannerAttr = L._pannerAttr;
       u.call(this);
       this._stereo ? L.stereo(this._stereo) : this._pos && L.pos(this._pos[0], this._pos[1], this._pos[2], this._id);
     };
   })(Sound.prototype.init);
   Sound.prototype.reset = (function (u) {
     return function () {
       var L = this._parent;
       return (
         (this._orientation = L._orientation),
         (this._stereo = L._stereo),
         (this._pos = L._pos),
         (this._pannerAttr = L._pannerAttr),
         this._stereo ? L.stereo(this._stereo) : this._pos ? L.pos(this._pos[0], this._pos[1], this._pos[2], this._id) : this._panner && (this._panner.disconnect(0), (this._panner = void 0), L._refreshBuffer(this)),
         u.call(this)
       );
     };
   })(Sound.prototype.reset);
   var ha = function (u, L) {
     "spatial" === (L || "spatial")
       ? ((u._panner = Howler.ctx.createPanner()),
         (u._panner.coneInnerAngle = u._pannerAttr.coneInnerAngle),
         (u._panner.coneOuterAngle = u._pannerAttr.coneOuterAngle),
         (u._panner.coneOuterGain = u._pannerAttr.coneOuterGain),
         (u._panner.distanceModel = u._pannerAttr.distanceModel),
         (u._panner.maxDistance = u._pannerAttr.maxDistance),
         (u._panner.refDistance = u._pannerAttr.refDistance),
         (u._panner.rolloffFactor = u._pannerAttr.rolloffFactor),
         (u._panner.panningModel = u._pannerAttr.panningModel),
         void 0 !== u._panner.positionX
           ? (u._panner.positionX.setValueAtTime(u._pos[0], Howler.ctx.currentTime), u._panner.positionY.setValueAtTime(u._pos[1], Howler.ctx.currentTime), u._panner.positionZ.setValueAtTime(u._pos[2], Howler.ctx.currentTime))
           : u._panner.setPosition(u._pos[0], u._pos[1], u._pos[2]),
         void 0 !== u._panner.orientationX
           ? (u._panner.orientationX.setValueAtTime(u._orientation[0], Howler.ctx.currentTime),
             u._panner.orientationY.setValueAtTime(u._orientation[1], Howler.ctx.currentTime),
             u._panner.orientationZ.setValueAtTime(u._orientation[2], Howler.ctx.currentTime))
           : u._panner.setOrientation(u._orientation[0], u._orientation[1], u._orientation[2]))
       : ((u._panner = Howler.ctx.createStereoPanner()), u._panner.pan.setValueAtTime(u._stereo, Howler.ctx.currentTime));
     u._panner.connect(u._node);
     u._paused || u._parent.pause(u._id, !0).play(u._id, !0);
   };
 })();
 !(function (ha) {
   "object" == typeof exports && "undefined" != typeof module
     ? (module.exports = ha())
     : "function" == typeof define && define.amd
     ? define([], ha)
     : (("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).pako = ha());
 })(function () {
   return (function aa(u, L, N) {
     function Y(B, r) {
       if (!L[B]) {
         if (!u[B]) {
           var n = "function" == typeof require && require;
           if (!r && n) return n(B, !0);
           if (v) return v(B, !0);
           r = Error("Cannot find module '" + B + "'");
           throw ((r.code = "MODULE_NOT_FOUND"), r);
         }
         r = L[B] = { exports: {} };
         u[B][0].call(
           r.exports,
           function (n) {
             var r = u[B][1][n];
             return Y(r ? r : n);
           },
           r,
           r.exports,
           aa,
           u,
           L,
           N
         );
       }
       return L[B].exports;
     }
     for (var v = "function" == typeof require && require, la = 0; la < N.length; la++) Y(N[la]);
     return Y;
   })(
     {
       1: [
         function (u, L, N) {
           function aa(u) {
             if (!(this instanceof aa)) return new aa(u);
             u = this.options = la.assign({ level: Oa, method: Da, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: Ea, to: "" }, u || {});
             u.raw && 0 < u.windowBits ? (u.windowBits = -u.windowBits) : u.gzip && 0 < u.windowBits && 16 > u.windowBits && (u.windowBits += 16);
             this.err = 0;
             this.msg = "";
             this.ended = !1;
             this.chunks = [];
             this.strm = new n();
             this.strm.avail_out = 0;
             var L = v.deflateInit2(this.strm, u.level, u.method, u.windowBits, u.memLevel, u.strategy);
             if (L !== ia) throw Error(r[L]);
             if ((u.header && v.deflateSetHeader(this.strm, u.header), u.dictionary)) {
               var q;
               if (((q = "string" == typeof u.dictionary ? B.string2buf(u.dictionary) : "[object ArrayBuffer]" === D.call(u.dictionary) ? new Uint8Array(u.dictionary) : u.dictionary), (L = v.deflateSetDictionary(this.strm, q)), L !== ia))
                 throw Error(r[L]);
               this._dict_set = !0;
             }
           }
           function Y(n, r) {
             r = new aa(r);
             if ((r.push(n, !0), r.err)) throw r.msg;
             return r.result;
           }
           var v = u("./zlib/deflate"),
             la = u("./utils/common"),
             B = u("./utils/strings"),
             r = u("./zlib/messages"),
             n = u("./zlib/zstream"),
             D = Object.prototype.toString,
             ia = 0,
             Oa = -1,
             Ea = 0,
             Da = 8;
           aa.prototype.push = function (n, r) {
             var q,
               u = this.strm,
               L = this.options.chunkSize;
             if (this.ended) return !1;
             r = r === ~~r ? r : !0 === r ? 4 : 0;
             "string" == typeof n ? (u.input = B.string2buf(n)) : "[object ArrayBuffer]" === D.call(n) ? (u.input = new Uint8Array(n)) : (u.input = n);
             u.next_in = 0;
             u.avail_in = u.input.length;
             do {
               if ((0 === u.avail_out && ((u.output = new la.Buf8(L)), (u.next_out = 0), (u.avail_out = L)), (q = v.deflate(u, r)), 1 !== q && q !== ia)) return this.onEnd(q), (this.ended = !0), !1;
               (0 !== u.avail_out && (0 !== u.avail_in || (4 !== r && 2 !== r))) || ("string" === this.options.to ? this.onData(B.buf2binstring(la.shrinkBuf(u.output, u.next_out))) : this.onData(la.shrinkBuf(u.output, u.next_out)));
             } while ((0 < u.avail_in || 0 === u.avail_out) && 1 !== q);
             return 4 === r ? ((q = v.deflateEnd(this.strm)), this.onEnd(q), (this.ended = !0), q === ia) : 2 !== r || (this.onEnd(ia), (u.avail_out = 0), !0);
           };
           aa.prototype.onData = function (n) {
             this.chunks.push(n);
           };
           aa.prototype.onEnd = function (n) {
             n === ia && ("string" === this.options.to ? (this.result = this.chunks.join("")) : (this.result = la.flattenChunks(this.chunks)));
             this.chunks = [];
             this.err = n;
             this.msg = this.strm.msg;
           };
           N.Deflate = aa;
           N.deflate = Y;
           N.deflateRaw = function (n, r) {
             return (r = r || {}), (r.raw = !0), Y(n, r);
           };
           N.gzip = function (n, r) {
             return (r = r || {}), (r.gzip = !0), Y(n, r);
           };
         },
         { "./utils/common": 3, "./utils/strings": 4, "./zlib/deflate": 8, "./zlib/messages": 13, "./zlib/zstream": 15 },
       ],
       2: [
         function (u, L, N) {
           function aa(B) {
             if (!(this instanceof aa)) return new aa(B);
             var u = (this.options = la.assign({ chunkSize: 16384, windowBits: 0, to: "" }, B || {}));
             u.raw && 0 <= u.windowBits && 16 > u.windowBits && ((u.windowBits = -u.windowBits), 0 === u.windowBits && (u.windowBits = -15));
             !(0 <= u.windowBits && 16 > u.windowBits) || (B && B.windowBits) || (u.windowBits += 32);
             15 < u.windowBits && 48 > u.windowBits && 0 === (15 & u.windowBits) && (u.windowBits |= 15);
             this.err = 0;
             this.msg = "";
             this.ended = !1;
             this.chunks = [];
             this.strm = new D();
             this.strm.avail_out = 0;
             B = v.inflateInit2(this.strm, u.windowBits);
             if (B !== r.Z_OK) throw Error(n[B]);
             this.header = new ia();
             v.inflateGetHeader(this.strm, this.header);
           }
           function Y(n, r) {
             r = new aa(r);
             if ((r.push(n, !0), r.err)) throw r.msg;
             return r.result;
           }
           var v = u("./zlib/inflate"),
             la = u("./utils/common"),
             B = u("./utils/strings"),
             r = u("./zlib/constants"),
             n = u("./zlib/messages"),
             D = u("./zlib/zstream"),
             ia = u("./zlib/gzheader"),
             Oa = Object.prototype.toString;
           aa.prototype.push = function (n, D) {
             var u,
               L,
               q,
               N,
               aa,
               V = this.strm,
               Y = this.options.chunkSize,
               ia = this.options.dictionary,
               Ca = !1;
             if (this.ended) return !1;
             D = D === ~~D ? D : !0 === D ? r.Z_FINISH : r.Z_NO_FLUSH;
             "string" == typeof n ? (V.input = B.binstring2buf(n)) : "[object ArrayBuffer]" === Oa.call(n) ? (V.input = new Uint8Array(n)) : (V.input = n);
             V.next_in = 0;
             V.avail_in = V.input.length;
             do {
               if (
                 (0 === V.avail_out && ((V.output = new la.Buf8(Y)), (V.next_out = 0), (V.avail_out = Y)),
                 (u = v.inflate(V, r.Z_NO_FLUSH)),
                 u === r.Z_NEED_DICT && ia && ((aa = "string" == typeof ia ? B.string2buf(ia) : "[object ArrayBuffer]" === Oa.call(ia) ? new Uint8Array(ia) : ia), (u = v.inflateSetDictionary(this.strm, aa))),
                 u === r.Z_BUF_ERROR && !0 === Ca && ((u = r.Z_OK), (Ca = !1)),
                 u !== r.Z_STREAM_END && u !== r.Z_OK)
               )
                 return this.onEnd(u), (this.ended = !0), !1;
               V.next_out &&
                 ((0 !== V.avail_out && u !== r.Z_STREAM_END && (0 !== V.avail_in || (D !== r.Z_FINISH && D !== r.Z_SYNC_FLUSH))) ||
                   ("string" === this.options.to
                     ? ((L = B.utf8border(V.output, V.next_out)), (q = V.next_out - L), (N = B.buf2string(V.output, L)), (V.next_out = q), (V.avail_out = Y - q), q && la.arraySet(V.output, V.output, L, q, 0), this.onData(N))
                     : this.onData(la.shrinkBuf(V.output, V.next_out))));
               0 === V.avail_in && 0 === V.avail_out && (Ca = !0);
             } while ((0 < V.avail_in || 0 === V.avail_out) && u !== r.Z_STREAM_END);
             return u === r.Z_STREAM_END && (D = r.Z_FINISH), D === r.Z_FINISH ? ((u = v.inflateEnd(this.strm)), this.onEnd(u), (this.ended = !0), u === r.Z_OK) : D !== r.Z_SYNC_FLUSH || (this.onEnd(r.Z_OK), (V.avail_out = 0), !0);
           };
           aa.prototype.onData = function (n) {
             this.chunks.push(n);
           };
           aa.prototype.onEnd = function (n) {
             n === r.Z_OK && ("string" === this.options.to ? (this.result = this.chunks.join("")) : (this.result = la.flattenChunks(this.chunks)));
             this.chunks = [];
             this.err = n;
             this.msg = this.strm.msg;
           };
           N.Inflate = aa;
           N.inflate = Y;
           N.inflateRaw = function (n, r) {
             return (r = r || {}), (r.raw = !0), Y(n, r);
           };
           N.ungzip = Y;
         },
         { "./utils/common": 3, "./utils/strings": 4, "./zlib/constants": 6, "./zlib/gzheader": 9, "./zlib/inflate": 11, "./zlib/messages": 13, "./zlib/zstream": 15 },
       ],
       3: [
         function (u, L, N) {
           u = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
           N.assign = function (v) {
             for (var u = Array.prototype.slice.call(arguments, 1); u.length; ) {
               var B = u.shift();
               if (B) {
                 if ("object" != typeof B) throw new TypeError(B + "must be non-object");
                 for (var r in B) B.hasOwnProperty(r) && (v[r] = B[r]);
               }
             }
             return v;
           };
           N.shrinkBuf = function (v, u) {
             return v.length === u ? v : v.subarray ? v.subarray(0, u) : ((v.length = u), v);
           };
           var aa = {
               arraySet: function (v, u, B, r, n) {
                 if (u.subarray && v.subarray) return void v.set(u.subarray(B, B + r), n);
                 for (var D = 0; D < r; D++) v[n + D] = u[B + D];
               },
               flattenChunks: function (v) {
                 var u, B;
                 var r = (B = 0);
                 for (u = v.length; r < u; r++) B += v[r].length;
                 var n = new Uint8Array(B);
                 r = B = 0;
                 for (u = v.length; r < u; r++) {
                   var D = v[r];
                   n.set(D, B);
                   B += D.length;
                 }
                 return n;
               },
             },
             Y = {
               arraySet: function (v, u, B, r, n) {
                 for (var D = 0; D < r; D++) v[n + D] = u[B + D];
               },
               flattenChunks: function (v) {
                 return [].concat.apply([], v);
               },
             };
           N.setTyped = function (v) {
             v ? ((N.Buf8 = Uint8Array), (N.Buf16 = Uint16Array), (N.Buf32 = Int32Array), N.assign(N, aa)) : ((N.Buf8 = Array), (N.Buf16 = Array), (N.Buf32 = Array), N.assign(N, Y));
           };
           N.setTyped(u);
         },
         {},
       ],
       4: [
         function (u, L, N) {
           function aa(r, n) {
             if (65537 > n && ((r.subarray && la) || (!r.subarray && v))) return String.fromCharCode.apply(null, Y.shrinkBuf(r, n));
             for (var u = "", B = 0; B < n; B++) u += String.fromCharCode(r[B]);
             return u;
           }
           var Y = u("./common"),
             v = !0,
             la = !0;
           try {
             String.fromCharCode.apply(null, [0]);
           } catch (r) {
             v = !1;
           }
           try {
             String.fromCharCode.apply(null, new Uint8Array(1));
           } catch (r) {
             la = !1;
           }
           var B = new Y.Buf8(256);
           for (u = 0; 256 > u; u++) B[u] = 252 <= u ? 6 : 248 <= u ? 5 : 240 <= u ? 4 : 224 <= u ? 3 : 192 <= u ? 2 : 1;
           B[254] = B[254] = 1;
           N.string2buf = function (r) {
             var n,
               v,
               u,
               B = r.length,
               L = 0;
             for (v = 0; v < B; v++) {
               var N = r.charCodeAt(v);
               55296 === (64512 & N) && v + 1 < B && ((n = r.charCodeAt(v + 1)), 56320 === (64512 & n) && ((N = 65536 + ((N - 55296) << 10) + (n - 56320)), v++));
               L += 128 > N ? 1 : 2048 > N ? 2 : 65536 > N ? 3 : 4;
             }
             var aa = new Y.Buf8(L);
             for (v = u = 0; u < L; v++)
               (N = r.charCodeAt(v)),
                 55296 === (64512 & N) && v + 1 < B && ((n = r.charCodeAt(v + 1)), 56320 === (64512 & n) && ((N = 65536 + ((N - 55296) << 10) + (n - 56320)), v++)),
                 128 > N
                   ? (aa[u++] = N)
                   : 2048 > N
                   ? ((aa[u++] = 192 | (N >>> 6)), (aa[u++] = 128 | (63 & N)))
                   : 65536 > N
                   ? ((aa[u++] = 224 | (N >>> 12)), (aa[u++] = 128 | ((N >>> 6) & 63)), (aa[u++] = 128 | (63 & N)))
                   : ((aa[u++] = 240 | (N >>> 18)), (aa[u++] = 128 | ((N >>> 12) & 63)), (aa[u++] = 128 | ((N >>> 6) & 63)), (aa[u++] = 128 | (63 & N)));
             return aa;
           };
           N.buf2binstring = function (r) {
             return aa(r, r.length);
           };
           N.binstring2buf = function (r) {
             for (var n = new Y.Buf8(r.length), v = 0, u = n.length; v < u; v++) n[v] = r.charCodeAt(v);
             return n;
           };
           N.buf2string = function (r, n) {
             var v,
               u,
               L,
               N = n || r.length,
               Y = Array(2 * N);
             for (n = v = 0; n < N; )
               if (((u = r[n++]), 128 > u)) Y[v++] = u;
               else if (((L = B[u]), 4 < L)) (Y[v++] = 65533), (n += L - 1);
               else {
                 for (u &= 2 === L ? 31 : 3 === L ? 15 : 7; 1 < L && n < N; ) (u = (u << 6) | (63 & r[n++])), L--;
                 1 < L ? (Y[v++] = 65533) : 65536 > u ? (Y[v++] = u) : ((u -= 65536), (Y[v++] = 55296 | ((u >> 10) & 1023)), (Y[v++] = 56320 | (1023 & u)));
               }
             return aa(Y, v);
           };
           N.utf8border = function (r, n) {
             var v;
             n = n || r.length;
             n > r.length && (n = r.length);
             for (v = n - 1; 0 <= v && 128 === (192 & r[v]); ) v--;
             return 0 > v ? n : 0 === v ? n : v + B[r[v]] > n ? v : n;
           };
         },
         { "./common": 3 },
       ],
       5: [
         function (u, L, N) {
           L.exports = function (u, L, v, N) {
             var B = (65535 & u) | 0;
             u = ((u >>> 16) & 65535) | 0;
             for (var r; 0 !== v; ) {
               r = 2e3 < v ? 2e3 : v;
               v -= r;
               do (B = (B + L[N++]) | 0), (u = (u + B) | 0);
               while (--r);
               B %= 65521;
               u %= 65521;
             }
             return B | (u << 16) | 0;
           };
         },
         {},
       ],
       6: [
         function (u, L, N) {
           L.exports = {
             Z_NO_FLUSH: 0,
             Z_PARTIAL_FLUSH: 1,
             Z_SYNC_FLUSH: 2,
             Z_FULL_FLUSH: 3,
             Z_FINISH: 4,
             Z_BLOCK: 5,
             Z_TREES: 6,
             Z_OK: 0,
             Z_STREAM_END: 1,
             Z_NEED_DICT: 2,
             Z_ERRNO: -1,
             Z_STREAM_ERROR: -2,
             Z_DATA_ERROR: -3,
             Z_BUF_ERROR: -5,
             Z_NO_COMPRESSION: 0,
             Z_BEST_SPEED: 1,
             Z_BEST_COMPRESSION: 9,
             Z_DEFAULT_COMPRESSION: -1,
             Z_FILTERED: 1,
             Z_HUFFMAN_ONLY: 2,
             Z_RLE: 3,
             Z_FIXED: 4,
             Z_DEFAULT_STRATEGY: 0,
             Z_BINARY: 0,
             Z_TEXT: 1,
             Z_UNKNOWN: 2,
             Z_DEFLATED: 8,
           };
         },
         {},
       ],
       7: [
         function (u, L, N) {
           var aa = (function () {
             for (var u, v = [], L = 0; 256 > L; L++) {
               u = L;
               for (var B = 0; 8 > B; B++) u = 1 & u ? 3988292384 ^ (u >>> 1) : u >>> 1;
               v[L] = u;
             }
             return v;
           })();
           L.exports = function (u, v, L, B) {
             L = B + L;
             for (u ^= -1; B < L; B++) u = (u >>> 8) ^ aa[255 & (u ^ v[B])];
             return u ^ -1;
           };
         },
         {},
       ],
       8: [
         function (u, L, N) {
           function aa(h, g) {
             return (h.msg = Ra[g]), g;
           }
           function Y(h) {
             for (var g = h.length; 0 <= --g; ) h[g] = 0;
           }
           function v(h) {
             var g = h.state,
               m = g.pending;
             m > h.avail_out && (m = h.avail_out);
             0 !== m && (Pa.arraySet(h.output, g.pending_buf, g.pending_out, m, h.next_out), (h.next_out += m), (g.pending_out += m), (h.total_out += m), (h.avail_out -= m), (g.pending -= m), 0 === g.pending && (g.pending_out = 0));
           }
           function la(h, g) {
             hb._tr_flush_block(h, 0 <= h.block_start ? h.block_start : -1, h.strstart - h.block_start, g);
             h.block_start = h.strstart;
             v(h.strm);
           }
           function B(h, g) {
             h.pending_buf[h.pending++] = g;
           }
           function r(h, g) {
             h.pending_buf[h.pending++] = (g >>> 8) & 255;
             h.pending_buf[h.pending++] = 255 & g;
           }
           function n(h, g) {
             var m,
               n,
               p = h.max_chain_length,
               r = h.strstart,
               q = h.prev_length,
               v = h.nice_match,
               x = h.strstart > h.w_size - ja ? h.strstart - (h.w_size - ja) : 0,
               u = h.window,
               B = h.w_mask,
               Ga = h.prev,
               y = h.strstart + da,
               D = u[r + q - 1],
               I = u[r + q];
             h.prev_length >= h.good_match && (p >>= 2);
             v > h.lookahead && (v = h.lookahead);
             do
               if (((m = g), u[m + q] === I && u[m + q - 1] === D && u[m] === u[r] && u[++m] === u[r + 1])) {
                 r += 2;
                 for (m++; u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && u[++r] === u[++m] && r < y; );
                 if (((n = da - (y - r)), (r = y - da), n > q)) {
                   if (((h.match_start = g), (q = n), n >= v)) break;
                   D = u[r + q - 1];
                   I = u[r + q];
                 }
               }
             while ((g = Ga[g & B]) > x && 0 !== --p);
             return q <= h.lookahead ? q : h.lookahead;
           }
           function D(h) {
             var g,
               m,
               n = h.w_size;
             do {
               if (((m = h.window_size - h.lookahead - h.strstart), h.strstart >= n + (n - ja))) {
                 Pa.arraySet(h.window, h.window, n, n, 0);
                 h.match_start -= n;
                 h.strstart -= n;
                 h.block_start -= n;
                 var p = (g = h.hash_size);
                 do {
                   var r = h.head[--p];
                   h.head[p] = r >= n ? r - n : 0;
                 } while (--g);
                 p = g = n;
                 do (r = h.prev[--p]), (h.prev[p] = r >= n ? r - n : 0);
                 while (--g);
                 m += n;
               }
               if (0 === h.strm.avail_in) break;
               p = h.strm;
               r = h.window;
               var q = h.strstart + h.lookahead,
                 v = p.avail_in;
               if (
                 ((g =
                   (v > m && (v = m),
                   0 === v
                     ? 0
                     : ((p.avail_in -= v), Pa.arraySet(r, p.input, p.next_in, v, q), 1 === p.state.wrap ? (p.adler = V(p.adler, r, v, q)) : 2 === p.state.wrap && (p.adler = za(p.adler, r, v, q)), (p.next_in += v), (p.total_in += v), v))),
                 (h.lookahead += g),
                 h.lookahead + h.insert >= ma)
               )
                 for (
                   m = h.strstart - h.insert, h.ins_h = h.window[m], h.ins_h = ((h.ins_h << h.hash_shift) ^ h.window[m + 1]) & h.hash_mask;
                   h.insert && ((h.ins_h = ((h.ins_h << h.hash_shift) ^ h.window[m + ma - 1]) & h.hash_mask), (h.prev[m & h.w_mask] = h.head[h.ins_h]), (h.head[h.ins_h] = m), m++, h.insert--, !(h.lookahead + h.insert < ma));
 
                 );
             } while (h.lookahead < ja && 0 !== h.strm.avail_in);
           }
           function ia(g, m) {
             for (var p, r; ; ) {
               if (g.lookahead < ja) {
                 if ((D(g), g.lookahead < ja && m === Ca)) return h;
                 if (0 === g.lookahead) break;
               }
               if (
                 ((p = 0),
                 g.lookahead >= ma && ((g.ins_h = ((g.ins_h << g.hash_shift) ^ g.window[g.strstart + ma - 1]) & g.hash_mask), (p = g.prev[g.strstart & g.w_mask] = g.head[g.ins_h]), (g.head[g.ins_h] = g.strstart)),
                 0 !== p && g.strstart - p <= g.w_size - ja && (g.match_length = n(g, p)),
                 g.match_length >= ma)
               )
                 if (((r = hb._tr_tally(g, g.strstart - g.match_start, g.match_length - ma)), (g.lookahead -= g.match_length), g.match_length <= g.max_lazy_match && g.lookahead >= ma)) {
                   g.match_length--;
                   do g.strstart++, (g.ins_h = ((g.ins_h << g.hash_shift) ^ g.window[g.strstart + ma - 1]) & g.hash_mask), (p = g.prev[g.strstart & g.w_mask] = g.head[g.ins_h]), (g.head[g.ins_h] = g.strstart);
                   while (0 !== --g.match_length);
                   g.strstart++;
                 } else (g.strstart += g.match_length), (g.match_length = 0), (g.ins_h = g.window[g.strstart]), (g.ins_h = ((g.ins_h << g.hash_shift) ^ g.window[g.strstart + 1]) & g.hash_mask);
               else (r = hb._tr_tally(g, 0, g.window[g.strstart])), g.lookahead--, g.strstart++;
               if (r && (la(g, !1), 0 === g.strm.avail_out)) return h;
             }
             return (g.insert = g.strstart < ma - 1 ? g.strstart : ma - 1), m === x ? (la(g, !0), 0 === g.strm.avail_out ? sa : Ta) : g.last_lit && (la(g, !1), 0 === g.strm.avail_out) ? h : qb;
           }
           function Oa(g, m) {
             for (var p, r, q; ; ) {
               if (g.lookahead < ja) {
                 if ((D(g), g.lookahead < ja && m === Ca)) return h;
                 if (0 === g.lookahead) break;
               }
               if (
                 ((p = 0),
                 g.lookahead >= ma && ((g.ins_h = ((g.ins_h << g.hash_shift) ^ g.window[g.strstart + ma - 1]) & g.hash_mask), (p = g.prev[g.strstart & g.w_mask] = g.head[g.ins_h]), (g.head[g.ins_h] = g.strstart)),
                 (g.prev_length = g.match_length),
                 (g.prev_match = g.match_start),
                 (g.match_length = ma - 1),
                 0 !== p &&
                   g.prev_length < g.max_lazy_match &&
                   g.strstart - p <= g.w_size - ja &&
                   ((g.match_length = n(g, p)), 5 >= g.match_length && (g.strategy === Aa || (g.match_length === ma && 4096 < g.strstart - g.match_start)) && (g.match_length = ma - 1)),
                 g.prev_length >= ma && g.match_length <= g.prev_length)
               ) {
                 q = g.strstart + g.lookahead - ma;
                 r = hb._tr_tally(g, g.strstart - 1 - g.prev_match, g.prev_length - ma);
                 g.lookahead -= g.prev_length - 1;
                 g.prev_length -= 2;
                 do ++g.strstart <= q && ((g.ins_h = ((g.ins_h << g.hash_shift) ^ g.window[g.strstart + ma - 1]) & g.hash_mask), (p = g.prev[g.strstart & g.w_mask] = g.head[g.ins_h]), (g.head[g.ins_h] = g.strstart));
                 while (0 !== --g.prev_length);
                 if (((g.match_available = 0), (g.match_length = ma - 1), g.strstart++, r && (la(g, !1), 0 === g.strm.avail_out))) return h;
               } else if (g.match_available) {
                 if (((r = hb._tr_tally(g, 0, g.window[g.strstart - 1])), r && la(g, !1), g.strstart++, g.lookahead--, 0 === g.strm.avail_out)) return h;
               } else (g.match_available = 1), g.strstart++, g.lookahead--;
             }
             return (
               g.match_available && (hb._tr_tally(g, 0, g.window[g.strstart - 1]), (g.match_available = 0)),
               (g.insert = g.strstart < ma - 1 ? g.strstart : ma - 1),
               m === x ? (la(g, !0), 0 === g.strm.avail_out ? sa : Ta) : g.last_lit && (la(g, !1), 0 === g.strm.avail_out) ? h : qb
             );
           }
           function Ea(g, h, m, n, p) {
             this.good_length = g;
             this.max_lazy = h;
             this.nice_length = m;
             this.max_chain = n;
             this.func = p;
           }
           function Da() {
             this.strm = null;
             this.status = 0;
             this.pending_buf = null;
             this.wrap = this.pending = this.pending_out = this.pending_buf_size = 0;
             this.gzhead = null;
             this.gzindex = 0;
             this.method = $a;
             this.last_flush = -1;
             this.w_mask = this.w_bits = this.w_size = 0;
             this.window = null;
             this.window_size = 0;
             this.head = this.prev = null;
             this.nice_match = this.good_match = this.strategy = this.level = this.max_lazy_match = this.max_chain_length = this.prev_length = this.lookahead = this.match_start = this.strstart = this.match_available = this.prev_match = this.match_length = this.block_start = this.hash_shift = this.hash_mask = this.hash_bits = this.hash_size = this.ins_h = 0;
             this.dyn_ltree = new Pa.Buf16(2 * m);
             this.dyn_dtree = new Pa.Buf16(2 * (2 * Ob + 1));
             this.bl_tree = new Pa.Buf16(2 * (2 * p + 1));
             Y(this.dyn_ltree);
             Y(this.dyn_dtree);
             Y(this.bl_tree);
             this.bl_desc = this.d_desc = this.l_desc = null;
             this.bl_count = new Pa.Buf16(nb + 1);
             this.heap = new Pa.Buf16(2 * Va + 1);
             Y(this.heap);
             this.heap_max = this.heap_len = 0;
             this.depth = new Pa.Buf16(2 * Va + 1);
             Y(this.depth);
             this.bi_valid = this.bi_buf = this.insert = this.matches = this.static_len = this.opt_len = this.d_buf = this.last_lit = this.lit_bufsize = this.l_buf = 0;
           }
           function fa(h) {
             var m;
             return h && h.state
               ? ((h.total_in = h.total_out = 0),
                 (h.data_type = bb),
                 (m = h.state),
                 (m.pending = 0),
                 (m.pending_out = 0),
                 0 > m.wrap && (m.wrap = -m.wrap),
                 (m.status = m.wrap ? Z : ea),
                 (h.adler = 2 === m.wrap ? 0 : 1),
                 (m.last_flush = Ca),
                 hb._tr_init(m),
                 g)
               : aa(h, J);
           }
           function ac(h) {
             var m = fa(h);
             m === g &&
               ((h = h.state),
               (h.window_size = 2 * h.w_size),
               Y(h.head),
               (h.max_lazy_match = ua[h.level].max_lazy),
               (h.good_match = ua[h.level].good_length),
               (h.nice_match = ua[h.level].nice_length),
               (h.max_chain_length = ua[h.level].max_chain),
               (h.strstart = 0),
               (h.block_start = 0),
               (h.lookahead = 0),
               (h.insert = 0),
               (h.match_length = h.prev_length = ma - 1),
               (h.match_available = 0),
               (h.ins_h = 0));
             return m;
           }
           function q(g, h, m, n, p, r) {
             if (!g) return J;
             var q = 1;
             if ((h === I && (h = 6), 0 > n ? ((q = 0), (n = -n)) : 15 < n && ((q = 2), (n -= 16)), 1 > p || p > Bb || m !== $a || 8 > n || 15 < n || 0 > h || 9 < h || 0 > r || r > Wa)) return aa(g, J);
             8 === n && (n = 9);
             var t = new Da();
             return (
               (g.state = t),
               (t.strm = g),
               (t.wrap = q),
               (t.gzhead = null),
               (t.w_bits = n),
               (t.w_size = 1 << t.w_bits),
               (t.w_mask = t.w_size - 1),
               (t.hash_bits = p + 7),
               (t.hash_size = 1 << t.hash_bits),
               (t.hash_mask = t.hash_size - 1),
               (t.hash_shift = ~~((t.hash_bits + ma - 1) / ma)),
               (t.window = new Pa.Buf8(2 * t.w_size)),
               (t.head = new Pa.Buf16(t.hash_size)),
               (t.prev = new Pa.Buf16(t.w_size)),
               (t.lit_bufsize = 1 << (p + 6)),
               (t.pending_buf_size = 4 * t.lit_bufsize),
               (t.pending_buf = new Pa.Buf8(t.pending_buf_size)),
               (t.d_buf = 1 * t.lit_bufsize),
               (t.l_buf = 3 * t.lit_bufsize),
               (t.level = h),
               (t.strategy = r),
               (t.method = m),
               ac(g)
             );
           }
           var Pa = u("../utils/common"),
             hb = u("./trees"),
             V = u("./adler32"),
             za = u("./crc32"),
             Ra = u("./messages"),
             Ca = 0,
             x = 4,
             g = 0,
             J = -2,
             I = -1,
             Aa = 1,
             Wa = 4,
             bb = 2,
             $a = 8,
             Bb = 9,
             Va = 286,
             Ob = 30,
             p = 19,
             m = 2 * Va + 1,
             nb = 15,
             ma = 3,
             da = 258,
             ja = da + ma + 1,
             Z = 42,
             ea = 113,
             h = 1,
             qb = 2,
             sa = 3,
             Ta = 4;
           var ua = [
             new Ea(0, 0, 0, 0, function (g, m) {
               var n = 65535;
               for (n > g.pending_buf_size - 5 && (n = g.pending_buf_size - 5); ; ) {
                 if (1 >= g.lookahead) {
                   if ((D(g), 0 === g.lookahead && m === Ca)) return h;
                   if (0 === g.lookahead) break;
                 }
                 g.strstart += g.lookahead;
                 g.lookahead = 0;
                 var p = g.block_start + n;
                 if (((0 === g.strstart || g.strstart >= p) && ((g.lookahead = g.strstart - p), (g.strstart = p), la(g, !1), 0 === g.strm.avail_out)) || (g.strstart - g.block_start >= g.w_size - ja && (la(g, !1), 0 === g.strm.avail_out)))
                   return h;
               }
               return (g.insert = 0), m === x ? (la(g, !0), 0 === g.strm.avail_out ? sa : Ta) : (g.strstart > g.block_start && la(g, !1), h);
             }),
             new Ea(4, 4, 8, 4, ia),
             new Ea(4, 5, 16, 8, ia),
             new Ea(4, 6, 32, 32, ia),
             new Ea(4, 4, 16, 16, Oa),
             new Ea(8, 16, 32, 32, Oa),
             new Ea(8, 16, 128, 128, Oa),
             new Ea(8, 32, 128, 256, Oa),
             new Ea(32, 128, 258, 1024, Oa),
             new Ea(32, 258, 258, 4096, Oa),
           ];
           N.deflateInit = function (g, h) {
             return q(g, h, $a, 15, 8, 0);
           };
           N.deflateInit2 = q;
           N.deflateReset = ac;
           N.deflateResetKeep = fa;
           N.deflateSetHeader = function (h, m) {
             return h && h.state ? (2 !== h.state.wrap ? J : ((h.state.gzhead = m), g)) : J;
           };
           N.deflate = function (m, n) {
             var p, q;
             if (!m || !m.state || 5 < n || 0 > n) return m ? aa(m, J) : J;
             if (((q = m.state), !m.output || (!m.input && 0 !== m.avail_in) || (666 === q.status && n !== x))) return aa(m, 0 === m.avail_out ? -5 : J);
             if (((q.strm = m), (p = q.last_flush), (q.last_flush = n), q.status === Z))
               if (2 === q.wrap)
                 (m.adler = 0),
                   B(q, 31),
                   B(q, 139),
                   B(q, 8),
                   q.gzhead
                     ? (B(q, (q.gzhead.text ? 1 : 0) + (q.gzhead.hcrc ? 2 : 0) + (q.gzhead.extra ? 4 : 0) + (q.gzhead.name ? 8 : 0) + (q.gzhead.comment ? 16 : 0)),
                       B(q, 255 & q.gzhead.time),
                       B(q, (q.gzhead.time >> 8) & 255),
                       B(q, (q.gzhead.time >> 16) & 255),
                       B(q, (q.gzhead.time >> 24) & 255),
                       B(q, 9 === q.level ? 2 : 2 <= q.strategy || 2 > q.level ? 4 : 0),
                       B(q, 255 & q.gzhead.os),
                       q.gzhead.extra && q.gzhead.extra.length && (B(q, 255 & q.gzhead.extra.length), B(q, (q.gzhead.extra.length >> 8) & 255)),
                       q.gzhead.hcrc && (m.adler = za(m.adler, q.pending_buf, q.pending, 0)),
                       (q.gzindex = 0),
                       (q.status = 69))
                     : (B(q, 0), B(q, 0), B(q, 0), B(q, 0), B(q, 0), B(q, 9 === q.level ? 2 : 2 <= q.strategy || 2 > q.level ? 4 : 0), B(q, 3), (q.status = ea));
               else {
                 var t = ($a + ((q.w_bits - 8) << 4)) << 8;
                 t |= (2 <= q.strategy || 2 > q.level ? 0 : 6 > q.level ? 1 : 6 === q.level ? 2 : 3) << 6;
                 0 !== q.strstart && (t |= 32);
                 q.status = ea;
                 r(q, t + (31 - (t % 31)));
                 0 !== q.strstart && (r(q, m.adler >>> 16), r(q, 65535 & m.adler));
                 m.adler = 1;
               }
             if (69 === q.status)
               if (q.gzhead.extra) {
                 for (
                   t = q.pending;
                   q.gzindex < (65535 & q.gzhead.extra.length) &&
                   (q.pending !== q.pending_buf_size || (q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t)), v(m), (t = q.pending), q.pending !== q.pending_buf_size));
 
                 )
                   B(q, 255 & q.gzhead.extra[q.gzindex]), q.gzindex++;
                 q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t));
                 q.gzindex === q.gzhead.extra.length && ((q.gzindex = 0), (q.status = 73));
               } else q.status = 73;
             if (73 === q.status)
               if (q.gzhead.name) {
                 t = q.pending;
                 do {
                   if (q.pending === q.pending_buf_size && (q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t)), v(m), (t = q.pending), q.pending === q.pending_buf_size)) {
                     var u = 1;
                     break;
                   }
                   u = q.gzindex < q.gzhead.name.length ? 255 & q.gzhead.name.charCodeAt(q.gzindex++) : 0;
                   B(q, u);
                 } while (0 !== u);
                 q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t));
                 0 === u && ((q.gzindex = 0), (q.status = 91));
               } else q.status = 91;
             if (91 === q.status)
               if (q.gzhead.comment) {
                 t = q.pending;
                 do {
                   if (q.pending === q.pending_buf_size && (q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t)), v(m), (t = q.pending), q.pending === q.pending_buf_size)) {
                     u = 1;
                     break;
                   }
                   u = q.gzindex < q.gzhead.comment.length ? 255 & q.gzhead.comment.charCodeAt(q.gzindex++) : 0;
                   B(q, u);
                 } while (0 !== u);
                 q.gzhead.hcrc && q.pending > t && (m.adler = za(m.adler, q.pending_buf, q.pending - t, t));
                 0 === u && (q.status = 103);
               } else q.status = 103;
             if (
               (103 === q.status && (q.gzhead.hcrc ? (q.pending + 2 > q.pending_buf_size && v(m), q.pending + 2 <= q.pending_buf_size && (B(q, 255 & m.adler), B(q, (m.adler >> 8) & 255), (m.adler = 0), (q.status = ea))) : (q.status = ea)),
               0 !== q.pending)
             ) {
               if ((v(m), 0 === m.avail_out)) return (q.last_flush = -1), g;
             } else if (0 === m.avail_in && (n << 1) - (4 < n ? 9 : 0) <= (p << 1) - (4 < p ? 9 : 0) && n !== x) return aa(m, -5);
             if (666 === q.status && 0 !== m.avail_in) return aa(m, -5);
             if (0 !== m.avail_in || 0 !== q.lookahead || (n !== Ca && 666 !== q.status)) {
               if (2 === q.strategy)
                 a: {
                   for (var E; ; ) {
                     if (0 === q.lookahead && (D(q), 0 === q.lookahead)) {
                       if (n === Ca) {
                         var I = h;
                         break a;
                       }
                       break;
                     }
                     if (((q.match_length = 0), (E = hb._tr_tally(q, 0, q.window[q.strstart])), q.lookahead--, q.strstart++, E && (la(q, !1), 0 === q.strm.avail_out))) {
                       I = h;
                       break a;
                     }
                   }
                   I = ((q.insert = 0), n === x ? (la(q, !0), 0 === q.strm.avail_out ? sa : Ta) : q.last_lit && (la(q, !1), 0 === q.strm.avail_out) ? h : qb);
                 }
               else if (3 === q.strategy)
                 a: {
                   var L, N;
                   for (E = q.window; ; ) {
                     if (q.lookahead <= da) {
                       if ((D(q), q.lookahead <= da && n === Ca)) {
                         I = h;
                         break a;
                       }
                       if (0 === q.lookahead) break;
                     }
                     if (((q.match_length = 0), q.lookahead >= ma && 0 < q.strstart && ((N = q.strstart - 1), (L = E[N]), L === E[++N] && L === E[++N] && L === E[++N]))) {
                       for (p = q.strstart + da; L === E[++N] && L === E[++N] && L === E[++N] && L === E[++N] && L === E[++N] && L === E[++N] && L === E[++N] && L === E[++N] && N < p; );
                       q.match_length = da - (p - N);
                       q.match_length > q.lookahead && (q.match_length = q.lookahead);
                     }
                     if (
                       (q.match_length >= ma
                         ? ((I = hb._tr_tally(q, 1, q.match_length - ma)), (q.lookahead -= q.match_length), (q.strstart += q.match_length), (q.match_length = 0))
                         : ((I = hb._tr_tally(q, 0, q.window[q.strstart])), q.lookahead--, q.strstart++),
                       I && (la(q, !1), 0 === q.strm.avail_out))
                     ) {
                       I = h;
                       break a;
                     }
                   }
                   I = ((q.insert = 0), n === x ? (la(q, !0), 0 === q.strm.avail_out ? sa : Ta) : q.last_lit && (la(q, !1), 0 === q.strm.avail_out) ? h : qb);
                 }
               else I = ua[q.level].func(q, n);
               if (((I !== sa && I !== Ta) || (q.status = 666), I === h || I === sa)) return 0 === m.avail_out && (q.last_flush = -1), g;
               if (I === qb && (1 === n ? hb._tr_align(q) : 5 !== n && (hb._tr_stored_block(q, 0, 0, !1), 3 === n && (Y(q.head), 0 === q.lookahead && ((q.strstart = 0), (q.block_start = 0), (q.insert = 0)))), v(m), 0 === m.avail_out))
                 return (q.last_flush = -1), g;
             }
             return n !== x
               ? g
               : 0 >= q.wrap
               ? 1
               : (2 === q.wrap
                   ? (B(q, 255 & m.adler),
                     B(q, (m.adler >> 8) & 255),
                     B(q, (m.adler >> 16) & 255),
                     B(q, (m.adler >> 24) & 255),
                     B(q, 255 & m.total_in),
                     B(q, (m.total_in >> 8) & 255),
                     B(q, (m.total_in >> 16) & 255),
                     B(q, (m.total_in >> 24) & 255))
                   : (r(q, m.adler >>> 16), r(q, 65535 & m.adler)),
                 v(m),
                 0 < q.wrap && (q.wrap = -q.wrap),
                 0 !== q.pending ? g : 1);
           };
           N.deflateEnd = function (h) {
             var m;
             return h && h.state ? ((m = h.state.status), m !== Z && 69 !== m && 73 !== m && 91 !== m && 103 !== m && m !== ea && 666 !== m ? aa(h, J) : ((h.state = null), m === ea ? aa(h, -3) : g)) : J;
           };
           N.deflateSetDictionary = function (h, m) {
             var n, p, q;
             var r = m.length;
             if (!h || !h.state || ((n = h.state), (p = n.wrap), 2 === p || (1 === p && n.status !== Z) || n.lookahead)) return J;
             1 === p && (h.adler = V(h.adler, m, r, 0));
             n.wrap = 0;
             r >= n.w_size && (0 === p && (Y(n.head), (n.strstart = 0), (n.block_start = 0), (n.insert = 0)), (q = new Pa.Buf8(n.w_size)), Pa.arraySet(q, m, r - n.w_size, n.w_size, 0), (m = q), (r = n.w_size));
             q = h.avail_in;
             var v = h.next_in;
             var x = h.input;
             h.avail_in = r;
             h.next_in = 0;
             h.input = m;
             for (D(n); n.lookahead >= ma; ) {
               m = n.strstart;
               r = n.lookahead - (ma - 1);
               do (n.ins_h = ((n.ins_h << n.hash_shift) ^ n.window[m + ma - 1]) & n.hash_mask), (n.prev[m & n.w_mask] = n.head[n.ins_h]), (n.head[n.ins_h] = m), m++;
               while (--r);
               n.strstart = m;
               n.lookahead = ma - 1;
               D(n);
             }
             return (
               (n.strstart += n.lookahead),
               (n.block_start = n.strstart),
               (n.insert = n.lookahead),
               (n.lookahead = 0),
               (n.match_length = n.prev_length = ma - 1),
               (n.match_available = 0),
               (h.next_in = v),
               (h.input = x),
               (h.avail_in = q),
               (n.wrap = p),
               g
             );
           };
           N.deflateInfo = "pako deflate (from Nodeca project)";
         },
         { "../utils/common": 3, "./adler32": 5, "./crc32": 7, "./messages": 13, "./trees": 14 },
       ],
       9: [
         function (u, L, N) {
           L.exports = function () {
             this.os = this.xflags = this.time = this.text = 0;
             this.extra = null;
             this.extra_len = 0;
             this.comment = this.name = "";
             this.hcrc = 0;
             this.done = !1;
           };
         },
         {},
       ],
       10: [
         function (u, L, N) {
           L.exports = function (u, L) {
             var v, N, B;
             var r = u.state;
             var n = u.next_in;
             var D = u.input;
             var aa = n + (u.avail_in - 5);
             var Y = u.next_out;
             var Ea = u.output;
             L = Y - (L - u.avail_out);
             var Da = Y + (u.avail_out - 257);
             var fa = r.dmax;
             var ac = r.wsize;
             var q = r.whave;
             var Pa = r.wnext;
             var hb = r.window;
             var V = r.hold;
             var za = r.bits;
             var Ra = r.lencode;
             var Ca = r.distcode;
             var x = (1 << r.lenbits) - 1;
             var g = (1 << r.distbits) - 1;
             a: do {
               15 > za && ((V += D[n++] << za), (za += 8), (V += D[n++] << za), (za += 8));
               var J = Ra[V & x];
               b: for (;;) {
                 if (((v = J >>> 24), (V >>>= v), (za -= v), (v = (J >>> 16) & 255), 0 === v)) Ea[Y++] = 65535 & J;
                 else {
                   if (!(16 & v)) {
                     if (0 === (64 & v)) {
                       J = Ra[(65535 & J) + (V & ((1 << v) - 1))];
                       continue b;
                     }
                     if (32 & v) {
                       r.mode = 12;
                       break a;
                     }
                     u.msg = "invalid literal/length code";
                     r.mode = 30;
                     break a;
                   }
                   var I = 65535 & J;
                   (v &= 15) && (za < v && ((V += D[n++] << za), (za += 8)), (I += V & ((1 << v) - 1)), (V >>>= v), (za -= v));
                   15 > za && ((V += D[n++] << za), (za += 8), (V += D[n++] << za), (za += 8));
                   J = Ca[V & g];
                   c: for (;;) {
                     if (((v = J >>> 24), (V >>>= v), (za -= v), (v = (J >>> 16) & 255), !(16 & v))) {
                       if (0 === (64 & v)) {
                         J = Ca[(65535 & J) + (V & ((1 << v) - 1))];
                         continue c;
                       }
                       u.msg = "invalid distance code";
                       r.mode = 30;
                       break a;
                     }
                     if (((N = 65535 & J), (v &= 15), za < v && ((V += D[n++] << za), (za += 8), za < v && ((V += D[n++] << za), (za += 8))), (N += V & ((1 << v) - 1)), N > fa)) {
                       u.msg = "invalid distance too far back";
                       r.mode = 30;
                       break a;
                     }
                     if (((V >>>= v), (za -= v), (v = Y - L), N > v)) {
                       if (((v = N - v), v > q && r.sane)) {
                         u.msg = "invalid distance too far back";
                         r.mode = 30;
                         break a;
                       }
                       if (((J = 0), (B = hb), 0 === Pa)) {
                         if (((J += ac - v), v < I)) {
                           I -= v;
                           do Ea[Y++] = hb[J++];
                           while (--v);
                           J = Y - N;
                           B = Ea;
                         }
                       } else if (Pa < v) {
                         if (((J += ac + Pa - v), (v -= Pa), v < I)) {
                           I -= v;
                           do Ea[Y++] = hb[J++];
                           while (--v);
                           if (((J = 0), Pa < I)) {
                             v = Pa;
                             I -= v;
                             do Ea[Y++] = hb[J++];
                             while (--v);
                             J = Y - N;
                             B = Ea;
                           }
                         }
                       } else if (((J += Pa - v), v < I)) {
                         I -= v;
                         do Ea[Y++] = hb[J++];
                         while (--v);
                         J = Y - N;
                         B = Ea;
                       }
                       for (; 2 < I; ) (Ea[Y++] = B[J++]), (Ea[Y++] = B[J++]), (Ea[Y++] = B[J++]), (I -= 3);
                       I && ((Ea[Y++] = B[J++]), 1 < I && (Ea[Y++] = B[J++]));
                     } else {
                       J = Y - N;
                       do (Ea[Y++] = Ea[J++]), (Ea[Y++] = Ea[J++]), (Ea[Y++] = Ea[J++]), (I -= 3);
                       while (2 < I);
                       I && ((Ea[Y++] = Ea[J++]), 1 < I && (Ea[Y++] = Ea[J++]));
                     }
                     break;
                   }
                 }
                 break;
               }
             } while (n < aa && Y < Da);
             I = za >> 3;
             n -= I;
             za -= I << 3;
             u.next_in = n;
             u.next_out = Y;
             u.avail_in = n < aa ? 5 + (aa - n) : 5 - (n - aa);
             u.avail_out = Y < Da ? 257 + (Da - Y) : 257 - (Y - Da);
             r.hold = V & ((1 << za) - 1);
             r.bits = za;
           };
         },
         {},
       ],
       11: [
         function (u, L, N) {
           function aa(n) {
             return ((n >>> 24) & 255) + ((n >>> 8) & 65280) + ((65280 & n) << 8) + ((255 & n) << 24);
           }
           function Y() {
             this.mode = 0;
             this.last = !1;
             this.wrap = 0;
             this.havedict = !1;
             this.total = this.check = this.dmax = this.flags = 0;
             this.head = null;
             this.wnext = this.whave = this.wsize = this.wbits = 0;
             this.window = null;
             this.extra = this.offset = this.length = this.bits = this.hold = 0;
             this.distcode = this.lencode = null;
             this.have = this.ndist = this.nlen = this.ncode = this.distbits = this.lenbits = 0;
             this.next = null;
             this.lens = new Oa.Buf16(320);
             this.work = new Oa.Buf16(288);
             this.distdyn = this.lendyn = null;
             this.was = this.back = this.sane = 0;
           }
           function v(n) {
             var r;
             return n && n.state
               ? ((r = n.state),
                 (n.total_in = n.total_out = r.total = 0),
                 (n.msg = ""),
                 r.wrap && (n.adler = 1 & r.wrap),
                 (r.mode = hb),
                 (r.last = 0),
                 (r.havedict = 0),
                 (r.dmax = 32768),
                 (r.head = null),
                 (r.hold = 0),
                 (r.bits = 0),
                 (r.lencode = r.lendyn = new Oa.Buf32(V)),
                 (r.distcode = r.distdyn = new Oa.Buf32(za)),
                 (r.sane = 1),
                 (r.back = -1),
                 q)
               : Pa;
           }
           function la(n) {
             var q;
             return n && n.state ? ((q = n.state), (q.wsize = 0), (q.whave = 0), (q.wnext = 0), v(n)) : Pa;
           }
           function B(n, q) {
             var g, r;
             return n && n.state
               ? ((r = n.state), 0 > q ? ((g = 0), (q = -q)) : ((g = (q >> 4) + 1), 48 > q && (q &= 15)), q && (8 > q || 15 < q) ? Pa : (null !== r.window && r.wbits !== q && (r.window = null), (r.wrap = g), (r.wbits = q), la(n)))
               : Pa;
           }
           function r(n, r) {
             var g, v;
             return n ? ((v = new Y()), (n.state = v), (v.window = null), (g = B(n, r)), g !== q && (n.state = null), g) : Pa;
           }
           function n(n, q, g, r) {
             var v;
             n = n.state;
             return (
               null === n.window && ((n.wsize = 1 << n.wbits), (n.wnext = 0), (n.whave = 0), (n.window = new Oa.Buf8(n.wsize))),
               r >= n.wsize
                 ? (Oa.arraySet(n.window, q, g - n.wsize, n.wsize, 0), (n.wnext = 0), (n.whave = n.wsize))
                 : ((v = n.wsize - n.wnext),
                   v > r && (v = r),
                   Oa.arraySet(n.window, q, g - r, v, n.wnext),
                   (r -= v),
                   r ? (Oa.arraySet(n.window, q, g - r, r, 0), (n.wnext = r), (n.whave = n.wsize)) : ((n.wnext += v), n.wnext === n.wsize && (n.wnext = 0), n.whave < n.wsize && (n.whave += v))),
               0
             );
           }
           var D,
             ia,
             Oa = u("../utils/common"),
             Ea = u("./adler32"),
             Da = u("./crc32"),
             fa = u("./inffast"),
             ac = u("./inftrees"),
             q = 0,
             Pa = -2,
             hb = 1,
             V = 852,
             za = 592,
             Ra = !0;
           N.inflateReset = la;
           N.inflateReset2 = B;
           N.inflateResetKeep = v;
           N.inflateInit = function (n) {
             return r(n, 15);
           };
           N.inflateInit2 = r;
           N.inflate = function (r, v) {
             var g,
               u,
               x,
               B,
               L,
               N,
               V,
               Y = 0,
               la = new Oa.Buf8(4),
               Ca = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
             if (!r || !r.state || !r.output || (!r.input && 0 !== r.avail_in)) return Pa;
             var p = r.state;
             12 === p.mode && (p.mode = 13);
             var m = r.next_out;
             var za = r.output;
             var ma = r.avail_out;
             var da = r.next_in;
             var ja = r.input;
             var Z = r.avail_in;
             var ea = p.hold;
             var h = p.bits;
             var qb = Z;
             var sa = ma;
             var Ta = q;
             a: for (;;)
               switch (p.mode) {
                 case hb:
                   if (0 === p.wrap) {
                     p.mode = 13;
                     break;
                   }
                   for (; 16 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if (2 & p.wrap && 35615 === ea) {
                     p.check = 0;
                     la[0] = 255 & ea;
                     la[1] = (ea >>> 8) & 255;
                     p.check = Da(p.check, la, 2, 0);
                     h = ea = 0;
                     p.mode = 2;
                     break;
                   }
                   if (((p.flags = 0), p.head && (p.head.done = !1), !(1 & p.wrap) || (((255 & ea) << 8) + (ea >> 8)) % 31)) {
                     r.msg = "incorrect header check";
                     p.mode = 30;
                     break;
                   }
                   if (8 !== (15 & ea)) {
                     r.msg = "unknown compression method";
                     p.mode = 30;
                     break;
                   }
                   if (((ea >>>= 4), (h -= 4), (N = (15 & ea) + 8), 0 === p.wbits)) p.wbits = N;
                   else if (N > p.wbits) {
                     r.msg = "invalid window size";
                     p.mode = 30;
                     break;
                   }
                   p.dmax = 1 << N;
                   r.adler = p.check = 1;
                   p.mode = 512 & ea ? 10 : 12;
                   h = ea = 0;
                   break;
                 case 2:
                   for (; 16 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if (((p.flags = ea), 8 !== (255 & p.flags))) {
                     r.msg = "unknown compression method";
                     p.mode = 30;
                     break;
                   }
                   if (57344 & p.flags) {
                     r.msg = "unknown header flags set";
                     p.mode = 30;
                     break;
                   }
                   p.head && (p.head.text = (ea >> 8) & 1);
                   512 & p.flags && ((la[0] = 255 & ea), (la[1] = (ea >>> 8) & 255), (p.check = Da(p.check, la, 2, 0)));
                   h = ea = 0;
                   p.mode = 3;
                 case 3:
                   for (; 32 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   p.head && (p.head.time = ea);
                   512 & p.flags && ((la[0] = 255 & ea), (la[1] = (ea >>> 8) & 255), (la[2] = (ea >>> 16) & 255), (la[3] = (ea >>> 24) & 255), (p.check = Da(p.check, la, 4, 0)));
                   h = ea = 0;
                   p.mode = 4;
                 case 4:
                   for (; 16 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   p.head && ((p.head.xflags = 255 & ea), (p.head.os = ea >> 8));
                   512 & p.flags && ((la[0] = 255 & ea), (la[1] = (ea >>> 8) & 255), (p.check = Da(p.check, la, 2, 0)));
                   h = ea = 0;
                   p.mode = 5;
                 case 5:
                   if (1024 & p.flags) {
                     for (; 16 > h; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     p.length = ea;
                     p.head && (p.head.extra_len = ea);
                     512 & p.flags && ((la[0] = 255 & ea), (la[1] = (ea >>> 8) & 255), (p.check = Da(p.check, la, 2, 0)));
                     h = ea = 0;
                   } else p.head && (p.head.extra = null);
                   p.mode = 6;
                 case 6:
                   if (
                     1024 & p.flags &&
                     ((g = p.length),
                     g > Z && (g = Z),
                     g &&
                       (p.head && ((N = p.head.extra_len - p.length), p.head.extra || (p.head.extra = Array(p.head.extra_len)), Oa.arraySet(p.head.extra, ja, da, g, N)),
                       512 & p.flags && (p.check = Da(p.check, ja, g, da)),
                       (Z -= g),
                       (da += g),
                       (p.length -= g)),
                     p.length)
                   )
                     break a;
                   p.length = 0;
                   p.mode = 7;
                 case 7:
                   if (2048 & p.flags) {
                     if (0 === Z) break a;
                     g = 0;
                     do (N = ja[da + g++]), p.head && N && 65536 > p.length && (p.head.name += String.fromCharCode(N));
                     while (N && g < Z);
                     if ((512 & p.flags && (p.check = Da(p.check, ja, g, da)), (Z -= g), (da += g), N)) break a;
                   } else p.head && (p.head.name = null);
                   p.length = 0;
                   p.mode = 8;
                 case 8:
                   if (4096 & p.flags) {
                     if (0 === Z) break a;
                     g = 0;
                     do (N = ja[da + g++]), p.head && N && 65536 > p.length && (p.head.comment += String.fromCharCode(N));
                     while (N && g < Z);
                     if ((512 & p.flags && (p.check = Da(p.check, ja, g, da)), (Z -= g), (da += g), N)) break a;
                   } else p.head && (p.head.comment = null);
                   p.mode = 9;
                 case 9:
                   if (512 & p.flags) {
                     for (; 16 > h; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     if (ea !== (65535 & p.check)) {
                       r.msg = "header crc mismatch";
                       p.mode = 30;
                       break;
                     }
                     h = ea = 0;
                   }
                   p.head && ((p.head.hcrc = (p.flags >> 9) & 1), (p.head.done = !0));
                   r.adler = p.check = 0;
                   p.mode = 12;
                   break;
                 case 10:
                   for (; 32 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   r.adler = p.check = aa(ea);
                   h = ea = 0;
                   p.mode = 11;
                 case 11:
                   if (0 === p.havedict) return (r.next_out = m), (r.avail_out = ma), (r.next_in = da), (r.avail_in = Z), (p.hold = ea), (p.bits = h), 2;
                   r.adler = p.check = 1;
                   p.mode = 12;
                 case 12:
                   if (5 === v || 6 === v) break a;
                 case 13:
                   if (p.last) {
                     ea >>>= 7 & h;
                     h -= 7 & h;
                     p.mode = 27;
                     break;
                   }
                   for (; 3 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   switch (((p.last = 1 & ea), (ea >>>= 1), --h, 3 & ea)) {
                     case 0:
                       p.mode = 14;
                       break;
                     case 1:
                       var ua = p;
                       if (Ra) {
                         D = new Oa.Buf32(512);
                         ia = new Oa.Buf32(32);
                         for (x = 0; 144 > x; ) ua.lens[x++] = 8;
                         for (; 256 > x; ) ua.lens[x++] = 9;
                         for (; 280 > x; ) ua.lens[x++] = 7;
                         for (; 288 > x; ) ua.lens[x++] = 8;
                         ac(1, ua.lens, 0, 288, D, 0, ua.work, { bits: 9 });
                         for (x = 0; 32 > x; ) ua.lens[x++] = 5;
                         ac(2, ua.lens, 0, 32, ia, 0, ua.work, { bits: 5 });
                         Ra = !1;
                       }
                       ua.lencode = D;
                       ua.lenbits = 9;
                       ua.distcode = ia;
                       ua.distbits = 5;
                       if (((p.mode = 20), 6 === v)) {
                         ea >>>= 2;
                         h -= 2;
                         break a;
                       }
                       break;
                     case 2:
                       p.mode = 17;
                       break;
                     case 3:
                       (r.msg = "invalid block type"), (p.mode = 30);
                   }
                   ea >>>= 2;
                   h -= 2;
                   break;
                 case 14:
                   ea >>>= 7 & h;
                   for (h -= 7 & h; 32 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if ((65535 & ea) !== ((ea >>> 16) ^ 65535)) {
                     r.msg = "invalid stored block lengths";
                     p.mode = 30;
                     break;
                   }
                   if (((p.length = 65535 & ea), (ea = 0), (h = 0), (p.mode = 15), 6 === v)) break a;
                 case 15:
                   p.mode = 16;
                 case 16:
                   if ((g = p.length)) {
                     if ((g > Z && (g = Z), g > ma && (g = ma), 0 === g)) break a;
                     Oa.arraySet(za, ja, da, g, m);
                     Z -= g;
                     da += g;
                     ma -= g;
                     m += g;
                     p.length -= g;
                     break;
                   }
                   p.mode = 12;
                   break;
                 case 17:
                   for (; 14 > h; ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if (((p.nlen = (31 & ea) + 257), (ea >>>= 5), (h -= 5), (p.ndist = (31 & ea) + 1), (ea >>>= 5), (h -= 5), (p.ncode = (15 & ea) + 4), (ea >>>= 4), (h -= 4), 286 < p.nlen || 30 < p.ndist)) {
                     r.msg = "too many length or distance symbols";
                     p.mode = 30;
                     break;
                   }
                   p.have = 0;
                   p.mode = 18;
                 case 18:
                   for (; p.have < p.ncode; ) {
                     for (; 3 > h; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     p.lens[Ca[p.have++]] = 7 & ea;
                     ea >>>= 3;
                     h -= 3;
                   }
                   for (; 19 > p.have; ) p.lens[Ca[p.have++]] = 0;
                   if (((p.lencode = p.lendyn), (p.lenbits = 7), (V = { bits: p.lenbits }), (Ta = ac(0, p.lens, 0, 19, p.lencode, 0, p.work, V)), (p.lenbits = V.bits), Ta)) {
                     r.msg = "invalid code lengths set";
                     p.mode = 30;
                     break;
                   }
                   p.have = 0;
                   p.mode = 19;
                 case 19:
                   for (; p.have < p.nlen + p.ndist; ) {
                     for (; (Y = p.lencode[ea & ((1 << p.lenbits) - 1)]), (B = Y >>> 24), (ua = 65535 & Y), !(B <= h); ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     if (16 > ua) (ea >>>= B), (h -= B), (p.lens[p.have++] = ua);
                     else {
                       if (16 === ua) {
                         for (x = B + 2; h < x; ) {
                           if (0 === Z) break a;
                           Z--;
                           ea += ja[da++] << h;
                           h += 8;
                         }
                         if (((ea >>>= B), (h -= B), 0 === p.have)) {
                           r.msg = "invalid bit length repeat";
                           p.mode = 30;
                           break;
                         }
                         N = p.lens[p.have - 1];
                         g = 3 + (3 & ea);
                         ea >>>= 2;
                         h -= 2;
                       } else if (17 === ua) {
                         for (x = B + 3; h < x; ) {
                           if (0 === Z) break a;
                           Z--;
                           ea += ja[da++] << h;
                           h += 8;
                         }
                         ea >>>= B;
                         h -= B;
                         N = 0;
                         g = 3 + (7 & ea);
                         ea >>>= 3;
                         h -= 3;
                       } else {
                         for (x = B + 7; h < x; ) {
                           if (0 === Z) break a;
                           Z--;
                           ea += ja[da++] << h;
                           h += 8;
                         }
                         ea >>>= B;
                         h -= B;
                         N = 0;
                         g = 11 + (127 & ea);
                         ea >>>= 7;
                         h -= 7;
                       }
                       if (p.have + g > p.nlen + p.ndist) {
                         r.msg = "invalid bit length repeat";
                         p.mode = 30;
                         break;
                       }
                       for (; g--; ) p.lens[p.have++] = N;
                     }
                   }
                   if (30 === p.mode) break;
                   if (0 === p.lens[256]) {
                     r.msg = "invalid code -- missing end-of-block";
                     p.mode = 30;
                     break;
                   }
                   if (((p.lenbits = 9), (V = { bits: p.lenbits }), (Ta = ac(1, p.lens, 0, p.nlen, p.lencode, 0, p.work, V)), (p.lenbits = V.bits), Ta)) {
                     r.msg = "invalid literal/lengths set";
                     p.mode = 30;
                     break;
                   }
                   if (((p.distbits = 6), (p.distcode = p.distdyn), (V = { bits: p.distbits }), (Ta = ac(2, p.lens, p.nlen, p.ndist, p.distcode, 0, p.work, V)), (p.distbits = V.bits), Ta)) {
                     r.msg = "invalid distances set";
                     p.mode = 30;
                     break;
                   }
                   if (((p.mode = 20), 6 === v)) break a;
                 case 20:
                   p.mode = 21;
                 case 21:
                   if (6 <= Z && 258 <= ma) {
                     r.next_out = m;
                     r.avail_out = ma;
                     r.next_in = da;
                     r.avail_in = Z;
                     p.hold = ea;
                     p.bits = h;
                     fa(r, sa);
                     m = r.next_out;
                     za = r.output;
                     ma = r.avail_out;
                     da = r.next_in;
                     ja = r.input;
                     Z = r.avail_in;
                     ea = p.hold;
                     h = p.bits;
                     12 === p.mode && (p.back = -1);
                     break;
                   }
                   for (p.back = 0; (Y = p.lencode[ea & ((1 << p.lenbits) - 1)]), (B = Y >>> 24), (x = (Y >>> 16) & 255), (ua = 65535 & Y), !(B <= h); ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if (x && 0 === (240 & x)) {
                     var Ga = B;
                     var va = x;
                     for (L = ua; (Y = p.lencode[L + ((ea & ((1 << (Ga + va)) - 1)) >> Ga)]), (B = Y >>> 24), (x = (Y >>> 16) & 255), (ua = 65535 & Y), !(Ga + B <= h); ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     ea >>>= Ga;
                     h -= Ga;
                     p.back += Ga;
                   }
                   if (((ea >>>= B), (h -= B), (p.back += B), (p.length = ua), 0 === x)) {
                     p.mode = 26;
                     break;
                   }
                   if (32 & x) {
                     p.back = -1;
                     p.mode = 12;
                     break;
                   }
                   if (64 & x) {
                     r.msg = "invalid literal/length code";
                     p.mode = 30;
                     break;
                   }
                   p.extra = 15 & x;
                   p.mode = 22;
                 case 22:
                   if (p.extra) {
                     for (x = p.extra; h < x; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     p.length += ea & ((1 << p.extra) - 1);
                     ea >>>= p.extra;
                     h -= p.extra;
                     p.back += p.extra;
                   }
                   p.was = p.length;
                   p.mode = 23;
                 case 23:
                   for (; (Y = p.distcode[ea & ((1 << p.distbits) - 1)]), (B = Y >>> 24), (x = (Y >>> 16) & 255), (ua = 65535 & Y), !(B <= h); ) {
                     if (0 === Z) break a;
                     Z--;
                     ea += ja[da++] << h;
                     h += 8;
                   }
                   if (0 === (240 & x)) {
                     Ga = B;
                     va = x;
                     for (L = ua; (Y = p.distcode[L + ((ea & ((1 << (Ga + va)) - 1)) >> Ga)]), (B = Y >>> 24), (x = (Y >>> 16) & 255), (ua = 65535 & Y), !(Ga + B <= h); ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     ea >>>= Ga;
                     h -= Ga;
                     p.back += Ga;
                   }
                   if (((ea >>>= B), (h -= B), (p.back += B), 64 & x)) {
                     r.msg = "invalid distance code";
                     p.mode = 30;
                     break;
                   }
                   p.offset = ua;
                   p.extra = 15 & x;
                   p.mode = 24;
                 case 24:
                   if (p.extra) {
                     for (x = p.extra; h < x; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     p.offset += ea & ((1 << p.extra) - 1);
                     ea >>>= p.extra;
                     h -= p.extra;
                     p.back += p.extra;
                   }
                   if (p.offset > p.dmax) {
                     r.msg = "invalid distance too far back";
                     p.mode = 30;
                     break;
                   }
                   p.mode = 25;
                 case 25:
                   if (0 === ma) break a;
                   if (((g = sa - ma), p.offset > g)) {
                     if (((g = p.offset - g), g > p.whave && p.sane)) {
                       r.msg = "invalid distance too far back";
                       p.mode = 30;
                       break;
                     }
                     g > p.wnext ? ((g -= p.wnext), (u = p.wsize - g)) : (u = p.wnext - g);
                     g > p.length && (g = p.length);
                     x = p.window;
                   } else (x = za), (u = m - p.offset), (g = p.length);
                   g > ma && (g = ma);
                   ma -= g;
                   p.length -= g;
                   do za[m++] = x[u++];
                   while (--g);
                   0 === p.length && (p.mode = 21);
                   break;
                 case 26:
                   if (0 === ma) break a;
                   za[m++] = p.length;
                   ma--;
                   p.mode = 21;
                   break;
                 case 27:
                   if (p.wrap) {
                     for (; 32 > h; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea |= ja[da++] << h;
                       h += 8;
                     }
                     if (((sa -= ma), (r.total_out += sa), (p.total += sa), sa && (r.adler = p.check = p.flags ? Da(p.check, za, sa, m - sa) : Ea(p.check, za, sa, m - sa)), (sa = ma), (p.flags ? ea : aa(ea)) !== p.check)) {
                       r.msg = "incorrect data check";
                       p.mode = 30;
                       break;
                     }
                     h = ea = 0;
                   }
                   p.mode = 28;
                 case 28:
                   if (p.wrap && p.flags) {
                     for (; 32 > h; ) {
                       if (0 === Z) break a;
                       Z--;
                       ea += ja[da++] << h;
                       h += 8;
                     }
                     if (ea !== (4294967295 & p.total)) {
                       r.msg = "incorrect length check";
                       p.mode = 30;
                       break;
                     }
                     h = ea = 0;
                   }
                   p.mode = 29;
                 case 29:
                   Ta = 1;
                   break a;
                 case 30:
                   Ta = -3;
                   break a;
                 case 31:
                   return -4;
                 default:
                   return Pa;
               }
             return (
               (r.next_out = m),
               (r.avail_out = ma),
               (r.next_in = da),
               (r.avail_in = Z),
               (p.hold = ea),
               (p.bits = h),
               (p.wsize || (sa !== r.avail_out && 30 > p.mode && (27 > p.mode || 4 !== v))) && n(r, r.output, r.next_out, sa - r.avail_out)
                 ? ((p.mode = 31), -4)
                 : ((qb -= r.avail_in),
                   (sa -= r.avail_out),
                   (r.total_in += qb),
                   (r.total_out += sa),
                   (p.total += sa),
                   p.wrap && sa && (r.adler = p.check = p.flags ? Da(p.check, za, sa, r.next_out - sa) : Ea(p.check, za, sa, r.next_out - sa)),
                   (r.data_type = p.bits + (p.last ? 64 : 0) + (12 === p.mode ? 128 : 0) + (20 === p.mode || 15 === p.mode ? 256 : 0)),
                   ((0 === qb && 0 === sa) || 4 === v) && Ta === q && (Ta = -5),
                   Ta)
             );
           };
           N.inflateEnd = function (n) {
             if (!n || !n.state) return Pa;
             var r = n.state;
             return r.window && (r.window = null), (n.state = null), q;
           };
           N.inflateGetHeader = function (n, r) {
             var g;
             return n && n.state ? ((g = n.state), 0 === (2 & g.wrap) ? Pa : ((g.head = r), (r.done = !1), q)) : Pa;
           };
           N.inflateSetDictionary = function (r, v) {
             var g,
               u,
               x = v.length;
             return r && r.state ? ((g = r.state), 0 !== g.wrap && 11 !== g.mode ? Pa : 11 === g.mode && ((u = 1), (u = Ea(u, v, x, 0)), u !== g.check) ? -3 : n(r, v, x, x) ? ((g.mode = 31), -4) : ((g.havedict = 1), q)) : Pa;
           };
           N.inflateInfo = "pako inflate (from Nodeca project)";
         },
         { "../utils/common": 3, "./adler32": 5, "./crc32": 7, "./inffast": 10, "./inftrees": 12 },
       ],
       12: [
         function (u, L, N) {
           var aa = u("../utils/common"),
             Y = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
             v = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
             la = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
             B = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
           L.exports = function (r, n, u, L, N, Ea, Da, fa) {
             var D,
               q,
               ia,
               Oa,
               V,
               za,
               Ra = fa.bits,
               Ca,
               x,
               g,
               J,
               I,
               Aa = 0,
               Wa,
               bb = null,
               $a = 0,
               Bb = new aa.Buf16(16);
             var Va = new aa.Buf16(16);
             var Ob = null,
               p = 0;
             for (Ca = 0; 15 >= Ca; Ca++) Bb[Ca] = 0;
             for (x = 0; x < L; x++) Bb[n[u + x]]++;
             var m = Ra;
             for (g = 15; 1 <= g && 0 === Bb[g]; g--);
             if ((m > g && (m = g), 0 === g)) return (N[Ea++] = 20971520), (N[Ea++] = 20971520), (fa.bits = 1), 0;
             for (Ra = 1; Ra < g && 0 === Bb[Ra]; Ra++);
             m < Ra && (m = Ra);
             for (Ca = D = 1; 15 >= Ca; Ca++) if (((D <<= 1), (D -= Bb[Ca]), 0 > D)) return -1;
             if (0 < D && (0 === r || 1 !== g)) return -1;
             Va[1] = 0;
             for (Ca = 1; 15 > Ca; Ca++) Va[Ca + 1] = Va[Ca] + Bb[Ca];
             for (x = 0; x < L; x++) 0 !== n[u + x] && (Da[Va[n[u + x]]++] = x);
             if (
               (0 === r ? ((bb = Ob = Da), (Oa = 19)) : 1 === r ? ((bb = Y), ($a -= 257), (Ob = v), (p -= 257), (Oa = 256)) : ((bb = la), (Ob = B), (Oa = -1)),
               (Wa = 0),
               (x = 0),
               (Ca = Ra),
               (Va = Ea),
               (J = m),
               (I = 0),
               (ia = -1),
               (Aa = 1 << m),
               (L = Aa - 1),
               (1 === r && 852 < Aa) || (2 === r && 592 < Aa))
             )
               return 1;
             for (var nb = 0; ; ) {
               nb++;
               var ma = Ca - I;
               Da[x] < Oa ? ((V = 0), (za = Da[x])) : Da[x] > Oa ? ((V = Ob[p + Da[x]]), (za = bb[$a + Da[x]])) : ((V = 96), (za = 0));
               D = 1 << (Ca - I);
               Ra = q = 1 << J;
               do (q -= D), (N[Va + (Wa >> I) + q] = (ma << 24) | (V << 16) | za | 0);
               while (0 !== q);
               for (D = 1 << (Ca - 1); Wa & D; ) D >>= 1;
               if ((0 !== D ? ((Wa &= D - 1), (Wa += D)) : (Wa = 0), x++, 0 === --Bb[Ca])) {
                 if (Ca === g) break;
                 Ca = n[u + Da[x]];
               }
               if (Ca > m && (Wa & L) !== ia) {
                 0 === I && (I = m);
                 Va += Ra;
                 J = Ca - I;
                 for (D = 1 << J; J + I < g && ((D -= Bb[J + I]), !(0 >= D)); ) J++, (D <<= 1);
                 if (((Aa += 1 << J), (1 === r && 852 < Aa) || (2 === r && 592 < Aa))) return 1;
                 ia = Wa & L;
                 N[ia] = (m << 24) | (J << 16) | (Va - Ea) | 0;
               }
             }
             return 0 !== Wa && (N[Va + Wa] = ((Ca - I) << 24) | 4194304), (fa.bits = m), 0;
           };
         },
         { "../utils/common": 3 },
       ],
       13: [
         function (u, L, N) {
           L.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
         },
         {},
       ],
       14: [
         function (u, L, N) {
           function aa(g) {
             for (var h = g.length; 0 <= --h; ) g[h] = 0;
           }
           function Y(g, h, m, n, p) {
             this.static_tree = g;
             this.extra_bits = h;
             this.extra_base = m;
             this.elems = n;
             this.max_length = p;
             this.has_stree = g && g.length;
           }
           function v(g, h) {
             this.dyn_tree = g;
             this.max_code = 0;
             this.stat_desc = h;
           }
           function la(g, h) {
             g.pending_buf[g.pending++] = 255 & h;
             g.pending_buf[g.pending++] = (h >>> 8) & 255;
           }
           function B(g, h, m) {
             g.bi_valid > $a - m ? ((g.bi_buf |= (h << g.bi_valid) & 65535), la(g, g.bi_buf), (g.bi_buf = h >> ($a - g.bi_valid)), (g.bi_valid += m - $a)) : ((g.bi_buf |= (h << g.bi_valid) & 65535), (g.bi_valid += m));
           }
           function r(g, h, m) {
             B(g, m[2 * h], m[2 * h + 1]);
           }
           function n(g, h) {
             var m = 0;
             do (m |= 1 & g), (g >>>= 1), (m <<= 1);
             while (0 < --h);
             return m >>> 1;
           }
           function D(g, h, m) {
             var p,
               q = Array(bb + 1),
               r = 0;
             for (p = 1; p <= bb; p++) q[p] = r = (r + m[p - 1]) << 1;
             for (m = 0; m <= h; m++) (p = g[2 * m + 1]), 0 !== p && (g[2 * m] = n(q[p]++, p));
           }
           function ia(g) {
             var h;
             for (h = 0; h < J; h++) g.dyn_ltree[2 * h] = 0;
             for (h = 0; h < I; h++) g.dyn_dtree[2 * h] = 0;
             for (h = 0; h < Aa; h++) g.bl_tree[2 * h] = 0;
             g.dyn_ltree[2 * Bb] = 1;
             g.opt_len = g.static_len = 0;
             g.last_lit = g.matches = 0;
           }
           function Oa(g) {
             8 < g.bi_valid ? la(g, g.bi_buf) : 0 < g.bi_valid && (g.pending_buf[g.pending++] = g.bi_buf);
             g.bi_buf = 0;
             g.bi_valid = 0;
           }
           function Ea(g, h, m, n) {
             var p = 2 * h,
               q = 2 * m;
             return g[p] < g[q] || (g[p] === g[q] && n[h] <= n[m]);
           }
           function Da(g, h, m) {
             for (var n = g.heap[m], p = m << 1; p <= g.heap_len && (p < g.heap_len && Ea(h, g.heap[p + 1], g.heap[p], g.depth) && p++, !Ea(h, n, g.heap[p], g.depth)); ) (g.heap[m] = g.heap[p]), (m = p), (p <<= 1);
             g.heap[m] = n;
           }
           function fa(n, p, q) {
             var t,
               v,
               u = 0;
             if (0 !== n.last_lit) {
               do {
                 var x = (n.pending_buf[n.d_buf + 2 * u] << 8) | n.pending_buf[n.d_buf + 2 * u + 1];
                 var D = n.pending_buf[n.l_buf + u];
                 u++;
                 0 === x ? r(n, D, p) : ((t = h[D]), r(n, t + g + 1, p), (v = m[t]), 0 !== v && ((D -= qb[t]), B(n, D, v)), x--, (t = 256 > x ? ea[x] : ea[256 + (x >>> 7)]), r(n, t, q), (v = nb[t]), 0 !== v && ((x -= sa[t]), B(n, x, v)));
               } while (u < n.last_lit);
             }
             r(n, Bb, p);
           }
           function ac(g, h) {
             var m,
               n = h.dyn_tree;
             var p = h.stat_desc.static_tree;
             var q = h.stat_desc.has_stree,
               r = h.stat_desc.elems,
               v = -1;
             g.heap_len = 0;
             g.heap_max = Wa;
             for (m = 0; m < r; m++) 0 !== n[2 * m] ? ((g.heap[++g.heap_len] = v = m), (g.depth[m] = 0)) : (n[2 * m + 1] = 0);
             for (; 2 > g.heap_len; ) {
               var u = (g.heap[++g.heap_len] = 2 > v ? ++v : 0);
               n[2 * u] = 1;
               g.depth[u] = 0;
               g.opt_len--;
               q && (g.static_len -= p[2 * u + 1]);
             }
             h.max_code = v;
             for (m = g.heap_len >> 1; 1 <= m; m--) Da(g, n, m);
             u = r;
             do
               (m = g.heap[1]),
                 (g.heap[1] = g.heap[g.heap_len--]),
                 Da(g, n, 1),
                 (p = g.heap[1]),
                 (g.heap[--g.heap_max] = m),
                 (g.heap[--g.heap_max] = p),
                 (n[2 * u] = n[2 * m] + n[2 * p]),
                 (g.depth[u] = (g.depth[m] >= g.depth[p] ? g.depth[m] : g.depth[p]) + 1),
                 (n[2 * m + 1] = n[2 * p + 1] = u),
                 (g.heap[1] = u++),
                 Da(g, n, 1);
             while (2 <= g.heap_len);
             g.heap[--g.heap_max] = g.heap[1];
             var x, y;
             m = h.dyn_tree;
             u = h.max_code;
             r = h.stat_desc.static_tree;
             var B = h.stat_desc.has_stree,
               I = h.stat_desc.extra_bits,
               J = h.stat_desc.extra_base,
               G = h.stat_desc.max_length,
               L = 0;
             for (q = 0; q <= bb; q++) g.bl_count[q] = 0;
             m[2 * g.heap[g.heap_max] + 1] = 0;
             for (h = g.heap_max + 1; h < Wa; h++)
               (p = g.heap[h]),
                 (q = m[2 * m[2 * p + 1] + 1] + 1),
                 q > G && ((q = G), L++),
                 (m[2 * p + 1] = q),
                 p > u || (g.bl_count[q]++, (x = 0), p >= J && (x = I[p - J]), (y = m[2 * p]), (g.opt_len += y * (q + x)), B && (g.static_len += y * (r[2 * p + 1] + x)));
             if (0 !== L) {
               do {
                 for (q = G - 1; 0 === g.bl_count[q]; ) q--;
                 g.bl_count[q]--;
                 g.bl_count[q + 1] += 2;
                 g.bl_count[G]--;
                 L -= 2;
               } while (0 < L);
               for (q = G; 0 !== q; q--) for (p = g.bl_count[q]; 0 !== p; ) (x = g.heap[--h]), x > u || (m[2 * x + 1] !== q && ((g.opt_len += (q - m[2 * x + 1]) * m[2 * x]), (m[2 * x + 1] = q)), p--);
             }
             D(n, v, g.bl_count);
           }
           function q(g, h, m) {
             var n,
               q = -1,
               r = h[1],
               t = 0,
               v = 7,
               u = 4;
             0 === r && ((v = 138), (u = 3));
             h[2 * (m + 1) + 1] = 65535;
             for (n = 0; n <= m; n++) {
               var x = r;
               r = h[2 * (n + 1) + 1];
               (++t < v && x === r) ||
                 (t < u ? (g.bl_tree[2 * x] += t) : 0 !== x ? (x !== q && g.bl_tree[2 * x]++, g.bl_tree[2 * Va]++) : 10 >= t ? g.bl_tree[2 * Ob]++ : g.bl_tree[2 * p]++,
                 (t = 0),
                 (q = x),
                 0 === r ? ((v = 138), (u = 3)) : x === r ? ((v = 6), (u = 3)) : ((v = 7), (u = 4)));
             }
           }
           function Pa(g, h, m) {
             var n,
               q,
               t = -1,
               v = h[1],
               u = 0,
               x = 7,
               D = 4;
             0 === v && ((x = 138), (D = 3));
             for (n = 0; n <= m; n++)
               if (((q = v), (v = h[2 * (n + 1) + 1]), !(++u < x && q === v))) {
                 if (u < D) {
                   do r(g, q, g.bl_tree);
                   while (0 !== --u);
                 } else 0 !== q ? (q !== t && (r(g, q, g.bl_tree), u--), r(g, Va, g.bl_tree), B(g, u - 3, 2)) : 10 >= u ? (r(g, Ob, g.bl_tree), B(g, u - 3, 3)) : (r(g, p, g.bl_tree), B(g, u - 11, 7));
                 u = 0;
                 t = q;
                 0 === v ? ((x = 138), (D = 3)) : q === v ? ((x = 6), (D = 3)) : ((x = 7), (D = 4));
               }
           }
           function hb(h) {
             var m,
               n = 4093624447;
             for (m = 0; 31 >= m; m++, n >>>= 1) if (1 & n && 0 !== h.dyn_ltree[2 * m]) return Ra;
             if (0 !== h.dyn_ltree[18] || 0 !== h.dyn_ltree[20] || 0 !== h.dyn_ltree[26]) return Ca;
             for (m = 32; m < g; m++) if (0 !== h.dyn_ltree[2 * m]) return Ca;
             return Ra;
           }
           function V(g, h, m, n) {
             B(g, (x << 1) + (n ? 1 : 0), 3);
             Oa(g);
             la(g, m);
             la(g, ~m);
             za.arraySet(g.pending_buf, g.window, h, m, g.pending);
             g.pending += m;
           }
           var za = u("../utils/common"),
             Ra = 0,
             Ca = 1,
             x = 0,
             g = 256,
             J = g + 1 + 29,
             I = 30,
             Aa = 19,
             Wa = 2 * J + 1,
             bb = 15,
             $a = 16,
             Bb = 256,
             Va = 16,
             Ob = 17,
             p = 18,
             m = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0],
             nb = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
             ma = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
             da = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
             ja = Array(2 * (J + 2));
           aa(ja);
           var Z = Array(2 * I);
           aa(Z);
           var ea = Array(512);
           aa(ea);
           var h = Array(256);
           aa(h);
           var qb = Array(29);
           aa(qb);
           var sa = Array(I);
           aa(sa);
           var Ta,
             ua,
             Ga,
             va = !1;
           N._tr_init = function (p) {
             if (!va) {
               var q,
                 r,
                 u,
                 x = Array(bb + 1);
               for (u = r = 0; 28 > u; u++) for (qb[u] = r, q = 0; q < 1 << m[u]; q++) h[r++] = u;
               h[r - 1] = u;
               for (u = r = 0; 16 > u; u++) for (sa[u] = r, q = 0; q < 1 << nb[u]; q++) ea[r++] = u;
               for (r >>= 7; u < I; u++) for (sa[u] = r << 7, q = 0; q < 1 << (nb[u] - 7); q++) ea[256 + r++] = u;
               for (q = 0; q <= bb; q++) x[q] = 0;
               for (q = 0; 143 >= q; ) (ja[2 * q + 1] = 8), q++, x[8]++;
               for (; 255 >= q; ) (ja[2 * q + 1] = 9), q++, x[9]++;
               for (; 279 >= q; ) (ja[2 * q + 1] = 7), q++, x[7]++;
               for (; 287 >= q; ) (ja[2 * q + 1] = 8), q++, x[8]++;
               D(ja, J + 1, x);
               for (q = 0; q < I; q++) (Z[2 * q + 1] = 5), (Z[2 * q] = n(q, 5));
               Ta = new Y(ja, m, g + 1, J, bb);
               ua = new Y(Z, nb, 0, I, bb);
               Ga = new Y([], ma, 0, Aa, 7);
               va = !0;
             }
             p.l_desc = new v(p.dyn_ltree, Ta);
             p.d_desc = new v(p.dyn_dtree, ua);
             p.bl_desc = new v(p.bl_tree, Ga);
             p.bi_buf = 0;
             p.bi_valid = 0;
             ia(p);
           };
           N._tr_stored_block = V;
           N._tr_flush_block = function (g, h, m, n) {
             var p = 0;
             if (0 < g.level) {
               2 === g.strm.data_type && (g.strm.data_type = hb(g));
               ac(g, g.l_desc);
               ac(g, g.d_desc);
               q(g, g.dyn_ltree, g.l_desc.max_code);
               q(g, g.dyn_dtree, g.d_desc.max_code);
               ac(g, g.bl_desc);
               for (p = Aa - 1; 3 <= p && 0 === g.bl_tree[2 * da[p] + 1]; p--);
               p = ((g.opt_len += 3 * (p + 1) + 14), p);
               var r = (g.opt_len + 3 + 7) >>> 3;
               var t = (g.static_len + 3 + 7) >>> 3;
               t <= r && (r = t);
             } else r = t = m + 5;
             if (m + 4 <= r && -1 !== h) V(g, h, m, n);
             else if (4 === g.strategy || t === r) B(g, 2 + (n ? 1 : 0), 3), fa(g, ja, Z);
             else {
               B(g, 4 + (n ? 1 : 0), 3);
               h = g.l_desc.max_code + 1;
               m = g.d_desc.max_code + 1;
               p += 1;
               B(g, h - 257, 5);
               B(g, m - 1, 5);
               B(g, p - 4, 4);
               for (r = 0; r < p; r++) B(g, g.bl_tree[2 * da[r] + 1], 3);
               Pa(g, g.dyn_ltree, h - 1);
               Pa(g, g.dyn_dtree, m - 1);
               fa(g, g.dyn_ltree, g.dyn_dtree);
             }
             ia(g);
             n && Oa(g);
           };
           N._tr_tally = function (m, n, p) {
             return (
               (m.pending_buf[m.d_buf + 2 * m.last_lit] = (n >>> 8) & 255),
               (m.pending_buf[m.d_buf + 2 * m.last_lit + 1] = 255 & n),
               (m.pending_buf[m.l_buf + m.last_lit] = 255 & p),
               m.last_lit++,
               0 === n ? m.dyn_ltree[2 * p]++ : (m.matches++, n--, m.dyn_ltree[2 * (h[p] + g + 1)]++, m.dyn_dtree[2 * (256 > n ? ea[n] : ea[256 + (n >>> 7)])]++),
               m.last_lit === m.lit_bufsize - 1
             );
           };
           N._tr_align = function (g) {
             B(g, 2, 3);
             r(g, Bb, ja);
             16 === g.bi_valid ? (la(g, g.bi_buf), (g.bi_buf = 0), (g.bi_valid = 0)) : 8 <= g.bi_valid && ((g.pending_buf[g.pending++] = 255 & g.bi_buf), (g.bi_buf >>= 8), (g.bi_valid -= 8));
           };
         },
         { "../utils/common": 3 },
       ],
       15: [
         function (u, L, N) {
           L.exports = function () {
             this.input = null;
             this.total_in = this.avail_in = this.next_in = 0;
             this.output = null;
             this.total_out = this.avail_out = this.next_out = 0;
             this.msg = "";
             this.state = null;
             this.data_type = 2;
             this.adler = 0;
           };
         },
         {},
       ],
       "/": [
         function (u, L, N) {
           N = u("./lib/utils/common").assign;
           var aa = u("./lib/deflate"),
             Y = u("./lib/inflate");
           u = u("./lib/zlib/constants");
           var v = {};
           N(v, aa, Y, u);
           L.exports = v;
         },
         { "./lib/deflate": 1, "./lib/inflate": 2, "./lib/utils/common": 3, "./lib/zlib/constants": 6 },
       ],
     },
     {},
     []
   )("/");
 });
 var saveAs =
   saveAs ||
   (function (ha) {
     if (!("undefined" === typeof ha || ("undefined" !== typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent)))) {
       var u = ha.document.createElementNS("http://www.w3.org/1999/xhtml", "a"),
         L = "download" in u,
         N = /constructor/i.test(ha.HTMLElement) || ha.safari,
         aa = /CriOS\/[\d]+/.test(navigator.userAgent),
         Y = function (n) {
           (ha.setImmediate || ha.setTimeout)(function () {
             throw n;
           }, 0);
         },
         v = function (n) {
           setTimeout(function () {
             "string" === typeof n ? (ha.URL || ha.webkitURL || ha).revokeObjectURL(n) : n.remove();
           }, 4e4);
         },
         la = function (n) {
           return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(n.type) ? new Blob([String.fromCharCode(65279), n], { type: n.type }) : n;
         },
         B = function (n, r, B) {
           B || (n = la(n));
           var D = this,
             ia = "application/octet-stream" === n.type,
             Da = function () {
               var n = ["writestart", "progress", "write", "writeend"];
               n = [].concat(n);
               for (var q = n.length; q--; ) {
                 var r = D["on" + n[q]];
                 if ("function" === typeof r)
                   try {
                     r.call(D, D);
                   } catch (hb) {
                     Y(hb);
                   }
               }
             };
           D.readyState = D.INIT;
           if (L) {
             var fa = (ha.URL || ha.webkitURL || ha).createObjectURL(n);
             setTimeout(function () {
               u.href = fa;
               u.download = r;
               var n = new MouseEvent("click");
               u.dispatchEvent(n);
               Da();
               v(fa);
               D.readyState = D.DONE;
             });
           } else
             (function () {
               if ((aa || (ia && N)) && ha.FileReader) {
                 var r = new FileReader();
                 r.onloadend = function () {
                   var n = aa ? r.result : r.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                   ha.open(n, "_blank") || (ha.location.href = n);
                   D.readyState = D.DONE;
                   Da();
                 };
                 r.readAsDataURL(n);
                 D.readyState = D.INIT;
               } else fa || (fa = (ha.URL || ha.webkitURL || ha).createObjectURL(n)), ia ? (ha.location.href = fa) : ha.open(fa, "_blank") || (ha.location.href = fa), (D.readyState = D.DONE), Da(), v(fa);
             })();
         },
         r = B.prototype;
       if ("undefined" !== typeof navigator && navigator.msSaveOrOpenBlob)
         return function (n, r, u) {
           r = r || n.name || "download";
           u || (n = la(n));
           return navigator.msSaveOrOpenBlob(n, r);
         };
       r.abort = function () {};
       r.readyState = r.INIT = 0;
       r.WRITING = 1;
       r.DONE = 2;
       r.error = r.onwritestart = r.onprogress = r.onwrite = r.onabort = r.onerror = r.onwriteend = null;
       return function (n, r, u) {
         return new B(n, r || n.name || "download", u);
       };
     }
   })(("undefined" !== typeof self && self) || ("undefined" !== typeof window && window) || this.content);
 "undefined" !== typeof module && module.exports
   ? (module.exports.saveAs = saveAs)
   : "undefined" !== typeof define &&
     null !== define &&
     null !== define.amd &&
     define("FileSaver.js", function () {
       return saveAs;
     });
 "function" == typeof define && define.__amd && ((define.amd = define.__amd), delete define.__amd);
 